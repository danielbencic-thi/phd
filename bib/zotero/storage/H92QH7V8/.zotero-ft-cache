Quadcopter Dynamics, Simulation, and Control
Introduction
A helicopter is a ﬂying vehicle which uses rapidly spinning rotors to push air downwards, thus creating a thrust force keeping the helicopter aloft. Conventional helicopters have two rotors. These can be arranged as two coplanar rotors both providing upwards thrust, but spinning in opposite directions (in order to balance the torques exerted upon the body of the helicopter). The two rotors can also be arranged with one main rotor providing thrust and a smaller side rotor oriented laterally and counteracting the torque produced by the main rotor. However, these conﬁgurations require complicated machinery to control the direction of motion; a swashplate is used to change the angle of attack on the main rotors. In order to produce a torque the angle of attack is modulated by the location of each rotor in each stroke, such that more thrust is produced on one side of the rotor plane than the other. The complicated design of the rotor and swashplate mechanism presents some problems, increasing construction costs and design complexity.
A quadrotor helicopter (quadcopter) is a helicopter which has four equally spaced rotors, usually arranged at the corners of a square body. With four independent rotors, the need for a swashplate mechanism is alleviated. The swashplate mechanism was needed to allow the helicopter to utilize more degrees of freedom, but the same level of control can be obtained by adding two more rotors.
The development of quadcopters has stalled until very recently, because controlling four independent rotors has proven to be incredibly difﬁcult and impossible without electronic assistance. The decreasing cost of modern microprocessors has made electronic and even completely autonomous control of quadcopters feasible for commercial, military, and even hobbyist purposes.
Quadcopter control is a fundamentally difﬁcult and interesting problem. With six degrees of freedom (three translational and three rotational) and only four independent inputs (rotor speeds), quadcopters are severely underactuated. In order to achieve six degrees of freedom, rotational and translational motion are coupled. The resulting dynamics are highly nonlinear, especially after accounting for the complicated aerodynamic effects. Finally, unlike ground vehicles, helicopters have very little friction to prevent their motion, so they must provide their own damping in order to stop moving and remain stable. Together, these factors create a very interesting control problem. We will present a very simpliﬁed model of quadcopter dynamics and design controllers for our dynamics to follow a designated trajectory. We will then test our controllers with a numerical simulation of a quadcopter in ﬂight.
1

Quadcopter Dynamics
We will start deriving quadcopter dynamics by introducing the two frames in which will operate. The inertial frame is deﬁned by the ground, with gravity pointing in the negative z direction. The body frame is deﬁned by the orientation of the quadcopter, with the rotor axes pointing in the positive z direction and the arms pointing in the x and y directions.

Quadcopter Body Frame and Inertial Frame

Kinematics

Before delving into the physics of quadcopter motion, let us formalize the kinematics in the body and inertial frames. We deﬁne the position and velocity of the quadcopter in the inertial frame as x = (x, y, z)T and x˙ = (x˙, y˙, z˙)T, respectively. Similarly, we deﬁne the roll, pitch, and yaw angles in the body frame as θ = (φ, θ, ψ)T, with corresponding angular velocities equal to θ˙ = (φ˙ , θ˙, ψ˙ )T. However, note that the angular velocity vector ω = θ˙. The angular velocity is a vector pointing along the axis of rotation, while θ˙ is just the time derivative of yaw, pitch, and roll. In order to convert these angular velocities into the angular velocity vector, we can use the following relation:
1 0 −sθ  ω = 0 cφ cθsφ θ˙
0 −sφ cθcφ
where ω is the angular velocity vector in the body frame. We can relate the body and inertial frame by a rotation matrix R which goes from the
body frame to the inertial frame. This matrix is derived by using the ZYZ Euler angle conventions and successively “undoing” the yaw, pitch, and roll.

cφcψ − cθsφsψ R = cθcψsφ + cφsψ
sφsθ

−cψsφ − cφcθsψ cφcθcψ − sφsψ
cφsθ

sθsψ  −cψ sθ 
cθ

For a given vector v in the body frame, the corresponding vector is given by Rv in the inertial frame.

Physics
In order to properly model the dynamics of the system, we need an understanding of the physical properties that govern it. We will begin with a description of the motors being used for our quadcopter, and then use energy considerations to derive the forces and thrusts that these motors produce on the entire quadcopter. All motors on the quadcopter are identical, so we can analyze a single one without loss of generality. Note that adjacent propellers, however, are oriented opposite each other; if a propeller is spinning “clockwise”, then the two adjacent ones will be spinning “counter-clockwise”, so that torques are balanced if all propellers are spinning at the same rate.

2

Motors
Brushless motors are used for all quadcopter applications. For our electric motors, the torque produced is given by
τ = Kt(I − I0)
where τ is the motor torque, I is the input current, I0 is the current when there is no load on the motor, and Kt is the torque proportionality constant. The voltage across the motor is the sum of the back-EMF and some resistive loss:

V = IRm + Kvω

where V is the voltage drop across the motor, Rm is the motor resistance, ω is the angular

velocity of the motor, and Kv is a proportionality constant (indicating back-EMF generated

per RPM). We can use this description of our motor to calculate the power it consumes. The

power is

P

=

IV

=

(τ + Kt I0)(Kt I0Rm + τRm Kt2

+ KtKvω)

For the purposes of our simple model, we will assume a negligible motor resistance. Then, the power becomes proportional to the angular velocity:

P ≈ (τ + Kt I0)Kvω Kt
Further simplifying our model, we assume that Kt I0 τ. This is not altogether unreasonable, since I0 is the current when there is no load, and is thus rather small. In practice, this approximation holds well enough. Thus, we obtain our ﬁnal, simpliﬁed equation for power:

P

≈

Kv Kt

τω.

Forces

The power is used to keep the quadcopter aloft. By conservation of energy, we know that

the energy the motor expends in a given time period is equal to the force generated on the

propeller times the distance that the air it displaces moves (P · d t = F · d x). Equivalently, the

power

is

equal

to

the

thrust

times

the

air

velocity

(P

=

F

d d

x t

).

P = Tvh

We assume vehicle speeds are low, so vh is the air velocity when hovering. We also assume that the free stream velocity, v∞, is zero (the air in the surrounding environment is stationary relative to the quadcopter). Momentum theory gives us the equation for hover velocity as a
function of thrust,

vh =

T 2ρA

where ρ is the density of the surrounding air and A is the area swept out by the rotor. Using our simpliﬁed equation for power, we can then write

P

=

Kv Kt τω

=

KvKτ Kt

Tω

=

T

3 2

.

2ρA

Note that in the general case, τ = r × F; in this case, the torque is proportional to the thrust T

by some constant ratio Kτ determined by the blade conﬁguration and parameters. Solving for the thrust magnitude T, we obtain that thrust is proportional to the square of angular velocity

of the motor:

2

T=

KvKτ 2ρA

Kt

ω

= kω2

3

where k is some appropriately dimensioned constant. Summing over all the motors, we ﬁnd that the total thrust on the quadcopter (in the body frame) is given by

4

0

TB = ∑ Ti = k  0  .

i=1

∑ ωi2

In addition to the thrust force, we will model friction as a force proportional to the

linear velocity in each direction. This is a highly simpliﬁed view of ﬂuid friction, but will be

sufﬁcient for our modeling and simulation. Our global drag forces will be modeled by an

additional force term

−kd x˙  FD = −kdy˙
−k d z˙

If additional precision is desired, the constant kd can be separated into three separate friction constants, one for each direction of motion. If we were to do this, we would want to model
friction in the body frame rather than the inertial frame.

Torques
Now that we have computed the forces on the quadcopter, we would also like to compute the torques. Each rotor contributes some torque about the body z axis. This torque is the torque required to keep the propeller spinning and providing thrust; it creates the instantaneous angular acceleration and overcomes the frictional drag forces. The drag equation from ﬂuid dynamics gives us the frictional force:

FD

=

1 2

ρCD

Av2.

where ρ is the surrounding ﬂuid density, A is the reference area (propeller cross-section, not

area swept out by the propeller), and CD is a dimensionless constant. This, while only accurate

in some in some cases, is good enough for our purposes. This implies that the torque due to

drag is given by

τD

=

1 2

RρCD

Av2

=

1 2

RρCD

A(ωR)2

=

bω2

where ω is the angular velocity of the propeller, R is the radius of the propeller, and b is some appropriately dimensioned constant. Note that we’ve assumed that all the force is applied at the tip of the propeller, which is certainly inaccurate; however, the only result that matters for our purposes is that the drag torque is proportional to the square of the angular velocity. We can then write the complete torque about the z axis for the ith motor:

τz = bω2 + IMω˙

where IM is the moment of inertia about the motor z axis, ω˙ is the angular acceleration of the propeller, and b is our drag coefﬁcient. Note that in steady state ﬂight (i.e. not takeoff or landing), ω˙ ≈ 0, since most of the time the propellers will be maintaining a constant (or almost constant) thrust and won’t be accelerating. Thus, we ignore this term, simplifying the

entire expression to

τz = (−1)i+1bωi2.

where the (−1)i+1 term is positive for the ith propeller if the propeller is spinning clockwise

and negative if it is spinning counterclockwise. The total torque about the z axis is given by

the sum of all the torques from each propeller:

τψ = b ω12 − ω22 + ω32 − ω42

The roll and pitch torques are derived from standard mechanics. We can arbitrarily choose the i = 1 and i = 3 motors to be on the roll axis, so
τφ = ∑ r × T = L(kω12 − kω32) = Lk(ω12 − ω32)

4

Correspondingly, the pitch torque is given by a similar expression

τθ = Lk(ω22 − ω42)

where L is the distance from the center of the quadcopter to any of the propellers. All together, we ﬁnd that the torques in the body frame are



Lk(ω12 − ω32)



τB = 

Lk(ω22 − ω42)



b ω12 − ω22 + ω32 − ω42

The model we’ve derived so far is highly simpliﬁed. We ignore a multitude of advanced effects that contribute to the highly nonlinear dynamics of a quadcopter. We ignore rotational drag forces (our rotational velocities are relatively low), blade ﬂapping (deformation of propeller blades due to high velocities and ﬂexible materials), surrounding ﬂuid velocities (wind), etc. With that said, we now have all the parts necessary to write out the dynamics of our quadcopter.

Equations of Motion

In the inertial frame, the acceleration of the quadcopter is due to thrust, gravity, and linear

friction. We can obtain the thrust vector in the inertial frame by using our rotation matrix R to

map the thrust vector from the body frame to the inertial frame. Thus, the linear motion can

be summarized as

0

mx¨ =  0  + RTB + FD −mg

where x is the position of the quadcopter, g is the acceleration due to gravity, FD is the drag force, and TB is the thrust vector in the body frame.
While it is convenient to have the linear equations of motion in the inertial frame, the rotational equations of motion are useful to us in the body frame, so that we can express rotations about the center of the quadcopter instead of about our inertial center. We derive the rotational equations of motion from Euler’s equations for rigid body dynamics. Expressed in vector form, Euler’s equations are written as

Iω˙ + ω × (Iω) = τ

where ω is the angular velocity vector, I is the inertia matrix, and τ is a vector of external torques. We can rewrite this as

ω˙ x ω˙ = ω˙ y = I−1 (τ − ω × (Iω)) .
ω˙ z

We can model our quadcopter as two thin uniform rods crossed at the origin with a point mass

(motor) at the end of each. With this in mind, it’s clear that the symmetries result in a diagonal

inertia matrix of the form

Ixx 0 0 

I =  0 Iyy 0  .

0 0 Izz

Therefore, we obtain our ﬁnal result for the body frame rotational equations of motion

ω˙

=

 τφ

Ixx

−1

 τθ Iyy−1 

τψ Izz−1

−


  

Iyy − Izz IzzI−xxIxx
Iyy Ixx −Iyy
Izz


ωyωz 
ωxωz  
ωx ωy

5

Simulation
Now that we have complete equations of motion describing the dynamics of the system, we can create a simulation environment in which to test and view the results of various inputs and controllers. Although more advanced methods are available, we can quickly write a simulator which utilizes Euler’s method for solving differential equations to evolve the system state. In MATLAB, this simulator would be written as follows.

1 % Simulation times, in seconds. 2 start_time = 0; 3 end_time = 10; 4 dt = 0.005; 5 times = start_time:dt:end_time;

6
7 % Number of points in the simulation. 8 N = numel(times);

9
10 % Initial simulation state. 11 x = [0; 0; 10]; 12 xdot = zeros(3, 1); 13 theta = zeros(3, 1);

14
15 % Simulate some disturbance in the angular velocity. 16 % The magnitude of the deviation is in radians / second. 17 deviation = 100; 18 thetadot = deg2rad(2 * deviation * rand(3, 1) - deviation);

19

20 % Step through the simulation, updating the state.

21 for t = times

22

% Take input from our controller.

23

i = input(t);

24

25

omega = thetadot2omega(thetadot, theta);

26

27

% Compute linear and angular accelerations.

28

a = acceleration(i, theta, xdot, m, g, k, kd);

29

omegadot = angular_acceleration(i, omega, I, L, b, k);

30

31

omega = omega + dt * omegadot;

32

thetadot = omega2thetadot(omega, theta);

33

theta = theta + dt * thetadot;

34

xdot = xdot + dt * a;

35

x = x + dt * xdot;

36 end

We would then need functions to compute all of the physical forces and torques.

1 % Compute thrust given current inputs and thrust coefficient.

2 function T = thrust(inputs, k)

3

% Inputs are values for ωi2

4

T = [0; 0; k * sum(inputs)];

5 end

6

7 % Compute torques, given current inputs, length, drag coefficient, and thrust coeffici

8 function tau = torques(inputs, L, b, k)

9

% Inputs are values for ωi2

10

tau = [

11

L * k * (inputs(1) - inputs(3))

6

12

L * k * (inputs(2) - inputs(4))

13

b * (inputs(1) - inputs(2) + inputs(3) - inputs(4))

14

];

15 end

16

17 function a = acceleration(inputs, angles, xdot, m, g, k, kd)

18

gravity = [0; 0; -g];

19

R = rotation(angles);

20

T = R * thrust(inputs, k);

21

Fd = -kd * xdot;

22

a = gravity + 1 / m * T + Fd;

23 end

24

25 function omegadot = angular_acceleration(inputs, omega, I, L, b, k)

26

tau = torques(inputs, L, b, k);

27

omegaddot = inv(I) * (tau - cross(omega, I * omega));

28 end

We would also need values for all of our physical constants, a function to compute the rotation matrix R, and functions to convert from an angular velocity vector ω to the derivatives of roll, pitch, and yaw and vice-versa. These are not shown. We can then draw the quadcopter in a three-dimensional visualization which is updated as the simulation is running.

Quadcopter Simulation. Bars above each propeller represent, roughly, relative thrust magnitudes.
Control
The purpose of deriving a mathematical model of a quadcopter is to assist in developing controllers for physical quadcopters. The inputs to our system consist of the angular velocities of each rotor, since all we can control is the voltages across the motors. Note that in our simpliﬁed model, we only use the square of the angular velocities, ωi2, and never the angular velocity itself, ωi. For notational simplicity, let us introduce the inputs γi = ωi2. Since we can set ωi, we can clearly set γi as well. With this, we can write our system as a ﬁrst order differential equation in state space. Let x1 be the position in space of the quadcopter, x2 be the quadcopter linear velocity, x3 be the roll, pitch, and yaw angles, and x4 be the angular velocity vector. (Note that all of these are 3-vectors.) With these being our state, we can write the state
7

space equations for the evolution of our state.

x˙1 = x2

x˙2

=

0 0
−g

+

1 m

RTB

+

1 m

FD

1 0 −sθ −1 x˙3 = 0 cφ cθ sφ x4
0 −sφ cθcφ

x˙4

=

 τφ

Ixx

−1



 τθ Iyy−1 

τψ Izz−1

−


  

Iyy − Izz IzzI−xxIxx
Iyy Ixx −Iyy
Izz


ωyωz 
ωxωz  
ωx ωy

Note that our inputs are not used in these equations directly. However, as we will see, we can choose values for τ and T, and then solve for values of γi.

PD Control
In order to control the quadcopter, we will use a PD control, with a component proportional to the error between our desired trajectory and the observed trajectory, and a component proportional to the derivative of the error. Our quadcopter will only have a gyro, so we will only be able to use the angle derivatives φ˙ , θ˙, and ψ˙ in our controller; these measured values will give us the derivative of our error, and their integral will provide us with the actual error. We would like to stabilize the helicopter in a horizontal position, so our desired velocities and angles will all be zero. Torques are related to our angular velocities by τ = Iθ¨, so we would like to set the torques proportional to the output of our controller, with τ = Iu(t). Thus,



 τφ

− Ixx 

 τθ



=

 

− Iyy

Kdφ˙ + Kp Kdθ˙ + Kp

T 0

φ˙ d

t

T 0

θ˙d

t


  

τψ

 − Izz

Kdψ˙ + Kp

T 0

ψ˙ d

t



We have previously derived the relationship between torque and our inputs, so we know that

 τB = 

Lk(γ1 − γ3) Lk(γ2 − γ4)



 − Ixx

Kdφ˙ + Kp

T 0

φ˙ d

t







=

 

− Iyy

Kdθ˙ + Kp

T 0

θ˙d

t

  

b (γ1 − γ2 + γ3 − γ4)

 − Izz

Kdψ˙ + Kp

T 0

ψ˙ d

t



This gives us a set of three equations with four unknowns. We can constrain this by enforcing the constraint that our inputs must keep the quadcopter aloft:

T = mg.

Note that this equation ignores the fact that the thrust will not be pointed directly up. This will limit the applicability of our controller, but should not cause major problems for small deviations from stability. If we had a way of determining the current angle accurately, we could compensate. If our gyro is precise enough, we can integrate the values obtained from the gyro to get the angles θ and φ. In this case, we can calculate the thrust necessary to keep the quadcopter aloft by projecting the thrust mg onto the inertial z axis. We ﬁnd that

Tproj = mg cos θ cos φ

Therefore, with a precise angle measurement, we can instead enforce the requirement that the

thrust be equal to

T = mg cos θ cos φ

8

in which case the component of the thrust pointing along the positive z axis will be equal to mg. We know that the thrust is proportional to a weighted sum of the inputs:

T

=

mg cos θ cos φ

=

k ∑ γi

=⇒

∑ γi

=

mg k cos θ cos φ

With this extra constraint, we have a set of four linear equations with four unknowns γi. We can then solve for each γi, and obtain the following input values:

γ1

=

mg 4k cos θ cos φ

−

2beφ Ixx + eψ IzzkL 4bkL

γ2

=

mg 4k cos θ cos φ

+

eψ Izz 4b

−

eθ Iyy 2kL

γ3

=

mg 4k cos θ cos φ

−

−2beφ Ixx + eψ IzzkL 4bkL

γ4

=

mg 4k cos θ cos φ

+

eψ Izz 4b

+

eθ Iyy 2kL

This is a complete speciﬁcation for our PD controller. We can simulate this controller using our simulation environment. The controller drives the angular velocities and angles to zero.

Left: Angular velocities. Right: angular displacements. φ, θ, ψ are coded as red, green, and blue.
However, note that the angles are not completely driven to zero. The average steady state error (error after 10 seconds of simulation) is approximately 0.3◦. This is a common problem with using PD controllers for mechanical systems, and can be partially alleviated with a PID controller, as we will discuss in the next section.
In addition, note that since we are only controlling angular velocities, our positions and linear velocities do not converge to zero. However, the z position will remain constant,
9

because we have constrained the total vertical thrust to be such that it keeps the quadcopter perfectly aloft, without ascending or descending. However, this is really nothing more than a curiosity. With the limited sensing that we have available to us, there is nothing we can do to control the linear position and velocity of the quadcopter. While in theory we could compute the linear velocities and positions from the angular velocities, in practice the values will be so noisy as to be completely useless. Thus, we will restrict ourselves to just stabilizing the quadcopter angle and angular velocity. (Traditionally, navigation is done by a human, and stabilization is there simply to make control easier for the human operator.)
10

We have implemented this PD control for use in our simulation. The controller is implemented as a function which is given some state (corresponding to controller state, not system state) and the sensor inputs, and must compute the inputs γi and the updated state. The code for a PD control follows.

1 % Compute system inputs and updated state.

2 % Note that input = [γ1, . . ., γ4]

3 function [input, state] = pd_controller(state, thetadot)

4

% Controller gains, tuned by hand and intuition.

5

Kd = 4;

6

Kp = 3;

7

8

% Initialize the integral if necessary.

9

if ˜isfield(state, ’integral’)

10

params.integral = zeros(3, 1);

11

end

12

13

% Compute total thrust

14

total = state.m * state.g / state.k / (cos(state.integral(1)) * cos(state.integral

15

16

% Compute errors

17

e = Kd * thetadot + Kp * params.integral;

18

19

% Solve for the inputs, γi

20

input = error2inputs(params, accels, total);

21

22

% Update the state

23

params.integral = params.integral + params.dt .* thetadot;

24 end

PID Control

PD controllers are nice in their simplicity and ease of implementation, but they are often inadequate for controlling mechanical systems. Especially in the presence of noise and disturbances, PD controllers will often lead to steady state error. A PID control is a PD control with another term added, which is proportional to the integral of the process variable. Adding an integral term causes any remaining steady-state error to build up and enact a change, so a PID controller should be able to track our trajectory (and stabilize the quadcopter) with a signiﬁcantly smaller steady-state error. The equations remain identical to the ones presented in the PD case, but with an additional term in the error:

T

TT

eφ = Kdφ˙ + Kp φ˙ d t + Ki

φ˙ d td t

0

00

T

TT

eθ = Kdθ˙ + Kp 0 θ˙d t + Ki 0

θ˙d td t
0

T

TT

eψ = Kdψ˙ + Kp ψ˙ d t + Ki

ψ˙ d td t

0

00

However, PID controls come with their own shortcomings. One problem that commonly occurs with a PID control is known as integral windup.

11

In some cases, integral wind-up can cause lengthy oscillations instead of settling. In other cases, wind-up may actually cause the system to become unstable, instead of taking longer to
reach a steady state. If there is a large disturbance in the process variable, this large disturbance is integrated over time, becoming a still larger control signal (due to the integral term). However, even once the system stabilizes, the integral is still large, thus causing the controller to overshoot its target. It may then begin a series of dieing down oscillations, become unstable, or simply take an incredibly long time to reach a steady state. In order to avoid this, we disable the integral function until we reach something close to the steady state. Once we are in a controllable region near the desired steady state, we turn on the integral function, which pushes the system towards a low steady-state error.
12

With a properly implemented PID, we achieve an error of approximately 0.06◦ after 10 seconds.
We have implemented this PID control for use in simulation, in the same way as with the PD controller shown earlier. Note that there is an additional parameter to tune in a PID. The disturbances used for all the test cases are identical, shown to compare the controllers.

1 % Compute system inputs and updated state.

2 % Note that input = [γ1, . . ., γ4]

3 function [input, state] = pid_controller(state, thetadot)

4

% Controller gains, tuned by hand and intuition.

5

Kd = 4;

6

Kp = 3;

7

Ki = 5.5;

8

9

% Initialize the integral if necessary.

10

if ˜isfield(state, ’integral’)

11

params.integral = zeros(3, 1);

12

params.integral2 = zeros(3, 1);

13

end

14

15

% Prevent wind-up

16

if max(abs(params.integral2)) > 0.01

17

params.integral2(:) = 0;

18

end

19

20

% Compute total thrust

21

total = state.m * state.g / state.k / (cos(state.integral(1)) * cos(state.integral

22

23

% Compute errors

13

24

e = Kd * thetadot + Kp * params.integral - Ki * params.integral2;

25

26

% Solve for the inputs, γi

27

input = error2inputs(params, accels, total);

28

29

% Update the state

30

params.integral = params.integral + params.dt .* thetadot;

31

params.integral2 = params.integral2 + params.dt .* params.integral;

32 end

14

Automatic PID Tuning

Although PID control has the potential to perform very well, it turns out that the quality of the controller is highly dependent on the gain parameters. Tuning the parameters by hand may be quite difﬁcult, as the ratios of the parameters is as important as the magnitudes of the parameters themselves; often, tuning parameters requires detailed knowledge of the system and an understanding of the conditions in which the PID control will be used. The parameters we chose previously were tuned by hand for good performance, simply by running simulations with many possibly disturbances and parameter values, and choosing something that worked reasonably well. This method is clearly suboptimal, not only because it can be very difﬁcult and labor-intensive (and sometimes more or less impossible) but also because the resulting gains are not in any way guaranteed to be optimal or even close to optimal.
Ideally, we would be able to use an algorithm to analyze a system and output the “optimal” PID gains, for some reasonable deﬁnition of optimal. This problem has been studied in depth, and many methods have been proposed. Many of these methods require detailed knowledge of the system being modeled, and some rely on properties of the system, such as stability or linearity. The method we will use for choosing our PID parameters is a method known as extremum seeking.
Extremum seeking works exactly as the name implies. We deﬁne the “optimal” set of
parameters as some vector θ = (Kp, Ki, Kd) which minimizes some cost function J(θ). In our case, we would like to deﬁne a cost function that penalizes high error and error over extended durations of time. One candidate cost function is given by

J(θ)

=

tf

1 −

to

tf e(t, θ)2d t
t0

where e(t, θ) is the error in following some reference trajectory with some initial disturbance using a set of parameters θ. Suppose we were able to somehow compute the gradient of this cost function, ∇J(θ). In that case, we could iteratively improve our parameter vector by deﬁning a parameter update rule

θ(k + 1) = θ(k) − α∇J(θ)

where θ(k) is the parameter vector after k iterations and α is some step size which dictates how much we adjust our parameter vector at each step of the iteration. As k → ∞, the cost function J(θ) will approach a local minimum in the space of PID parameters.
The question remains as to how we can estimate ∇J(θ). By deﬁnition,

∇J(θ) =

∂ ∂Kp

J(θ),

∂ ∂Ki

J(θ),

∂ ∂Kd

J(θ)

.

We know how to compute J(θ). Using this, we can approximate the derivative with respect to any of the gains numerically, simply by computing

∂ ∂K

J(θ)

≈

J(θ + δ · uˆK) − J(θ − δ · uˆK) 2δ

where uˆK is the unit vector in the K direction. As δ → 0, this approximation becomes better. Using this approximation, we can minimize our cost function and achieve locally optimal PID parameters. We can start with randomly initialized positive weights, disturb the system in
some set manner, evaluate J(θ) by simulating the system for different PID parameters, and then compute the gradient. Then, using the method of gradient descent, we can iteratively oprtimize our gains until we have some form of convergence.
The gradient descent method does, however, have several problems. First of all, although it ﬁnds a local minimum, that minimum is only guaranteed to be a local minimum - there may be other minima which are better global minima. In order to avoid choosing suboptimal local minima in the cost function, we repeat our optimization several times, and choose the best result. We initialize our PID parameters randomly, so each time we run the optimization we will get a different result. In addition, instead of choosing disturbance and then optimizing the response to that disturbance, we use several random disturbances at each

15

iteration and use the average response to compute costs and gradients. This ensures that our parameters are general and not optimized for a speciﬁc disturbance. In addition, we vary the step size and the number of disturbances to try per iteration, in order to increase the sensitivity of our results as our iteration continues. We stop iterations when we detect a steady state, which we do by computing a linear regression on the most recent costs and iterating until the slope is statistically indistinguishable from zero using a 99% conﬁdence interval.
Using our quadcopter simulation, we can deﬁne a function that computes the cost for a given set of PID parameters.

1 function J = cost(theta)

2

% Create a controller using the given gains.

3

control = controller(’pid’, theta(1), theta(2), theta(3));

4

5

% Perform a simulation.

6

data = simulate(control);

7 8

%

Compute

the

integral,

tf

1 −

t0

tf t0

e(t)2 dt

9

t0 = 0;

10

tf = 1;

11

J = 1/(tf - t0) * sum(data.theta(data.t >= t0 & data.t <= tf) .ˆ 2) * data.dt;

12 end

We can use this function to approximate a derivative with respect to a gain:

1 % Compute derivative with respect to first parameter. 2 delta = 0.01; 3 var = [1, 0, 0]; 4 derivative = (cost(theta + delta * var) - cost(theta - delta * var)) / (2 * delta);
We can then use our gradient descent method (with all modiﬁcations described above) to minimize the cost function and obtain a good set of PID parameters. We can verify that our tuning method is working by visualizing the cost function versus the iteration number, and seeing that the cost function is indeed going down and stabilizing at a local minimum.

Cost function plotted as a function of iteration number, along with moving average. Tuning stops when the slope of the moving average becomes statistically indistinguishable from zero
with a 99% conﬁdence interval. We can compare the manually-chosen PID parameters with those designed by the algorithm.
16

Top: Angular velocities and angular displacements, using manually tuned PID controller. Bottom: Angular velocities and angular displacements, using automatically tuned PID controller.
The automatically-chosen PID parameters do signiﬁcantly better overall. They have significantly smaller swings in value, overshoot signiﬁcantly less, and converge faster. However, the error in the angular displacement takes longer to converge to zero with the automatically tuned parameters than with the manually turned parameters, although the initial convergence is much better when the parameters are chosen via gradient descent. This is due to the fact that our cost function emphasizes squared error, and thus gives priority to minimizing overall error magnitude rather than long-term convergence. We could easily modify our cost function to give higher priority to long-term error, in which case the automatically-tuned parameters are likely to do better.
17

Conclusion
We derived equations of motion for a quadcopter, starting with the voltage-torque relation for the brushless motors and working through the quadcopter kinematics and dynamics. We ignored aerodynamical effects such as blade-ﬂapping and non-zero free stream velocity, but included air friction as a linear drag force in all directions. We used the equations of motion to create a simulator in which to test and visualize quadcopter control mechanisms.
We began with a simple PD controller. Although the PD controller worked, it left a signiﬁcant steady-state error. In order to decrease the steady-state error, we added an integral term in order to create a PID controller. We tested the PID controller (with minor modiﬁcations to prevent integral wind-up) and found that it was better at preventing steady-state error than the PD controller when presented with the same disturbances and using the same proportional and derivative gains. We also found that tuning the PID controller was difﬁcult, and would often lead to an unstable system for unknown reasons. In order to avoid the difﬁculty of PID tuning and ﬁnd the optimal set of parameters, we used a gradient-descent based extremum seeking method in order to numerically estimate gradients of a cost function in PID-parameter space and iteratively choose a set of parameters to minimize the cost function. We found that the resulting controller was signiﬁcantly better than the one using manually turned parameters.
18

