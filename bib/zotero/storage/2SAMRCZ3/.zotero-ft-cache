2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) Macau, China, November 4-8, 2019

FASTER: Fast and Safe Trajectory Planner for Flights in Unknown Environments
Jesus Tordesillas, Brett T. Lopez and Jonathan P. How

Abstract— High-speed trajectory planning through unknown environments requires algorithmic techniques that enable fast reaction times while maintaining safety as new information about the operating environment is obtained. The requirement of computational tractability typically leads to optimization problems that do not include the obstacle constraints (collision checks are done on the solutions) or use a convex decomposition of the free space and then impose an ad-hoc time allocation scheme for each interval of the trajectory. Moreover, safety guarantees are usually obtained by having a local planner that plans a trajectory with a ﬁnal “stop” condition in the freeknown space. However, these two decisions typically lead to slow and conservative trajectories. We propose FASTER (Fast and Safe Trajectory Planner) to overcome these issues. FASTER obtains high-speed trajectories by enabling the local planner to optimize in both the free-known and unknown spaces. Safety guarantees are ensured by always having a feasible, safe back-up trajectory in the free-known space at the start of each replanning step. Furthermore, we present a Mixed Integer Quadratic Program formulation in which the solver can choose the trajectory interval allocation, and where a time allocation heuristic is computed efﬁciently using the result of the previous replanning iteration. This proposed algorithm is tested extensively both in simulation and in real hardware, showing agile ﬂights in unknown cluttered environments with velocities up to 3.6 m/s.
I. INTRODUCTION
Navigating through unknown environments entails repeatedly generating collision-free, dynamically feasible trajectories that are executed over a ﬁnite horizon. Similar to that in the Model Predictive Control (MPC) literature, safety is guaranteed by ensuring a feasible solution exists indefinitely. If we consider R3 = O ∪ F ∪ U where F, O, U are disjoint sets denoting free-known, occupied-known, and unknown space respectively, safety is guaranteed by constructing trajectories that are entirely contained in F with a ﬁnal stop condition. This can be achieved by generating motion primitives that do not intersect O ∪ U [1]–[4], or by constructing a convex representation of F to be used in an optimization [5]–[7]. However, both approaches lead to slow trajectories in scenarios where F is small compared to U ∪ O. This paper presents an optimization-based approach that reduces the aforementioned limitations by solving for two optimal trajectories at every planning step (see Fig. 1): one in U ∪ F, and another one in F.
Decomposing the free space into P overlapping polyhedra along a path connecting a start A to goal E location (see Fig. 1), the usual approach is to divide the total trajectory into N = P intervals [5]. On one hand, this simpliﬁes
The authors are with the Aerospace Controls Laboratory, MIT, 77 Massachusetts Ave., Cambridge, MA, USA {jtorde, btlopez, jhow}@mit.edu

Fig. 1: Contributions of this work.
the problem because no integer variables are needed, as each interval is forced to be in one speciﬁc polyhedron. On the other hand, the time allocation problem becomes much harder, as there are N different dtn (time allocated for each interval n). The trajectory is also more conservative since the optimizer is only allowed to move the end points of each interval of the trajectory in the overlapping areas. To overcome these two problems, we propose the use of the same dt for all the intervals, and use N > P intervals, encoding the optimization problem as a Mixed Integer Quadratic Program (MIQP). Moreover, and as the minimum feasible dt depends depends on the state of the UAV and on the speciﬁc shape of F and U at a speciﬁc replanning step, we also propose an efﬁcient way to compute a heuristic of this dt using the result obtained in the previous replanning iteration.
In summary, this work has the following contributions:
• A framework that ensures feasibility of the entire collision avoidance algorithm and guarantees safety without reducing the nominal ﬂight speed by allowing the local planner to plan in F ∪ U while always having a safe trajectory in F.
• Reduced conservatism of the MIQP formulation for

978-1-7281-4004-9/19/$31.00 ©2019 IEEE

1934

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

the interval and time allocation problem of the ﬂight trajectories compared to prior work. • Extension of our previous work [8], (where we considered the interaction between the global and local planners) by proposing a way to compute very cheaply a heuristic of the cost-to-go needed by the local planner to decide which direction is the best one to optimize towards. • Simulation and hardware experiments showing agile ﬂights in completely unknown cluttered environments, with velocities up to 3.6 m/s.
II. RELATED WORK
Trajectory planning strategies for UAVs can be classiﬁed according to the operating space of the local planner and the speciﬁc formulation of the optimization problem.
With regard to the planning space of the local planner, several approaches have been developed. One approach is to use only the most recent perception data [2]–[4], which requires the desired trajectory to remain within the perception sensor ﬁeld of view. An alternative strategy is to create and plan trajectories in a map of the environment using a history of perception data. Within this second category, some works [8]–[10] limit the local planner to generate trajectories only in free-known space (F in Fig. 1), which guarantees safety if the local planner has a ﬁnal stop condition. However, limiting the planner to operating in free-known space and enforcing a terminal stopping condition can lead to conservative, slow trajectories (especially when much of the world is unknown). While allowing the local planner to optimize in both the freeknown and unknown space (F ∪ U), higher speeds can be obtained but with no guarantees that the trajectory is safe or will remain feasible.
As far as the optimization formulation is concerned, two approaches can be highlighted. The ﬁrst does not include the obstacles in the optimization problem [8], leading to a closed-form solution for the trajectory [1], [3], [4] or in general to very small computation times [8]. The computation time for these approaches are very low since obstacles are not explicitly considered in the trajectory generation. This enables multiple candidate trajectories to be generated (via sampling) and evaluated for collisions (using nearestneighbor search) at each planning stage. While these approaches are computationally efﬁcient, they are unable to construct sophisticated maneuvers due to the discretization of the candidate trajectories, leading to slower trajectories in cluttered environments. The second approach is to include obstacle constraints directly in the optimization. This is usually done describing the free space by a set of overlapping polyhedra (also known as convex decomposition) [5]–[7]. The trajectory can then be parameterized by a sequence of third (or higher)-degree polynomials. Be´zier Curves [7], [11] or the sum-of-squares condition [6], [12] can be used to guarantee the trajectory remains the overlapping polyhedra. Subsequently, there will be an interval (which polytope each polynomial is in) and a time allocation (how much time is assigned to each interval) problem. For the interval allocation, a typical the number of trajectory segments equals the

number of polyhedra, and each polynomial segment is forced to be inside its corresponding polyhedron [7]. However, this can be very restrictive since the solver only has the freedom to select where the two endpoint points of each interval are placed in the overlapping regions. Another option, but with higher computation times, is to use binary decision variables [6], [12] to allow the solver to choose the speciﬁc interval allocation. For the time allocation, one can either use a ﬁxed time allocation [5] or formulate a bi-level optimization to ﬁnd the times [13], [7]. However, the ﬁrst approach can be very conservative and can cause infeasibility in the optimization problem while the seconds leads to longer replanning times.
III. FAST AND SAFE TRAJECTORY PLANNER
A. Planning
The Fast and Safe Trajectory Planner (FASTER) uses hierarchical architecture where a long-horizon global planner guides a short-horizon local planner to a desired goal location. The global planner used in this work is Jump Point Search (JPS). JPS ﬁnds the shortest piecewise linear path between two points in a 3D uniformly-weighted voxel grid, guaranteeing optimality and completeness but running an order of magnitude faster than A* [14], [5].
For the local planner, we distinguish these three different jerk-controlled trajectories (some of the points will be precisely deﬁned later, see Fig. 3):
• Whole Trajectory: This trajectory goes from a start location A to goal location E, and it is contained in F ∪ U. It has a ﬁnal stop condition.
• Safe Trajectory: It goes from R to F , where R is a point in the Whole Trajectory, and F is any point inside the polyhedra obtained by doing a convex decomposition of F. It is completely contained in F (free-known space), and it has also a ﬁnal stop condition to guarantee safety.
• Committed Trajectory: This trajectory consists of two pieces: The ﬁrst part is the interval A → R of the Whole Trajectory. The second part is the Safe Trajectory. It is also guaranteed to be inside F (see explanation below). This trajectory is the one that the UAV will execute in case no feasible solutions are found in the next replanning steps.
The quadrotor is modeled using triple integrator dynamics with state vector xT = xT x˙ T x¨T = xT vT aT and control input u = .x.. = j (where x, v, a, and j are the vehicle’s position, velocity, acceleration, and jerk, respectively).
Let n = 0 : N − 1 denote the speciﬁc interval of the trajectory and p = 0 : P − 1 the speciﬁc polyhedron. If j(t) is constrained to be constant in each interval n = 0 : N − 1, then the whole trajectory will be a spline consisting of third degree polynomials. Matching the cubic form of the position for each interval
xn(τ ) = anτ 3 + bnτ 2 + cnτ + dn, τ ∈ [0, dt]

1935

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

with the expression of a cubic Be´zier curve

3
xn(τ ) =

3 j

j=0

τ 3−j τ j

1− dt

dt rnj, τ ∈ [0, dt],

we can solve for the four control points rnj (j = 0 : 3) associated with each interval n:

rn0 = dn,

rn1

=

cndt

+ 3

3dn

rn2

=

bndt2

+

2cndt 3

+

3dn

rn3 = andt3 + bndt2 + cndt + dn

Let us denote the sequence of P overlapping polyhedra as

{(Ap, cp)}, p = 0 : P − 1, and introduce binary variables bnp (P variables for each interval n = 0 : N −1). As a Be´zier

curve is contained in the convex hull of its control points, we

can ensure that the whole trajectory will be inside this convex

corridor by forcing that all the control points are in the same

polyhedron [7], [11] with the constraint [bnp = 1 =⇒ rnj ∈

polyhedron p ∀j], and at least in one polyhedron with the

constraint

P −1 p=0

bnp

≥

1.

The

optimizer

is

free

to

choose

in which polyhedron exactly. The complete MIQP solved in

each replanning step (using Gurobi, [15]) for both the Safe

and the Whole trajectories is this one:

N −1

min

jn 2

(1)

jn,bnp n=0

s.t. x0(0) = xinit

xN−1(dt) = xfinal xn(τ ) = anτ 3 + bnτ 2 + cnτ + dn ∀n, ∀τ ∈ [0, dt]

vn(τ ) = x˙ n(τ ) ∀n, ∀τ ∈ [0, dt]

an(τ ) = v˙n(τ ) ∀n, ∀τ ∈ [0, dt]

jn = 6an(0) ∀n

 

Aprn0

≤ cp

bnp = 1

=⇒

 


Aprn1 ≤ cp Aprn2 ≤ cp

 

Aprn3

≤ cp

∀n, ∀p

P −1

bnp ≥ 1 ∀n

p=0

bnp ∈ {0, 1} ∀n, ∀p

xn+1(0) = xn(dt) n = 0 : N − 2

vn(0) ∞ ≤ vmax,

∀n

an(0) ∞ ≤ amax,

∀n

jn ∞ ≤ jmax,

∀n

In the optimization problem above, dt (same for every interval n) is computed as

dt = f · max{Tvx , Tvy , Tvz , Tax , Tay , Taz , Tjx , Tjy , Tjz }/N (2)
where Tvi , Tai , Tji are solution of the constant-input motions in each axis i = x, y, z by applying vmax, amax and jmax respectively. f ≥ 1 is a factor that is obtained according
to the solution of the previous replanning step (see Fig. 2):

Fig. 2: Dynamic adaptation of the factor used to compute the heuristic of the time allocation per interval (dt): For iteration k, the range of factors used is taken around the factor that worked in the iteration k − 1.
The optimizer will try values of f (in increasing order) in the interval [fworked,k−1 −γ, fworked,k−1 +γ ] until the problem converges. Here, fworked,k−1 is the factor that made the problem feasible in the previous replanning step. Note that, if f = 1, then dt is a lower bound on the minimum time per interval required for the problem to be feasible.

Algorithm 1: FASTER

Data: Current Position of the UAV L, Committedk−1, JP Sk−1, Gterm, O, F , U , r

1 Function Replan():

2

k ← k + 1, δt ← α∆tk−1, δt ← β∆tk−1

3

Choose point A in Committedk−1 with offset δt from L

4

G ← Projection of Gterm into map M

5

JP Sa ← Run JPS A → G

6

C ← JP Sa ∩ S

7

JP Sb ← Modiﬁed JP Sk−1 such that JP Sk−1 ∩ O = ∅

8

D ← JP Sb ∩ S

9

dta ← Lower bound on dt A → C

10

dtb ← Lower bound on dt A → D

11

Ja = N · dta +

JP Sa(C→G) vmax

12

Jb = N · dtb +

JP Sb(D→G) vmax

13

JP Sk ←

{Ja, Jb}

{JP Sa,JP Sb}

14

JP Sk ← JP Sa

15

JP Sin ← Part of JP Sk inside S

16

P olywhole ← Convex Decomposition in U ∪ F using JP Sin

17

fwhole ← [fwhole,k−1 − γ, fwhole,k−1 + γ ]

18

W hole ← MIQP in P olywhole from A to G using fwhole

19

J P Sin,known ← Part of J P Sin in F

20

P olysafe ←Convex Decomposition in F using J P Sin,known

21

fsaf e ← [fsaf e,k−1 − γ, fsaf e,k−1 + γ ]

22

Saf e ← MIQP in P olysafe from R to F using fsafe

23

Committedk ← W holeA→R ∪ Saf e

24

fwhole,k ← Factor that worked for W hole

25

fsafe,k ← Factor that worked for Saf e

26

∆tk ← Total replanning time

Algorithm 1 summarizes the full approach (see also Fig. 3). Let L be the current position of the UAV. The point A is chosen in the Committed Trajectory of the previous replanning step with an offset δt from L. This offset δt is computed by multiplying the total time of the previous replanning step by α ≥ 1 (typically α ≈ 1.25). The idea here is to dynamically change this offset to ensure that most of the times the solver is able to ﬁnd the next solution in less than δt. Then, the ﬁnal goal Gterm is projected into

1936

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

Fig. 3: Illustration for Alg.1. U is the unknown space ( ), and O are the known obstacles ( ) . One unknown obstacle is shown with dotted line.
Fig. 4: Choice of the direction to optimize. At t = tk−1, the JPS solution chosen was JP Sk−1. At t = tk, JPS is run again to obtain JP Sa, and JP Sk−1 is modiﬁed so that it does not collide with O, obtaining JP Sb. A heuristic of the cost-to-go in each direction is computed, and the direction with the lowest cost is chosen as the one towards which the local planner will optimize.
t−h−e−−sl−i→ding map M (centered on the UAV) in the direction GtermA to obtain the point G (line 4). Next, we run JPS from A to G (line 5) to obtain JP Sa.
The local planner then must decide if the current JPS solution should be used to guide the optimization (lines 614). Instead of blindly trusting the last JPS solution (JP Sa) as the best direction for the local planner to optimize (note that JPS is a zero-order model, without dynamics encoded), we take into account the dynamics of the UAV in the following way: First of all, we modify the JP Sk−1 so that it does not collide with the new obstacles seen (Fig. 4): we ﬁnd the points I1 and I2 (ﬁrst and last intersections of JP Sk−1 with O) and run JPS three times, so A → I1, I1 → I2 and I2 → IG. Hence, the modiﬁed version, denoted by JP Sb, will be the concatenation of these three paths. Then, we compute a lower bound on dt using Eq. 2 for both A → C and A → D, where C and D are the intersections of the previous JPS paths with a sphere S of radius r centered on A. Next, we ﬁnd the cost-to-go associated with each direction by adding this dta (or dtb) and the time it would take the UAV to go from C (or D) to G following the JPS solution and ﬂying at vmax. Finally, the one with lowest cost is chosen,

and therefore JP Sk ← argmin {Ja, Jb}. This will be
{J P Sa,J P Sb}
the direction towards which the local planner will optimize.
The Whole Trajectory (lines 15-18) is obtained as follows. We do the convex decomposition [5] of U ∪F around JP Sin, which is the part of JP Sk that is inside the sphere S. This gives a series of overlapping polyhedra that we denote as P olywhole. Then, the MIQP in (1) is solved using these polyhedral constraints to obtain the Whole Trajectory.
The Safe Trajectory is computed as in lines 19-22. First we choose the point R along the Whole Trajectory with an offset δt from A (this δt is computed by multiplying the previous replanning time by β ≥ 1), and run convex decomposition in F using the part of JP Sin that is in F , obtaining the polyhedra P olysafe. Then, we solve the MIQP from R to any point F inside P olysafe (this point F is chosen by the optimizer).
In both of the convex decompositions presented above, one polyhedron is created for each segment of the piecewise linear paths. To obtain a less conservative solution (i.e. bigger polyhedra), we ﬁrst check the length of segments of the JPS path, creating more vertexes if this length exceeds certain threshold lmax. Moreover, we truncate the number of segments in the path to ensure that the number of polyhedra found does not exceed a threshold Pmax. This helps reduce the computation times (see Sec. IV).
Finally (line 23), we compute the Committed Trajectory by concatenating the piece A → R of the Whole Trajectory, and the Safe Trajectory. Note that in this algorithm we have run two decoupled optimization problems per replanning step: (1) one for the Whole Trajectory, and (2) one for the Safe Trajectory. This ensures that the piece A → R is not inﬂuenced by the braking maneuver R → F , and therefore guarantees a higher nominal speed on this ﬁrst piece. The intervals L → A and A → R have been designed so that, with high probability, at least one replanning step can be solved within that interval. Moreover, to prevent the (very rare) cases where both A and R are in F, but the piece A − R is not, we check that piece A − R against collision with U. If any of the two optimizations in this algorithm fails, or the piece A − R intersects U, or the replanning step takes longer than δt, the UAV does not commit to a new trajectory in that replanning step, and continues executing the Committed Trajectory of the previous replanning step. Thus safety is guaranteed by construction: the UAV will only ﬂy Committed Trajectories, which are always guaranteed to be in F with a terminal stopping condition.
B. Mapping
For the mapping, we use a sliding map centered on the UAV that moves as the UAV ﬂies. We fuse a depth map into the occupancy grid using the 3D Bresenhams line algorithm for ray-tracing [16], and O and U are inﬂated by the radius of the UAV to ensure safety.

1937

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

Fig. 5: Forest (left) and bugtrap (right) environments used in the simulation. The forest is 50 × 50 m, and the grid in the bugtrap environment is 1 m × 1 m.

250

40

200

30

20

150

10

1

2

3

100

50

TABLE I: Distances obtained in 10 random forest simulations. Improvement percentages are computed for the minimum and the maximum of each column. Some results were provided by the authors of [10].

Method
Incremental Rand. Goals Opt. RRT Cons. RRT NBVP [17] SL Expl. [10] Mult-Fid [8] FASTER

Number of Successes 0 10 9 9 6 8 10 10

Avg -
138.0 105.3 155.8 159.3 103.8
84.5 77.6

Distance (m)

Std Max

-

-

32.0 210.5

10.3 126.4

52.6 267.9

45.6 246.9

21.6 148.3

11.7 109.4

5.9 88.0

Min -
105.6 95.5 106.2 123.6 86.6 73.2 70.7

Min/Max improvement (%)

8/51 43/89 20/67 3/43

TABLE II: Comparison between [8] and FASTER of ﬂight times in the forest simulation. Results are for 10 random forests.

Method
Mult-Fid [8] FASTER

Time (s)

Avg

Std Max Min

61.2 16.8 92.5 37.9

29.2

4.2 36.8 21.6

Improvement (%)

52.3 75.0 60.2 43.0

0

1

2

3

4

5

6

7

Fig. 6: Timing breakdown for the MIQP and Convex Decomposition of the Whole Trajectory and the Safe Trajectory as a function of the maximum number of polyhedra Pmax. Note that the times for the MIQPs include all the trials until convergence (with different factors f ) in each replanning step. The shaded area is the 1-σ interval, where σ is the standard deviation. These results are from the forest simulation.

TABLE III: Comparison between [8] and FASTER of ﬂight distances and times in a bugtrap simulation.

Method Mult-Fid [8] FASTER

Distance (m) 56.8 55.2

Time (s) 37.6 13.8

Improvement (%)

2.8

63.3

IV. RESULTS
A. Simulation
We ﬁrst test FASTER in 10 random forest environments with an obstacle density of 0.1 obstacles/m2 (see Fig. 5) and compare the ﬂight distances achieved against the following seven approaches: Incremental approach (no goal selection), random goal selection, optimistic RRT (unknown space = free), conservative RRT (unknown space = occupied), “next-best-view” planner (NBVP) [17], Safe Local Exploration [10], (see [10] for details of all these approaches), and Multi-Fidelity [8].
The results are shown in Table I, which highlights that FASTER achieves a 8 − 51% improvement in the distance. Completion times are compared in Table II to our previous proposed algorithm [8] (time values are not available for all other algorithms in Table I). FASTER achieves an improvement of 52% in the completion time. The dynamic constraints imposed for the results of this table are (per axis) vmax = 5 m/s, amax = 5 m/s2, and jmax = 8 m/s3.
We also test FASTER using the bugtrap environment shown in Fig. 5, and obtain the results that appear on Table III. Both algorithms have a similar total distance, but FASTER achieves an improvement of 63% on the total ﬂight time. For both cases the dynamic constraints imposed are vmax = 10 m/s, amax = 10 m/s2, and jmax = 40 m/s3.
The timing breakdown of Alg. 1 as a function of the

Fig. 7: UAV used in the experiments. It is equipped with a Qualcomm R SnapDragon Flight, an Intel R NUC and an Intel R RealSense Depth Camera D435.
maximum number of polyhedra Pmax is shown in Fig. 6. The number of intervals N was 10 for the Whole Trajectory and 7 for the Safe Trajectory. Note that the runtime for the MIQP of the Safe Trajectory is approximately constant as a function of Pmax. This is due to the fact that the Safe Trajectory is planned only in F, and therefore most of the times P < Pmax. For the simulations and hardware experiments presented in this paper, Pmax = 2 − 3 was used. The runtimes for JPS as a function of the voxel size of the map for the forest simulation are available in Fig. 7 of [8]. All these timing breakdowns were measured using an Intel Core i7-7700HQ 2.8GHz Processor.

1938

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

Fig. 8: Composite images of Experiment 1. The UAV must ﬂy from start to goal . Snapshots shown every 670 ms.

Fig. 9: Composite image of Experiment 2. The UAV must ﬂy from start to goal . Snapshots shown every 330 ms.

Fig. 10: Composite image of Experiment 3. The UAV must ﬂy from start to goal . Snapshots shown every 670 ms.

Fig. 11: Composite image of Experiment 4. The UAV must ﬂy from start to goal . Snapshots shown every 670 ms.

B. Hardware
The UAV used in the hardware experiments is shown in Fig. 7. The perception runs on the Intel R RealSense, the mapper and planner run on the Intel R NUC, and the control runs on the Qualcomm R SnapDragon Flight. The attitude, IMU biases, position and velocity are estimated by fusing (via a Kalman ﬁlter) propagated IMU measurements with an external motion capture system.
The ﬁrst and second experiments (Fig. 8 and 9) were done in similar obstacle environments with the same starting point, but with different goal locations. In the ﬁrst experiment (Fig. 8), the UAV performs a 3D agile maneuver to avoid the obstacles on the table. In the second experiment (Fig. 9) the UAV ﬂies through the narrow gap of the cardboard boxes structure, and then ﬂies below the triangle-shaped obstacle. In these two experiments, the maximum speed was 2.1 m/s.

In the third and fourth experiments (Fig 10 and 11), the UAV must ﬂy through a space with poles of different heights, and ﬁnally below the cardboard boxes structure to reach the goal, achieving a maximum speed of 3.6 m/s.
All these hardware experiments are available on https://youtu.be/gwV0YRs5IWs.
For Pmax = 2, the boxplots of the runtimes achieved on the forest simulation (measured on an Intel Core i7-7700HQ) and on the hardware experiments (measured on the onboard Intel NUC with the mapper and the RealSense also running on it) are shown in Fig. 12. For the runtimes of the MIQP for the Whole and the Safe Trajectories, the 75th percentile is always below 32 ms.

1939

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

Fig. 12: Timing breakdown for the forest simulation and for the real hardware experiments. The parameters used are Pmax = 2, N = 10 for the Whole Trajectory, and N = 7 for the Safe Trajectory.
V. CONCLUSIONS
This work presented FASTER, a fast and safe planner for agile ﬂights in unknown environments. The key properties of this planner is that it leads to a higher nominal speed than other works by planning both in U and F, and ensures safety by having always a Safe Trajectory planned in F at the beginning of every replanning step. FASTER was tested successfully both in simulated and in hardware ﬂights, achieving velocities up to 3.6 m/s.
All the GAZEBO worlds used for the simulation are available at https://github.com/jtorde.
ACKNOWLEDGMENT
Thanks to Boeing Research & Technology for support of the hardware, to my brother Pablo Tordesillas (ETSAMUPM) for his great help with some ﬁgures of this paper and to Parker Lusk (ACL-MIT) for his help with the hardware. The authors would also like to thank John Carter and John Ware (CSAIL-MIT) for their help with the mapper used in this paper. Supported in part by Defense Advanced Research Projects Agency (DARPA) as part of the Fast Lightweight Autonomy (FLA) program, HR0011-15-C-0110. Views expressed here are those of the authors, and do not reﬂect the ofﬁcial views or policies of the Dept. of Defense or the U.S. Government.

REFERENCES
[1] Mark W Mueller, Markus Hehn, and Raffaello D’Andrea. A computationally efﬁcient motion primitive for quadrocopter trajectory generation. IEEE Transactions on Robotics, 31(6):1294–1310, 2015.
[2] Pete Florence, John Carter, and Russ Tedrake. Integrated perception and control at high speed: Evaluating collision avoidance maneuvers without maps. In Workshop on the Algorithmic Foundations of Robotics (WAFR), 2016.
[3] Brett T Lopez and Jonathan P How. Aggressive 3-D collision avoidance for high-speed navigation. In Robotics and Automation (ICRA), 2017 IEEE International Conference on, pages 5759–5765. IEEE, 2017.
[4] Brett T Lopez and Jonathan P How. Aggressive collision avoidance with limited ﬁeld-of-view sensing. In Intelligent Robots and Systems (IROS), 2017 IEEE/RSJ International Conference on, pages 1358– 1365. IEEE, 2017.
[5] Sikang Liu, Michael Watterson, Kartik Mohta, Ke Sun, Subhrajit Bhattacharya, Camillo J Taylor, and Vijay Kumar. Planning dynamically feasible trajectories for quadrotors using safe ﬂight corridors in 3D complex environments. IEEE Robotics and Automation Letters, 2(3):1688–1695, 2017.
[6] Robin Deits and Russ Tedrake. Efﬁcient mixed-integer planning for uavs in cluttered environments. In 2015 IEEE international conference on robotics and automation (ICRA), pages 42–49. IEEE, 2015.
[7] James A Preiss, Karol Hausman, Gaurav S Sukhatme, and Stephan Weiss. Trajectory optimization for self-calibration and navigation. In Robotics: Science and Systems, 2017.
[8] Jesus Tordesillas, Brett T Lopez, John Carter, John Ware, and Jonathan P How. Real-time planning with multi-ﬁdelity models for agile ﬂights in unknown environments. In 2019 IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2019.
[9] Tom Schouwenaars, E´ ric Fe´ron, and Jonathan How. Safe receding horizon path planning for autonomous vehicles. In Proceedings of the Annual Allerton Conference on Communication Control and Computing, volume 40, pages 295–304. The University; 1998, 2002.
[10] Helen Oleynikova, Zachary Taylor, Roland Siegwart, and Juan Nieto. Safe local exploration for replanning in cluttered unknown environments for microaerial vehicles. IEEE Robotics and Automation Letters, 3(3):1474–1481, 2018.
[11] Ozgur Koray Sahingoz. Generation of bezier curve-based ﬂyable trajectories for multi-uav systems with parallel genetic algorithm. Journal of Intelligent & Robotic Systems, 74(1-2):499–511, 2014.
[12] Benoit Landry, Robin Deits, Peter R Florence, and Russ Tedrake. Aggressive quadrotor ﬂight through cluttered environments using mixed integer programming. In 2016 IEEE international conference on robotics and automation (ICRA), pages 1469–1475. IEEE, 2016.
[13] Charles Richter, Adam Bry, and Nicholas Roy. Polynomial trajectory planning for aggressive quadrotor ﬂight in dense indoor environments. In Robotics Research, pages 649–666. Springer, 2016.
[14] Daniel Damir Harabor, Alban Grastien, et al. Online graph pruning for pathﬁnding on grid maps. In AAAI, 2011.
[15] LLC Gurobi Optimization. Gurobi optimizer reference manual, 2018. [16] Jack E Bresenham. Algorithm for computer control of a digital plotter.
IBM Systems journal, 4(1):25–30, 1965. [17] Andreas Bircher, Mina Kamel, Kostas Alexis, Helen Oleynikova, and
Roland Siegwart. Receding horizon “next-best-view” planner for 3D exploration. In Robotics and Automation (ICRA), 2016 IEEE International Conference on, pages 1462–1468. IEEE, 2016.

1940 Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on June 08,2022 at 08:27:23 UTC from IEEE Xplore. Restrictions apply.

