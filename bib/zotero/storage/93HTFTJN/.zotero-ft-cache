IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeneralPunctuation.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2019 IEEE/RSJ International C...
FASTER: Fast and Safe Trajectory Planner for Flights in Unknown Environments
Publisher: IEEE
Cite This
PDF
  << Results    |   < Previous   
Jesus Tordesillas ; Brett T. Lopez ; Jonathan P. How
All Authors
View Document
44
Paper
Citations
820
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Related Work
    III.
    Fast and Safe Trajectory Planner
    IV.
    Results
    V.
    Conclusions

Authors
Figures
References
Citations
Keywords
Metrics
Media
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: High-speed trajectory planning through unknown environments requires algorithmic techniques that enable fast reaction times while maintaining safety as new information ab... View more
Metadata
Abstract:
High-speed trajectory planning through unknown environments requires algorithmic techniques that enable fast reaction times while maintaining safety as new information about the operating environment is obtained. The requirement of computational tractability typically leads to optimization problems that do not include the obstacle constraints (collision checks are done on the solutions) or use a convex decomposition of the free space and then impose an ad-hoc time allocation scheme for each interval of the trajectory. Moreover, safety guarantees are usually obtained by having a local planner that plans a trajectory with a final “stop” condition in the freeknown space. However, these two decisions typically lead to slow and conservative trajectories. We propose FASTER (Fast and Safe Trajectory Planner) to overcome these issues. FASTER obtains high-speed trajectories by enabling the local planner to optimize in both the free-known and unknown spaces. Safety guarantees are ensured by always having a feasible, safe back-up trajectory in the free-known space at the start of each replanning step. Furthermore, we present a Mixed Integer Quadratic Program formulation in which the solver can choose the trajectory interval allocation, and where a time allocation heuristic is computed efficiently using the result of the previous replanning iteration. This proposed algorithm is tested extensively both in simulation and in real hardware, showing agile flights in unknown cluttered environments with velocities up to 3.6 m/s.
Published in: 2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 03-08 November 2019
Date Added to IEEE Xplore : 27 January 2020
ISBN Information:
ISSN Information:
INSPEC Accession Number: 19299287
DOI: 10.1109/IROS40897.2019.8968021
Publisher: IEEE
Conference Location: Macau, China
Contents
SECTION I.
Introduction

Navigating through unknown environments entails repeatedly generating collision-free, dynamically feasible trajectories that are executed over a finite horizon. Similar to that in the Model Predictive Control (MPC) literature, safety is guaranteed by ensuring a feasible solution exists indefinitely. If we consider R 3 = O ∪ F ∪ U where F , O , U are disjoint sets denoting free-known, occupied-known, and unknown space respectively, safety is guaranteed by constructing trajectories that are entirely contained in F with a final stop condition. This can be achieved by generating motion primitives that do not intersect O ∪ U [ 1 ] − [4] , or by constructing a convex representation of F to be used in an optimization [ 5 ] − [7] . However, both approaches lead to slow trajectories in scenarios where F is small compared to U ∪ O . This paper presents an optimization-based approach that reduces the aforementioned limitations by solving for two optimal trajectories at every planning step (see Fig. 1 ): one in U ∪ F , and another one in F .

Decomposing the free space into P overlapping polyhedra along a path connecting a start A to goal E location (see Fig. 1 ), the usual approach is to divide the total trajectory into N = P intervals [5] . On one hand, this simplifies the problem because no integer variables are needed, as each interval is forced to be in one specific polyhedron. On the other hand, the time allocation problem becomes much harder, as there are N different dt n (time allocated for each interval n ). The trajectory is also more conservative since the optimizer is only allowed to move the end points of each interval of the trajectory in the overlapping areas. To overcome these two problems, we propose the use of the same dt for all the intervals, and use N > P intervals, encoding the optimization problem as a Mixed Integer Quadratic Program (MIQP). Moreover, and as the minimum feasible dt depends depends on the state of the UAV and on the specific shape of F and U at a specific replanning step, we also propose an efficient way to compute a heuristic of this dt using the result obtained in the previous replanning iteration.
Fig. 1:

Contributions of this work.

Show All

In summary, this work has the following contributions:

    A framework that ensures feasibility of the entire collision avoidance algorithm and guarantees safety without reducing the nominal flight speed by allowing the local planner to plan in F ∪ U while always having a safe trajectory in F .

    Reduced conservatism of the MIQP formulation for the interval and time allocation problem of the flight trajectories compared to prior work.

    Extension of our previous work [8] , (where we considered the interaction between the global and local planners) by proposing a way to compute very cheaply a heuristic of the cost-to-go needed by the local planner to decide which direction is the best one to optimize towards.

    Simulation and hardware experiments showing agile flights in completely unknown cluttered environments, with velocities up to 3.6 m / s .

SECTION II.
Related Work

Trajectory planning strategies for UAVs can be classified according to the operating space of the local planner and the specific formulation of the optimization problem.

With regard to the planning space of the local planner, several approaches have been developed. One approach is to use only the most recent perception data [2] [3] – [4] , which requires the desired trajectory to remain within the perception sensor field of view. An alternative strategy is to create and plan trajectories in a map of the environment using a history of perception data. Within this second category, some works [8] [9] – [10] limit the local planner to generate trajectories only in free-known space (F in Fig. 1 ), which guarantees safety if the local planner has a final stop condition. However, limiting the planner to operating in free-known space and enforcing a terminal stopping condition can lead to conservative, slow trajectories (especially when much of the world is unknown). While allowing the local planner to optimize in both the freeknown and unknown space ( F ∪ U ) , higher speeds can be obtained but with no guarantees that the trajectory is safe or will remain feasible.

As far as the optimization formulation is concerned, two approaches can be highlighted. The first does not include the obstacles in the optimization problem [8] , leading to a closed-form solution for the trajectory [1] , [3] , [4] or in general to very small computation times [8] . The computation time for these approaches are very low since obstacles are not explicitly considered in the trajectory generation. This enables multiple candidate trajectories to be generated (via sampling) and evaluated for collisions (using nearest-neighbor search) at each planning stage. While these approaches are computationally efficient, they are unable to construct sophisticated maneuvers due to the discretization of the candidate trajectories, leading to slower trajectories in cluttered environments. The second approach is to include obstacle constraints directly in the optimization. This is usually done describing the free space by a set of overlapping polyhedra (also known as convex decomposition) [5] [6] – [7] . The trajectory can then be parameterized by a sequence of third (or higher)-degree polynomials. B’zier Curves [7] , [11] or the sum-of-squares condition [6] , [12] can be used to guarantee the trajectory remains the overlapping polyhedra. Subsequently, there will be an interval (which polytope each polynomial is in) and a time allocation (how much time is assigned to each interval) problem. For the interval allocation , a typical the number of trajectory segments equals the number of polyhedra, and each polynomial segment is forced to be inside its corresponding polyhedron [7] . However, this can be very restrictive since the solver only has the freedom to select where the two endpoint points of each interval are placed in the overlapping regions. Another option, but with higher computation times, is to use binary decision variables [6] , [12] to allow the solver to choose the specific interval allocation. For the time allocation, one can either use a fixed time allocation [5] or formulate a bi-level optimization to find the times [13] , [7] . However, the first approach can be very conservative and can cause infeasibility in the optimization problem while the seconds leads to longer replanning times.
SECTION III.
Fast and Safe Trajectory Planner
A. Planning

The Fast and Safe Trajectory Planner (FASTER) uses hierarchical architecture where a long-horizon global planner guides a short-horizon local planner to a desired goal location. The global planner used in this work is Jump Point Search (JPS). JPS finds the shortest piecewise linear path between two points in a 3D uniformly-weighted voxel grid, guaranteeing optimality and completeness but running an order of magnitude faster than A ∗ [14] , [5] .

For the local planner, we distinguish these three different jerk-controlled trajectories (some of the points will be precisely defined later, see Fig. 3 ):

    Whole Trajectory: This trajectory goes from a start location A to goal location E , and it is contained in F ∪ U . It has a final stop condition.

    Safe Trajectory: It goes from R to F , where R is a point in the Whole Trajectory, and F is any point inside the polyhedra obtained by doing a convex decomposition of F . It is completely contained in F (free-known space), and it has also a final stop condition to guarantee safety.

    Committed Trajectory: This trajectory consists of two pieces: The first part is the interval A → R of the Whole Trajectory. The second part is the Safe Trajectory. It is also guaranteed to be inside F (see explanation below). This trajectory is the one that the UAV will execute in case no feasible solutions are found in the next replanning steps.

The quadrotor is modeled using triple integrator dynamics with state vector x T = [ x T   x ˙ T   x ˙ T ] = [ x T   v T   a T ] and control input u = x ¨ = j (where x , v , a , and j are the vehicle’s position, velocity, acceleration, and jerk, respectively).

Let n = 0 : N − 1 denote the specific interval of the trajectory and p = 0 : P − 1 the specific polyhedron. If j ( t ) is constrained to be constant in each interval n = 0 : N-1, then the whole trajectory will be a spline consisting of third degree polynomials. Matching the cubic form of the position for each interval
x n ( τ ) = a n τ 3 + b n τ 2 + c n τ + d n ,   τ ∈   [ 0 ,   d t ]
View Source \begin{equation*}x_{n}(\tau)=a_{n}\tau^{3}+b_{n}\tau^{2}+c_{n}\tau+d_{n},\ \tau\in\ [0,\ dt]\end{equation*} with the expression of a cubic B’zier curve
x n ( τ ) = ∑ j = 0 3 ( 3 j ) ( 1 − τ d t ) 3 − j ( τ d t ) j r n j , τ ∈ [ 0 , d t ] ,
View Source \begin{equation*}x_{n}(\tau)=\sum_{j=0}^{3} \begin{pmatrix} {3} \\ {j} \end{pmatrix}\left(1-\frac{\tau}{d t}\right)^{3-j}\left(\frac{\tau}{d t}\right)^{j} r_{n j}, \quad \tau \in[{0, d t}],\end{equation*} we can solve for the four control points r n j ( j   =   0   3 ) associated with each interval n :
r n 0 = r n 2 = r n 3 = d n ,   r n 1 = c n d t + 3 d n 3 b n d t 2 + 2 c n d t + 3 d n 3 a n d t 3 + b n d t 2 + c n d t + d n
View Source \begin{align*}r_{n0}=&d_{n},\ r_{n1}=\frac{c_{n}dt+3d_{n}}{3} \\ r_{n2}=&\frac{b_{n}dt^{2}+2c_{n}dt+3d_{n}}{3} \\ r_{n3}=&a_{n}dt^{3}+b_{n}dt^{2}+c_{n}dt+d_{n}\end{align*}

Let us denote the sequence of P overlapping polyhedra as { ( A p , c p p = 0 : P-1, and introduce binary variables b np ( P variables for each interval n = 0 : N-1). As a B’zier curve is contained in the convex hull of its control points, we can ensure that the whole trajectory will be inside this convex corridor by forcing that all the control points are in the same polyhedron [7] , [11] with the constraint [ b n p = 1 ⇒ r n j ∈ polyhedron p ∀ j ], and at least in one polyhedron with the constraint ∑ P − 1 p = 0 b n p ≥ 1 . The optimizer is free to choose in which polyhedron exactly. The complete MIQP solved in each replanning step (using Gurobi, [15] ) for both the Safe and the Whole trajectories is this one:
min j n , b n p s . t . ∑ n = 0 N − 1 ∥ j n ∥ 2 x 0 ( 0 ) = x i n i t x N − 1 ( d t ) = x f i n a l x n ( τ ) = a n τ 3 + b n τ 2 + c n τ + d n ∀ n , ∀ τ ∈ [ 0 , d t ] v n ( τ ) = x ˙ n ( τ ) ∀ n , ∀ τ ∈ [ 0 , d t ] a n ( τ ) = v ˙ n ( τ ) ∀ n , ∀ τ ∈ [ 0 , d t ] j n = 6 a n ( 0 ) ∀ n b n p = 1 ⟹ ⎧ ⎩ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ A p r n 0 ≤ c p A p r n 1 ≤ c p A p r n 2 ≤ c p A p r n 3 ≤ c p ∀ n , ∀ p ∑ p = 0 P − 1 b n p ≥ 1 ∀ n b n p ∈ { 0 , 1 } ∀ n , ∀ p x n + 1 ( 0 ) = x n ( d t ) n = 0 : N − 2 ∥ v n ( 0 ) ∥ ∞ ≤ v m a x ∥ a n ( 0 ) ∥ ∞ ≤ a m a x ∥ j n ∥ ∞ ≤ j m a x (1)
View Source \begin{align*} \min _{j_{n}, b_{n p}} &\sum_{n=0}^{N-1}\left\|\mathbf{j}_{n}\right\|^{2}\\ { s.t. } &\mathbf{x}_{0}(0)=\mathbf{x}_{ {init}}\\ &{\mathbf{x}_{N-1}(d t)=\mathbf{x}_{ {final}}} \\ &{\boldsymbol{x}_{n}(\tau)=\boldsymbol{a}_{n} \tau^{3}+b_{n} \tau^{2}+c_{n} \tau+d_{n} \forall n, \forall \tau \in[{0, d t}]} \\ &{\boldsymbol{v}_{n}(\tau)=\dot{\boldsymbol{x}}_{n}(\tau) \forall n, \forall \tau \in[{0, d t}]} \\ &{\boldsymbol{a}_{n}(\tau)=\dot{\boldsymbol{v}}_{n}(\tau) \forall n, \forall \tau \in[{0, d t}]} \\ &{\mathbf{j}_{n}=6 \boldsymbol{a}_{n}(0) \forall \boldsymbol{n}}\\ &{b_{n p}=1 \Longrightarrow\left\{\begin{array}{l} {A_{p} r_{n 0} \leq c_{p}} \\ {A_{p} r_{n 1} \leq c_{p}} \\ {A_{p} r_{n 2} \leq c_{p}} \\ {A_{p} r_{n 3} \leq c_{p}} \end{array} \quad \forall n, \forall p\right.}\\ &\sum_{p=0}^{P-1} b_{n p} \geq 1 \quad \forall n\\ &b_{n p} \in\{0,1\} \quad \forall n, \forall p\\ &\mathrm{x}_{n+1}(0)=\mathrm{x}_{n}(d t) \quad n=0: N-2\\ &\left\|\boldsymbol{v}_{n}(0)\right\|_{\infty} \leq v_{max }\\ &\left\|a_{n}(0)\right\|_{\infty} \leq a_{max }\\ &\left\|\boldsymbol{j}_{n}\right\|_{\infty} \leq j_{max } \tag{1}\end{align*}

In the optimization problem above, dt (same for every interval n ) is computed as
d t = f ⋅ max { T v x ,   T v y ,   T v z ,   T a x ,   T a y ,   T a z ,   T j x ,   T j y ,   T j z } / N (2)
View Source \begin{equation*}dt=f \cdot\max\{T_{v_{x}},\ T_{v_{y}},\ T_{v_{z}},\ T_{a_{x}},\ T_{a_{y}},\ T_{a_{z}},\ T_{j_{x}},\ T_{j_{y}},\ T_{j_{z}}\}/N \tag{2}\end{equation*} where T v i , T a i , T j i are solution of the constant-input motions in each axis i = x , y , z by applying v max , a max and j max respectively. f ≥ 1 is a factor that is obtained according to the solution of the previous replanning step (see Fig. 2 ):

Fig. 2:

Dynamic adaptation of the factor used to compute the heuristic of the time allocation per interval (dt) : For iteration k , the range of factors used is taken around the factor that worked in the iteration k-1.

Show All

The optimizer will try values of f (in increasing order) in the interval [f_{worked,k-1}-\gamma,\ f_{worked,k-1}+\gamma ' ] until the problem converges. Here, f_{worked,k-1} is the factor that made the problem feasible in the previous replanning step. Note that, if f=1 , then dt is a lower bound on the minimum time per interval required for the problem to be feasible.
Algorithm 1:

FASTER

Show All

Algorithm 1 summarizes the full approach (see also Fig. 3 ). Let L be the current position of the UAV. The point A is chosen in the Committed Trajectory of the previous replanning step with an offset \delta t from L . This offset \delta t is computed by multiplying the total time of the previous replanning step by \alpha \geq 1 (typically \alpha \approx 1.25 ). The idea here is to dynamically change this offset to ensure that most of the times the solver is able to find the next solution in less than \delta t . Then, the final goal G term is projected into the sliding map \mathcal{M} (centered on the UAV) in the direction G_{term}A\rightarrow to obtain the point G (line 4). Next, we run JPS from A to G (line 5) to obtain JPSa .
Fig. 3:

Illustration for Alg.1. \mathcal{U} is the unknown space (H), and O are the known obstacles (E). One unknown obstacle is shown with \mathrm{doff}\epsilon\cdot \mathrm{d} line

Show All
Fig. 4:

Choice of the direction to optimize. At t=t_{k-1} , the JPS solution chosen was JPS_{k-1} . At t=t_{k} , JPS is run again to obtain JPS a , and JPS_{k-1} is modified so that it does not collide with O , obtaining JPSb . A heuristic of the cost-to-go in each direction is computed, and the direction with the lowest cost is chosen as the one towards which the local planner will optimize.

Show All

The local planner then must decide if the current JPS solution should be used to guide the optimization (lines 6-14). Instead of blindly trusting the last JPS solution ( JPSa ) as the best direction for the local planner to optimize (note that JPS is a zero-order model, without dynamics encoded), we take into account the dynamics of the UAV in the following way: First of all, we modify the JPS_{k-1} so that it does not collide with the new obstacles seen ( Fig. 4 ): we find the points I 1 and I 2 (first and last intersections of JPS_{k-1} with \mathcal{O} ) and run JPS three times, so A\rightarrow I_{1} , I_{1} \rightarrow I_{2} and I_{2} \rightarrow I_{G} . Hence, the modified version, denoted by JPSb , will be the concatenation of these three paths. Then, we compute a lower bound on dt using Eq. 2 for both A\rightarrow C and A \rightarrow D , where C and D are the intersections of the previous JPS paths with a sphere \mathcal{S} of radius r centered on A . Next, we find the cost-to-go associated with each direction by adding this dt a (or dt b ) and the time it would take the UAV to go from C (or D ) to G following the JPS solution and flying at v_{\max} . Finally, the one with lowest cost is chosen, and therefore JPS_{k} \leftarrow argmin \{JPS_{a}JPS_{b}\} \{J_{a},\ J_{b}\} . This will be the direction towards which the local planner will optimize.

The Whole Trajectory (lines 15-18) is obtained as follows. We do the convex decomposition [5] of \mathcal{U}\cup \mathcal{F} around JPS in , which is the part of JPS k that is inside the sphere \mathcal{S} . This gives a series of overlapping polyhedra that we denote as Poly whole . Then, the MIQP in (1) is solved using these polyhedral constraints to obtain the Whole Trajectory.

The Safe Trajectory is computed as in lines 19-22. First we choose the point R along the Whole Trajectory with an offset \delta t ' from A (this \delta t ' is computed by multiplying the previous replanning time by \beta \geq 1 ), and run convex decomposition in \mathcal{F} using the part of JPS in that is in \mathcal{F} , obtaining the polyhedra Poly safe . Then, we solve the MIQP from R to any point F inside Poly safe (this point F is chosen by the optimizer).

In both of the convex decompositions presented above, one polyhedron is created for each segment of the piecewise linear paths. To obtain a less conservative solution (i.e. bigger polyhedra), we first check the length of segments of the JPS path, creating more vertexes if this length exceeds certain threshold l_{\max} . Moreover, we truncate the number of segments in the path to ensure that the number of polyhedra found does not exceed a threshold P_{\max} . This helps reduce the computation times (see Sec. IV ).

Finally (line 23), we compute the Committed Trajectory by concatenating the piece A\rightarrow R of the Whole Trajectory, and the Safe Trajectory. Note that in this algorithm we have run two decoupled optimization problems per replanning step: (1) one for the Whole Trajectory, and (2) one for the Safe Trajectory. This ensures that the piece A \rightarrow R is not influenced by the braking maneuver R\rightarrow F , and therefore guarantees a higher nominal speed on this first piece. The intervals L \rightarrow A and A \rightarrow R have been designed so that, with high probability, at least one replanning step can be solved within that interval. Moreover, to prevent the (very rare) cases where both A and R are in \mathcal{F} , but the piece A-R is not, we check that piece A-R against collision with \mathcal{U} . If any of the two optimizations in this algorithm fails, or the piece A-R intersects \mathcal{U} , or the replanning step takes longer than \delta t , the UAV does not commit to a new trajectory in that replanning step, and continues executing the Committed Trajectory of the previous replanning step. Thus safety is guaranteed by construction: the UAV will only fly Committed Trajectories, which are always guaranteed to be in \mathcal{F} with a terminal stopping condition.
B. Mapping

For the mapping, we use a sliding map centered on the UAV that moves as the UAV flies. We fuse a depth map into the occupancy grid using the 3D Bresenhams line algorithm for ray-tracing [16] , and \mathcal{O} and \mathcal{U} are inflated by the radius of the UAV to ensure safety.
Fig. 5:

Forest (left) and bugtrap (right) environments used in the simulation. The forest is 50 \times 50 \mathrm{m} , and the grid in the bugtrap environment is 1 \mathrm{m} \times F

Show All
Fig. 6.

Timing breakdown for the MIQP and Convex Decomposition of the Whole Trajectory and the Safe Trajectory as a function of the maximum number of polyhedra P_{\max} . Note that the times for the MIQPs include all the trials until convergence (with different factors f ) in each replanning step. The shaded area is the 1-\sigma interval, where \sigma is the standard deviation. These results are from the forest simulation.

Show All

SECTION IV.
Results
A. Simulation

We first test FASTER in 10 random forest environments with an obstacle density of 0.1 obstacles /\mathrm{m}^{2} (see Fig. 5 ) and compare the flight distances achieved against the following seven approaches: Incremental approach (no goal selection), random goal selection, optimistic \mathrm{RRT}\star (unknown space = free), conservative \mathrm{RRT}\star (unknown space = occupied), “next-best-view” planner (NBVP) [17] , Safe Local Exploration [10] , (see [10] for details of all these approaches), and Multi-Fidelity [8] .

The results are shown in Table I , which highlights that FASTER achieves a 8–51% improvement in the distance. Completion times are compared in Table II to our previous proposed algorithm [8] (time values are not available for all other algorithms in Table I ). FASTER achieves an improvement of 52% in the completion time. The dynamic constraints imposed for the results of this table are (per axis) v_{\max}=5\mathrm{m}/\mathrm{s}, a_{\max}=5\mathrm{m}/\mathrm{s}^{2} , and j_{\max}=8\mathrm{m}/\mathrm{s}^{3} .

We also test FASTER using the bugtrap environment shown in Fig. 5 , and obtain the results that appear on Table III . Both algorithms have a similar total distance, but FASTER achieves an improvement of 63% on the total flight time. For both cases the dynamic constraints imposed are v_{\max}=10\mathrm{m}/\mathrm{s}, a_{\max}=10\mathrm{m}/\mathrm{s}^{2} , and j_{\max}=40\mathrm{m}/\mathrm{s}^{3} .

The timing breakdown of Alg. 1 as a function of the maximum number of polyhedra P_{\max} is shown in Fig. 6 . The number of intervals N was 10 for the Whole Trajectory and 7 for the Safe Trajectory. Note that the runtime for the MIQP of the Safe Trajectory is approximately constant as a function of P_{\max} . This is due to the fact that the Safe Trajectory is planned only in \mathcal{F} , and therefore most of the times P \lt P_{\max} . For the simulations and hardware experiments presented in this paper, P_{\max}=2-3 was used. The runtimes for JPS as a function of the voxel size of the map for the forest simulation are available in Fig. 7 of [8] . All these timing breakdowns were measured using an Intel Core i7-7700HQ 2. 8GHz Processor.
Table I Distances Obtained In 10 Random Forest Simulations. Improvement Percentages Are Computed For the Minimum and the Maximum of Each Column. Some Results Were Provided By the Authors of [10].
Table II Comparison Between [8] and Faster of Flight Times In the Forest Simulation. Results Are For 10 Random Forests.
Table III Comparison Between [8] and Faster of Flight Distances and Times In A Bugtrap Simulation.
Fig. 7:

UAV used in the experiments. It is equipped with a Qualcommo SnapDragon Flight, an Intel ® NUC and an Intel ® RealSense Depth Camera D435.

Show All
Fig. 8:

Composite images of Experiment 1. The UAV must fly from start • to goal • Snapshots shown every 670 ms.

Show All
Fig. 9:

Composite image of Experiment 2. The UAV must fly from start • to goal • Snapshots shown every 330 ms.

Show All
Fig. 10:

Composite image of Experiment 3. The UAV must fly from start • to goal • Snapshots shown every 670 ms.

Show All
Fig. 11:

Composite image of Experiment 4. The UAV must fly from start • to goal •. Snapshots shown every 670 ms.

Show All

B. Hardware

The UAV used in the hardware experiments is shown in Fig. 7 . The perception runs on the Intel ® RealSense, the mapper and planner run on the Intel ® NUC, and the control runs on the Qualcomm ® SnapDragon Flight. The attitude, IMU biases, position and velocity are estimated by fusing (via a Kalman filter) propagated IMU measurements with an external motion capture system.

The first and second experiments ( Fig. 8 and 9 ) were done in similar obstacle environments with the same starting point, but with different goal locations. In the first experiment ( Fig. 8 ), the UAV performs a 3D agile maneuver to avoid the obstacles on the table. In the second experiment ( Fig. 9 ) the UAV flies through the narrow gap of the cardboard boxes structure, and then flies below the triangle-shaped obstacle. In these two experiments, the maximum speed was 2.1 \mathrm{m}/\mathrm{s} .

In the third and fourth experiments ( Fig 10 and 11 ), the UAV must fly through a space with poles of different heights, and finally below the cardboard boxes structure to reach the goal, achieving a maximum speed of 3.6 \mathrm{m}/\mathrm{s} .

All these hardware experiments are available on https://youtu.be/gwV0YRs5IWs .

For P_{\max} =2 , the boxplots of the runtimes achieved on the forest simulation (measured on an Intel Core i7-7700HQ) and on the hardware experiments (measured on the onboard Intel NUC with the mapper and the RealSense also running on it) are shown in Fig. 12 . For the runtimes of the MIQP for the Whole and the Safe Trajectories, the 75^{\mathrm{th}} percentile is always below 32 ms.
Fig. 12:

Timing breakdown for the forest simulation and for the real hardware experiments. The parameters used are P_{max} =2, N =10 for the Whole Trajectory, and N =7 for the Safe Trajectory.

Show All

SECTION V.
Conclusions

This work presented FASTER, a fast and safe planner for agile flights in unknown environments. The key properties of this planner is that it leads to a higher nominal speed than other works by planning both in U and F, and ensures safety by having always a Safe Trajectory planned in F at the beginning of every replanning step. FASTER was tested successfully both in simulated and in hardware flights, achieving velocities up to 3.6 m/s.

All the GAZEBO worlds used for the simulation are available at https://github.com/jtorde .
ACKNOWLEDGMENT

Thanks to Boeing Research & Technology for support of the hardware, to my brother Pablo Tordesillas (ETSAM-UPM) for his great help with some figures of this paper and to Parker Lusk (ACL-MIT) for his help with the hardware. The authors would also like to thank John Carter and John Ware (CSAIL-MIT) for their help with the mapper used in this paper. Supported in part by Defense Advanced Research Projects Agency (DARPA) as part of the Fast Lightweight Autonomy (FLA) program, HR0011-15-C-0110. Views expressed here are those of the authors, and do not reflect the official views or policies of the Dept. of Defense or the U.S. Government.

Authors
Figures
References
Citations
Keywords
Metrics
Media
  < Previous    |    Back to Results   
More Like This
Metaheuristic optimization approach to mobile robot path planning

2012 International Conference on Engineering and Technology (ICET)

Published: 2012
Path planning of mobile robot using integer GA with considering terrain conditions

2008 IEEE International Conference on Systems, Man and Cybernetics

Published: 2008
Show More
References
1.
Mark W Mueller, Markus Hehn and Raffaello D’Andrea, "A computationally efficient motion primitive for quadrocopter trajectory generation", IEEE Transactions on Robotics , vol. 31, no. 6, pp. 1294-1310, 2015.
Show in Context View Article
Google Scholar
2.
Pete Florence, John Carter and Russ Tedrake, "Integrated perception and control at high speed: Evaluating collision avoidance maneuvers without maps", Workshop on the Algorithmic Foundations of Robotics (WAFR) , 2016.
Show in Context Google Scholar
3.
Brett T Lopez and Jonathan P How, "Aggressive 3-D collision avoidance for high-speed navigation", Robotics and Automation (ICRA) 2017 IEEE International Conference on , pp. 5759-5765, 2017.
Show in Context View Article
Google Scholar
4.
Brett T Lopez and Jonathan P How, "Aggressive collision avoidance with limited field-of-view sensing", Intelligent Robots and Systems (IROS) 2017 IEEE/RSJ International Conference on , pp. 1358-1365, 2017.
Show in Context View Article
Google Scholar
5.
Sikang Liu, Michael Watterson, Kartik Mohta, Ke Sun, Subhrajit Bhattacharya, Camillo J Taylor, et al., "Planning dynamically feasible trajectories for quadrotors using safe flight corridors in 3D complex environments", IEEE Robotics and Automation Letters , vol. 2, no. 3, pp. 1688-1695, 2017.
Show in Context View Article
Google Scholar
6.
Robin Deits and Russ Tedrake, "Efficient mixed-integer planning for uavs in cluttered environments", 2015 IEEE international conference on robotics and automation (ICRA) , pp. 42-49, 2015.
Show in Context View Article
Google Scholar
7.
James A Preiss, Karol Hausman, Gaurav S Sukhatme and Stephan Weiss, "Trajectory optimization for self-calibration and navigation", Robotics: Science and Systems , 2017.
Show in Context CrossRef Google Scholar
8.
Jesus Tordesillas, Brett T Lopez, John Carter, John Ware and Jonathan P How, "Real-time planning with multi-fidelity models for agile flights in unknown environments", 2019 IEEE International Conference on Robotics and Automation (ICRA) , 2019.
Show in Context View Article
Google Scholar
9.
Tom Schouwenaars, Eric Feron and Jonathan How, "Safe receding horizon path planning for autonomous vehicles", Proceedings of the Annual Allerton Conference on Communication Control and Computing , vol. 40, pp. 295-304, 1998, 2002.
Show in Context Google Scholar
10.
Helen Oleynikova, Zachary Taylor, Roland Siegwart and Juan Nieto, "Safe local exploration for replanning in cluttered unknown environments for microaerial vehicles", IEEE Robotics and Automation Letters , vol. 3, no. 3, pp. 1474-1481, 2018.
Show in Context View Article
Google Scholar
11.
Ozgur Koray Sahingoz, "Generation of bezier curve-based flyable trajectories for multi-uav systems with parallel genetic algorithm", Journal of Intelligent & Robotic Systems , vol. 74, no. 1-2, pp. 499-511, 2014.
Show in Context CrossRef Google Scholar
12.
Benoit Landry, Robin Deits, Peter R Florence and Russ Tedrake, "Aggressive quadrotor flight through cluttered environments using mixed integer programming", 2016 IEEE international conference on robotics and automation (ICRA) , pp. 1469-1475, 2016.
Show in Context View Article
Google Scholar
13.
Charles Richter, Adam Bry and Nicholas Roy, "Polynomial trajectory planning for aggressive quadrotor flight in dense indoor environments", Robotics Research , pp. 649-666, 2016.
Show in Context Google Scholar
14.
Daniel Damir Harabor, Alban Grastien et al., "Online graph pruning for pathfinding on grid maps", AAAI , 2011.
Show in Context Google Scholar
15.
Gurobi optimizer reference manual , 2018.
Show in Context Google Scholar
16.
Jack E Bresenham, "Algorithm for computer control of a digital plotter", IBM Systems journal , vol. 4, no. 1, pp. 25-30, 1965.
Show in Context View Article
Google Scholar
17.
Andreas Bircher, Mina Kamel, Kostas Alexis, Helen Oleynikova, Roland Siegwart and Receding horizon, "“next-best-view” planner for 3D exploration", Robotics and Automation (ICRA) 2016 IEEE International Conference on , pp. 1462-1468, 2016.
Show in Context View Article
Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
