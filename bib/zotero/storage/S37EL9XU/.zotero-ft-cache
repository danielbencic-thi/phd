IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2021 IEEE/RSJ International C...
Deadlock Prediction and Recovery for Distributed Collision Avoidance with Buffered Voronoi Cells
Publisher: IEEE
Cite This
PDF
Mohammed Abdullhak ; Andrew Vardy
All Authors
77
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Preliminaries
    III.
    Deadlock Prediction and Recovery Algorithm
    IV.
    Results
    V.
    Conclusions

Authors
Figures
References
Keywords
Metrics
Footnotes
Abstract:
This paper introduces a distributed multi-robot collision avoidance algorithm based on the concept of Buffered Voronoi Cells (BVC). We propose a novel algorithm for avoiding deadlocks consisting of three stages: deadlock prediction, deadlock recovery, and deadlock recovery success prediction. Simple heuristics (such as the right-hand rule) are often used to avoid deadlocks. Such heuristics might reduce deadlock in simple configurations and sparsely populated environments, but they begin to fail in complex configurations and more densely populated environments. We evaluate the performance of our algorithm using an open-source web-based multi-robot simulation. The results show that while the proposed algorithm does not eliminate the occurrence of deadlocks, it drastically reduces their occurrence, and leads to a considerable improvement in performance, especially in high-density environments. We also validate the real-world performance of the proposed algorithm in live experiments.
Published in: 2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 27 Sept.-1 Oct. 2021
Date Added to IEEE Xplore : 16 December 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 21487303
DOI: 10.1109/IROS51168.2021.9636609
Publisher: IEEE
Conference Location: Prague, Czech Republic
Funding Agency:
SECTION I.
Introduction

Multi-robot collision avoidance is a fundamental problem in autonomous robotics. Distributed collision avoidance is particularly important for multi-robot system applications where centralized control is not wanted or not possible, such as environment mapping, natural resource mining, industrial fault diagnosis and repair, and factory floor applications such as cleaning, sorting, and packaging. Many existing algorithms that solve the collision avoidance problem require centralized processing [1] , or extensive information such as the position, velocity, and trajectory details of other robots [2] , [3] , [4] , [5] . This information can either be communicated between the robots or sensed and estimated locally, both of which can lead to delays, and introduce errors.

This paper proposes a distributed collision avoidance algorithm integrating a novel deadlock avoidance algorithm into a base collision avoidance algorithm based on buffered Voronoi cells (BVC), similar to the one proposed by Zhou et al. [6] . We do not introduce any additional centralization nor cooperation requirements. The proposed algorithm is fully distributed and the execution of the algorithm on each robot relies only on the relative positions of neighboring robots. The proposed deadlock avoidance algorithm consists of three stages: deadlock prediction, deadlock recovery, and deadlock recovery success prediction. Early deadlock prediction and recovery has many benefits over sensing and reacting to deadlocks; it helps steer the robots clear of each others and increase the safety distances between them since sensing a deadlock often means the robots are already at the minimum distance possible without causing a collision. The lack of deadlock prediction can also lead to extreme congestion where many robots get too close to each others leaving the robots in the center stuck while waiting for outside robots to detect and recover from their deadlock configurations. Deadlock prediction can reduce this risk by predicting possible deadlocks caused by congestion and maneuvering towards clearer paths. Deadlock recovery success prediction ends deadlock recovery maneuvers as soon as it predicts that the deadlock has been successfully avoided, which helps decrease the distance and time to reach the goal by reducing the overshoot during these maneuvers.

Deadlocks happen when multiple robots block each others’ paths in a way that at least one robot is unable to advance along its planned trajectory to reach its goal. Another phenomenon that often arises in distributed collision avoidance algorithms is livelock, where a robot keeps alternating between a deadlock state and performing a deadlock recovery action to recover from that state.

Multi-robot collision avoidance has been extensively studied and many approaches have been developed. Velocity-based methods, which were proposed in [2] , have seen wide success and adoption. Reciprocal collision avoidance (RVO) [3] extends this approach by assuming that both agents will work to avoid the collision. The acceleration-velocity obstacle (AVO) model enforces acceleration constraints [7] . The Hybrid Reciprocal Velocity Obstacles (HRVO) approach eliminates oscillations by explicitly considering that other robots sense their surroundings and change their trajectories accordingly [8] . The Optimal Reciprocal Collision Avoidance (ORCA) algorithm increases efficiency by reducing the problem to a low-dimensional linear program [4] . Many other variations exist in this class [9] , [10] , [11] , [12] but they all require knowledge of the neighboring agents’ velocities in addition to their positions; while the method proposed here requires knowledge of the neighbors’ positions only.

Model predictive control (MPC) approaches have also been successfully used for collision avoidance. Shim et al. present a nonlinear model predictive control (NMPC) for multiple autonomous agents by combining stabilization of vehicle dynamics and decentralized trajectory generation [13] . Morgan et al. propose a model predictive control approach for real-time implementation of the sequential convex programming algorithm, resulting in decentralized computations and communication between neighboring agents only [14] . While Zhu and Alonso-Mora present a probabilistic collision avoidance by formulating a chance constrained nonlinear model predictive control problem (CCNMPC) [15] .

Many other approaches have also been proposed such as deep reinforcement learning [16] which offloads online computations to an offline learning procedure, gyroscopic forces and scalar potentials fields [17] , and control barrier functions (CBF) [18] among others.

Our approach is based on dividing the environment into non-overlapping regions where agents can locally plan their trajectories to avoid collisions with other robots. Zhou et al. [6] use the Voronoi diagram for partitioning and introduce the buffered Voronoi cell (BVC) which takes the robot shape into account to guarantee collision avoidance. This concept is extended by other papers to take uncertainty into account [19] , [20] . Weighted buffered Voronoi cells were also introduced to explore selfish or prioritized behavior among agents [21] . These approaches either do not specify any deadlock avoidance behavior or use simple heuristics such as the right-hand rule, which do not always perform well and tend to fail in densely populated environments. We extend these methods by proposing a deadlock avoidance algorithm with three stages for early deadlock prediction, deadlock recovery, and deadlock recovery success prediction and integrating it into a collision avoidance algorithm based on buffered Voronoi cells.
SECTION II.
Preliminaries
A. Voronoi Diagram

The Voronoi diagram is defined by a set of ‘sites’ which partition the environment into a set of non-overlapping regions, one for each site. The region for a site s consists of all points closer to s than to any other site [22] . Each region is called a Voronoi cell [23] . For a finite number of sites s 1 , … , s n : n > 2 in the Euclidean plane, the Voronoi cell of s i is:
V ( s i ) = { x ∣ ∥ x − x i ∥ ≤ ∥ x − x j ∥  for  j ≠ i , j ≤ n }
View Source \begin{equation*}V\left( {{s_i}} \right) = \left\{ {x\mid \left\| {x - {x_i}} \right\| \leq \left\| {x - {x_j}} \right\|{\text{ for }}j \ne i,j \leq n} \right\}\end{equation*} where x i is the location vector of s i .

In the context of collision avoidance, a Voronoi diagram for the whole environment is generated with the robots’ positions as the sites. This divides the environment into non-overlapping regions around each robot. If each robot stays completely within its own cell, collisions can be avoided. To guarantee this condition, the Buffered Voronoi Cell (BVC) is introduced.
B. Buffered Voronoi Cell

Assume we have a set of N disk-shaped robots as in figure 1 , with radius r s , and center points p 1 , … , p n , in a collision-free configuration (the distance between any two robots is larger than 2 r s ). The buffered Voronoi cell of robot i is its Voronoi cell retracted by its radius r s , so that if the center of the robot is within its buffered Voronoi cell, the entirety of its body is guaranteed to be within its Voronoi cell [6] .
Fig. 1:

Voronoi diagram and buffered Voronoi Cells for 10 robots.

Show All
C. Collision Avoidance with Buffered Voronoi Cells

For a set of disk-shaped robots in a collision-free configuration, the definition of the buffered Voronoi cell guarantees that the BVC of each robot is non-empty and contains its center. If each robot’s incremental movements are restricted to lie within their own BVC, then their new positions are guaranteed to be collision-free for all future time-steps [6] .

Thus, distributed collision avoidance between this group of robots can be achieved by each robot executing the following steps at each time step until they reach their own goals: 1) Calculate the Voronoi diagram and the buffered Voronoi cell based on the positions of the robot and its sensed neighbors. 2) Calculate a local waypoint within the buffered Voronoi cell. 3) Move towards this local waypoint.

Similar to other distributed collision avoidance algorithms, the lack of coordination between robots can lead to deadlocks, where robots block each other in a way that prevents at least one of them from reaching its final goal. Some algorithms use simple heuristics to solve these deadlocks such as the right-hand rule, where each robot moves to its right when facing another robot [6] , [21] . In another technique the robot chooses one of the nearby edges of its current buffered Voronoi cell to detour along when in a deadlock configuration [20] , [6] .

These heuristics perform well in sparsely populated environments but fail to reliably prevent deadlocks as the population size increases. Figure 2 shows comparison between the collision avoidance algorithm introduced in [6] with right-hand heuristics (in blue) and the proposed collision avoidance algorithm (in orange). Each algorithm is used to drive the robots from random starting positions towards random goals within the simulation environment described in Section IV-A . The number of robots in the environment was increased from 10 to 100 by a step of 10 robots and for each configuration, 100 simulations were performed for both algorithms, each lasting 2000 time steps. The long run time is used to ensure that the robots that did not reach their goals were trapped in deadlocks, since even for the highest number of robots used, most robots reach their final state by time step 600 (this can be clearly seen in figure 5 - case 4, which uses the same number of robots and random configuration as these experiments). Figure 2 shows the average total distance between the robots and their respective goals after 2,000 time steps for both algorithms. We can see how using the right-hand heuristics (in blue) all robots can reach their goals in small population sizes, but as the number of robots increases from 10 (environment occupancy rate of 1.3%) to 100 (13%) the total distance increases drastically as a result of more and more robots getting stuck in deadlocks. While for the proposed algorithm (in orange), the total distance barely increases as more robots are added to the environment and at 100 robots only reaches a tenth its corresponding value when using the right-hand heuristics.
Fig. 2:

Mean and standard deviation of remaining total distance to goals after 2,000 time steps for 100 simulations for the right-hand heuristics (blue) and the proposed algorithm (orange).

Show All
SECTION III.
Deadlock Prediction and Recovery Algorithm

In this section, we will first outline the proposed collision avoidance algorithm, then describe each of its stages.
A. Collision Avoidance Algorithm Overview

We add to the assumptions given in Section II-B in that the set of n disk-shaped robots starts in a collision-free configuration and each robot is assigned a goal g , with the goals also in a collision-free configuration. We propose the following distributed collision avoidance algorithm.

At time t , each robot senses its own position p t , and positions of neighboring robots, forming the set N t , where N t is the set of sensed neighbors’ positions at time t. Then it calculates its current buffered Voronoi cell (BVC) B t based on these measurements. A local waypoint g t within the current BVC is then selected. Once g t is found, the control input u t is calculated to drive the robot towards it for that time step. This process is repeated until the robot reaches it’s goal within an acceptable distance ε such that
∥ g − p t ∥ < ε .
View Source \begin{equation*}\left\| {g - {p_t}} \right\| < \varepsilon .\end{equation*}

By default, the waypoint at time t , g t , is the point within the BVC that is closest to the goal, we will call this special point g ∗ t . However, if a deadlock is detected or if this waypoint is predicted to lead to a deadlock configuration according to the proposed deadlock prediction step, or if the robot is still recovering from previous deadlock, a different waypoint is selected in the deadlock recovery step. An overview is given in Algorithm 1 .
Algorithm 1. Collision Avoidance Algorithm
B. Deadlock Prediction

We propose a deadlock prediction algorithm based on the position of the waypoint g t at each time step with respect to the positions of neighboring robots and the goal g.

We know that a deadlock can only occur when the robot is located at g ∗ t , the closest point to the goal within its buffered Voronoi cell, otherwise, there would be a closer point and according to Algorithm 1 , the robot would move towards that point for at least one time step. Furthermore, Zhou et al. [6] prove that this point can only be a) A vertex of the BVC or b) On an edge of the BVC such that a line from p t to g ∗ t is perpendicular to this edge, and the neighboring robot who shares the Voronoi edge must also be located on the same line segment. Case b is trivial due to the collinear requirement which can be broken with any deviation to either side by either robot to break the Collinear configuration, thus we are only interested in predicting the case a where g ∗ t is a vertex of the BVC.

Since this deadlock configuration only occurs when the robot is located at g ∗ t , and g ∗ t is a vertex of the BVC, then by definition of the BVC, the distance between the robot and the neighboring robots n i , n j positioned at p it and p jt who share the Voronoi edges incident to g ∗ t must be 2 r s :
∥ g ∗ t − p i t ∥ = ∥ ∥ g ∗ t − p j t ∥ ∥ = 2 r s (1)
View Source \begin{equation*}\left\| {g_t^{\ast} - {p_{{i_t}}}} \right\| = \left\| {g_t^{\ast} - {p_{{j_t}}}} \right\| = 2{r_s}\tag{1}\end{equation*}

Proposition 1 : For condition (1) to be satisfied, the distance between n i and n j , must be equal to or less than 4 r s :
∥ ∥ p i t − p j t ∥ ∥ ≤ 4 r s (2)
View Source \begin{equation*}\left\| {{p_{{i_t}}} - {p_{{j_t}}}} \right\| \leq 4{r_s}\tag{2}\end{equation*}

Proof : Let us assume that ∥ ∥ p i t − p j t ∥ ∥ > 4 r s , then for any point x ∈ ℝ 2 not on the line segment between p i t and p j t :
∥ x − p i t ∥ + ∥ ∥ x − p j t ∥ ∥ > ∥ ∥ p i t − p j t ∥ ∥ ∀ x ∈ R 2
View Source \begin{equation*}\left\| {x - {p_{{i_t}}}} \right\| + \left\| {x - {p_{{j_t}}}} \right\| > \left\| {{p_{{i_t}}} - {p_{{j_t}}}} \right\|\quad \forall x \in {\mathbb{R}^2}\end{equation*} then,
∥ x − p i t ∥ + ∥ ∥ x − p j t ∥ ∥ > 4 r s ∀ x ∈ R 2
View Source \begin{equation*}\left\| {x - {p_{{i_t}}}} \right\| + \left\| {x - {p_{{j_t}}}} \right\| > 4{r_s}\quad \forall x \in {\mathbb{R}^2}\end{equation*}

If we choose x as a point where,
∥ ∥ x − p j t ∥ ∥ = 2 r s
View Source \begin{equation*}\left\| {x - {p_{{j_t}}}} \right\| = 2{r_s}\end{equation*} then it must be that,
∥ x − p i t ∥ > 2 r s
View Source \begin{equation*}\left\| {x - {p_{{i_t}}}} \right\| > 2{r_s}\end{equation*} which contradicts condition (1) .

When condition (1) is satisfied, we are only interested in predicting deadlock configurations where the current way-point g ∗ t and the goal g are on different sides of the line between the neighbors n i and n j . Otherwise the deadlock would be a result of one of the neighboring robots being positioned too close to the goal, preventing the robot from reaching it. Performing a deadlock recovery maneuver in this case would drive the robot further away from the goal.

For two robots n i ( x i , y i ) and n j ( x j , y j ), we can find on which side of line n i , n j − → − − a given point g ( x g , y g ) is located by calculating the following term:
d = ( x g − x i ) ( y j − y i ) − ( y g − y i ) ( x j − x i )
View Source \begin{equation*}d = ({x_g} - {x_i})({y_j} - {y_i}) - ({y_g} - {y_i})({x_j} - {x_i})\end{equation*}

The sign of d indicates on which side of the line the point lies and d = 0 means that it lies exactly on the line.

Then we can formulate the previous condition, for the local waypoint at time t , g ∗ t ( x g ∗ t , y g ∗ t ) and the goal g ( x g , y g ) to be on different sides of the line n i , n j − → − − connecting the two neighbors n i t ( x i t , y i t ) and n j t ( x j t , y j t ) as:
s i g n ( ( x g ∗ t − x i t ) ( y j t − y i t ) − ( y g ∗ t − y i t ) ( x j t − x i t ) ) ≠ s i g n ( ( x g t − x i t ) ( y j t − y i t ) − ( y g t − y i t ) ( x j t − x i t ) ) (3)
View Source \begin{align*} & sign\left( {\left( {{x_{g_t^{\ast}}} - {x_{{i_t}}}} \right)\left( {{y_{{j_t}}} - {y_{{i_t}}}} \right) - \left( {{y_{g_t^{\ast}}} - {y_{{i_t}}}} \right)\left( {{x_{{j_t}}} - {x_{it}}} \right)} \right) \ne \\ & sign\left( {\left( {{x_{{g_t}}} - {x_{{i_t}}}} \right)\left( {{y_{{j_t}}} - {y_{{i_t}}}} \right) - \left( {{y_{{g_t}}} - {y_{{i_t}}}} \right)\left( {{x_{{j_t}}} - {x_{{i_t}}}} \right)} \right) \tag{3}\end{align*}

Figure 3 shows two examples where condition (1) is satisfied in both, while condition (3) is only satisfied in example (b). The red sector corresponds to the points where a goal would lead to a deadlock according to condition (1) , since the closest point to it within the BVC would be the vertex. Otherwise, the closest point to the goal would be other than the vertex and the robot can move towards it according to Algorithm 1 without causing a deadlock.

Using conditions (1) , (2) , and (3) we propose our deadlock prediction algorithm to be performed for g ∗ t at each time step as: Find N , the set of neighbors within kr s distance to g ∗ t , this is similar to condition (1) , after replacing 2 with constant k ≥ 2 (we used k = 3) to achieve earlier prediction of deadlock:
N = { n i ∈ N t ∣ ∥ g ∗ t − p n i ∥ < k r s }
View Source \begin{equation*}N = \left\{ {{n_i} \in {N_t}\mid \left\| {g_t^{\ast} - {p_{{n_i}}}} \right\| < k{r_s}} \right\}\end{equation*}

We then calculate the number of neighbors satisfying this condition as |N| , the cardinality of set N. If | N| < 2, we predict no deadlock will occur, otherwise we check for the next condition.

We look for neighbor pairs n i , n j in N , within 4 r s of each other and for each pair, we check whether g t and g ∗ t are on opposite sides of the line n i , n j − → − − . If this condition is satisfied for any pair, then a deadlock is predicted.
Fig. 3:

Examples of deadlock configurations where condition (3) is satisfied (a) and where it is not satisfied (b), while condition (1) is satisfied in both cases. It is clear that a detour around one of the neighboring robots in the first case would be helpful, but not in the second case. The red sector corresponds to the points where a goal would lead to a deadlock according to condition (1) .

Show All
C. Deadlock Recovery

We propose a multi-step deadlock recovery algorithm; when a deadlock is predicted or detected, the robot goes into deadlock recovery state, during which multiple maneuvers are performed until deadlock recovery success is predicted or the maximum number of maneuvers M is reached.

During each maneuver, simple heuristics are used to select a detour waypoint within the current buffered Voronoi cell, g t ∈ B t (selection process is detailed below). The robot then moves towards this waypoint at each time step t until one of following condition occurs: a) The deadlock recovery success prediction algorithm predicts that deadlock recovery has succeeded, in which case the deadlock recovery process is terminated, and the robot goes back to normal operation state. b) The waypoint g t is reached or it goes outside of the new buffered Voronoi cell -as a result of the robot moving and its buffered voronoi cell changing according to its new position and the new positions of its neighboring robots-, then a new maneuver is re-initiated, and a new detour waypoint g t is calculated if the maximum number of maneuvers M has not been reached, otherwise, the deadlock recovery process is terminated, and the robot goes back to normal operation state.

There are alternate approaches which select the detour waypoint as a point on one of the adjacent edges to the vertex where deadlock was detected [6] , [21] . While this works well in some cases, it leads to poor performance in many others. For example, when the adjacent edges, and consequently, the distance between the deadlock position and the detour waypoint are very short, the robot fails to recover from the deadlock and instead goes into a livelock state where it keeps alternating between these two points.

To increase the likelihood of successful deadlock recovery, we propose a detour point that takes into account the shape of the BVC and the positions of the neighboring robots with respect to the goal. We call this the outermost point o t and define it as the point within the BVC that is furthest from the line between the position of the robot and the goal, p t g − → as shown in Figure 4 . We formulate o t as:
o t = v i ∈ V B V C ∣ ∥ ∥ v i − v ′ i ∥ ∥ ≥ ∥ ∥ v j − v ′ j ∥ ∥ ∀ v j ∈ V B V C , v i ≠ v j
View Source \begin{equation*}{o_t} = {v_i} \in {V_{BVC}}\mid \left\| {{v_i} - v_i^\prime } \right\| \geq \left\| {{v_j} - v_j^\prime } \right\|\forall {v_j} \in {V_{BVC}},{v_i} \ne {v_j}\end{equation*} where V BVC is the set of all vertices of the BVC for the first maneuver when deadlock recovery was initiated, and only the vertices of the BVC that are on the same side of p t g − → as the initial o t was (to keep the robot heading in one direction for the whole recovery), v i is one of the vertices of V BVC , and v ′ i is the projection of v i on p t g − → .

To decrease overshooting, we can use a point between the robot’s current position and o t as the detour point g t :
g t = ( 1 − c ) p t + c o t
View Source \begin{equation*}{g_t} = (1 - c){p_t} + c{o_t}\end{equation*} where c is the proportion of the distance for which the robot moves towards the outermost point, o t .

D. Deadlock Recovery Success Prediction

Deadlock recovery success prediction works by using heuristics based on the conditions that predicted the deadlock and the locations of the robot and neighboring robots; the robot tracks the position of neighbors near the location of the last deadlock and detects whether the robot’s maneuver has caused a deadlock condition to be broken.

From deadlock conditions (1) and (3) we can deduce that in a deadlock configuration where the robot is located at g ∗ t , and g ∗ t is a vertex of the BVC; the neighboring robots n 1 and n 2 who share the Voronoi edges connected to g ∗ t must be on different sides of the line p t g − → connecting the robot position and its goal. We use the failure of this condition as prediction of success of this deadlock maneuver.

We propose a condition requiring all robots within distance kr s : k ≥ 2 (where k is the same constant used in the deadlock prediction algorithm) to be on the same side of the line p t g − → . Furthermore, the distance between any of these robots and the line p t g − → must be larger than the radius of the robot.

For a robot at position p t , moving towards goal g , and currently recovering from a deadlock that occurred at position p d , we define N as the subset of all neighbors at time t , N t , that are located within kr s of p d :
N = { n i ∈ N t : ∥ p d − p n i ∥ < k r s }
View Source \begin{equation*}N = \left\{ {{n_i} \in {N_t}:\left\| {{p_d} - {p_{{n_i}}}} \right\| < k{r_s}} \right\}\end{equation*}

We define s i as the side of line p t g − → on which neighbor n i is located,
s i = ( x n i − x p t ) ( y g − y p t ) − ( y n i − y p t ) ( x g − x p t ) ,
View Source \begin{equation*}{s_i} = \left( {{x_{{n_i}}} - {x_{{p_t}}}} \right)\left( {{y_g} - {y_{{p_t}}}} \right) - \left( {{y_{{n_i}}} - {y_{{p_t}}}} \right)\left( {{x_g} - {x_{{p_t}}}} \right),\end{equation*} and the distance between neighbor n i and line p t g − → as,
m i = ∥ ∥ p n i − p n ′ i ∥ ∥ ,
View Source \begin{equation*}{m_i} = \left\| {{p_{{n_i}}} - {p_{n_i^\prime }}} \right\|,\end{equation*} where p n ′ i is the projection of p n i on the line p t g − → .

We can then formulate the proposed conditions for deadlock recovery success:
s i = s j ∀ i , j ∣ n i , n j ∈ N a n d m i > r s ∀ i ∣ n i ∈ N
View Source \begin{equation*}{s_i} = {s_j}\forall i,j\mid {n_i},{n_j} \in N\,and\,{m_i} > {r_s}\forall i\mid {n_i} \in N\end{equation*}

Fig. 4:

Example of a deadlock prediction and recovery: Step 1 shows how the outermost point o t and the detour point g t were selected after a deadlock configuration was predicted at g ∗ t . Steps 2-4 show the following maneuvers until normal operation is resumed on step 5 ( g t = g ∗ t ) .

Show All
Fig. 5:

Left: robots and goals starting configurations for the 4 simulated cases with 16 robots instead of 100 for clarity. Right: total distance to goal over time and minimum distance to neighbors (dashed) with safety distance in red (dashed) for all simulation cases 1-4 respectively. Green color for proposed algorithm and blue for the BVC algorithm with right-hand heuristics (each simulation is presented as a single line, with the average for each algorithm in bold.)

Show All
SECTION IV.
Results
A. Simulations

We present simulation results of our collision avoidance algorithm integrating the proposed deadlock avoidance algorithm and compare it to a buffered Voronoi cell based collision avoidance algorithm with right-hand deadlock recovery heuristics.

All simulations are performed in an interactive open-source web-based multi-robot simulation 1 . A set of disk-shaped single-integrator robots moving in a planar space are simulated, each robot is assigned a specific goal, and for each simulation, the same collision avoidance algorithm is applied for all robots. Two metrics are tracked and compared: the total distance between the robots and their goals and the minimum distance between the robots at each time step. We compare the performance of 2 algorithms, our collision avoidance algorithm integrating the proposed deadlock avoidance algorithm and a buffered Voronoi cell based collision avoidance algorithm with the right-hand deadlock recovery heuristics. Performance is compared across 4 different cases, all performed in a 800 * 500 cm environment, with 100 robots and 100 simulations per algorithm.

First, 100 robots with 3 cm radius are placed around a circle, with their respective goals assigned to the point directly across them on the same circle, with a small displacement to break the symmetry. Next, 100 robots (5 cm radius) are placed on a square, and the goals are set as their positions reflected across the y-axis. Then, the same configuration is used but the goals are reflected across the origin of the environment as shown in Figure 5 . For the final case, a set of 100 robots (5 cm radius) are assigned random starting positions and goals. Figure 5 shows these 4 configurations.

Figure 5 shows the performance metrics across the run time of these cases, the total distance to goal is shown for each simulation individually. The algorithm with the right-hand heuristics is shown in light blue and our algorithm with the proposed deadlock avoidance algorithm is shown in light green, the means of these simulations are also highlighted in blue and green respectively. The safety distance (2 r s ) is also shown for each case as a dashed red line, and the minimum distances between robots are shown as two dashed lines in blue and green for the two previous algorithms, respectively. No collisions occurred in any of the simulations.

Across all cases, performance improves dramatically when using the proposed algorithm. In the first three cases, while both algorithms are eventually able to drive all the robots to their respective goals, the time taken clearly shows the benefits of the early deadlock prediction algorithm, with the proposed algorithm driving the robots to their goals faster in all cases, especially in the most challenging cases (cases 1 and 3), where the robots reach their goals almost twice as fast on average.

More importantly, the last case demonstrates the importance of the proposed deadlock prediction and recovery stages in real scenarios. The algorithm with the right-hand heuristics fails to drive many robots to their goals due to unsolved deadlocks, shown by the total distance between the robots and their goals reaching a minimum of 100 cm on average across all simulations, and in some simulations as high as 250 cm.

In contrast, the proposed algorithm is able to resolve most deadlocks and drive many more robots to their goals, with the total distance between the robots and their goals reaching a minimum of around 10 cm on average across all simulations, almost 10 times better than the previous algorithm.

It is also important to note that some of these unresolved deadlocks are due to the random nature of this case where some robots become completely surrounded by static robots (already reached their goals) and it is impossible to resolve these cases with the current restrictions (distributed algorithm without any communication between agents).
Fig. 6:

Real-world validation for case 3: (a) paths with time encoded by transparency; (b) initial and final configurations.

Show All
B. Real-world Validation

Our experimental platform is a set of Pololu 3pi robots fitted with Raspberry Pi 3 A+ single-board computers to perform the on-board processing. Each robot is also fitted with a unique AprilTag [24] , and the localization and sensing are performed with an external server fitted with an overhead camera using software previously developed for unmanned surface vehicles [25] . The server continuously detects the robots’ positions and simulates their sensor data by restricting the passed positions of neighbors for each robot to only those within their own sensing distance. Each robot is assigned a unique AprilTag as its goal, its position is obtained by the robot once at the start of the experiment and used throughout the experiment.

We performed validation experiments to give confidence to the results obtained in our simulator. We used initial and final configurations arranged in cases 2 and 3 (see Fig. 5 ), with 9 robots instead of 100. Fig. 6 shows the paths taken by all robots, as well as the initial and final configurations of roobots. The relationship between the robots’ initial configuration and the configuration of goals here is case 3. For this case all robots reached their goals without any collisions and the same result was obtained for case 2 (not shown). We repeated both experiments with tighter spacing between the robots and between the goals so that a robot could not pass between two goals. In these experiments all robots reached their goals except the one in the center, since its path was blocked by surrounding robots who had already reached their goals.

We also performed targeted experiments where robots were placed in challenging configurations certain to lead to deadlocks. Figure 7 shows the initial configurations and the paths taken by a single robot under the control of each algorithm. It shows how the algorithm with right-hand heuristics failed to resolve the deadlock and ended up in livelock, while the proposed algorithm successfully drove the robot to its goal.
SECTION V.
Conclusions

This paper presented a distributed multi-robot collision avoidance algorithm integrating a novel deadlock avoidance algorithm with a buffered Voronoi cells based approach. Collision avoidance is guaranteed and only the position of the robot and neighboring robots is needed. While our algorithm does not completely eliminate deadlocks, both simulations and experiments showed that it offers drastic improvement in resolving deadlocks compared to the buffered Voronoi cells based approach with right-hand heuristics.
Fig. 7:

Left column: initial configuration (robot with tag 11 has X as its goal). Middle column: paths taken with the BVC collision avoidance algorithm with right-hand heuristics. Right column: paths taken with the proposed algorithm.

Show All

Authors
Figures
References
Keywords
Metrics
Footnotes
   Back to Results   
More Like This
Cooperative Event Triggered Control for Multi-Robot Systems with Collision Avoidance

2021 40th Chinese Control Conference (CCC)

Published: 2021
A Collision Avoidance Algorithm for Idle Robots in Multi-robot System

2021 IEEE International Conference on Networking, Sensing and Control (ICNSC)

Published: 2021
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
