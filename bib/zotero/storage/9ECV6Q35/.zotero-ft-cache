IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathZoom.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2021 IEEE/RSJ International C...
B-spline path planner for safe navigation of mobile robots
Publisher: IEEE
Cite This
PDF
Ngoc Thinh Nguyen ; Lars Schilling ; Michael Sebastian Angern ; Heiko Hamann ; Floris Ernst ; Georg Schildbach
All Authors
169
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Preliminaries
    III.
    B-Spline and equivalent Bézier curves
    IV.
    B-spline path planning with minimal length
    V.
    Simulation and experiment results

Show Full Outline
Authors
Figures
References
Keywords
Metrics
Media
Footnotes
Abstract:
We propose a 2D path planning algorithm in a non-convex workspace defined as a sequence of connected convex polytopes. The reference path is parameterized as a B-spline curve, which is guaranteed to entirely remain within the workspace by exploiting the local convexity property and by formulating linear constraints on the control points of the B-spline. The novelties of the paper lie in the use of the equivalent Bézier representation of the B-spline curve, which significantly reduces the conservatism in the local convexity bound and in the integration of these constraints into a convex quadratic optimization problem, which minimizes the curve length. The algorithm is successfully validated in both simulations and experiments, by providing obstacle-free reference paths on real occupancy grid maps obtained from the laser scan data of a mobile robot platform.
Published in: 2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 27 Sept.-1 Oct. 2021
Date Added to IEEE Xplore : 16 December 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 21504116
DOI: 10.1109/IROS51168.2021.9636612
Publisher: IEEE
Conference Location: Prague, Czech Republic
SECTION I.
Introduction

Over the last decade, research and industrial communities have shown increasing interest in autonomous mobile robots. For safe navigation, the robot is equipped with different types of sensors, such as cameras or LIDAR (Light Detection and Ranging) sensors, in order to incrementally build and/or improve a map of its environment, and to localize itself in that map, via SLAM (simultaneous localization and mapping). Then a motion planning strategy is applied in order to navigate the robot from an initial position to a goal position, while moving strictly inside obstacle-free regions [1] [2] – [3] . To this end, numerous path-planning approaches have been proposed in the robotics literature, and successfully applied in various problem settings. The most popular ones are different incarnations based on the A* and RRT (Rapidly exploring Random Tree) algorithms [4] . Recently, approaches using numerical optimization have gained increasing popularity [1] [2] – [3] . A common drawback of all of these methods is that they rely on discrete spatial data (e.g. grid map, discrete dynamics) for path planning and collision checking, which necessarily leads to a trade-off between computational tractability (coarse mesh) and accuracy (fine mesh). Hence, a different line of research has considered continuous interpolating curves with geometric constraints for obstacle-free path planning. A common type of curve used for this is B-splines, which have been successfully employed for path planning problems of a wide range of systems such as autonomous passenger vehicles [5] , for unmanned heavy-duty vehicles in mines [6] , and for autonomous drones [7] , [8] . This is thanks to their well-known property of being locally bounded by a convex polygon defined through their control points, called a control polygon [7] [8] [9] – [10] . Therefore, by choosing all control polygons to lie entirely within obstacle-free areas of the map and enforcing the control points to be contained in the control polygons, the resulting B-spline path is guaranteed to be collision-free; see Fig. 1 for an illustration.
Fig. 1: - Comparison between the local B-spline control boundary (black-plotted polytope with triangle vertices) versus the Bézier boundary (red-filled polytope with circle vertices) of the blue section of a fourth-order B-spline curve.
Fig. 1:

Comparison between the local B-spline control boundary (black-plotted polytope with triangle vertices) versus the Bézier boundary (red-filled polytope with circle vertices) of the blue section of a fourth-order B-spline curve.

Show All

However, the approach is still conservative as the B-splines do not actually fill the entire control polygons. It is known from the Computer-Aided-Design (CAD) community since the 1980s that there exist much tighter bounds of B-spline curves (w.r.t. the standard control polygon), namely the control polygon of an equivalent Bézier curve [11] , as illustrated in Fig. 1 . This fact is used in this paper in order to significantly reduce the conservatism compared to previous B-spline based path planners [6] [7] [8] – [9] and helps to bring the following novelties to the state of the art:

    We propose the constraints for a B-spline curve to stay inside a sequence of connected polytopes using the equivalent Bézier representation (in comparison with the direct use of B-spline control points [6] [7] [8] [9] – [10] ). This provides a better approximation of the curve’s shape (cf. Fig. 1 ), more choices of the control points (i.e. serving as the decision variables) and further allows to formulate the constraints with clear interpretation (i.e. enforcing each interval inside each polytope).

    By first defining a sequence of polytopes to move and then constraining a B-spline curve to fully stay within this sequence, we can formulate the final path planning problem as a convex optimization problem (with quadratic cost and linear constraints). This can be solved efficiently by standard convex solvers which are also readily available on embedded platforms with limited computing capability.

    The algorithm is validated using a real mobile robot platform. The implementation includes: simplifying the surrounding environment (e.g. obtained from LIDAR data or the occupancy grid map) into polygon region, adding safety offset, decomposing the region into convex polytopes, finding a suitable sequence of polytopes and finally planning the B-spline path.

SECTION II.
Preliminaries
A. Problem statement

The considered problem is to navigate between two points in a safe region, which is assumed to be a non-convex, connected region consisting of an ordered list of q ≥ 2 connected polytopes { S 1 , … , S q } where S 1 contains the starting point P s and S q contains the goal point P f :
P s ∈ S 1 , P f ∈ S q . (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{P_s} \in {S_1},{}{P_f} \in {S_q}.\tag{1}\end{equation*}

Our main concern is to generate a smooth geometric path p ( t ) defined in terms of a parameter t (note that t can represent path length, pseudo-time increment, etc. depending on specific circumstances) as follows:
p ( t ) : [ t s , t f ] → R 2 , (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*}p(t){}:{}[{t_s},{}{t_f}] \to {{\mathbb{R}}^2},\tag{2}\end{equation*} which connects two points P s and P f , both in ℝ 2 , i.e.:
p ( t s ) = P s , p ( t f ) = P f . (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*}p({t_s}){} = {P_s},{}p({t_f}){} = {P_f}.\tag{3}\end{equation*}

The path p ( t ) is required to continuously stay in the region S which is defined as the union of the q connected polytopes S i , i ∈ {1 , … , q }:
p ( t ) ∈ S ≜ S 1 ∪ S 2 ∪ ⋯ ∪ S q , ∀ t ∈ [ t s , t f ] , (4)
View Source Right-click on figure for MathML and additional features. \begin{equation*}p(t) \in {\mathcal{S}} \triangleq {S_1} \cup {S_2} \cup \cdots \cup {S_q},\forall t \in [{t_s},{}{t_f}],\tag{4}\end{equation*} in which, two consecutive polytopes S i , S i +1 share exactly one edge E i connecting two common vertices (cf. Fig. 2 ):
E i = S i ∩ S i + 1 , ∀ i ∈ { 1 , … , q − 1 } . (5)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{E_i} = {S_i} \cap {S_i}_{ + 1},\forall i \in \{ 1, \ldots ,{}q - 1\} .\tag{5}\end{equation*}

B. Transition zones of two connected polytopes

In order to conveniently constrain the path in between the aforementioned connected polytopes (i.e. each pair has only one sharing edge), we define the so-called transition zone which, defined for two connected polytopes, represents a subset in one polytope whose union with the other connected polytope is convex (cf. Figure 2 ).
Fig. 2: - Three connected polytopes and their transition zones according to Definition 1.
Fig. 2:

Three connected polytopes and their transition zones according to Definition 1.

Show All

Definition 1 (Transition zone): Given two connected polytopes S i and S i +1 as used in (5) , we define the transition zone T i ⊆ S i +1 as follows:
T i = S i + 1 ∩ ( S i | E i ) , (6)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{T_i} = {S_i}_{ + 1} \cap ({S_i}|{E_i}),\tag{6}\end{equation*} in which E i is the common edge as defined in (5) , and the operation ( S i |E i ) gives the (possibly open) polytope formed by the half-space representation of S i without the constraint corresponding to the edge E i . □

Definition 2 (Extended polytope): We define S i,i +1 as the extension of the polytope S i towards the polytope S i +1 :
S i , i + 1 = S i ∪ T i , (7)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{S_{i,i}}_{ + 1} = {S_i} \cup {T_i},\tag{7}\end{equation*} with T i the transition zone defined as in (6) . Since we are considering only q polytopes { S 1 , … , S q } as in (4) , we directly define S q,q +1 ≜ S q . Note that any extended polytope S i,i +1 as defined in (7) is convex. □

Regarding our path generation problem defined in (4) , one of the most promising solutions which allows us to validate both continuous and geometrical constraints (4) is to employ B-spline curves for constructing the reference path [8] , [10] , [12] . Therefore, the next section will give a brief definition of general B-spline curves and their local convex boundary formed by the equivalent Bézier curves of the same degree.
SECTION III.
B-Spline and equivalent Bézier curves
A. Definition and properties of B-spline curves

In this section, we recapitulate the definition and the standard convexity properties of B-spline curves [9] , [10] , [12] , [13] using notations adapted from [10] , [12] .

A B-spline curve z ( t ) : [ t s , t f ] → ℝ 2 of degree d is constructed by using n control points P i ∈ R 2 ( i ∈ { 1 , … , n } ) with n ≥ d + 1 as follows:
z ( t ) = ∑ i = 1 n P i B i , d , ξ ( t ) = P B d , ξ ( t ) , t ∈ [ t s , t f ] , (8)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(t) = \sum\limits_{i = 1}^n {{P_i}} {B_{i,d,\xi }}(t) = {\mathbf{P}}{{\mathbf{B}}_{d,\xi }}(t),t \in \left[ {{t_s},{t_f}} \right],\tag{8}\end{equation*} in which, P ≜ [ P 1 ⋯ P n ] ∈ R 2 × n and B d , ξ ( t ) ≜ [ B 1 , d , ξ ( t ) … B n , d , ξ ( t ) ] ⊤ : R → R n . The so-called knot vector ξ is a non-decreasing sequence of ( n + d + 1) time instants:
ξ = { τ 1 ≤ τ 2 ≤ ⋯ ≤ τ n + d + 1 } , (9)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\xi = \{ {\tau _1} \leq {\tau _2} \leq \cdots \leq {\tau _n}_{ + d + 1}\} ,\tag{9}\end{equation*} and B i,d,ξ ( t ) is the i th B-spline basis function of degree d constructed using the knot vector ξ from (9) and is recursively defined as follows:
B i , 0 , ξ ( t ) = { 1 , 0 , t ∈ [ τ i , τ i + 1 ) ,  otherwise , B i , d , ξ ( t ) = t − τ i τ i + d − τ i B i , d − 1 , ξ ( t ) + τ i + d + 1 − t τ i + d + 1 − τ i + 1 B i + 1 , d − 1 , ξ ( t ) . (10) (11)
View Source Right-click on figure for MathML and additional features. \begin{align*} & {B_{i,0,\xi }}(t) = \begin{cases} {1,}&{t \in \left[ {{\tau _i},{\tau _{i + 1}}}\right),} \\ {0,}&{{\text{ otherwise ,}}} \end{cases}\tag{10} \\ & \begin{array}{c} {B_{i,d,\xi }}(t) = \frac{{t - {\tau _i}}}{{{\tau _{i + d}} - {\tau _i}}}{B_{i,d - 1,\xi }}(t) \\ + \frac{{{\tau _{i + d + 1}} - t}}{{{\tau _{i + d + 1}} - {\tau _{i + 1}}}}{B_{i + 1,d - 1,\xi }}(t).\end{array}\tag{11}\end{align*}

The aforementioned time instants τ j ( j ∈ {1 , … , n + d + 1}) of ξ can be chosen following either periodic uniform, open-uniform or non-uniform methods [10] . In this work, we employ the open-uniform knot vector ξ in which the time instants τ j ( j ∈ {1 , … , n + d + 1}) from (9) are clamped and uniformly distributed by:
τ j = ⎧ ⎩ ⎨ t s , t s + ( j − d − 1 ) Δ , t f , 1 ≤ j ≤ d , d + 1 ≤ j ≤ n + 1 , n + 2 ≤ j ≤ n + d + 1 , (12)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{\tau _j} = \begin{cases} {{t_s},}&{1 \leq j \leq d,} \\ {{t_s} + (j - d - 1)\Delta ,}&{d + 1 \leq j \leq n + 1,} \\ {{t_f},}&{n + 2 \leq j \leq n + d + 1,} \end{cases}\tag{12}\end{equation*} with Δ = ( t f − t s )/( n − d ). An important remark is that by distributing ξ as in (12) , the B-spline curve z ( t ) from (8) actually varies in ( n − d ) equal intervals among which the j th interval (with j ∈ {1 , … , n − d }) is given by:
[ τ j + d , τ j + d + 1 ) ≜ [ t s + ( j − 1 ) Δ , t s + j Δ ) , (13)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\left.\left[{\tau _j}_{ + d},{}{\tau _j}_{ + d + 1}\right.\right) \triangleq \left.\left[{t_s} + {}(j - 1)\Delta ,{}{t_s} + j\Delta \right.\right),\tag{13}\end{equation*} with τ d +1 = t s and τ n +1 = t f . Also, the partial curve of z ( t ) within the j th interval (13) is denoted by:
z ( j , t ) ≜ z ( t ) , t ∈ [ t s + ( j − 1 ) Δ , t s + j Δ ) . (14)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(j,{}t)\triangleq z(t),{}t \in [{t_s} + {}(j - 1)\Delta ,{}{t_s} + j\Delta ).\tag{14}\end{equation*}

The B-spline curve z ( t ) as defined in (8) – (12) exhibits the following properties [9] , [10] , [13] :

    P1 ) Endpoint interpolation:
    z ( t s ) = P 1 , z ( t f ) = P n , (15)
    View Source Right-click on figure for MathML and additional features. \begin{equation*}z({t_s}){} = {P_1},{}z({t_f}){} = {P_n},\tag{15}\end{equation*} where [ t s , t f ] is the considered time range of the B-spline curve z ( t ) as in (8) and ( P 1 , P n ) are the first and last control points, respectively.

    P2 ) Local support and local convexity within the j th interval defined in (13) ( j ∈ {1 , … , n − d }):
    z ( j , t ) = ∑ i = j j + d P i B i , d , ξ ( t ) , z ( j , t ) ∈ Conv { P j } , (16) (17)
    View Source Right-click on figure for MathML and additional features. \begin{align*} & z(j,t) = \sum\limits_{i = j}^{j + d} {{P_i}} {B_{i,d,\xi }}(t),\tag{16} \\ & z(j,{}t) \in {\text{Conv}}\{ {{\mathbf{P}}_j}\} ,\tag{17}\end{align*} in which Conv{ P j } represents the convex hull of ( d + 1) control points P j ≜ [ P j ⋯ P j + d ].

    P3 ) Derivatives of B-spline basis functions can be expressed as a linear combination of B-spline basis functions:
    ∂ B d , ξ ( t ) ∂ t = M d , d − 1 L d , d − 1 B d , ξ ( t ) , (18)
    View Source Right-click on figure for MathML and additional features. \begin{equation*}\frac{{\partial {B_{d,\xi }}(t)}}{{\partial t}} = {M_{d,d - 1}}{L_{d,d - 1}}{B_{d,\xi }}(t),\tag{18}\end{equation*} with B d,ξ as in (8) . The two matrices M d,d −1 ∈ ℝ n ×( n −1) and L d,d −1 ∈ ℝ ( n −1) ×n are given in Theorems 4.1–4.3 of [9] .

B. Local equivalent Bézier curves

It is well-known in the field of CAD (Computer-Aided-Design) that the B-spline curve in its j th interval, z ( j, t ) as in (14) , is actually a Bézier curve of the same degree [11] , [14] which is defined as follows:
z ( j , t ) = ∑ i = 1 d + 1 P ¯ ( j − 1 ) d + i B i , d , ξ ¯ j ( t ) , (19)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(j,t) = \sum\limits_{i = 1}^{d + 1} {{{\bar P}_{(j - 1)d + i}}} {B_{i,d,{{\bar \xi }_j}}}(t),\tag{19}\end{equation*} in which P ¯ k are the Bézier control points ( k ∈ { ( j − 1 ) d + 1 , … , j d + 1 } ) and B i , d , ξ ¯ j is the basis function as−defined in (10)–(11) with the new knot vector ξ ¯ j :
ξ ¯ j = { τ j + d , … , τ j + d                d + 1  knots  , τ j + d + 1 , … , τ j + d + 1                    d + 1  knots  } , (20)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{\bar \xi _j} = \{ \underbrace {{\tau _{j + d}}, \ldots ,{\tau _{j + d}}}_{d + 1{\text{ knots }}},\underbrace {{\tau _{j + d + 1}}, \ldots ,{\tau _{j + d + 1}}}_{d + 1{\text{ knots }}}\} ,\tag{20}\end{equation*} with [ τ j + d , τ j + d +1 ) denoting the considered j th interval as in (13) .

For the j th interval (13) , the Bézier control points P ¯ k ( k ∈ { ( j − 1 ) d + 1 , … , j d + 1 } ) as used in (19) can be obtained from ( d +1) original B-spline control points { P j , … , P j + d } by using the following matrix transformation:
P ¯ ¯ ¯ ¯ j = P j A ( d , n , j ) , (21)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{\overline {\mathbf{P}} _j} = {{\mathbf{P}}_j}A(d,n,j),\tag{21}\end{equation*} with P ¯ j ≜ [ P ¯ ( j − 1 ) d + 1 ⋯ P ¯ j d + 1 ] and P j ≜ [ P j ⋯ P j + d ] consisting of ( d + 1) Bézier and B-spline control points, respectively. The matrix A ( d, n, j ) ∈ ℝ ( d +1)×( d +1) is calculated with the algorithm defined in [14] (at page 7 and another recursive formulation of A ( d, n, j ) is also given in Remark 2 of [14] ). Note that the total number of Bézier control points P ¯ k as in (19) needed for expressing the whole B-spline curve of degree d is:
n = ( n − d ) d + 1 , (22)
View Source Right-click on figure for MathML and additional features. \begin{equation*}n = {}(n - d)d + {}1,\tag{22}\end{equation*} with n the number of the B-spline control points from (8) . By applying the two properties P1 and P2 given in (15) – (17) to the local Bézier curve from (19) , we have that:
P ¯ ( j − 1 ) d + 1 = z ( τ j + d ) = z ( t s + ( j − 1 ) Δ ) , z ( j , t ) ∈ Conv { P ¯ ¯ ¯ ¯ j } (23) (24)
View Source Right-click on figure for MathML and additional features. \begin{align*} & {\bar P_{(j - 1)d + 1}} = z\left({{\tau _{j + d}}}\right) = z\left({{t_s} + (j - 1)\Delta }\right),\tag{23} \\ & z(j,t) \in \operatorname{Conv} \left\{ {{{\overline {\mathbf{P}} }_j}} \right\}\tag{24}\end{align*} for all j ∈ { 1 , … , n − d } , with z ( j, t ) as in (14) and P ¯ j from (21) . The convexity property (24) is significantly tighter than the standard one as given in (17) as proven in [11] . This will be illustrated through the following example.

Illustrative example: Fig. 3 represents the safe region S = S 1 ∪ S 2 ∪ S 3 as defined in (4) and the second-order B-spline as in (8) constructed with six control points (plotted by triangle red marks). In one interval j , the partial curve z ( j,t ) from (14) is plotted in solid red, green, blue and magenta lines, corresponding to each value of j ∈ {1,…,4}. Each partial curve z ( j,t ) is also a Bézier curve of degree two which is constructed by using three Bézier control points { P ¯ 2 ( j − 1 ) + 1 , … , P ¯ 2 j + 1 } as defined in (21) with the matrix A ( d,n,j ) given as:
A ( 2 , n ≥ 4 , j ) = ⎧ ⎩ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎡ ⎣ ⎢ 1 0 0 0 1 0 0 0.5 0.5 ⎤ ⎦ ⎥ , ⎡ ⎣ ⎢ 0.5 0.5 0 0 1 0 0 0 1 ⎤ ⎦ ⎥ , ⎡ ⎣ ⎢ 0.5 0.5 0 0 1 0 0 0.5 0.5 ⎤ ⎦ ⎥ , j = 1 , j = n − 2 , otherwise . (25)
View Source Right-click on figure for MathML and additional features. \begin{equation*}A\left({2,n \geq 4,j}\right) = \begin{cases} {\left[ {\begin{array}{ccc} 1&0&0 \\ 0&1&{0.5} \\ 0&0&{0.5} \end{array}} \right],}&{j = 1,} \\ {\left[ {\begin{array}{ccc} {0.5}&0&0 \\ {0.5}&1&0 \\ 0&0&1 \end{array}} \right],}&{j = n - 2,} \\ {\left[ {\begin{array}{ccc} {0.5}&0&0 \\ {0.5}&1&{0.5} \\ 0&0&{0.5} \end{array}} \right],}&{{\text{otherwise}}{\text{.}}} \end{cases}\tag{25}\end{equation*}

Fig. 3: - Second-order B-spline curve with its Bézier boundaries fitting inside connected polytopes.
Fig. 3:

Second-order B-spline curve with its Bézier boundaries fitting inside connected polytopes.

Show All

The property z ( j , t ) ∈ Conv { P ¯ j } as in (24) is also illustrated with each Bézier boundary Conv { P ¯ j } given by four triangles filled with red, green, blue and magenta corresponding to j ∈ {1,…,4}.

Furthermore, for the first interval, the B-spline boundary Conv{ P 1 } from (17) fails to stay inside the safe region S (i.e., the presenting B-spline curve will not be validated if one uses the original control polygons to check the constraint z ( t ) ∈ S ) while the Bézier boundary Conv { P ¯ 1 } (with P ¯ 1 = [ P ¯ 1 , P ¯ 2 , P ¯ 3 ] as in (21) ) fits well and therefore, admits that z ( t ) ∈ S , ∀ t ∈ [ t s , t f ] . □

Remark 1: Regarding the matrix A (2 ,n,j ) as given in (25) , for the case of n = 3, there is only one value of j = 1. The B-spline curve becomes the Bézier curve and hence, the matrix A (2,3,1) is the identity matrix in R 3×3 . A similar argument can be applied for any degree d which leads to:
A ( d , d + 1 , 1 ) = I d + 1 (26)
View Source Right-click on figure for MathML and additional features. \begin{equation*}A\left({d,d + 1,1}\right) = {I_{d + 1}}\tag{26}\end{equation*} with I d +1 the identity matrix of dimension ( d + 1). □

SECTION IV.
B-spline path planning with minimal length

This section presents the approach for optimally placing the control points { P 1 ,…, P n } such that the B-spline curve z ( t ) from (8) satisfies all the requirements of our path generation problem proposed in Section II-A and has its minimal length. We will start by discussing the constraints on the control points in the following.
A. Safe B-spline path through a sequence of polytopes

In this section, we present our approach to constrain the control points of the B-spline curve z ( t ) from (8) such that the curve stays inside the safe region S and also satisfies the endpoint constraints:
z ( t ) ∈ S , z ( t s ) = P s , z ( t f ) = P f , (27)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(t) \in {\mathcal{S}},\quad z\left({{t_s}}\right) = {P_s},\quad z\left({{t_f}}\right) = {P_f},\tag{27}\end{equation*} with S = S 1 ∪ S 2 ∪ ⋯ ∪ S q ( q ≥ 2 ) from (4) and { P s ,P f } start and end poses from (15) .

Proposition 1: The requirements (27) are satisfied if the following conditions are guaranteed:

    C1 ) Number of control points:
    n = q + d . (28)
    View Source Right-click on figure for MathML and additional features. \begin{equation*}n = q + d.\tag{28}\end{equation*}

    C2 ) Start and end points:
    P 1 = P s , P q + d = P f . (29)
    View Source Right-click on figure for MathML and additional features. \begin{equation*}{P_1} = {P_s},\quad {P_{q + d}} = {P_f}.\tag{29}\end{equation*}

    C3 ) All the Bézier control points in one interval belong to one extended polytope (7) :
    P ¯ k ∈ S j , j + 1 , ∀ P ¯ k ∈ P ¯ j and ∀ j ∈ { 1 , … , q } , (30)
    View Source Right-click on figure for MathML and additional features. \begin{equation*}{\bar P_k} \in {S_{j,j + 1}},\forall {\bar P_k} \in {{\mathbf{\bar P}}_j}\;{\text{and}}\;\forall j \in \left\{ {1, \ldots ,q} \right\},\tag{30}\end{equation*} with P ¯ j consisting of ( d +1) Bézier control points given in terms of ( d +1) B-spline control points P j as in (21) and S j,j +1 the extended polytope as in (7) . □

Proof: At first, the starting and ending constraints from (27) are satisfied by condition C2 (29) due to the endpoint interpolation property (15) of B-spline curves.

Next, by using n = d + q control points as in (28) , the curve z ( t ) from (8) has q intervals. Within each interval j , j ∈ {1,…, q }, we have that:
z ( j , t ) ∈ Conv { P ¯ j } ⊆ S j , j + 1 , (31)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(j,t) \in {\text{Conv}}\left\{ {{{{\mathbf{\bar P}}}_j}} \right\} \subseteq {S_{j,j + 1}},\tag{31}\end{equation*} in which the convexity property is given in (24) and the latter is due to the fact that all ( d + 1) points in P ¯ j stay inside S j,j +1 as constrained by (30) . Finally, we arrive at:
z ( t ) ∈ ⋃ j = 1 q S j , j + 1 ≡ S , t ∈ [ t s , t f ] . (32)
View Source Right-click on figure for MathML and additional features. \begin{equation*}z(t) \in \bigcup\limits_{j = 1}^q {{S_{j,j + 1}} \equiv {\mathcal{S}},t \in \left[ {{t_s},{t_f}} \right]} .\tag{32}\end{equation*}

This completes the proof. ■

Remark 2: Using the Bézier representation (19) allows us to formulate the constraint (30) such that we can enforce "each interval z ( j,t ) to be inside each extended polytope" as proven in (31) . This cannot be done if the original B-spline convexity property (17) is employed instead. The reason is that two consecutive B-spline boundaries share d common points (e.g. P j = [ P j ••• P j + d ] and P j +1 = [ P j +1 ••• P j + d +1 ] from (17) ). This leads to the fact that if the B-spline control points are employed in condition C3 (30) , i.e. P k ∈ S j,j +1 ,∀ P k ∈ P j , ∀ j ∈ {1,…, q }, then, the following necessary condition is required:
⋂ i = j j + d S i , i + 1 ≠ ∅ , ∀ j ∈ { 1 , … , q } , (33)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\bigcap\limits_{i = j}^{j + d} {{S_{i,i + 1}} \ne \emptyset ,\forall j \in \{ 1, \ldots ,q\} } ,\tag{33}\end{equation*} which is clearly not guaranteed for the extended polytopes defined in (7) .

On the other hand, there is only one common point for the Bézier representation ( 24) (e.g. P ¯ j and P ¯ j + 1 share one common point P ¯ j d + 1 ). Therefore, the necessary condition for the solution of (30) to exist is:
S j , j + 1 ∩ S j + 1 , j + 2 ≠ ∅ , ∀ j ∈ { 1 , … , q − 1 } , (34)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{S_{j,j + 1}} \cap {S_{j + 1,j + 2}} \ne \emptyset ,\forall j \in \left\{ {1, \ldots ,q - 1} \right\},\tag{34}\end{equation*} with S j,j +1 ∩ S j +1 ,j +2 = T j as defined in (6) – (7) . □

Remark 3: In condition C3 (30) , one can replace the extended polytope S j,j +1 with the polytope S j itself but the result will be more conservative as the two connected polytopes share only one edge as defined in (5) . □
B. Path generation problem with minimal length

In this section, we present the complete optimization problem used to solve the B-spline reference path satisfying the constraints (27) and minimizing the curve’s length. We exploit the property P3 in (18) of the B-spline curve z ( t ) from (8) in order to formulate the length cost into a quadratic function of the control points P i ∈ ℝ 2 , i ∈ {1,…, n } (with n chosen as in (28) . By denoting P ≜ [ P 1 ⋯ P n ] from (8) , the optimization problem is given by:
P ∗ = arg min P ∫ t f t s ∥ z ˙ ( t ) ∥ d t , subject to constraints ( 28 ) − ( 30 ) . (35)
View Source Right-click on figure for MathML and additional features. \begin{align*}& {{\mathbf{P}}^ * } = \arg \mathop {\min }\limits_{\mathbf{P}} \int_{{t_s}}^{{t_f}} {\left\| {\dot z\left(t\right)} \right\|dt} , \\ & {\text{subject}}\;{\text{to}}\;{\text{constraints}}\;\left({28}\right) - \left({30}\right).\tag{35}\end{align*} subject to constraints (28) – (30) . By using property (18) of the B-spline curve, we have that:
z ˙ ( t ) = P M d , d − 1 L d , d − 1 B d , ξ ( t ) = ∑ i = 1 n Q i B i , d , ξ ( t ) , (36)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\dot z(t) = {\mathbf{P}}{M_{d,d - 1}}{L_{d,d - 1}}{{\mathbf{B}}_{d,\xi }}(t) = \sum\limits_{i = 1}^n {{Q_i}{B_{i,d,\xi }}(t)} ,\tag{36}\end{equation*} with Q i ∈ ℝ 2 being the i th column of Q = P M d,d −1 L d,d −1 ∈ ℝ 2×2 q . Therefore, the optimization problem (35) is re-formulated into:
P ∗ = arg min P ∑ i = 1 n ∑ j = 1 n Q ⊤ i Q j ∫ t f t s B i , d , ξ ( t ) B j , d , ξ ( t ) d t , subject to constraints ( 28 ) − ( 30 ) (37)
View Source Right-click on figure for MathML and additional features. \begin{align*}& {{\mathbf{P}}^ * } = \arg \mathop {\min }\limits_{\mathbf{P}} \sum\limits_{i = 1}^n {\sum\limits_{j = 1}^n {Q_i^ \top {Q_j}\int_{{t_s}}^{{t_f}} {{B_{i,d,\xi }}(t){B_{j,d,\xi }}(t)dt} } } , \\ & {\text{subject}}\;{\text{to}}\;{\text{constraints}}\;\left({28}\right) - \left({30}\right)\tag{37}\end{align*} which clearly has a quadratic cost function since the integral terms are independent of the decision variables P = [ P 1 ⋯ P n ].

Finally, the reference path p ( t ) as required in (2) is taken as:
p ( t ) = P ∗ B d , ξ ( t ) , (38)
View Source Right-click on figure for MathML and additional features. \begin{equation*}p(t) = {{\mathbf{P}}^ * }{{\mathbf{B}}_{d,\xi }}(t),\tag{38}\end{equation*} in which the optimal control points P ∗ are obtained from solving the optimization problem (37) and the B-spline basis functions B d,ξ as used in (8) is defined with [ t s ,t f ] = [0,1].

C. Discussion

We can only concentrate on the geometric problem of the path planning problem within this paper due to the space limit but our proposed algorithm can be easily extended for trajectory generation cases by replacing t s and t f in (8) with the actual start and end time instants. Then, the B-spline framework allows us to consider more constraints on the velocity and on higher derivatives of the trajectory by adding more linear constraints as discussed in [8] , [9] . Also note that our proposed approach for placing the control points as given in Proposition 1 is not a unique solution for the problem (27) . In general, there exist mixed-integer constraints formulations for generating similar obstacle-free B-spline curves [7] , [12] but we avoid using mixed-integer programming in our work due to its high computational burden. Instead, our constraints proposed in Proposition 1 only consist of equalities (28) – (29) and linear matrix inequalities (30) which, in combination with a quadratic cost (37) for minimizing the curve length, finally form the convex and quadratic programming problem which is relatively easy to solve even with hardware with limited computing capability.
SECTION V.
Simulation and experiment results

Next, we present the validation of our proposed path planning method. We first show a simulation result that demonstrates the advantages of using the equivalent Bézier representation to constrain the B-spline curve as in (30) as well as the effectiveness of the minimal-length optimization problem (37) . Next, we give details on the implementation of the proposed method on a real mobile robot platform and the evaluation on two real-world datasets (i.e. one single laser scan and one occupancy grid map) using an onboard computer of a real robot platform.
A. Simulation results

For the simulation, we consider a safety region S from (4) consisting of seven connected polytopes as plotted with black edges (no fill) in Fig. 4 . The start and end poses are P s = (1,2.5) ⊤ and P f = (1,0) ⊤ , respectively. Information about the used B-spline curve is shown in Table I .
TABLE I: Parameters of B-spline curve used in simulation
Table I:- Parameters of B-spline curve used in simulation

In Fig. 4 , we provide two simulation results, among which the green curve is one feasible solution (manually chosen for clear demonstration) of the proposed constraints (28) – (30) while the red solid curve shows the optimal path (38) . It can be seen that the non-optimal green path is much longer than the optimal red path which always approaches all corners closely due to the effect of the minimal-length optimization problem (35) . Both paths stay inside the safety region S (i.e. the union of seven polytopes) which proves the effectiveness of the proposed approach on constraining a B-spline curves by using its equivalent Bézier representation (28) – (30) .
Fig. 4: - Path planning results using fourth-order B-spline curves: comparisons between B-spline versus Bézier boundaries and non-optimal versus minimal-length paths.
Fig. 4:

Path planning results using fourth-order B-spline curves: comparisons between B-spline versus Bézier boundaries and non-optimal versus minimal-length paths.

Show All

Furthermore, we would like to demonstrate the comparison between the Bézier and the original B-spline boundaries. Let us consider the non-optimal green curve z ( t ) and its 4 th partial curve z (4 ,t ) from (14) (plotted with blue solid line) as shown in Fig. 4 . This blue curve z (4 ,t ) stays within both the B-spline boundary Conv{ P 4 } as in (17) (big blue polytope) and the Bézier boundary Conv { P ¯ 4 } as in in (24) (small red polytope) with the Bézier control points P ¯ 4 = P 4 A ( 4 , 11 , 4 ) from (21) with the matrix A (4,11,4) as in (21) given by (i.e. using algorithm given in [14] , page 7):
A ( 4 , 11 , 4 ) = ⎡ ⎣ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ 1 / 24 0 0 0 0 11 / 24 1 / 3 1 / 6 1 / 12 1 / 24 11 / 24 7 / 12 2 / 3 7 / 12 11 / 24 1 / 24 1 / 12 1 / 6 1 / 3 11 / 24 0 0 0 0 1 / 24 ⎤ ⎦ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ . (39)
View Source Right-click on figure for MathML and additional features. \begin{align*}& A\left({4,11,4}\right) = \\ & \left[ {\begin{array}{ccccc} {1/24}&{11/24}&{11/24}&{1/24}&0 \\ 0&{1/3}&{7/12}&{1/12}&0 \\ 0&{1/6}&{2/3}&{1/6}&0 \\ 0&{1/12}&{7/12}&{1/3}&0 \\ 0&{1/24}&{11/24}&{11/24}&{1/24} \end{array}} \right].\tag{39}\end{align*}

As seen in Fig. 4 , the Bézier boundary is significantly tighter. It provides a better approximation of the curve’s shape and a more efficient way to constrain the curve fitting inside the safety region as introduced in (30) .

For implementing the optimization problem (37) , we use the solver IPOPT [15] with Pyomo [16] in Python. With our laboratory computer (Intel Core i7-9750H processor), the average computation time is 45 ms for 100 samples. In the next section, we will present the implementation and experimental results of the proposed path planner on a mobile robot platform.
B. Experimental validation on mobile robot platform

The proposed path planner is implemented on the differential wheeled Jackal robot from Clearpath Robotics [3] equipped with the Ouster OS1-16 LIDAR sensor (cf. Fig. 5 ) and an on-board computer (Intel Core i5-4750TE processor). In order to evaluate the method, we consider two scenarios:

    Local planner: a single LIDAR scan was collected and then an obstacle-free path was planned within the scanned area.

    Global planner: an occupancy grid map 1 (which is obtained beforehand by using the gmapping method [17] ) is given to the Jackal and the robot needs to plan an obstacle-free path within the map.

For both scenarios, the path leads from the robot’s current position P s to the desired goal P f . In order to obtain the sequence of connected polytopes { S 1 ,…, S q } as required in (4) , we adapt the procedure given in [2] using several existing Python toolboxes. Note that the robot’s size is taken into account by using a safety offset when calculating those polytopes so that the robot does not hit any obstacles even when reaching the edges of the polytopes. The complete workflow is given as follows:

    Approximate the obstacle-free space (i.e. obtained from the laser scan data and from the occupancy grid map corresponding to two scenarios) by a polygon region (possibly being non-convex and containing holes): using Ramer–Douglas–Peucker algorithm 2 [18] .

    Shrink the obstacle-free polygon region by a safety offset (can be taken as the maximum length of the Jackal as it is differential wheeled robot) in order to account for the vehicle’s size and possible detection noises: using Gdspy toolbox 3 .

    Partition the shrunk polygon into connected polytopes: using Mark Beyazit’s algorithm 4 [19] .

    Perform a graph search in order to obtain the sequence of polytopes { S 1 ,…, S q } leading from the initial pose P s to the desired goal P f [2] . We relax the conditions, i.e. if there is no polytope containing P f , then P f is re-chosen as the closest point to the original P f but within the safety region.

    Solve the path-planning problem (37) and return the optimal path (using solver IPOPT [15] in Pyomo [16] ).

Fig. 5: - Jackal robot equipped with a LIDAR sensor.
Fig. 5:

Jackal robot equipped with a LIDAR sensor.

Show All
Fig. 6: - Experimental result in the local planner scenario: from laser scan data to optimal B-spline path.
Fig. 6:

Experimental result in the local planner scenario: from laser scan data to optimal B-spline path.

Show All

The results under the local and global planner scenarios are given in Figures 6 and 7 , respectively. In both figures, the safety regions after performing the safety offset (i.e. step 2 from the aforementioned procedure) are plotted with green solid lines. Then, at step 3, those regions are partitioned into numerous connected polytopes among which the sequences of connected polytopes leading from the start point P s to the end goal P f are emphasized with black solid edges (i.e. resulted at step 4) while the other polytopes in the workspace are plotted with gray edges. Finally, the two optimal B-spline paths of degree four (obtained from solving the optimization problem (35) at step 5) are plotted in solid red with their B-spline control points marked with blue circle markers. The total processing times are 67 ms in the local planner scenario and 100 ms in the global planner case using the on-board computer of the Jackal robot. Note that, even though the resulted straight path shown in Figure 6 , which is obtained in local planner scenario, seems trivial it strongly demonstrates the effectiveness of the minimizing-length goal proposed in the optimization problem (35) . The two reference paths (red curves in Figures 6 and 7 ) obtained with our proposed planning method under two different scenarios are both obstacle-free, smooth and differentiable up to degree 4 (with one under local planner case even being straight as shown in Figure 6 ). Therefore, with recent advances on path following control techniques [4] , it is capable for our differential wheeled Jackal robot to track those references. We do not show tracking results here as it is also out of this paper’s scope but this is the logical next step of our future research.
Fig. 7: - Experimental result in the global planner scenario: from occupancy grid map to optimal B-spline path.
Fig. 7:

Experimental result in the global planner scenario: from occupancy grid map to optimal B-spline path.

Show All
SECTION VI.
Summary

We addressed a path planning method for navigation in a non-convex, connected region. We parameterize the path as a B-spline curve but control the shape by using its equivalent Bézier representation which provides a significantly tighter bound on the curve. By using this property, our method constrains the curve to continuously stay inside the safety region using only linear constraints. The final path planning problem is reformulated as a convex optimization problem with the objective of minimizing the path length. The algorithm is validated under both simulation and experiment on real datasets with an on-board computer of a mobile robot platform. In the future we will take more constraints into account, such as initial and final heading angles, way-points, curvature boundedness, and extend the method for trajectory generation problems.

Authors
Figures
References
Keywords
Metrics
Media
Footnotes
   Back to Results   
More Like This
Dynamic Collision Avoidance Path Planning for Mobile Robot Based on Multi-sensor Data Fusion by Support Vector Machine

2007 International Conference on Mechatronics and Automation

Published: 2007
Multiple mobile robot path planning for rollover prevention and collision avoidance

2011 11th International Conference on Control, Automation and Systems

Published: 2011
Show More
References
1. P. Raja and S. Pugazhenthi, "Optimal path planning of mobile robots: A review", International Journal of Physical Sciences , vol. 7, no. 9, pp. 1314-1320, 2012.
Show in Context CrossRef Google Scholar
2. J. Liu, P. Jayakumar, J. L. Stein and T. Ersal, "A nonlinear model predictive control formulation for obstacle avoidance in high-speed autonomous ground vehicles in unstructured environments", Vehicle System Dynamics , vol. 56, no. 6, pp. 853-882, 2018.
Show in Context CrossRef Google Scholar
3. Y. F. Chen, M. Everett, M. Liu and J. P. How, "Socially aware motion planning with deep reinforcement learning", 2017 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 1343-1350, 2017.
Show in Context View Article Full Text: PDF (3693) Google Scholar
4. B. Paden, M. Čáp, S. Z. Yong, D. Yershov and E. Frazzoli, "A survey of motion planning and control techniques for self-driving urban vehicles", IEEE Transactions on Intelligent Vehicles , vol. 1, pp. 33-55, 2016.
Show in Context View Article Full Text: PDF (1405) Google Scholar
5. M. Elbanhawi and M. Simic, "Examining the use of b-splines in parking assist systems", Applied Mechanics and Materials , vol. 490, pp. 1025-1029, 2014.
Show in Context CrossRef Google Scholar
6. T. Maekawa, T. Noda, S. Tamura, T. Ozaki and K.-i. Machida, "Curvature continuous path generation for autonomous vehicle using b-spline curves", Computer-Aided Design , vol. 42, no. 4, pp. 350-359, 2010.
Show in Context CrossRef Google Scholar
7. F. Stoican, I. Prodan, E. I. Grøtli and N. T. Nguyen, "Inspection trajectory planning for 3d structures under a mixed-integer framework", Proceedings of the 2019 IEEE International Conference on Control & Automation (ICCA’19) , pp. 1349-1354, 2019.
Show in Context View Article Full Text: PDF (936) Google Scholar
8. N. T. Nguyen, I. Prodan and L. Lefévre, "Flat trajectory design and tracking with saturation guarantees: a nano-drone application", International Journal of Control , vol. 93, no. 6, pp. 1266-1279, 2020.
Show in Context CrossRef Google Scholar
9. F. Suryawan, J. De Doná and M. Seron, "Splines and polynomial tools for flatness-based constrained motion planning", International Journal of Systems Science , vol. 43, no. 8, pp. 1396-1411, 2012.
Show in Context CrossRef Google Scholar
10. T. Lyche, C. Manni and H. Speleers, "Foundations of spline theory: B-splines spline approximation and hierarchical refinement" in Splines and PDEs: From Approximation Theory to Numerical Linear Algebra, Springer, pp. 1-76, 2018.
Show in Context CrossRef Google Scholar
11. W. Böhm, "Generating the bézier points of b-spline curves and surfaces", Computer-aided Design , vol. 13, no. 6, pp. 365-366, 1981.
Show in Context CrossRef Google Scholar
12. I. Prodan, F. Stoican and C. Louembet, "Necessary and sufficient lmi conditions for constraints satisfaction within a b-spline framework", 2019 IEEE 58th Conference on Decision and Control (CDC) , pp. 8061-8066, 2019.
Show in Context View Article Full Text: PDF (660) Google Scholar
13. L. Piegl and W. Tiller, "B-spline curves and surfaces" in The NURBS Book, Springer, pp. 81-116, 1995.
Show in Context CrossRef Google Scholar
14. L. Romani and M. A. Sabin, "The conversion matrix between uniform b-spline and bézier representations", Computer Aided Geometric Design , vol. 21, no. 6, pp. 549-560, 2004.
Show in Context CrossRef Google Scholar
15. A. Wächter and L. T. Biegler, "On the implementation of an interior-point filter line-search algorithm for large-scale nonlinear programming", Mathematical Programming , vol. 106, no. 1, pp. 25-57, 2006.
Show in Context CrossRef Google Scholar
16. W. E. Hart, J.-P. Watson and D. L. Woodruff, "Pyomo: modeling and solving mathematical programs in python", Mathematical Programming Computation , vol. 3, no. 3, pp. 219-260, 2011.
Show in Context CrossRef Google Scholar
17. G. Grisetti, C. Stachniss and W. Burgard, "Improved techniques for grid mapping with rao-blackwellized particle filters", IEEE Transactions on Robotics , vol. 23, no. 1, pp. 34-46, 2007.
Show in Context View Article Full Text: PDF (1181) Google Scholar
18. D. H. Douglas and T. K. Peucker, "Algorithms for the reduction of the number of points required to represent a digitized line or its caricature", Cartographica: the international Journal for Geographic Information and Geovisualization , vol. 10, no. 2, pp. 112-122, 1973.
Show in Context CrossRef Google Scholar
19. Y. Kulkarni, A. Sahasrabudhe and M. Kale, "Midcurves generation algorithm for thin polygons", National Conference on Emerging Trends in Engineering and Science (ETES) , pp. 76-82, 2014.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
