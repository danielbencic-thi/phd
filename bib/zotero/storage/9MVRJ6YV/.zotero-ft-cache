Loading web-font TeX/Caligraphic/Regular

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2018 IEEE/RSJ International C...
A Topology-Based Path Similarity Metric and its Application to Sampling-Based Motion Planning
Publisher: IEEE
Cite This
PDF
Jory Denny ; Kaiwen Chen ; Hanglin Zhou
All Authors
View Document
1
Paper
Citation
235
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Preliminaries
    III.
    Algorithms for Computing Path Similarity
    IV.
    Application: Path Extraction
    V.
    Application: Robot Manipulators

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: Many applications of robotic motion planning benefit from considering multiple homotopically distinct paths rather than a single path from start to goal. However, determi... View more
Metadata
Abstract:
Many applications of robotic motion planning benefit from considering multiple homotopically distinct paths rather than a single path from start to goal. However, determining whether paths represent different homotopy classes can be difficult to compute. We propose metrics for efficiently approximating the homotopic similarity of two paths are, instead of verifying homotopy equivalence directly. We propose two metrics: (1) a naive application of local planning, a common subroutine of sampling-based motion planning, and (2) a novel approach that reasons about the topologically distinct portions of the workspace that a path visits. We present three applications of our metric to demonstrate its use and effectiveness: extracting topologically distinct paths from an existing roadmap, comparing paths for robot manipulators, and improving the computational efficiency of an existing sampling-based method, Path Deformation Roadmaps (PDRs), by over two orders of magnitude. We explore the trade-off between quality and computational efficiency in the proposed metrics.
Published in: 2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 01-05 October 2018
Date Added to IEEE Xplore : 06 January 2019
ISBN Information:
ISSN Information:
INSPEC Accession Number: 18372750
DOI: 10.1109/IROS.2018.8594325
Publisher: IEEE
Conference Location: Madrid, Spain
Contents
SECTION I.
Introduction

Motion planning is an important problem in many domains such as robotics, bioinformatics, virtual reality, and virtual prototyping [16] . These applications often involve planning for multi-agent systems [3] , dynamically changing environments [28] , or planning under uncertainty [14] , where having many candidate solutions to the problem is beneficial. Ideally, the candidate paths are different in nature and explore varying portions of the problem space. Differing paths are caused by obstacles in an environment. For example, a support pillar in the middle of a room creates two types of paths - those that go left and those that go right ( Figure 1 ).

We are concerned neither with the process of finding the candidate paths nor with proving homotopy equivalence. Instead, we propose two approximation techniques ( Figure 1 ) for determining whether two paths might be homotopy equivalent: (1) Local Planner Success Similarity (LPSS), which uses visibility [13] , [27] to analyze a candidate deformation function that morphs one path into another, and (2) Topology-Based Edit Distance Similarity (TBEDS), which compares the regions of the workspace visited by each path

The set of paths that are equivalent in this sense belong to the same homotopy class [10] . Prior work has utilized homotopy classes for solving motion planning problems [4] , [9] , [11] or has focused on identifying homotopy classes [1] , [2] . Determining if two solution paths are homotopy equivalent requires proving whether a continuous function that morphs one path into another does, or does not, exist - an operation that is potentially difficult to compute. to give a topologically informed likelihood for whether or not a deformation function exists. We demonstrate how these approximation techniques can be applied in sampling-based motion planning. Our specific contributions include:
Fig. 1. - Example path comparison using the proposed similarity metrics.
Fig. 1.

Example path comparison using the proposed similarity metrics.

Show All

    a definition and discussion of path similarity,

    the presentation of two novel similarity metrics: (1) local planner success similarity and (2) topology-based edit distance similarity, and

    demonstration of the technique to extracting distinct paths from an existing roadmap, comparing paths for robot manipulators, and improving the efficiency of a known sampling-based method, Path Deformation Roadmaps (PDRs), by over two orders of magnitude.

We consider our metrics complementary and explore the trade-off between the accuracy of the metric and its computational efficiency.

SECTION II.
Preliminaries

We define and review relevant terms for understanding our problem and metrics. Additionally, we highlight important related work.
A. Motion Planning

In this paper, we consider holonomic robots with d degrees offreedom (DOFS). DOFs parameterize a unique placement of the robot (center of mass position, orientation, joint angles, etc.) in its two- or three-dimensional world, or workspace . A configuration q=\langle x_{1}, x_{2}, \ldots, x_{d}) is a specification of the values for the DOFS, where x_{i} is the ith DOF. The set of all possible configurations is called the configuration space (\mathcal{C}_{space}) [18] , and it can be partitioned into two main subsets: free space (\mathcal{C}_{free}) and obstacle space (\mathcal{C}_{obst}) . These two subsets represent all possible valid, e.g., collision-free, and invalid configurations respectively. In general, it is infeasible to explicitly compute a representation of \mathcal{C}_{obst} [24] .

Although it is not the focus here, we review an example motion planning approach, Probabilistic RoadMaps (PRMs) [15] , in order to give an understanding of how solution paths can be found and given as input into our metrics. PRMs construct a map of \mathcal{C}_{free} by first randomly sampling valid configurations. Nearby samples are then connected by validating simple paths between them, which form the edges of the map. A local planner , e.g., straight-line interpolation, is an algorithm used to verify these transitions. Finally, start and goal configuration pairs are connected to the roadmap and a graph search, e.g., A*, is used to extract a solution.

We define a path , Definition 1 , as a sequence of adjacent configurations. When comparing two paths of differing lengths, there could be a large difference in numbers of configurations in each sequence. To facilitate this representational issue, we use a secondary definition of paths based on a parametric representation of the trajectories. t-resolution paths, Definition 2 , are a sequence of configurations along a path discretized at resolution steps in the parametric form. Due to this, two t-resolution paths will have the same number of configurations in each sequence, and we can carefully choose the resolution to be appropriate for use in our metrics. These definitions are similar to those found in path smoothing and modification [8] .
Definition 1

A path \pi=\{q_{1},\ q_{2}, \ldots,\ q_{m}\} is a contigu- ous sequence of configurations. Two configurations q_{i} and q_{i+1} are adjacent if \delta(q_{i},\ q_{i+1})\leq r , where \delta is a distance function and r is a problem specific resolution.
Definition 2

Let \pi=\{q_{1},\ q_{2}, \ldots,\ q_{m}\} be a path. The t- resolution path \tau of \pi is a contiguous sequence of configurations discretized at t_{res} steps, where t_{res} is a resolution, from a parametric representation t\in[0,1] of \pi , where t=0 is q_{1}, t=1 is q_{m} Let \tau^{k} denote the kth configuration of \tau , where k\in[0,1] .
B. Topology

In this section, we review important aspects of topology related to our study: homotopy classes and Reeb Graphs.
1) Homotopy

Definition 3 presents the concept of homo- topy equivalence [10] - loosely, it is the concept that two paths visit the same parts of \mathcal{C}_{space} . Further, Definition 4 shows that homotopy classes [10] are a set of pairwise homotopy equivalent paths. Homotopy classes group portions of the space together in a semantic sense. As an example, consider a fork in a road. There is in general an infinite set of paths and combination of footstep placements along the paths, but they can be grouped into two classes: those that take the left path and those that take the right path.
Definition 3

Two paths \pi_{1}, \pi_{2}\in \mathcal{C}_{free} (or t-resolution paths \tau_{1} and \tau_{2} ) are homotopy equivalent if and only if a function exists that continuously deforms \pi_{1} to \pi_{2} in \mathcal{C}_{free} (\tau_{1} to \tau_{2}) , i.e., without transitioning through \mathcal{C}_{obst} .
Definition 4

A homotopy class is a set of paths ‚àè (or t- resolution paths) such that all pairs \pi_{i}, \pi_{j}\in\Pi are homotopy equivalent.

These concepts are fundamental to motion planning and define the basis of many methods. As an example, geometric methods [4] , [9] , [11] use mathematical reasoning to represent homotopy classes and find optimal planning solutions but are inefficient for many planning problems.
Fig. 2. - Example computation of a reeb graph from a tetrahedralization. (a) Tetrahedralization of an environment. (b) Reeb graph formed from the tetrahedralization. (c- f) The tetrahedrons that are mapped to each Reeb Arc.
Fig. 2.

Example computation of a reeb graph from a tetrahedralization. (a) Tetrahedralization of an environment. (b) Reeb graph formed from the tetrahedralization. (c- f) The tetrahedrons that are mapped to each Reeb Arc.

Show All

Certain sampling-based methods are topologically inspired. Visibility-based PRMs [27] represent the space using a few ‚Äúwell placed‚Äù configurations. In this way, this method creates roadmaps that guarantee coverage and connectivity in at least one homotopy class. This method was extended to preserve homotopy classes [25] by checking not only visibility constraints but also merging portions of a roadmap that map to the same homotopy class. This class of methods attempts to introduce and define useful cycles into PRMs. Path Deformation Roadmaps (PDRs) further reduces the size of roadmaps based on this concept [13] . This methodology uses similar, but distinct, techniques to the first metric we propose. Other approaches have discussed and incorporated useful cycles [6] , [8] , [20] , [28] .

Algorithms have been proposed that explicitly identify and represent homotopy classes using sophisticated mathematical reasoning [1] , [2] . The aim of these techniques is usually to find optimal solutions or paths constrained within a specific homotopy class. These methods could themselves inform a more expensive metric of comparing homotopy equivalence in the future. As such, they are considered complementary to our proposed work.
2) Reeb Graphs

Concise representations of all homotopy classes of a topological space exist. One such representation, a Reeb Graph [23] represents transitions in level sets of a real-valued function on a manifold. The nodes of a Reeb Graph encode critical values of the function, referred to as a Morse function, and the edges, or Reeb Arcs, are the topological transitions between them. For example, Figure 2(b) is a Reeb Graph for the space shown in Figure 2(a) , where the y-value of any point is the value of the Morse function. Reeb Graphs have been applied to numerous domains and problems in computational geometry and computer graphics such as shape matching [12] , iso-surface remeshing [30] , simplification [29] , and sampling-based planning [5] .

To compute a Reeb Graph from a workspace, we use the algorithm found in [21] . Other methods have since improved on the complexity and could be alternatively used [7] . This algorithm begins by computing a Delaunay tetrahedralization of the free workspace [26] (gray in Figure 2(a) ). A Reeb Graph is initialized from the I-skeleton of the tetrahedral-ization (vertices and edges of the tetrahedrons form nodes and Reeb Arcs respectively). Then, the 2-skeleton of the tetrahedralization (facets of the tetrahedrons) is used to reduce the initial graph to be a true Reeb Graph that encodes topological information of the space. For all triangles of the 2-skeleton, the algorithm merges the three associated Reeb Arcs into two. A triangle is a safe criterion for merging as it represents a sector of topological equivalence. During post-processing, 2-nodes of the Reeb Graph are removed by merging the two associated Reeb Arcs into one. Figure 2(b) shows the resulting Reeb Graph from the tetrahedralization ( Figure 2(a) ). From our experience, a Reeb Graph from environments composed of over 2,000 facets can be computed on the order of a few seconds.

It is important to note that critical points occur whenever there are two or more adjacent tetrahedra that have a pair of vertices that cannot be connected by a straight-line through free space - a critical point represents a divide in the free workspace volume. Thus, each Reeb Arc captures a distinct workspace homotopy class between two critical points.

During construction, related tetrahedra to Reeb Arcs are tracked. The related tetrahedra for each Reeb Arc in our example are shown in Figures 2(c)-2(f) . It is important to observe that tetrahedrons are not unique to each Reeb Arc; they may correspond to more than one. A good example is that a tetrahedron related to a critical point is shared among all Reeb Arcs connected to the critical point.
SECTION III.
Algorithms for Computing Path Similarity

We present the problem of approximating path similarity and explore the requirements for a high quality metric. After, we describe and discuss two similarity metrics that we consider to be complementary. The first is based on a naive application of local planning, a common subroutine of sampling-based motion planners, and the second is rooted in a topological analysis of the paths in workspace.
A. Overview of Path Similarity

As discussed in Section II , all paths between a set start configuration and goal configuration pair can be classified into equivalence classes (i.e., homotopy classes). Determining if two paths are in the same homotopy class can be difficult for the general case. Instead, we are interested in defining a metric that approximates the likelihood that two paths are homotopy equivalent.

We define a path similarity metric , \mu , as a function that takes as input two t-resolution paths and returns a real number in the range [0, 1]. For a high-quality metric, a zero value implies the paths are in distinct homotopy classes, and a value of one implies that the paths are homotopy equivalent. All values in between define the likelihood that the paths are in (or not in) the same homotopy class.
B. Local Planner Success Similarity

We introduce a naive similarity metric based upon application of local planning, a common subroutine of sampling-based motion planners [15] . The metric, called Local Planner Success Similarity (LPSS), is shown in Algorithm 1 . The metric essentially computes a ratio of successful local planning attempts to total attempts between configurations of the two paths with the same t value. In Figure 1(a) , we show two example paths (green and magenta) and the local planning attempts between pairs of configurations along the paths (blue dashed lines are successful attempts, and red dashed lines are unsuccessful attempts).
Algorithm 1 Local Planner Success Similarity

Algorithm

In LPSS, it is easy to verify that a metric value equal to one confirms a linear transformation of one path into another up to a t-resolution, i.e., they are in the same homotopy class. A value close to one implies that a transformation is likely to exist, but the linear transformation is not it. A value close to zero implies that a transformation is unlikely to exist that morphs one path into another, i.e., the paths are in distinct homotopy classes. We note that this algorithm will not give a value of zero because the start and goal configurations of the paths are identical, i.e., a local plan between them is trivially successful.

By only verifying one possible transformation, LPSS does not specifically use any topological information in determining similarity. However, a strength of the metric is that when two paths are determined to be similar, we not only know the equivalence class but also a function that deforms one path into the other.

This method is similar to the deformation technique in [13] . However, that work specifically uses an A* search through the pair-wise visibility of configurations between two t-resolution paths. Our method is a more efficient algorithm and returns a numeric value.
C. Topology-Based Edit Distance Similarity

We present a novel similarity metric rooted in topological reasoning. Essentially, the metric compares the portions of the workspace each path visits. Our metric, called Topology-Based Edit Distance Similarity (TBEDS), shown in Algorithm 2 , translates each path into a string and uses the notion of edit distance as the metric [19] . Specifically, we use Levenshtein Distance [17] in our implementation. Levenshtein Distance counts the minimum number of additions, deletions, and substitutions required to convert one string into another. The string used for each path is the sequence of workspace regions that the path traverses. Edit distance has been used in motion planning in the context of path merging [22] - a tangential problem to path similarity.
Algorithm 2 Topology-based Edit Distance Similarity

Algorithm
Algorithm 3 Path to Topology-based String

Algorithm

To determine the sequence of workspace regions, we use the methodology shown in Algorithm 3 . The method assumes that the workspace of the robot has been tetrahedralized and converted into a Reeb Graph, as discussed in Section II . The first phase of the algorithm determines the sequence of tetrahedrons that a point of interest of the robot passes through along the path. The point of interest could be something as simple as the center of mass of the robot or more complex like the end-effector location of a manipulator robot. After the initial sequence is determined, we run an algorithm called UNIQUE on the sequence. This eliminates adjacent duplicates from the sequence. In the second phase of the algorithm, we map the tetrahedron sequence to a sequence of sets of Reeb Arcs. For each tetrahedron, we determine all of the associated Reeb Arcs to it and use this as the set - recall from Section II that based on the reduction algorithm tetrahedrons may belong to more than one Reeb Arc. Again, we use UNIQUE to eliminate adjacent duplicates from the sequence of Reeb Arc sets. Finally, we determine a string by mapping each unique set of Reeb Arcs to a unique ‚Äúcharacter.‚Äù We use the term ‚Äúcharacter‚Äù loosely, and more specifically map each set to a non-negative integer.

As an example of converting a path to a string using Algorithm 3 , we refer to the right path of Figure 3(a) (green). Looking at this path, we first observe that a point moving along this path at a t-resolution visits a sequence of tetrahedrons. Second, we can determine the unique sequence of Reeb Arc sets traversed along the path. The gray patterns show the unique Reeb Arc sets in this environment - visually, the reader can refer to Figure 2 to view the tetrahedrons for each Reeb Arc and verify the unique Reeb Arc set from their overlaps. So, this path visits the bottom region, then the right region, and then the top region. We translate this to a unique string ‚Äú BRT .‚Äù Following the same observations, we can see the left path (magenta) translates to the string ‚Äú BLT .‚Äù After converting the paths to strings, we can apply Algorithm 2 to see that the edit distance is one and the TBEDS metric is \frac{2}{3} - we can substitute ‚ÄòR‚Äô for ‚ÄòL‚Äô to get the second string and a Levenshtein Distance of one.
Fig. 3. - Example computations of converting paths to topology-based strings. Unique reeb arc sets are shown as distinct shaded regions. (a) Typical case of representing a simple path that visits a linear sequence of reeb arc sets. (b) Atypical (degenerate) case of representing a complex path that visits a backtracking sequence of reeb arc sets.
Fig. 3.

Example computations of converting paths to topology-based strings. Unique reeb arc sets are shown as distinct shaded regions. (a) Typical case of representing a simple path that visits a linear sequence of reeb arc sets. (b) Atypical (degenerate) case of representing a complex path that visits a backtracking sequence of reeb arc sets.

Show All

In TBEDS , if a value of one is returned, then the paths taken by the point of interest of the robot are in the same homotopy classes of the workspace. This may or may not imply the same for the configuration space paths; it depends on the specific problem and choice of the point of interest. When the metric returns a value close to zero, the paths taken by the point of interest are in disjoint homotopy classes of the workspace and therefore are in disjoint homotopy classes of the free configuration space. The metric cannot return zero because the start and goal for the paths are identical.

The TBEDS metric provides a few interesting discussion points from a theoretical view. First, the metric is rooted in topological reasoning, an important distinction from the nature of LPSS. We established a metric that analyzes the regions of the workspace (preprocessed and grouped into topological equivalences) that a path visits. TBEDS is limited to reasoning about workspace regions and cannot reason about regions of \mathcal{C}_{free} .

Second, there are degenerate cases for TBEDS. Specifically, we refer to the example shown in Figure 3(b) . The simple path (green) is identical to the right path in the previous example and translates to ‚Äú BRT .‚Äù Analyzing the second complex path (magenta), we note it translates to ‚Äú BLBRTLT .‚Äù The Levenshtein edit distance is now 5 (one substitution and four deletions) and our TBEDS metric is \frac{2}{3} . This is problematic given that the two paths are homotopy equivalent. One method to overcome this is to apply path smoothing to improve the paths before comparing them; however, some path smoothing methods [8] , like shortcut-ting, can actually change the homotopy class of the path. Because of this, we did not apply smoothing in this study. In our applications, the degenerate case did not arise often, and we leave further exploration of them to future work.
SECTION IV.
Application: Path Extraction

We apply our metrics to the application of extracting homotopically distinct paths from a roadmap. Further, we explore the trade-offs of each metric in more topologically complex environments, i.e., they contain more homotopy classes.
A. Algorithm Overview

For our application, we explore the problem of extracting topologically distinct paths from a roadmap. Algorithm 4 is used for this purpose. It is a modification of depth-first search that explores all simple paths between a start and goal node of a graph. For each path that is found, the algorithm uses a path similarity metric to compare it to all previously found paths. If the new path is significantly different (compared to a threshold), then the new path is added to the output set.

This algorithm has exponential complexity, and we use it on small roadmaps only. Note, this algorithm is not the focus of our paper, and we chose this approach to extensively test and compare our metrics.
B. Analysis

We implemented our metrics in C++ using the GNU gcc compiler version 5.4.0, and we ran all experiments on Ubuntu 16.04 with an Intel¬Æ Core‚Ñ¢ i7-6700U CPU at 3.4 GHz and 16 GB of RAM.

We used a t-resolution of 0.01 and the Euclidean distance as the distance function where needed. LPSS used a straight-line local planner using a bisection evaluation order over the interpolation.
Algorithm 4 Generate Paths

Algorithm
Fig. 4. - Environments for the path extraction application. The environments are composed of increasing numbers of columns that create topologically more complex scenes in the workspace, i.e., cy19 (c) has more homotopy classes than cy13 (a). The query is from the bottom to the top in each environment.
Fig. 4.

Environments for the path extraction application. The environments are composed of increasing numbers of columns that create topologically more complex scenes in the workspace, i.e., cy19 (c) has more homotopy classes than cy13 (a). The query is from the bottom to the top in each environment.

Show All
Table I Reeb graph sizes, average roadmap sizes, thresholds, and average number of paths extracted for the experimental analysis
Table I- Reeb graph sizes, average roadmap sizes, thresholds, and average number of paths extracted for the experimental analysis

We analyze the algorithm using the environments shown in Figure 4 . The environments contain approximated cylinders of radius 2m and height 6m in an environment that is 20 \times 20\times 6\text{m} . The environments increase in topological complexity (contain more homotopy classes) as the number of cylinders increase from three to nine. They are arranged as uniform rows, so the first environment has one row of three cylinders and the last environment has three rows of three cylinders. We used a query from the bottom to the top in each environment.

We first create roadmap using the PRM approach [15] that captures some or all of the homotopy classes. The roadmap nodes were generated by performing uniform random sampling, where samples are generated a predefined distance apart, and the edges were formed by a radius-based neighborhood connection scheme using a straight-line local planner. The size of the roadmaps were limited to accommodate the application. We created 30 different roadmaps for the experiments. Table I shows the average roadmap and Reeb Graph size for each environment.

For the experiment, we selected thresholds so that we yield about the same total number of paths compared and about the same number of unique paths extracted. To verify, we present the thresholds and the average number of paths extracted using each method in Table 1 . All averages are very similar and within one standard deviation from each other. The threshold for LPSS was reduced with increasing environment complexity as the metric becomes more accurate with increased \mathcal{C}_{obst} volume.

Figure 5 presents the average time taken to analyze the roadmaps for path extraction over the 30 trials. As seen, the TBEDS metric is about ten times faster across the three environments. Using a statistical t-test TBEDS is faster than LPSS with a p-value < 0.0001 across all three environments. The largest computation cost of TBEDS is the Reeb Graph construction, but its cost is amortized over the execution of the algorithm.
Fig. 5. - Average time shown for path extraction over 30 trials using both the LPSS and TBEDS metrics in all three cylinder environments.
Fig. 5.

Average time shown for path extraction over 30 trials using both the LPSS and TBEDS metrics in all three cylinder environments.

Show All
Fig. 6. - Experimental comparison of TBEDS and LPSS metrics on a robot manipulator. (a) Environment with fixed-base manipulator arm. The two paths used in the comparison are shown in red and blue. (b) Timing results for the comparison.
Fig. 6.

Experimental comparison of TBEDS and LPSS metrics on a robot manipulator. (a) Environment with fixed-base manipulator arm. The two paths used in the comparison are shown in red and blue. (b) Timing results for the comparison.

Show All

TBEDS and LPSS compute metrics of different topological meaning, but from this experiment we also see a significant trade-off in computational efficiency.
SECTION V.
Application: Robot Manipulators

We apply our metrics to comparing paths of a robotic arm. Our system setup is identical to Section IV-B . The key difference is that we use the position of the end effector at the point-of-interest of the robot for TBEDS.

We use the scenario shown in Figure 6(a) . In this problem, an eight DOF manipulator arm must reach around a cube, while avoiding collision with a wall located to the left of the robot. The robot's base is fixed to the origin of the environment. We computed two different paths to the same end effector position using a sampling-based planner, one that goes below the obstacle (red) and the other that reaches above the obstacle (blue). We analyze each metric on the pair of homotopically distinct paths of the end effector position and compare both the similarity computed and the computation time taken. The analysis was repeated 30 times and the average computation time is shown in Figure 6(b) .

Both TBEDS and LPSS present similarity values noting large differences between the two paths, 0.38 and 0.40 respectively. Timing is shown in Figure 6(b) . TBEDS is about four times faster than LPSS. Again the Reeb Graph construction time is dominant. Considering evaluation time only, TBEDS is approximately seven times faster.
SECTION Algorithm 5
Path Deformation Roadmap

Algorithm

SECTION VI.
Application: Path Deformation Roadmaps

We use our metrics to improve on an existing technique in sampling-based motion planning. The methodology, called Path Deformation Roadmaps (PDRs) [13] , extends Visibility-based PRM [27] to contain useful cycles in the roadmap that represent multiple homotopy classes in an environment. We review the core algorithm, explain how our metrics can be used in the approach, and experimentally analyze them.
A. Algorithm Overview

We present an iterative formulation of PDR construction in Algorithm 5 . In each iteration, a random configuration q\in \mathcal{C}_{free} is generated and the visible portion of the roadmap R_{vis} to q is determined - this is computed incrementally by performing either rigorous visibility checks, i.e., local planner attempts, or by reasoning about the clearance (minimum visibility) of configurations, which we used here (see [13] for further implementation details). If R_{vis} is empty, q is classified as a new guard [27] , a configuration covering a new part of \mathcal{C}_{free} , and added to the roadmap. If R_{vis} contains multiple connected components, q becomes a candidate for creating a useful cycle in the roadmap. The algorithm finds the two nearest configurations in R_{vis} to q , induces a cycle, and checks the cycle for redundancy ( Algorithm 6 ). If R_{vis} is one connected component, or q does not create a useful cycle, the number of failed iterations is incremented. The algorithm continues until a maximum number of failed iterations is reached.

The original PDR algorithm uses an A* search through pair-wise visibility checks of two t-resolution candidate paths. A successful search yields a path deformation, and thus a homotopically redundant cycle is determined.
Algorithm 6 IsUsefulCycle

Algorithm
Fig. 7. - Additional environments for application of the metrics to creating pdrs. (a) Building and (b) tunnel both contain inherently three-dimensional homotopy classes providing increased difficult of roadmap creation.
Fig. 7.

Additional environments for application of the metrics to creating pdrs. (a) Building and (b) tunnel both contain inherently three-dimensional homotopy classes providing increased difficult of roadmap creation.

Show All

We modify the PDR algorithm's verification for useful cycles - its most expensive step. Our updated approach is shown in Algorithm 6 which abstracts the path redundancy check with a path similarity metric, \mu . We compare the metric value to a threshold for redundancy determination. In our experiments, TBEDS, LPSS, and A* refer to constructing a PDR using the TBEDS metric, LPSS metric, or original A* search, respectively, for checking useful cycles.
B. Analysis

In this experiment, we compare the cost of generating a roadmap using the PDR algorithm with TBEDS, LPSS, and A* as metrics for determining whether two paths are deformable. We use the same experimental setup as that used in Section IV-B .

For this application, we use environments similar to those shown in Figure 4 except the radii of the cylinders were increased to 4m and spaced evenly in the environment. Additionally, we use the environments in Figure 7 , both of which have a three-dimensional workspace, a six-dimensional \mathcal{C}_{space} (translation and rotation of a rigid body robot), and contain multiple homotopy classes. Building , Figure 7(a) , represents a UAV robot (no kinematics are considered) inspecting an urban apartment complex that has a solid center and two wings with four stories each. Tunnel , Figure 7(b) , is a maze of tunnels through complex geometry that exercises the cost of collision detection and Reeb Graph construction more fully.

Table II displays the variables used for the similarity metric thresholds and maximum failures allowed for for PDR construction. We used k=5 shortest paths in the algorithm across all methods. We determined the values to create roadmaps of comparable sizes and qualities (bold) to facilitate a fair comparison between the various approaches. The average time to construct each PDR in 30 trials (10 in Tunnel ) with outliers removed and normalized to the time TBEDS required is shown in Figure 8 . In darker color, the time required specifically for the useful cycle check ( Algorithm 6 ) is shown. A* did not complete within 10,000 seconds on any trial in the Building or Tunnel environments. The time reported for TBEDS includes the time required to construct the Reeb Graph representation of the environment.
Fig. 8. - Time for PDR creation with TBEDS, LPSS, and A * normalized to TBEDS in the five environments. In darker color is the time required for path comparison phase of the algorithm. Results averaged over 30 trials (10 in tunnel, outliers removed). A * did not complete within 10,000 seconds on any trial in the building or tunnel environments.
Fig. 8.

Time for PDR creation with TBEDS, LPSS, and A * normalized to TBEDS in the five environments. In darker color is the time required for path comparison phase of the algorithm. Results averaged over 30 trials (10 in tunnel , outliers removed). A * did not complete within 10,000 seconds on any trial in the building or tunnel environments.

Show All
Table II Similarity metric threshold and maximum failed iterations used for PDR construction, and the resulting average roadmap sizes (nodes and edges) over all trials (outliers removed) for TBEDS, LPSS, and A*. Note, A* was unable to complete computation in 10,000 seconds on all trials in building and tunnel
Table II- Similarity metric threshold and maximum failed iterations used for PDR construction, and the resulting average roadmap sizes (nodes and edges) over all trials (outliers removed) for TBEDS, LPSS, and A*. Note, A* was unable to complete computation in 10,000 seconds on all trials in building and tunnel

Our results show that both TBEDS and LPSS allow PDRs to be more efficiently constructed by more than two orders of magnitude in certain environments compared with A*. Further, TBEDS is more efficient in time than LPSS by a factor of two to twelve depending on the environment.

The core reason this occurs is a reduction in the time taken for useful cycle validation (shown in dark color in the histogram). Note that in both LPSS and A* the dominant computation is the useful cycle check, often taking more than 90% of the computation time. While LPSS reduces the number of collision checks using an approximated validation of deformation compared with A*, TBEDS entirely eliminates collision checking during this phase. Ultimately, the A* approach is not scalable to complicated environments. Using path similarity allows PDRs to be constructed in a reasonable time frame.

This is not without a trade-off. As noted before, LPSS performs a deformation validation check, whereas TBEDS simply approximates a likelihood of this existing. However, with a cheaper useful cycle check more effort could be spent checking more samples to create a higher quality roadmap. We would like to explore this effect and apply concepts from TBEDS to further reduce the computation time required for PDR construction.
SECTION VII.
Conclusion

We presented the problem of approximating path similarity and proposed two similarity metrics. Further, we demonstrated the usefulness and efficiency of our metrics in various ways. We consider our metrics complementary in how they approximate path similarity.

In the future, we would like to explore how the notion of path similarity can be used in developing and analyzing novel motion planning algorithms and applications for multiagent robot systems. Additionally, we would like to continue to improve upon the topology-based edit distance similarity to overcome degenerate cases.

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
A New Global Path Planning Strategy for Mobile Robots Using Hierarchical Topology Map and Safety-Aware Navigation Speed

2019 IEEE/ASME International Conference on Advanced Intelligent Mechatronics (AIM)

Published: 2019
Global path planning method of mobile robot in uncertain environment

2010 Chinese Control and Decision Conference

Published: 2010
Show More
References
1.
S. Bhattacharya, V. Kumar and M. Likhachev, "Search-based path planning with homotopy class constraints", Proc. of the Twenty-fourth AAAI Conference on Artificial Intelligence , July 2010.
Show in Context Google Scholar
2.
S. Bhattacharya, M. Likhachev and V. Kumar, "Identification and representation of homotopy classes of trajectories for search-based path planning in 3d", Proceedings of Robotics: Science and Systems , June 2011.
Show in Context CrossRef Google Scholar
3.
F. Bourgault, A. A. Makarenko, S. B. Williams, B. Grocholsky and H. F. Durrant-Whyte, "Information based adaptive robotic exploration", Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems (IROS) , vol. 1, pp. 540-545, 2002.
Show in Context View Article
Google Scholar
4.
D. Demyen and M. Buro, "Efficient triangulation-based pathfinding", Proceedings of the 21st National Conference on Artificial Intelligence- , vol. 1, pp. 942-947, 2006.
Show in Context Google Scholar
5.
J. Denny, R. Sandstr√∂m, A. Bregger and N. M. Amato, "Dynamic region-biased rapidly-exploring random trees", Proc. Int. Workshop on Algorithmic Foundations of Robotics (WAFR) , December 2016.
Show in Context Google Scholar
6.
A. Dobson and K. E. Bekris, "Sparse roadmap spanners for asymptotically near-optimal motion planning", Int. J. of Robotics Research , vol. 33, pp. 18-47, 2014.
Show in Context CrossRef Google Scholar
7.
H. Doraiswamy and V. Natarajan, "Efficient algorithms for computing reeb graphs", Comput. Geom. Theory Appl. , vol. 42, no. 6-7, pp. 606-616, Aug. 2009.
Show in Context CrossRef Google Scholar
8.
R. Geraerts and M. H. Overmars, "Creating high-quality paths for motion planning", Int. J. of Robotics Research , vol. 26, no. 8, pp. 845-863, 2007.
Show in Context CrossRef Google Scholar
9.
D. Grigoriev and A. Slissenko, "Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane", Proceedings of the 1998 International Symposium on Symbolic and Algebraic Computation ISSAC '98 , pp. 17-24, 1998.
Show in Context CrossRef Google Scholar
10.
A. Hatcher, Algebraic Topology, Cambridge University Press, 2001.
Show in Context Google Scholar
11.
J. Hershberger and J. Snoeyink, "Computing minimum length paths of a given homotopy class", Proc. 2nd Workshop Algorithms Data Struct. , vol. 519, pp. 331-342, 1991.
Show in Context CrossRef Google Scholar
12.
M. Hilaga, Y. Shinagawa, T. Kohmura and T. L. Kunii, "Topology matching for fully automatic similarity estimation of 3d shapes", Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques SIGGRAPH '01 , pp. 203-212, 2001.
Show in Context CrossRef Google Scholar
13.
L. Jaillet and T. Sim√©on, "Path deformation roadmaps: Compact graphs with useful cycles for motion planning", Int. J. of Robotics Research , vol. 27, no. 11-12, pp. 1175-1188, 2008.
Show in Context CrossRef Google Scholar
14.
L. P. Kaelbling and T. Lozano-Perez, "Integrated task and motion planning in belief space" in The International Journal of Robotics Research, 2013.
Show in Context CrossRef Google Scholar
15.
L. E. Kavraki, P. Svestka, J. C. Latombe and M. H. Overmars, "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", IEEE Trans. on Robotics and Automation , vol. 12, no. 4, pp. 566-580, August 1996.
Show in Context View Article
Google Scholar
16.
J. C. Latombe, "Motion planning: A journey of robots molecules digital actors and other artifacts", Int. J. of Robotics Research , vol. 18, no. 11, pp. 1119-1128, 1999.
Show in Context CrossRef Google Scholar
17.
V. Levenshtein, "Binary Codes Capable of Correcting Deletions Insertions and Reversals", Soviet Physics Doklady , vol. 10, pp. 707, Feb. 1966.
Show in Context Google Scholar
18.
T. Lozano-P√©rez and M. A. Wesley, "An algorithm for planning collision-free paths among polyhedral obstacles", Communications of the ACM , vol. 22, no. 10, pp. 560-570, October 1979.
Show in Context CrossRef Google Scholar
19.
G. Navarro, "A guided tour to approximate string matching", ACM Comput. Surv. , vol. 33, no. 1, pp. 31-88, Mar. 2001.
Show in Context CrossRef Google Scholar
20.
D. Nieuwenhuisen and M. H. Overmars, Useful cycles in probabilistic roadmap graphs, pp. 446-452, 2004.
Show in Context Google Scholar
21.
V. Pascucci, G. Scorzelli, P.-T. Bremer and A. Mascarenhas, "Robust on-line computation of reeb graphs: Simplicity and speed", ACM Trans. Graph. , vol. 26, no. 3, July 2007.
Show in Context CrossRef Google Scholar
22.
B. Raveh, A. Enosh and D. Halperin, "A little more a lot better: Improving path quality by a path-merging algorithm", IEEE Transactions on Robotics , vol. 27, no. 2, pp. 365-371, April 2011.
Show in Context View Article
Google Scholar
23.
G. Reeb, "Sur les points singuliers d'une forme de pfaff complement integrable ou d'une fonction numerique", Comptes Rendus Acad. Sciences Paris , vol. 222, pp. 847-849, 1946.
Show in Context Google Scholar
24.
J. H. Reif, "Complexity of the mover's problem and generalizations", Proc. IEEE Symp. Foundations of Computer Science (FOCS) , pp. 421-427, October 1979.
Show in Context View Article
Google Scholar
25.
E. Schmitzberger, J. L. Bouchet, M. Dufaut, D. Wolf and R. Husson, "Capture of homotopy classes with probabilistic road map", Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems (IROS) , vol. 3, pp. 2317-2322, 2002.
Show in Context View Article
Google Scholar
26.
H. Si, "Tetgen a delaunay-based quality tetrahedral mesh generator", ACM Trans. Math. Softw. , vol. 41, no. 2, pp. 11: 1-11: 36, Feb. 2015.
Show in Context CrossRef Google Scholar
27.
T. Simeon, J.-P. Laumond and C. Nissoux, "Visibility-based probabilistic roadmaps for motion planning", Advanced Robotics , vol. 14, no. 6, pp. 477-493, 2000.
Show in Context CrossRef Google Scholar
28.
J. P. van den Berg, D. Nieuwenhuisen, L. Jaillet and M. H. Overmars, "Creating robust roadmaps for motion planning in changing environments", Proc. IEEE/RSJ Int. Conf. Intelligent Robots and Systems (IROS) , pp. 1053-1059, Aug 2005.
Show in Context View Article
Google Scholar
29.
Z. Wood, H. Hoppe, M. Desbrun and P. Schr√∂der, "Removing excess topology from isosurfaces", ACM Trans. Graph. , vol. 23, no. 2, pp. 190-208, Apr. 2004.
Show in Context CrossRef Google Scholar
30.
Z. J. Wood, P. Schroder, D. Breen and M. Desbrun, "Semi-regular mesh extraction from volumes", Proceedings of the Conference on Visualization'00 VIS'00 , pp. 275-282, 2000.
Show in Context View Article
Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

¬© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
¬© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
