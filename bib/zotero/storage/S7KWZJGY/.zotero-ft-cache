arXiv:2206.06307v1 [cs.RO] 13 Jun 2022

Towards Constructing Finer then Homotopy Path Classes
Weifu Wang and Ping Li Cognitive Computing Lab
Baidu Research 10900 NE 8th St. Bellevue, WA 98004, USA {harrison.wfw, pingli98}@gmail.com
Abstract
This work presents a new path classiﬁcation criterion to distinguish paths geometrically and topologically from the workspace, which is divided through cell decomposition, generating a medial-axis-like skeleton structure. We use this information as well as the topology of the robot to bound and classify different paths in the conﬁguration space. We show that the path class found by the proposed method is equivalent to and ﬁner than the path class deﬁned by the homotopy of paths. The proposed path classes are easy to compute, compare, and can be used for various planning purposes. The classiﬁcation builds heavily upon the topology of the robot and the geometry of the workspace, leading to an alternative ﬁber-bundle-based description of the conﬁguration space. We introduce a planning framework to overcome obstacles and narrow passages using the proposed path classiﬁcation method and the resulting path classes.
1

1 Introduction
Let us consider the following scenario: a box in the middle of the room, what are the different ways to pass the box and reach the other side of the room? We can pass the box from the left or the right; if the box is not very tall, we can also jump over the box. We recognize that these are different paths, but it is difﬁcult to deﬁne their differences topologically. If we are not allowed to jump over the box, i.e., viewing navigating the room as a planar problem, the two paths passing the box from left or right belong to two different homotopy classes. In other words, one cannot ﬁnd a way to continuously deform the path from one to the other without passing through the box. Path classes are helpful when planning for multiple robots or ﬁnding diverse paths to increase the chance of survival if different paths fail with various probabilities.
In the original 3D problem, because there is a possibility of jumping over the not-so-tall box, the paths passing through the left and right belong to the same homotopy class. In recent years, topological tools such as homotopy and homology were introduced to categorize paths (Bhattacharya et al., 2013), but such deﬁnition becomes weak in dimensions beyond two unless the obstacles create a topological hole in the space. In our toy example, the box has to be touching the roof to create such a topological hole. Another example is shown in Figure 1, where there are two pillars with two platforms attached to the obstacles. Five colored paths are geometrically distanced, but only one (the bright blue) path belongs to a different homotopy class if the tall pillar touches the roof. One of the primary purposes of this work is to mathematically distinguish the above ﬁve paths and show the derived properties extending to the conﬁguration space.
Figure 1: A set of paths that belong to the same homotopy class except the bight blue path closest to the viewpoint.
We propose a new path categorization criterion, so that different path classes can either mean topologically or geometrically different. The classiﬁcation starts with analyzing the workspace rather than the conﬁguration space. We show that many critical workspace properties, including homotopy information, can extend to the conﬁguration space. A workspace cell-decomposition is performed to ﬁnd the almost-Voronoi cellscomplement, which contains the skeleton or medial-axis (Xu et al., 1992) of the workspace. We show that though it starts in the workspace, the resulting path class properties hold in the conﬁguration space.
2

We should mention that, although some toy examples and analysis will be presented in R2, the method is most beneﬁcial in 3D. Unlike the methods that conduct conﬁguration space analysis and use samplingbased methods, our proposed path categorization standard only depends on the topological and geometrical properties of the workspace and robot itself, which are both easy to analyze and visualize. We show that the proposed criterion can distinguish conﬁguration space paths with different workspace properties, and the resulting path classes can be used for various planning tasks, like obtaining path existence (McCarthy et al., 2012), ﬁnding diverse paths (Lyu et al., 2016), and planning for multiple agents.
A new planning framework can be built upon the proposed path classes and associated methods. The framework aims to separate topological and geometrical planning into two stages. In the workspace, the path classes found can represent the connectivity information in both the workspace and the conﬁguration space. We can integrate the geometrical constraints into the topological paths and generate satisfying geometrical paths using the topological paths found using the path classes. In this work, we focus on the theoretical foundations of path classiﬁcation and discuss the geometrical interpolation step.
The proposed path classiﬁcation starts from the workspace. The ﬁrst step is to distinguish the free regions from the obstacles. Since we know the geometries of the obstacles in the workspace, we can use cell-decomposition as the ﬁrst step of the processing. We adapt a Delaunay-triangulation-based cell decomposition, producing regions with properties similar to α-shapes (also written as alpha-shapes) (van Kreveld et al., 2011; McCarthy et al., 2012). The primary focus of this work is that we show the cell decomposition in the workspace, plus the topology of the robot information, can correctly approximate the simplicial complex in the conﬁguration space.
Cell-decomposition is a well-studied technique in the planning community, and many variations have been used in the past. Axis-aligned cell decomposition is simple, but the curse of dimensionality arises when conducted in the conﬁguration space. Alpha-shape and simplex have also been used in planning (McCarthy et al., 2012), but the method usually requires some dense sampling in the conﬁguration space. Medial-axis approaches often employ cell-decomposition methods as well.
The topology of the robot is the abstraction of the possible geometries a robot can reach and can usually be described using a collection of chains. For example, an open-chain has a different topology compared to a closed chain, but two open chains with different link lengths share the same topology. Paths within the same proposed path class have good geometric properties for a serial chain. The paths for a collection of chains can inform a path for the complex robot. We prove that the proposed categorization generates the same topology path classes when there are topological holes but can also further classify additional path classes based on the geometrical information when topological holes do not exist. Our path classiﬁcation is ﬁner than the homotopy class.
As presented in this paper, we are only considering polyhedron obstacles. While the proposed algorithm can handle concave obstacles, the decomposition can be expensive when there are many closely placed concave obstacles. This paper is primarily theoretical, with proof-of-concept examples and experiments. Another limitation of the current work is that the topological holes within the workspace obstacles are not well analyzed. We simply categorize such holes as regions adjacent to a single obstacle.
3

Our main contributions in this work are summarized as follows:
1. We introduce a ﬁner path classiﬁcation method compared to pure topological-based tools; our method can further identify paths that are not distinguishable topologically but are still distant from each other;
2. The path class provides high-level topological paths; we present deﬁnitions, proofs, and algorithms to construct the topological paths;
3. We introduce a planning framework based on the proposed path classes, which can provide good kinematic path candidates within tight spaces;
4. We show that the proposed methods are robust to small perturbations of the obstacles and can make updates efﬁciently;
2 Related Work
Researchers have been using homotopy class to categorize paths on the plane and in space (Kim et al., 2012; Bhattacharya et al., 2012). In 2D, the homotopy class (Hatcher, 2002) of a path perfectly categorizes the paths that wrap around the planar obstacles differently. Based on such topological tools, works on how to search paths (Bhattacharya et al., 2012) and ﬁnd manipulation approaches (Bhattacharya et al., 2015) using homotopy classes were proposed. More recent work has studied how to extend the ideas into 3D around knot-like obstacles and attempts to combine the path class constraints with path optimality constraints (Bhattacharya and Ghrist, 2018). The shortest path is one of the ultimate goals for motion planning, but only limited cases have been solved, especially when the obstacles are involved. In Grigoriev and Slissenko (1998) and Hershberger and Snoeyink (1994), the authors studied how to ﬁnd the shortest paths in a given homotopy class. In Pokorny et al. (2016), the authors proposed to use sampling-based methods to compute ﬁltrations and persistent homology to classify paths.
In this and many other existing works, the authors attempt to distinguish paths by measuring the persistent homology of obstacles (Pokorny et al., 2016) or ﬁnding homotopy classes (Bhattacharya et al., 2015). However, in many cases, especially in higher dimensions, the topological holes are hard to create or compute. For example, in Figure 1, the two pillars and the connected platforms do not create a topological hole, all paths are homotopy equivalent, and the persistent homology of the obstacles is of low dimensions. The persistent homology and associated measure may not distinguish the path classes fully.
At the same time, researchers have also attempted to deﬁne path diversities beyond the topological properties. In Branicky et al. (2008), the authors introduced path diversity by decomposing space into cells and used the cell information to classify paths. Path diversity deﬁnitions also exist based on the measurement of closeness and relevance to the goal (Knepper and Mason, 2009; Knepper, 2011; Knepper et al., 2012). Researchers have also introduced probability into the deﬁnitions of path diversity. Some researchers have deﬁned survivability as a critical concept in the path diversity, measuring how likely paths are to succeed if some probabilistic events were to happen at some locations (Erickson and LaValle, 2009; Lyu et al., 2016). In addition, researchers have studied path diversity in various realistic settings, such as ambush avoidance (Boidot et al., 2015), and detection avoidance for aircraft (Zabarankin et al., 2006), and how to navigate through mined waters (Babel and Zimmermann, 2015). In Schwartz and Sharir (1983), the authors presented a semi-algebraic description to distinguish various obstacles and can be used to deﬁne path classes. However, the sets can become increasingly difﬁcult to compute when the obstacles become complex. In Sime´on et al. (2004), the authors also proposed to use sampling-based methods and reachable regions to perform motion planning, which is similar to the method proposed in this work. One of the main differences
4

is that we are not using sampling-based approaches in our proposed method, only the obstacle descriptions and robot structure.
In networking, the study of path diversity has also attracted attention, as the network communication and information ﬂow needs to be diverse to handle trafﬁc conditions (Yuan et al., 2005). Heuristic measurements were introduced to ﬁnd diverse paths (Voss et al., 2015) and compute the maximum diversity of paths (Mart´ı et al., 2013). Similar to the graph coloring problem, researchers also attempted to color different paths to deﬁne their diversity (Chan and Kirkpatrick, 2014). Geometric methods such as visibility have also been used to generate diverse paths (Quispe et al., 2013), or cover spaces like art gallery problems (O’Rourke, 1987). Theoreticians have also attempted to analyze how to ﬁnd disjoint paths and the related complexity (Xu et al., 2006). Path diversity has also been studied under pursuit and evasion (Chung et al., 2011).
Multi-robot planning is one of the most common scenarios associated with path diversity in robotics. Multi-robot coordination usually needs diverse paths to succeed (Parker, 2009; Pecora et al., 2018). Multirobot planning has also been studied on graphs (Pereyra et al., 2017). In more challenging scenarios, people have studied the path diversity problem in online settings, such as diversity maintenance problem (C´ urkovic´ and Cˇ ehulic´, 2020), control problems (Liu and Belabbas, 2019), and online planning and trajectory smoothing and optimization (Zhu et al., 2015).
3 Decomposition and Robot Topology
We introduce the foundations of the path classiﬁcation: workspace decomposition and robot topology representation. The following section shows the product relation between workspace cells and the robot topology that can successfully reproduce the path classes in the conﬁguration space. We decompose the workspace based on the Voronoi boundaries’ dimension and use Delaunay triangulation as the computation basis.
Deﬁnition 1. Let there be two disjoint objects Oi and Oj, denote their convex hull as CH(Oi,j). Deﬁne a joint-hull J H(Oi,j) = Xi,j as a subset of CH(Oi,j) so that Xi,j ∩ Xs,t = ∅ for i = j = s = t, and Xi,j ∩ Xi,k = Oi for i = j, i = k, j = k. Deﬁne the joint cover of a given workspace W with obstacles Oi, 0 < i ≤ N as the union of all joint hulls for all pairs of objects / obstacles in a given space, JC(W ) = ∪Xi,j, ∀i, j ∈ N, i = j.
In other words, a joint hull between two obstacles Oi and Oj contains Voronoi cell boundaries that have equal distances to Oi and Oj. We classify free regions based on the number of adjacent obstacles. The degree of Voronoi cell boundaries encodes the degree of holes the corresponding region would create when removed from the workspace.
The α-shape is a one-parameter family of polytopes that quantity the shape of a point set (parameterized by α ∈ R+). When α = 0, the alpha shape of S is simply S itself. When α = ∞, we have that the alpha shape of S is equivalent to the convex hull of S. For intermediate α, the α-shape is more complicated but describes the shape of S in various levels of detail. The α-shapes provide a natural interpretation for a union of balls and are closely related to C˘ ech complex (Ghrist, 2014).
Using α shapes to describe the obstacles is an excellent way to describe some objects’ convex and concave regions at some resolution. Finding the α-shape description for the obstacles is usually preferred. In McCarthy et al. (2012), the authors used sampling-based methods in the conﬁguration space to build α-shapes and approximate the conﬁguration obstacles, then use the resulting information to predict the existence of paths.
5

The joint hull of two obstacles is an α-shape and is a subset of the triangulation between the two obstacles in the workspace. The description may not correspond to a ﬁxed α. So, in other words, the joint hull is a weighted α-shape (Edelsbrunner, 1992). It is challenging to select appropriate weights to describe the desired details of the geometry. The known runtime for ﬁnding the weighed α-shapes is O(n2) in R3 for a given weight. Because the weight is hard to select, we can ﬁnd the joint hull another way, based on triangulation. We can avoid directly ﬁnding the weighted-α-shape because there can be many valid joint hulls for Oi and Oj .
We use Delaunay triangulation to construct a joint cover. Based on the Deﬁnition 1, there can be more than one valid joint hull between two objects. We would like to ﬁnd the Joint Cover that maximizes the region adjacent to two obstacles.
Let us introduce Algorithm 1 to construct the joint cover. The process builds upon the Delaunay Triangulation and then merges adjacent regions based on the number of adjacent O. The algorithm’s runtime is worst-case O(n2) for a total of n vertices among all obstacles, which is the worst-case bound for triangulation. However, just as the triangulation and α-shape constructions, the practical runtime is usually much less than the theoretical worst case. The construction can also be incremental, and runtime can be faster if the obstacles and vertices are sorted geometrically ﬁrst. Figure 2 shows some Joint Hulls among random 2D polygon obstacles. Figure 3 shows the joint hulls in 3D for an environment with multiple obstacles.
Figure 2: Random gray polygons and corresponding Joint Hulls obtained using Algorithm 1.

(a) 3D Environment

(b) Joint hulls

Figure 3: A 3D environment and boundaries of the joint hulls between adjacent obstacles. In the ﬁgure on the write, different colored areas represent regions adjacent to two obstacles, and the spaces among the colored regions are the common spaces that are adjacent to multiple objects.

6

Algorithm 1: Joint Cover input :Oi, i = 1, . . . , N , W ∈ Rd output :JC(W), GA DT ← Delaunay triangulation of obstacles; Initialize GA = (V, E) where V = O· and E = ∅; while DT is not empty do si ← pop triangle from DT; L ← the O si is adjacent to; N ← neighboring triangles of si; while N = ∅ do sk ← pop N ; if current region has the same adjacent O as sk then Add neighbors of sk into N ; Remove sk from DT; Merge sk into current region; Update current region neighboring O set; end end Set the merged region as J (·) based on the adjacent O·; end return JC ← ∪J (·), GA
The adjacency is closely related to visibility. If two obstacles are mutually visible, a free region must exist adjacent to both obstacles. Nevertheless, this free region may also be adjacent to other obstacles. We can use visibility to construct GA quickly. Visibility between obstacles is hard to compute directly. The triangulation and merging process can ﬁnd GA as well as JC simultaneously.
The conﬁguration space is closely tied to the topology of the robot. A robot B can deform into different geometries and sometimes even different topologies. Embedding various robot deformations into the workspace will result in different conﬁgurations. Let us select a set of key points on the robot, including but not limited to the endpoints of each joint on the robot. We can show that embedding the key points into the workspace can fully represent the embedding of robot deformations and infer the associated conﬁguration.
Let us select k key points (pi = (xi, yi, zi), i ∈ {1, 2, . . . , k}) on the robot with ﬁxed pair-wise distances between adjacent points. Note, a single key-point p may be adjacent to many key points (Ap), and it has a ﬁxed distance to each adjacent key point q ∈ Ap, but two points in Ap may not have a ﬁxed distance constraint. For example, p can be the right shoulder of a humanoid robot. The set Ap includes the spine connecting to the head, the left shoulder, and the right elbow. These points in Ap all have ﬁxed distances to the right shoulder, but they do not need to maintain any ﬁxed distances. The relations among these key points are ﬁxed for a given robot. Here, we do not consider the robots that can reconﬁgure themselves.
When the robot is a single point, the planning can be simple, and the cells derived above can give the path classes. When the robots are more complex, the path classes in the conﬁguration space can differ from the workspace cells. We show that we can combine the workspace cells and the topology of the robot information and map to the path classes in the conﬁguration spaces. This way, we can independently analyze the workspace information and robot topology without analyzing or sampling in the high-dimensional and hard-to-describe conﬁguration space.
7

The conﬁguration space is a simpliﬁed representation of the workspace information combined with the robot deformations, so that conﬁguration space C is homeomorphic to W ×P (B). In fact, (C, π, B, P (B)) is a ﬁber bundle (Hatcher, 2002) if π maps a conﬁguration to its workspace embedding region. The conﬁguration space has the subspace topology of W × P (B). Because the non-trivial mapping of π is caused by the obstacles, where the paths are disconnected, a path in W × P (B) corresponds to a path in C if it is valid in C. We can deﬁne valid path classes on W × P (B) to classify paths in C. The path in W and the embedding function π would be easy to visualize and analyze independently.
Given W and JC(W ), let us label the free regions to represent the workspace connectivity better. Note that a free region is adjacent to two obstacles if it is a compact region inside a joint hull. Other regions can be found using Algorithm 1. The free regions and their adjacency form a simplicial complex representation of the workspace, and their adjacency relation GA symbolizes the workspace connectivity.
Deﬁnition 2. Deﬁne the label of a free-region as:
• If a free-region is adjacent to a single obstacle Oi and not a hole within obstacle Oi, we assign label i to the region;
• If a free-region is a hole within obstacle Oi, we assign label −i × k to the region, for the kth hole; • If a free-region is adjacent to Oi and Oj, assign label (N ∗ i + j) assuming j < i; • If a free-region is adjacent to more than two obstacles, {Oi}, i ∈ P , where P is a subset of positive
integers no larger than N ; assign label f (·) to the region, where f is the Go¨del numbering function, f (i1, i2, . . . , i|P |) = 2i1 · 3i2 · 5i3 . . . pi|P|P|| , where pj is the jth prime number, i1 > i2 > . . . > i|P |; this encoding is unique for each region.
The structure of the k key points on a given robot also forms a simplicial complex which does not change even when the robot deforms in most cases. Let us denote the workspace free-region complex as SW , and the robot key-points structural complex as SB. The product relation between the two complex SW × SB can be used to represent the embedding of the robot deformation into the workspace. As SW and SB are abstractions of W and P (B), they are homotopy equivalent to W and P (B), respectively. The product SW × SB are homotopy equivalent to W × P (B). We can therefore have the following result,
Lemma 1. Any two paths that are not homotopy equivalent on C correspond to two different paths on SW × SB.
Proof. If two paths belong to the same homotopy class in W × P (B), the corresponding paths must belong to the same homotopy class in C. If there exist two paths belonging to two homotopy classes in C, topological holes exist in C. The hole is either created by workspace obstacle or robot deformation limit. Both will lead to topological holes in W × P (B). The mapping of the topological hole from W × P (B) to SW × SB also results in a topological hole; thus, the corresponding paths cannot belong to the same simplicial cell.
On the robot structural simplex, the highest order simplex is the 1D chains, either open or closed. For example, a humanoid robot can have four chains sharing a common endpoint. These chains can uniquely determine the robot’s topology and geometry. It is sufﬁcient to plan for these chains, either independently or simultaneously.
8

(a) Robot simplex

(b) Space simplex

Figure 4: Sample SB and GA. The robot simplex can change based on the current deformation, but the basic structure usually stays the same. The GA is for the environment shown in Figure 3.

In Figure 4, we show the SB on the left, and GA for environment shown in Figure 3 on the right. Most robots have a topology homomorphic to a collection of chains. The chain can be open or become closed based on the deformation of the robot. For example, with a humanoid robot, when the two hands hold an object together, the topology of the robot change, where the two open chains connect and form a closed chain. When considering embedding the robot into the workspace, a closed chain has to be embedded and planned as a rigid body, while the open chains can be placed into any connected free regions.
The workspace GA shown in Figure 4(b) cannot be drawn as a planar graph. Each node represents an obstacle, and each edge indicates the existence of a common region between two obstacles. A triangle on GA represents there is some free region adjacent to all three obstacles. Simplex of order k represents a common region among k − 1 obstacles. The SW can be constructed from GA so that every k-order simplex on SW is a k + 1th-order simplex on GA.
We can even study the topology and connectivity when removing an obstacle in the space using GA and SW . For example, in Figure 4(b), when we treat an obstacle (A) in the middle of the room as a movable object and attempt to relocate the obstacle, the resulting workspace topology can be easily derived from GA by removing A from the graph. This task-level information can be beneﬁcial when planning in tight spaces where interaction with the environment is needed to admit feasible paths.
Let us deﬁne a state of the robot as a collection of pairs L(·) = (wi, qj), where wi is a vertex on SW and qj a vertex on SB. A path P is a sequence of pairs P = {L(1), L(2), . . .}, which is an abstraction of conﬁgurations along the path. A homomorphism exists between the workspace path of a chain and the corresponding path in the conﬁguration space.

9

4 Path Classes
One major challenge in planning in the conﬁguration space is that it is difﬁcult to map the geometry of workspace objects into the conﬁguration space, i.e., the π−1 is hard to ﬁnd near different workspace neighborhoods. The workspace’s geometry is often tangled with the robot topology, leading to different descriptions in the conﬁguration space. We show that the product topology of workspace cells and robot structure leads to important topological properties in the conﬁguration space. We then show that the proposed path classiﬁcation criterion will lead to a ﬁner path class than the homotopy class.
The joint cover categorizes free regions based on obstacle adjacency relations, or in other words, the Voronoi cells among the obstacles. Voronoi cells describe the connectivity information in the workspace. A path in C cannot be valid if the mapping in W is not valid. We will use workspace topology and the topology of the robot to approximate the topology in the conﬁguration space. The conﬁguration space topology can help ﬁnd feasible paths, separate paths, and explore possible interactions with the workspace to satisfy task-level requirements. First, we show that the joint hull can help distinguish paths topologically with respect to the obstacles.
Lemma 2. Given a workspace of dimension d, and obstacles Oi, 0 < i ≤ N , the free-regions creates (d − 1)-dimensional holes in the joint cover.
Proof. The free-regions create d − 1-dimensional holes in the joint cover as they cut each joint hull into isolated regions.
The obstacles do not necessarily create holes in the workspace or conﬁguration space. The statement is only valid within the joint cover. Any path intersecting the joint cover can be identiﬁed by its winding relations with different obstacles.
Two paths represented by sequences of states L(·) without loops are geometrically near each other if a one-to-one correspondence exists between the states on the respected paths. When there are loops on a given path, we derive its embedding after removing loops. Two different labels can represent the same state, such as an open-chain deforms in the same set of connected free regions can all correspond to the same state, as long as the two endpoints of the chain remain in the same region. In 2D workspace, SW has at most 1-simplex, and in 3D, SW has at most 2-simplex. We can use Algorithm 2 to simplify the representation for any robot state L(·), and we consider two states to be different if they do not have identical contracted representations Lc(·). For an open chain, the simpliﬁed representation can be contracted to a single pair representing the sequence of workspace free-regions. We can similarly use Go¨del numbering to determine the embedding uniquely.
Let us deﬁne the geometrical-homotopy path class as follows. Given two paths f1 and f2 between x and y, if the simpliﬁed representation sequences for f1 and f2 are different, then the two paths belong to two classes.
Lemma 3. For point robot, the proposed path class deﬁnition is ﬁner than the homotopy class deﬁnition.
Proof. If the robot is just a single point, the representation L(·) can be simpliﬁed to just a vertex in SW . The path classes and states depend only on SW . In 2D, the workspace partition yields the same path classes as the homotopy class for any start and goal. In 3D, two regions with different labels may still be connected. If two regions are disconnected, they must have different labels, i.e., representations. Disconnection is required to produce different homotopy path classes.
10

Algorithm 2: Representation contraction input :L(i), SW , SB output :Lc(i) Contract 1-simplex on SB embedded in same wi; for Each remaining simplex on SW do if Corresponding region is compact then if The corresponding key-points form same simplex on SB then Contract the simplex on SB and SW ; end end return the contracted Lc(i);
Lemma 3 directly follows from Lemma 2. The classiﬁcation is ﬁner only in dimensions three or higher. In 2D, paths passing the obstacles differently belong to different homotopy classes as the 2D obstacles create topological holes. In 3D, the paths that go through different free regions may belong to the same homotopy class, but our criterion can identify and classify them into ﬁner categories.
Such classiﬁcation is most beneﬁcial when narrow passages exist or the obstacle has disproportional sizes in different dimensions, such as a nail shape obstacle. In these situations, the obstacles may not create topological holes in C, but passing different surfaces of the obstacles can result in geometrically distanced paths. Using the proposed classiﬁcation criterion, paths that pass through different surfaces of obstacles may be classiﬁed into different classes, especially when the surfaces create sharp edges.
Lemma 4. For any given conﬁguration q with representation L(i), a compact neighborhood U exists in the conﬁguration space with the same L(i).
Proof. Small perturbations of the key points without leaving the embedding free regions have the same representations. Small perturbations of key points will lead to similar conﬁgurations.
Lemma 5. Every region of the conﬁguration space with the same contracted representation Lc(i) is contractable, so are their ﬁnite intersections.
Proof. Every state is homeomorphic to the product of ﬁnitely many simply connected regions in the workspace.
Lemma 6. Given two conﬁgurations p and q, and the corresponding representations Lcp(·) and Lcq(·), if loops based at arbitrary conﬁguration x passing through p and passing through q belong to two homotopy classes, then Lcp(·) and Lcq(·) must be different.
Proof. For a given point x, if the loop passing through p and q belong to different homotopy classes, obstacles exist that prevent the loop from passing through p to deform to q in the conﬁguration space. If L(p) and L(q) have the same representation, each key point must be in the same embedding region following the preceding Lemma. Therefore, no obstacles prevent these key points from deforming between p and q. The omitted key points must be along a ﬁxed path passing through a connected sequence of regions, thus can deform between p and q. Therefore, two conﬁgurations p and q are connected in the same free regions if they have the same representation.
11

Theorem 7. Given two paths in C, if two paths belong to different homotopy classes, then the two paths must have at least one different representation.
Proof. If two paths are in different homotopy classes, obstacles must exist preventing the paths from continuously deforming to each other. Then, there must exist obstacles that separate some states along the paths. Different states have different representations.
Corollary 1. Any two paths that belong to two different homotopy classes on C maps to two paths in different classes deﬁned by the proposed contracted representations on SW × SB. Lemma 8. Two paths in C may have different contracted representations Lcp(·) but belong to the same homotopy class on C.
Proof. If the robot is a point robot, the statement follows from Lemma 3. If the robot is not a point robot, such as an open chain, two paths that go around an obstacle near different surfaces can have different representations, as the paths go through different cells in SW . However, if the two surfaces are not disjoint, the two paths will belong to the same homotopy class.
The above lemmas and theorem show that workspace regions and robot structure representation capture the topology information in the conﬁguration space. Therefore, two conﬁguration space paths in different homotopy classes must pass through conﬁgurations with non-identical states. However, non-identical states may have the same fundamental group in the conﬁguration space. Therefore, we have,
Theorem 9. The proposed path class deﬁnition is ﬁner than the homotopy class.
Proof. The theorem is a direct extension of the proceeding Lemmas and Theorem.
We present the following planning framework based on the path classes deﬁned in the preceding sections. The framework ﬁnds topological paths globally and then interpolates the feasible geometries for the robots to implement. This framework aims to separate global navigation from local geometrical implementation. The separation can allow adjustments of local paths without rescheduling the global plan.
1. Find path classes, and adjacency relations of different free regions;
2. Find paths f on SW × SB;
3. Find point path fp that realizes f in W ;
4. Divide fp into pieces that are simple and mostly visible;
5. Interpolate geometrical trajectories piece-wise on fp, compute feasible robot deformations;
6. Adjust paths piece-wise to satisfy robot geometrical constraints;
7. Optimize and smooth the trajectory if needed.
The proposed framework is most beneﬁcial when there are narrow passages in the space. The computation needed to produce the path classes can exceed that of sampling-based motion planning in a relatively open space. As the environment and robot become complex, the proposed framework can produce paths according based on tasks and allow manipulations and collaborations in tight spaces.
12

5 Applications and Veriﬁcation
First, in Figure 3, we show the environment with multiple obstacles, as our proposed path class mainly differs from the homotopy class in 3D. The obstacles are not creating topological holes, and all paths belong to the same homotopy class. However, our deﬁnition would recognize additional classes. The joint cover divides the free regions among adjacent obstacle pairs uniquely. A path passing through different free regions in the joint hulls creates different path classes for a single point.
One primary aim of this paper is to show that the analysis of the workspace along and the robot structural information is sufﬁcient to capture topological information in the conﬁguration space. The resulting path class information can derive much helpful information that usually is extracted using various methods.
For example, in McCarthy et al. (2012), the users used the sampling-based method to compute α-shapes of conﬁguration space obstacles and prove the non-existence of paths. In the proposed method, the structure SW × SB can derive the same information. The idea is very similar to the process used in Schwartz and Sharir (1983). We can follow the below steps,
• If there does not exist a sequence on SW that connects start and goal representation regions, no path would exist;
• If the sequence on SW contains regions that cannot have valid robot embedding, remove this sequence;
• If no sequence remains, there does not exist a path.

(a) Environment with three boxes. (b) Different path classes for an arm traced (c) Planning a 4R arm in an environment

along the base.

with narrow passages.

Figure 5: Joint covers of different environments, path classes, and narrow passage planning scenario.
In Figure 5(a), two boxes have very close distances, but the pink arm cannot move through the narrow region between the boxes. Conﬁguration space narrow passage among the two boxes can be hard to detect, but the free-region derived in the workspace can be directly used to test against the robot’s geometry to determine if a path exists through some region. In the environment shown in Figure 5(a), all paths of the arm belong to the same homotopy class, but our criterion will show that there three colored paths shown in Figure 5(b) are different, and indeed, the red and the yellow paths are pretty distanced geometrically. The criterion can have more advantages when the robot becomes more complex.
The proposed planning framework further utilizes such workspace information. By considering only the key points of the robot, we can quickly check the feasibility of the free regions with respect to the size

13

of the key points. Though the paths for key points do not necessarily mean the existence of paths for the entire robot, the counterexamples would usually include narrow passages where paths are difﬁcult to ﬁnd. For example, in Figure 5(c), the paths for a four-R arm are found using the proposed framework, where the sampling-based planning approach failed to ﬁnd a solution after 4000 valid samples. In the workspace, we can directly test the valid embedding sequence against the robot geometry and workspace constraints, and deformations of robots can be derived to ﬁnd valid conﬁgurations to ﬁt through the narrow passages.
We can also use the path classes to ﬁnd narrow passages or paths with the most chance for survival against probabilistic events (Erickson and LaValle, 2009; Lyu et al., 2016). The robot structural information in path classes may help validate paths for multi-agent planning or ﬁnding particular conﬁgurations to ﬁt through narrow passages, such as the planning of the twistycool problem in OMPL (Sucan et al., 2012).
The proposed path classes are distant geometrically. The resulting path classes are good candidates for multiple agents to avoid collisions. The distance path classes can also allow collaborations in tight spaces. We can further introduce pair-wise distance constraints among key points of different robots in the optimization step, coordinating the paths for the collaborating robots to maintain relative distances and avoid collisions. Such problems can be solved using the proposed planning framework.
6 Conclusions
This work presents a path class deﬁnition that combines the workspace geometry and the topology of the robot. The resulting path class is ﬁner than the homotopy path classes. The classiﬁcation captures geometric and topological information in the conﬁguration space and can help identify connectivity, obstacle topology, and compare path qualities in different path classes. Building upon the presented path classes and the algorithms to ﬁnd them, we propose a new planning framework that separates the global topological plan from local geometrical interpolation. The planning framework, like the proposed path classes, builds upon the workspace’s geometrical analysis. The details of the geometrical implementation of the topological plan are ongoing work. The presented work gives us theoretical foundations for the correctness of separated analysis of workspace geometry and the topology of the robot and then combines them to piece together trajectories in conﬁguration space. One important future work is to reduce further the size and complexity of SW × SB. Currently, the map π from C to W is not being carefully studied. We believe further analysis can be introduced to the map π to produce simpler SB near different positions in W.
References
Luitpold Babel and Thomas Zimmermann. Planning safe navigation routes through mined waters. Eur. J. Oper. Res., 241(1):99–108, 2015.
Subhrajit Bhattacharya and Robert Ghrist. Path homotopy invariants and their application to optimal trajectory planning. Ann. Math. Artif. Intell., 84(3-4):139–160, 2018.
Subhrajit Bhattacharya, Maxim Likhachev, and Vijay Kumar. Search-based path planning with homotopy class constraints in 3d. In Proceedings of the Twenty-Sixth AAAI Conference on Artiﬁcial Intelligence (AAAI), Toronto, Canada, 2012.
Subhrajit Bhattacharya, David Lipsky, Robert Ghrist, and Vijay Kumar. Invariants for homology classes with application to optimal search and planning problem in robotics. Ann. Math. Artif. Intell., 67(3-4):251–281, 2013.
14

Subhrajit Bhattacharya, Soonkyum Kim, Hordur Kristinn Heidarsson, Gaurav S. Sukhatme, and Vijay Kumar. A topological approach to using cables to separate and manipulate sets of objects. Int. J. Robotics Res., 34 (6):799–815, 2015.
Emmanuel Boidot, Aude Marzuoli, and Eric Feron. Optimal planning strategy for ambush avoidance. In Proceedings of the Workshop on Artiﬁcial Intelligence for Transportation: Advice, Interactivity, and Actor Modeling, Austin, TX, 2015.
Michael S. Branicky, Ross A. Knepper, and James J. Kuffner. Path and trajectory diversity: Theory and algorithms. In Proceedings of the 2008 IEEE International Conference on Robotics and Automation (ICRA), pages 1359–1364, Pasadena, CA, 2008.
David Yu Cheng Chan and David G. Kirkpatrick. Multi-path algorithms for minimum-colour path problems with applications to approximating barrier resilience. Theor. Comput. Sci., 553:74–90, 2014.
Timothy H. Chung, Geoffrey A. Hollinger, and Volkan Isler. Search and pursuit-evasion in mobile robotics A survey. Auton. Robots, 31(4):299–316, 2011.
Petar C´ urkovic´ and Lovro Cˇ ehulic´. Diversity maintenance for efﬁcient robot path planning. Applied Sciences, 10(5):1721, 2020.
Herbert Edelsbrunner. Weighted alpha shapes. University of Illinois at Urbana-Champaign, 1992.
Lawrence H. Erickson and Steven M. LaValle. Survivability: Measuring and ensuring path diversity. In Proceedings of the 2009 IEEE International Conference on Robotics and Automation (ICRA), pages 2068–2073, Kobe, Japan, 2009.
Robert W Ghrist. Elementary applied topology, volume 1. Createspace Seattle, 2014.
Dima Grigoriev and Anatol Slissenko. Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane. In Proceedings of the 1998 International Symposium on Symbolic and Algebraic Computation (ISSAC), pages 17–24, Rostock, Germany, 1998.
Allen Hatcher. Algebraic topology. Cambridge University Press, Cambridge, 2002.
John Hershberger and Jack Snoeyink. Computing minimum length paths of a given homotopy class. Comput. Geom., 4:63–97, 1994.
Soonkyum Kim, Koushil Sreenath, Subhrajit Bhattacharya, and Vijay Kumar. Trajectory planning for systems with homotopy class constraints. In Proceedings of the Latest Advances in Robot Kinematics (ARK), pages 83–90, Innsbruck, Austria, 2012.
Ross A. Knepper. On the Fundamental Relationships Among Path Planning Alternatives. Technical Report CMU-RI-TR-11-19, Carnegie Mellon University, The Robotics Institute, Pittsburgh, PA, June 2011.
Ross A. Knepper and Matthew T. Mason. Path diversity is only part of the problem. In Proceedings of the 2009 IEEE International Conference on Robotics and Automation (ICRA), pages 3224–3229, Kobe, Japan, 2009.
Ross A. Knepper, Siddhartha S. Srinivasa, and Matthew T. Mason. Toward a deeper understanding of motion alternatives via an equivalence relation on local paths. Int. J. Robotics Res., 31(2):167–186, 2012.
15

Shenyu Liu and Mohamed Ali Belabbas. A homotopy method for motion planning. arXiv preprint arXiv:1901.10094, 2019.
Yu-Han Lyu, Yining Chen, and Devin J. Balkcom. k-survivability: Diversity and survival of expendable robots. IEEE Robotics Autom. Lett., 1(2):1164–1171, 2016.
Rafael Mart´ı, Micael Gallego, Abraham Duarte, and Eduardo G. Pardo. Heuristics and metaheuristics for the maximum diversity problem. J. Heuristics, 19(4):591–615, 2013.
Zoe McCarthy, Timothy Bretl, and Seth Hutchinson. Proving path non-existence using sampling and alpha shapes. In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA), pages 2563–2569, St. Paul, MN, 2012.
Joseph O’Rourke. Art Gallery Theorems and Algorithms. Oxford University Press, Inc., USA, 1987.
Lynne E. Parker. Multiple mobile robot teams, path planning and motion coordination in. In Encyclopedia of Complexity and Systems Science, pages 5783–5800. 2009.
Federico Pecora, Henrik Andreasson, Masoumeh Mansouri, and Vilian Petkov. A loosely-coupled approach for multi-robot coordination, motion planning and control. In Proceedings of the Twenty-Eighth International Conference on Automated Planning and Scheduling (ICAPS), pages 485–493, Delft, The Netherlands, 2018.
Estefan´ıa Pereyra, Gasto´n Aragua´s, and Miroslav Kulich. Path planning for a formation of mobile robots with split and merge. In Proceedings of the 4th International Conference on Modelling and Simulation for Autonomous Systems (MESAS), Revised Selected Papers, pages 59–71, Rome, Italy, 2017.
Florian T. Pokorny, Majd Hawasly, and Subramanian Ramamoorthy. Topological trajectory classiﬁcation with ﬁltrations of simplicial complexes and persistent homology. Int. J. Robotics Res., 35(1-3):204–223, 2016.
Ana C. Huama´n Quispe, Tobias Kunz, and Mike Stilman. Generation of diverse paths in 3d environments. In Proceedings of the 2013 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), pages 5994–5999, Tokyo, Japan, 2013.
Jacob T Schwartz and Micha Sharir. On the “piano movers” problem. II. general techniques for computing topological properties of real algebraic manifolds. Advances in applied Mathematics, 4(3):298–351, 1983.
Thierry Sime´on, Jean-Paul Laumond, Juan Corte´s, and Anis Sahbani. Manipulation planning with probabilistic roadmaps. Int. J. Robotics Res., 23(7-8):729–746, 2004.
Ioan Alexandru Sucan, Mark Moll, and Lydia E. Kavraki. The open motion planning library. IEEE Robotics Autom. Mag., 19(4):72–82, 2012.
Marc J. van Kreveld, Thijs van Lankveld, and Remco C. Veltkamp. On the shape of a set of points and lines in the plane. Comput. Graph. Forum, 30(5):1553–1562, 2011.
Caleb Voss, Mark Moll, and Lydia E. Kavraki. A heuristic approach to ﬁnding diverse short paths. In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA), pages 4173–4179, Seattle, WA, 2015.
16

Dahai Xu, Yang Chen, Yizhi Xiong, Chunming Qiao, and Xin He. On the complexity of and algorithms for ﬁnding the shortest path with a disjoint counterpart. IEEE/ACM Trans. Netw., 14(1):147–158, 2006.
Yangsheng Xu, Raju Mattikalli, and Pradeep Khosla. Motion planning using medial axis. IFAC Proceedings Volumes, 25(28):135–140, 1992.
Shengli Yuan, Saket Varma, and Jason P. Jue. Minimum-color path problems for reliability in mesh networks. In Proceedings of the 24th Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM), pages 2658–2669, Miami, FL, 2005.
Michael Zabarankin, Stan Uryasev, and Robert Murphey. Aircraft routing under the risk of detection. Naval Research Logistics (NRL), 53(8):728–747, 2006.
Zhijie Zhu, Edward Schmerling, and Marco Pavone. A convex optimization approach to smooth trajectories for motion planning with car-like robots. In Proceedings of the 54th IEEE Conference on Decision and Control (CDC), pages 835–842, Osaka, Japan, 2015.
17

