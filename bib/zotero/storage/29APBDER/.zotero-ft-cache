1164

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 1, NO. 2, JULY 2016

k-Survivability: Diversity and Survival of Expendable Robots
Yu-Han Lyu, Yining Chen, and Devin Balkcom

Abstract—We deﬁne the k-survivability of a set of n paths as the probability that at least k out of n robots following those paths through a stochastic threat environment reach goals. High ksurvivability sets tend to contain short and diverse paths.Finding sets of paths with maximum k-survivability is NP-hard. We design two algorithms: a complete algorithm that ﬁnds an optimal list of paths, and a heuristic method that ﬁnds paths with high ksurvivability. Although computing k-survivability is expensive and this work is still preliminary, we believe that understanding the relationship between diversity and survival will yield new insights into multirobot motion planning.
Index Terms—Path Planning for Multiple Mobile Robots or Agents, Redundant Robots, Motion and Path Planning, Probability and Statistical Methods, Search and Rescue Robots.

I. INTRODUCTION
H OW should a set of robots move through a dangerous environment to accomplish objectives? Is it better for the robots to travel together, or should the robots split up? What is the relationship between survival and diversity of actions?
As an example, consider the following whimsical planning problem: n ants must migrate from one nest to another through a ﬁeld containing both obstacles and antlions, which make disc-shaped traps. If we assume a uniform distribution of trap locations, which n paths should the ants follow, if the ants must decide their paths before moving and cannot reroute during movement?
One idea might be to maximize the expected number of surviving ants. However, the best strategy for this problem turns out to be uninteresting and unwise: ﬁnd the safest path for a single ant (for simplicity, assume there is a unique safest path), and have all ants follow that path. This solution is not robust – a single trap could destroy the entire colony. Therefore, we consider a problem that is more suitable if ants are expendable: maximize the probability that at least some k (with k ≤ n) ants survive. If the number of traps is unknown, the solution may contain up to n unique paths.
Figure 1 shows an example problem for which paths have been selected to achieve high survivability of routes across a college campus. The paths are short, interestingly diverse, and may be of practical interest if there is actual danger, trafﬁc congestion, or surveillance to be avoided.
Manuscript received August 31, 2015; accepted January 10, 2016. Date of publication February 2, 2016; date of current version March 22, 2016. This paper was recommended for publication by Associate Editor H. Kurniawati and Editor N. Amato upon evaluation of the reviewers’ comments. This work was supported by the NSF under Grant IIS-0643476.
The authors are with the Department of Computer Science, Dartmouth College, Hanover, NH 03755 USA (e-mail: devin@cs.dartmouth.edu).
Digital Object Identiﬁer 10.1109/LRA.2016.2524067

Fig. 1. A high 1-survivability set of three paths from Department of Computer Science (Sudikoff) to food court (1953 Commons) on the Dartmouth campus; gray circles represent the discretization of the environment.2
We believe this to be the ﬁrst work that explicitly studies the theoretical implications of robot expendability. Path diversity has been explored in several settings, with applications including motion planning [1]–[7], robust routing in computer networks [8], and dissimilar paths in transportation [9]. Approaches to ﬁnding diversity typically involve deﬁning an arbitrary distance metric that describes separation of paths, and ﬁnding solutions that balance distance between paths against length of paths, using linear or non-linear weights, constrained optimization, or by analyzing the Pareto frontier.
Instead of deﬁning an arbitrary pairwise path diversity metric or choosing arbitrary tradeoffs between path lengths and diversity metrics, our approach proceeds directly from the threat model, since we believe that diversity should be considered as a means rather than an end.
We deﬁne k-survivability to measure the quality of paths in a stochastic threat environment. Sets of paths with high ksurvivability naturally balance length and diversity. Although choosing sets of paths to maximize k-survivability is NP-hard, we design a complete algorithm. Since the maximization algorithm is computationally infeasible except for k = 1 and n = 2, we also design a practically faster heuristic method that ﬁnds paths with high k-survivability.
A. Model
We focus on the discrete problem in which the environment is represented by a point set D and the free space is represented by

2377-3766 © 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

LYU et al.: k-SURVIVABILITY: DIVERSITY AND SURVIVAL OF EXPENDABLE ROBOTS

1165

Fig. 3. Example paths for two robots in different environments and parameters. In Figure 3a, since r = 1, the optimal solution has parallel subpaths with distance two to avoid being destroyed by one 1-disc easily.

Fig. 2. Eight paths with high 1-survivability. Small gray circles are vertices of G (4-connected). Squares are obstacles; diamonds are example ﬁxed traps.
a graph G = (V, E), where V ⊆ D. Unknown stochastic dangers are called traps. Several models of traps will be discussed in the next section.
Our problem is to ﬁnd paths for n point robots such that the i-th path connects the designated start vertex si ∈ V and the designated goal vertex gi ∈ V . See Figure 2. Robots cannot communicate, do not have sensors, and cannot reroute; both obstacles and traps are time-independent.
We deﬁne k-survivability to be the probability that at least k paths successfully connect their (perhaps different) starts to goals. The k-survivability problem (kSP) is formalized as:
Input = (G, M, {(si, gi)}ni=1, k), where 1) G = (V, E) denotes the free space. 2) M is a trap model (see next section). 3) n point robots have start locations si ∈ V and goal locations gi ∈ V for all 1 ≤ i ≤ n. 4) survivability parameter k, with 1 ≤ k ≤ n.
Output = P, a list of n paths maximizing k-survivability such that for all 1 ≤ i ≤ n, Pi ∈ P connects si and gi. We now discuss two trap models: ﬁxed traps, which have known shapes, and variable traps, for which the shape is unknown but drawn from some known distribution. Even under the ﬁxed trap model, a different trap shape (or even multiple traps) may be placed at each vertex. A ﬁxed trap F is a subset of D. When a ﬁxed trap F is in effect, all paths passing through F are blocked. A ﬁxed trap model M = {(Fi, pi)}i|M =1| is a collection of ﬁxed traps and their corresponding, independent probabilities. If all probabilities are equal, then the model is a uniform ﬁxed trap model. For example, under a uniform ﬁxed r-disc trap model, each vertex has equal and independent probability to be the center of a disc trap of radius r. Figures 3a and 3b show examples.
2The campus map is from the Dartmouth College website and the street data is from OpenStreetMap. Since data from OpenStreetMap is inconsistent with the campus map, some vertices are slightly inside buildings.

A variable trap A is represented by a distribution over a set of ﬁxed traps. A variable trap model M is represented by a collection of variable traps and corresponding probabilities: M = {(Ai, pi)}i|M =1|.
For example, under a variable r-disc trap model, each vertex has identical and independent probability to be the center of a disc trap, whose radius follows a geometric distribution with mean r. Two paths with high 1-survivability under the variable 5-disc trap model are shown in Figure 3c.
II. RELATED WORK
Diversity has been studied in location theory, motion planning, graph theory, computer networks, and transportation.
Location theory: In location theory, the maximum diversity problem is to ﬁnd m points maximizing diversity among given points in a metric space. Although location theory focuses on ﬁnding diverse points, methods can be adapted to ﬁnd diverse paths as long as a metric space on paths can be deﬁned. Formulations include [10]:
1) remote-edge problem: ﬁnd a set of points maximizing the minimum mutual distance (also called the p-dispersion problem [11]).
2) remote-pseudoforest problem: ﬁnd a set of points maximizing the sum of the distance to the nearest neighbors (also called the p-defense problem [12]).
3) remote-clique problem: ﬁnd a set of points maximizing the sum of mutual distances (also called the max-avg facility dispersion problem [13], or the maximum dispersion problem [11]).
Diverse trajectories in motion planning: Increasing the diversity of trajectories in motion planning has been studied by several researchers [1]–[7]. Our work is most related to Erickson’s and LaValle’s work [14]. They propose a deﬁnition of survivability that measures the correlation of damage on paths when a random disc obstacle is placed on a path. Whereas survivability favors separated paths, k-survivability is a direct probabilistic measure of survival that in some cases can be maximized by allowing robots to follow overlapping short paths.
Finding trajectories in a threat environment has been studied for aircrafts [15], UAVs [16], vehicles [17], and ships [18]. Our

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

1166

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 1, NO. 2, JULY 2016

work differs in that the threat model is probabilistic, and in the search for multiple trajectories.
In the Euclidean plane, ﬁnding a path connecting two points among polygonal obstacles can be solved efﬁciently [19]. One possible deﬁnition for the diversity of paths in the Euclidean plane is the number of distinct homotopy classes of paths [20]. Eriksson-Bique et al. studied the problem of ﬁnding k shortest paths with distinct homotopy classes [21].
Path diversity on graphs: The problem of ﬁnding k-shortest paths on a graph has been studied since the ’70s [22], as the problem of ﬁnding vertex or edge disjoint paths [23]. When each vertex/edge is associated with a failure probability, short and reliable paths are desirable. Finding short paths subject to reliability constraints can be considered as resource-constrained shortest-path problems [24]. These models only disfavor paths sharing edges or vertices, while k-survivability disfavors paths passing through the same traps, which is more general.
Robust routing in computer network: One way to improve the robustness of a network is to increase the path diversity between end-points [25]. Diverse routing problems have been studied for more than a decade using graph theory methods [8]. Rohrer et al. deﬁne the diversity of paths based on the distance on graphs and geographic distances [26], which is similar to the idea of path space [5].
Dissimilar paths in transportation: The problem of ﬁnding dissimilar paths has been studied in transportation, since dissimilar paths avoid bottlenecks and are beneﬁcial for e.g. hazardous waste transportation [9], [27].

III. COMPUTING k-SURVIVABILITY
Since k-survivability is independent of the order of vertices along paths, paths are represented as sets of vertices.

A. Computing k-Survivability Under the Fixed Trap Model
Given a ﬁxed trap model M = {(Fi, pi)}i|M =1| and a path P on a graph G, the forbidden index set of P is Forbid(P ) = {i|P ∩ Fi = ∅}. The probability that P is not blocked equals Pr(P ) =
i∈Forbid(P )(1 − pi). Similarly, for a set of paths P = {P1, . . . , Ph}, the forbidden index set of P is Forbid(P) = ∪P ∈P Forbid(P ). The probability that all paths in P are not blocked equals Pr(P) = i∈Forbid(P)(1 − pi).
Given a set of paths P, 1-survivability can be computed by using the inclusion-exclusion principle as follows:

Survive1(P) =

(−1) |S|+1 Pr(S)

S ⊆P ,S =∅

The computation of k-survivability is similar but more timeconsuming. For a set of paths P and a positive integer k, we deﬁne comb(P, k) = {S|S ⊆ P, |S| = k}; that is, comb(P, k) contains all k-subsets of P. Given a set of paths P, k-survivability can be computed by using the inclusionexclusion principle:

Survivek(P) =

(−1) |R|+1 Pr(∪S∈RS)

R⊆comb(P ,k),R=∅

B. Computing k-Survivability Under the Variable Trap Model
Let M = {(Ai, pi)}i|M =1| be a variable trap model. Each variable trap Ai can be represented as a collection of ﬁxed traps and their probabilities: Ai = {(Fi,j , pi,j)}j|A=i1|. Given a path P on a graph G, the forbidden index set of P with respect to the i-th variable trap is Forbid(P, i) = {j|P ∩ Fi,j = ∅}. The probability that P is not blocked equals Pr(P ) = i(1 −
j∈Forbid(P,i) pi,j ). The calculation of k-survivability can be derived in the same manner as under the ﬁxed trap model.
IV. THEORETICAL RESULTS
In this section, we show that kSP is NP-hard. We also show that maximizing k-survivability leads to diversity in the sense that at most k robots will follow the same path, if other paths are available.
A. NP-Hardness of kSP
We show that kSP under the uniform ﬁxed trap model is NPhard with n = k = 1. Since the ﬁxed trap model is a special case of the variable trap model, kSP under the variable trap model is also NP-hard.
Our proof, similar to the NP-completeness proof of the minimum color path problem [28], is a reduction from the minimum set cover problem (MSCP), deﬁned below, to kSP.
Input = (S, C) , where 1) S = {1, . . . , a} is a set of positive integers from 1 to a. 2) C = {C1, . . . , Cb} is a collection of subsets of S.
Output = C ⊆ C a minimum cardinality collection of subsets whose union is S. Theorem 1: kSP under the uniform ﬁxed trap model with n = k = 1 is NP-hard.
Proof: Let (S, C) be an instance of MSCP. We construct an instance (G, M, {(s, g)}, 1) of kSP in polynomial time such that an optimal solution in kSP can be transformed into a minimum set cover of (S, C) and vice versa.
We construct G = (V, E), which is a subgraph of a grid graph, as follows. First, for each element i ∈ S, we create three vertices vi0,0 = (4i, 0) , vi1,0 = (4i + 1, 0) , and vi3,0 = (4i + 3, 0) . We create edges (vi0,0, vi1,0) for all 1 ≤ i ≤ a and edges (vi3,0, vi0+,01) for all 1 ≤ i < a. Our idea is to design a gadget for each element i ∈ S such that i can be covered by a set in C if and only if a solution of kSP, which is a path, passes through vi0,0 and vi3,0.
Second, for each j ∈ {1, . . . , b}, we create vertices vi1,j = (4i + 1, j) and vi3,j = (4i + 3, j) for all 1 ≤ i ≤ a. Then, we create edges (vi1,j , vi1,j+1) and (vi3,j , vi3,j+1) for all 0 ≤ j < b. Intuitively, the j-th row represent the j-th set in C.
Finally, we create vertices vi2,j = (4i + 2, j), edges (vi1,j , vi2,j ), and edges (vi2,j , vi3,j ) for each i ∈ Cj . We use these vertices to model the constraint that every element in S is covered by a set in C. See Figure 4.
The uniform ﬁxed trap model is M = {(Fj, p)}bj=1 for an arbitrary choice p ∈ (0, 1) , where Fj = {vi2,j|i ∈ Cj}. The start vertex is v10,0 and the goal vertex is va3,0.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

LYU et al.: k-SURVIVABILITY: DIVERSITY AND SURVIVAL OF EXPENDABLE ROBOTS

1167

Fig. 4. Gadget used in the proof of Theorem 1.

Fig. 5. Example paths with high k-survivability for different values of k under the ﬁxed 5-disc trap model.
of (G, M, {(s, g)}, 1) and can be transformed into an optimal solution of (S, C) in polynomial time.

Let P be an optimal solution of the instance

(G, M, {(v10,0, va3,0)}, 1) of the graph, P passes every

kSP. By the construction of vertex vi3,0 for all 1 ≤ i ≤ a.

Moreover, for each 1 ≤ i ≤ a, the only way to get vi3,0 is to

pass through a vertex vi2,j for some 1 ≤ j ≤ b. Since vi2,j exists

if and only if i ∈ Cj, the set C = {Cj|∃1≤i≤aP passes vi2,j}

is a set cover of S.

Moreover, since all traps have the same probability,

maximizing 1-survivability is the same as minimizing {j|∃1≤i≤aP passes vi2,j}. Hence, C is also an optimal solution of MSCP.

Transforming an optimal solution of MSCP to an optimal

solution of kSP can be done similarly. Note that this reduction relies on the fact that individual

ﬁxed traps might be formed from disconnected sets of vertices.

However, even if we restrict individual ﬁxed traps to be contiguous, the problem still appears to be hard, since kSP under the uniform ﬁxed trap model with n = k = 1 can be used to solve

the barrier resilience problem [29]. The complexity of the bar-

rier resilience problem is still open and currently no polynomial time algorithm exists.

Even approximating an optimal solution is hard:

Theorem 2: No polynomial time algorithm with constant approximation ratio for kSP with n = k = 1 under the uniform ﬁxed trap model exists unless P = N P .

Proof: We show that if a r-approximation polynomial

time algorithm for kSP exists for some constant r, then we can

solve MSCP in polynomial time. Let (S, C) be an instance of MSCP and c be the size of a min-

imum set cover. By using the same reduction as in the proof of Theorem 1, we obtain an instance (G, M, {(s, g)}, 1) of kSP.
Since c is the size of a minimum set cover, the optimal solution of (G, M, {(s, g)}, 1) has value (1 − p)c.

Suppose that a r-approximation algorithm for kSP exists,
0 < r < 1, and this approximation algorithm is guaranteed to ﬁnd a solution with 1-survivability at least r(1 − p)c. Since
the choice of probability p in the reduction is arbitrary, we set p to be a value satisfying r > (1 − p). Because r(1 − p)c > (1 − p)c+1 and a path can only pass through an integral num-
ber of ﬁxed traps, the approximation algorithm must return a solution with value (1 − p)c, which is an optimal solution

B. Properties of kSP
We now show that k-survivability leads to diverse paths. Observation 3: For kSP under the ﬁxed trap model with k = 1, if n paths with different forbidden index sets exist, then any optimal solution does not have duplicate paths.
Proof: Since paths with the same forbidden index sets are either all-safe or all-blocked, using paths with different forbidden index sets improves 1-survivability.
Observation 4: For kSP under the ﬁxed trap model, if at least n/k paths with different forbidden index sets exist, then at most k robots follow the same path in an optimal solution.
Proof: If more than k robots follow the same path, moving one robot to another path always improves k-survivability.
Note that when k increases, the number of different paths in optimal solutions may decrease. See ﬁgure 5, which shows some high-survivability paths for different values of k.
V. ALGORITHMS
In this section, we ﬁrst describe a complete algorithm to ﬁnd optimal solutions. Then, we describe a typically faster heuristic method to ﬁnd good solutions. For simplicity, we assume that all robots have the same start s and the same goal g, but this assumption may be easily lifted.
A. Complete Algorithm
In this section, we design a complete state space search algorithm for kSP under the uniform ﬁxed trap model with n = 2 and k = 1. Although it is easy to extend this algorithm for larger k and n, solving even small problems becomes computationally infeasible with this approach.
We need several deﬁnitions. A path P is an ordered list of vertices. A path P extends another path P , if P is a preﬁx of P . A path P is a feasible extension of P if either P ends at g and P = P , or P does not end at g and P extends P by one vertex. Let Ext(P ) denote the set of all paths that end at g and are extensions of path P .
The complete algorithm is a state space search algorithm. Each state t consists of two simple paths (P1, P2) starting from

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

1168

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 1, NO. 2, JULY 2016

s. A state (P1, P2) is a successor of a state (P1, P2) if P1 and P2 are feasible extensions of P1 and P2 respectively.
The initial state is ( s , s ) and the goal states are all states (P1, P2) that both P1 and P2 end at g. We will ﬁnd one goal state with maximum 1-survivability.
Since the state space is a tree, we can use a brute-force
approach to traverse the tree to ﬁnd an optimal solution. In
order to speed up the brute-force approach, we design a heuristic function h of states, where h(t) is an upper-bound of
1-survivability of all goal states that are reachable by state t. As long as h(t) is optimistic, then the tree search will
ﬁnd an optimal solution. Using the heuristic function, we can
prune unnecessary branches and stop search when the algorithm
reaches one of the goal states for the ﬁrst time.
We construct a heuristic function h as follows. Remember that when n = 2, 1-survivability of two paths P1 and P2 is Pr({P1}) + Pr({P2}) − Pr({P1, P2}). Suppose that there is a function hˆ for paths that hˆ(P ) is an upper bound of Pr({P }) for all P ∈ Ext(P ). Then, we obtain a heuristic function h((P1, P2) ) = hˆ(P1) + hˆ(P2) − Pr({P1, P2}).
Now, we show how to construct a function hˆ. Let M be
the uniform ﬁxed trap model. For any path P , 1-survivability of P is (1 − p)|Forbid(P )|, which only depends on the size of Forbid(P ). Let LB(P ) be the minimum number of additional
ﬁxed traps that any extension of path P must pass through to
reach the goal. Formally,

LB(P ) = min |Forbid(P ) \ Forbid(P )|.
P ∈Ext(P )

Then, (1 − p)|Forbid(P )+LB(P )| is the least upper bound of Pr({P }) for all P ∈ Ext(P ).
Note that computing LB(P ) exactly is the same as solving kSP under the uniform ﬁxed trap model with n = k = 1, which
is a NP-hard problem by Theorem 1. In order to get an upper bound of all Pr({P }), where P is in Ext(P ), it sufﬁces to obtain a lower bound of LB(P ).
Our idea of obtaining a lower bound of LB(P ) is as follows. Let Fi be a ﬁxed trap that i does not belong to Forbid(P ). If an extension P of P passes through one vertex of Fi, then charge P by 1/|Fi ∩ V |. Thus, if an extension P of P passes through one v ∈ V , then we charge P by i∈/Forbid(P ),v∈Fi 1/|Fi ∩ V |. The minimum charge of any extension of P that reaches the goal, LB (P ), can be computed efﬁciently by using a shortest
path algorithm. It is easy to see that LB (P ) is a lower bound of LB(P ) and
we know

LB

(P

)

≤

LB(P

)

≤

max
i

|Fi|

·

LB

(P

).

Thus, we can use hˆ(P ) = (1 − p)|Forbid(P )+LB (P )| to obtain a heuristic function h.

B. Heuristic Algorithm
The previous algorithm uses a heuristic function for pruning, but is guaranteed to ﬁnd optimal solutions. The heuristic algorithm described in this section does not provide this guarantee.

Algorithm 1. Heuristic algorithm for kSP

input: (G, M, {(si, gi)}ni=1, k, w, T ), where (G, M, {(si, gi)}ni=1, k) is an instance of kSP, w is a parameter of the path generation, and T is a

parameter of the path improvement.

output: n paths connecting (si, gi) respectively. R = path_generation(w)

S = path_selection(R)

S = path_replacement(S, R)

Q=∅

while |Q| < T do

S = path_shortening(S)

Q = Q ∪ {S}

S = escape(S)

– return

the

best

solution

in

Q.

There are three phases: path generation, path selection, and path improvement. Due to the high-dimensional search space of kSP, we ﬁrst generate a set of candidate paths with size w n to reduce the search space to these w paths. Then, we heuristically ﬁnd n paths among the set of candidate paths as an initial solution. Finally, we use local search to improve the solution until the process is stabilized. Algorithm 1 outlines the approach.
Since computation of k-survivability is potentially expensive, we only use the computation of k-survivability in the last phase. Moreover, this heuristic algorithm only needs a black box to compute k-survivability, and the same algorithm can be used for both ﬁxed trap and variable trap models.
1) Path Generation: The purpose of this phase is to generate a set R of w n paths. We design two methods: random generation, and an iterative penalty approach.
a) Random generation method: To generate one random path, we generate a random spanning tree ﬁrst and then pick the unique path between s and g on the tree. We repeat this process until w paths are generated.
b) Iterative penalty method: Another way to generate w paths is repeatedly apply a shortest path algorithm. After a shortest path P is found, we increase the edge weights of all edges in P and repeat. Akguün et al. discuss several variants of iterative penalty methods that have different ways to penalize the path [27].
2) Path Selection: The purpose of this phase is to generate a set n paths among w candidate paths generated in the path generation phase. Although we can design an algorithm to ﬁnd n paths that maximize k-survivability, since the computation of k-survivability is exponential in n, this approach would be expensive. Thus, our strategy is to use different heuristics to obtain an initial solution without evaluating k-survivability. Then, improve the initial solution based on k-survivability in the next phase.
We ﬁnd an initial solution by solving a different but related optimization problem.
a) Distance-based heuristic: We use dG(P, P ) to denote the distance between two paths P and P on a graph G. One candidate of the distance function is discrete Freéchet

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

LYU et al.: k-SURVIVABILITY: DIVERSITY AND SURVIVAL OF EXPENDABLE ROBOTS

1169

Fig. 6. All methods’ k-survivability at the end of path selection phase, path improvement phase and path shortening phase. All methods that are using random generation method are represented by solid lines and all methods that are using iterative penalty method are represented by dotted lines. Different methods in the second phase are represented by different colors.

distance [7] and other candidates of distance function can be found in Knepper’s thesis [4].
Based on the distance function, we can set up several optimization problems.
1) remote-clique problem: ﬁnd

S = arg max

dG(P, P ).

S⊆R,|S|=n P,P ∈S

2) remote-edge problem: ﬁnd

S = arg max

min dG(P, P ).

S⊆R,|S|=n P,P ∈S,P =P

3) remote-pseudoforest problem: ﬁnd

S = arg max

min dG(P, P ).

S⊆R,|S|=n P ∈S P ∈S,P =P

The remote-edge problem is sensitive to the closest-pair of paths, since two solutions with the same closest pair of paths

will have the same minimum distance, even if one solution is much longer than the other [7]. Since all these maximum diversity problems are NP-hard, we use heuristic methods to ﬁnd a good solution [30].
b) Survivability-based heuristic: We also can use Erickson’s and LaValle’s notion of survivability [14] in our heuristic. We heuristically ﬁnd n paths with high survivability and use this set as an initial solution.
3) Path Improvement: The purpose of this phase is to improve k-survivability of an initial solution S by using local operations: path replacement and path shortening. Path replacement iteratively replaces one path to improve ksurvivability. Path shortening iteratively replaces a subpath of one path to improve k-survivability.
We ﬁrst apply path replacement to improve k-survivability and then apply path shortening. Since path improvement is a local search method, the search process may be trapped in a local maximum. Thus, when the search reaches a local

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

1170

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 1, NO. 2, JULY 2016
TABLE I RUNNING TIMES MEASURED IN MILLISECOND FOR k = 1

maximum, we use a randomized method to escape from the local maximum and then apply path shortening again.
a) Path replacement: Replace one path in the current solution by another path in R giving the maximum k-survivability for the set; repeat until no further improvement can be made.
b) Path shortening: Find the maximum improvement of ksurvivability that can be made by replacing one subpath of a path in the current solution by a shortest path on G connecting the endpoints of the subpath. Repeat shortening until no further improvement can be made.
Although path shortening is very effective under the ﬁxed rdisc trap model, path shortening may not be useful in general models. Moreover, for kSP with k > 1, shortening just one path at a time may lead to getting trapped in local maxima easily. For example, Figure 5c shows such a case; all four overlapping paths would need to be shortened simultaneously and in the same way to allow the four robots to follow a better route.
c) Escape from local maxima: Since path shortening is a local search method, path shortening may get trapped by local maxima. When no path shortening can be made, we randomly pick a path in the current solution and reroute a subpath randomly. Then, run the path shortening method again to reach another local maximum. We repeat this process until T local maxima are found for a threshold value T , and choose the best.
VI. EXPERIMENTAL RESULTS
In this section, we describe several experiments (in simulation) on different heuristic methods, and compare them in terms of computation time and k-survivability. Remember that our heuristic method consists of three phases. We suggest two choices in the path generation phase: random generation (RG) and iterative penalty (IP) methods. We suggest four choices in the path selection phase: remote-clique (RC), remote-edge (RE), remote-pseudoforest (RF), and survivability (SU). Finally, we test two additional methods in the path selection phase:
1) random (R): pick n paths in R uniformly at random. 2) ﬁrst n paths (FN): if the paths are generated by the
iterative penalty method, we pick the ﬁrst n generated paths.

A. Experiment Setup
We used an environment containing 2500 vertices and 80 rectangular obstacles under the ﬁxed r-disc trap model, where r = 5 and p = 0.004. The environment is shown in Figure 5. We used the heuristic algorithm to ﬁnd n = 5 paths with high k-survivability, for k = 1 . . . 4. We generated w = 100 paths in the path generation phase and found T = 3 local maxima in the path improvement phase.
The heuristic algorithm is implemented in Java and all tests were conducted on a laptop (2010 MacBook Pro) with an Intel Core i5 2.4 GHz CPU and 8GB RAM. We repeated the experiments ten times and took the average of the results.
B. Results
We ﬁrst show k-survivability of each phase for each method in Figure 6. When k is small, path shortening effectively improves the k-survivability and the iterative penalty method tends to perform better. However, when k = 4, path shortening is not effective, since our algorithm only tries to shorten one path at a time but escaping from a local minimal may require shortening several paths at the same time.
We measured the running time for all methods maximizing k-survivability; the running times for each method for k = 1 are shown in Table I. The naïve algorithms IP + FN and RG + R are the most efﬁcient methods. This may hint that although kSP is hard in general, kSP under the ﬁxed r-disc trap model may be tractable. For k > 1, the naïve algorithm IP + FN is slightly faster than other methods, but we omit the results due to the page limitation.
VII. CONCLUSION & FUTURE WORK
This work is preliminary, and considers only simple ksurvivability problems; however, we believe that k-survivability motivates a wealth of interesting practical and theoretical problems. For example, the problem of k-survivability might be reversed to plan defenses against inﬁltration or attack. Not all applications of k-survivability need be violent. For example, k-survivability can be considered in the context of visibility or stealth, as has turned out to be central in multi-robot

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

LYU et al.: k-SURVIVABILITY: DIVERSITY AND SURVIVAL OF EXPENDABLE ROBOTS

1171

pursuit-evasion games [31]–[33] for search-and-rescue operations. With a model of feedback or communication, we imagine that k-survivability might also provide some insights into collaboration and cooperation problems such as those that arise in sports [34] or control of large robot swarms [35].
Several future directions of theoretical research are possible. Continuous-space models might be approached using variational calculus or optimal control techniques [15], [16]. Obstacles such that the risk of a path depends on the distance between the robot and the obstacle, as for paths in mined water [18] are a potential future direction, as are time-dependent obstacles.
REFERENCES
[1] M. S. Branicky, R. A. Knepper, and J. J. Kuffner, “Path and trajectory diversity: Theory and algorithms,” in Proc. IEEE Int. Conf. Robot. Autom. ICRA, May 2008, pp. 1359–1364 [Online]. Available: http://dx.doi.org/10.1109/ROBOT.2008.4543392.
[2] R. A. Knepper and M. T. Mason, “Path diversity is only part of the problem,” in Proc. IEEE Int. Conf. Robot. Autom. ICRA, May 2009, pp. 3224–3229 [Online]. Available: http://dx.doi.org/10.1109/ROBOT. 2009.5152696.
[3] C. J. Green and A. Kelly, “Toward optimal sampling in the space of paths,” in Robotics Research, vol. 66, M. Kaneko and Y. Nakamura, Eds. New York, NY, USA: Springer, 2011, pp. 281–292 [Online]. Available: http://dx.doi.org/10.1007/978-3-642-14743-2_24.
[4] R. A. Knepper, “On the fundamental relationships among path planning alternatives,” Ph.D. dissertation, Carnegie Mellon Univ., Jun. 2011[Online]. Available: http://repository.cmu.edu/dissertations/180/.
[5] R. A. Knepper, S. S. Srinivasa, and M. T. Mason, “Toward a deeper understanding of motion alternatives via an equivalence relation on local paths,” Int. J. Robot. Res., vol. 31, no. 2, pp. 167–186, Feb. 2012 [Online]. Available: http://dx.doi.org/10.1177/0278364911430418.
[6] A. H. Quispe, T. Kunz, and M. Stilman, “Generation of diverse paths in 3D environments,” in Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst. IROS, Nov. 2013, pp. 5994–5999 [Online]. Available: http://dx.doi.org/10.1109/IROS.2013.6697226.
[7] C. Voss, M. Moll, and L. E. Kavraki, “A heuristic approach to ﬁnding diverse short paths,” in Proc. IEEE Int. Conf. Robot. Autom. ICRA, May 2015, pp. 4173–4179 [Online]. Available: http://dx.doi.org/10.1109/ ICRA.2015.7139774.
[8] D. Xu, Y. Chen, Y. Xiong, C. Qiao, and X. He, “On the complexity of and algorithms for ﬁnding the shortest path with a disjoint counterpart,” IEEE/ACM Trans. Netw., vol. 14, no. 1, pp. 147–158, Feb. 2006 [Online]. Available: http://doi.acm.org/10.1145/1133553.1133565.
[9] P. Dell’Olmo, M. Gentili, and A. Scozzari, “On ﬁnding dissimilar paretooptimal paths,” Eur. J. Oper. Res., vol. 162, no. 1, pp. 70–82, Jun. 2005 [Online]. Available: http://dx.doi.org/10.1016/j.ejor.2003.10.033.
[10] B. Chandra and M. M. Halldórsson, “Approximation algorithms for dispersion problems,” J. Algorithms, vol. 38, no. 2, pp. 438–465, Feb. 2001 [Online]. Available: http://dx.doi.org/10.1006/jagm.2000.1145.
[11] M. J. Kuby, “Programming models for facility dispersion: The p-dispersion and maxisum dispersion problems,” Geogr. Anal., vol. 19, no. 4, pp. 315–329, Sep. 1987 [Online]. Available: http://dx.doi.org/10. 1111/j.1538-4632.1987.tb00133.x.
[12] I. D. Moon and S. S. Chaudhry, “An analysis of network location problems with distance constraints,” Manage. Sci., vol. 30, no. 3, pp. 290–307, Mar. 1984 [Online]. Available: http://dx.doi.org/10.1287/mnsc.30.3.290.
[13] S. S. Ravi, D. J. Rosenkrantz, and G. K. Tayi, “Heuristic and special case algorithms for dispersion problems,” Oper. Res., vol. 42, no. 2, pp. 299– 310, Mar. 1994 [Online]. Available: http://www.jstor.org/stable/171673.
[14] L. H. Erickson and S. M. LaValle, “Survivability: Measuring and ensuring path diversity,” in Proc. IEEE Int. Conf. Robot. Autom. ICRA, May 2009, pp. 2068–2073 [Online]. Available: http://dx.doi.org/10.1109/ROBOT. 2009.5152773.
[15] M. Zabarankin, S. Uryasev, and R. Murphey, “Aircraft routing under the risk of detection,” Nav. Res. Logist. (NRL), vol. 53, no. 8, pp. 728–747, Dec. 2006 [Online]. Available: http://dx.doi.org/10.1002/nav.20165.

[16] B. Miller, K. Stepanyan, A. Miller, and M. Andreev, “3D path planning in a threat environment,” in Proc. IEEE Conf. Decis. Control Eur. Control Conf. CDC-ECC, Dec. 2011, pp. 6864–6869 [Online]. Available: http://dx.doi.org/10.1109/CDC.2011.6160385.
[17] E. Boidot, A. Marzuoli, and E. Feron, “Optimal planning strategy for ambush avoidance,” in Proc. Workshop Artif. Intell. Transp.: Advice Interactivity Actor Model. Conf. Artif. Intell. AAAI, Jan. 2015 [Online]. Available: http://www.aaai.org/ocs/index.php/WS/AAAIW15/ paper/view/10194/10153.
[18] L. Babel and T. Zimmermann, “Planning safe navigation routes through mined waters,” Eur. J. Oper. Res., vol. 241, no. 1, pp. 99–108, Feb. 2015 [Online]. Available: http://dx.doi.org/10.1016/j.ejor.2014.08.002.
[19] J. Hershberger and S. Suri, “An optimal algorithm for euclidean shortest paths in the plane,” SIAM J. Comput., vol. 28, no. 6, pp. 2215–2256, 1999 [Online]. Available: http://dx.doi.org/10.1137/S0097539795289604.
[20] S. Bhattacharya, M. Likhachev, and V. Kumar, “Topological constraints in search-based robot path planning,” Auton. Robots, vol. 33, no. 3, pp. 273–290, Oct. 2012 [Online]. Available: http://dx.doi.org/10.1007/ s10514-012-9304-1.
[21] S. D. Eriksson-Bique et al., “Geometric k shortest paths,” in Proc. ACM-SIAM Symp. Discrete Algorithms SODA, Jan. 2015, pp. 1616–1625 [Online]. Available: http://dx.doi.org/10.1137/1.9781611973730.107.
[22] J. Y. Yen, “Finding the k shortest loopless paths in a network,” Manage. Sci., vol. 17, no. 11, pp. 712–716, Jul. 1971 [Online]. Available: http://dx. doi.org/10.1287/mnsc.17.11.712.
[23] J. W. Suurballe, “Disjoint paths in a network,” Networks, vol. 4, no. 2, pp. 125–145, 1974 [Online]. Available: http://dx.doi.org/10.1002/net. 3230040204.
[24] H. Joksch, “The shortest route problem with constraints,” J. Math. Anal. Appl., vol. 14, no. 2, pp. 191–197, May 1966 [Online]. Available: http://www.sciencedirect.com/science/article/pii/0022247X66900205.
[25] R. Bhandari, Survivable Networks: Algorithms for Diverse Routing. New York, NY, USA: Springer, 1999, vol. 477 [Online]. Available: http://www.springer.com/us/book/9780792383819.
[26] J. P. Rohrer, A. Jabbar, and J. P. G. Sterbenz, “Path diversiﬁcation for future internet end-to-end resilience and survivability,” Telecommun. Syst., vol. 56, no. 1, pp. 49–67, May 2014 [Online]. Available: http://dx.doi.org/10.1007/s11235-013-9818-7.
[27] V. Akgün, E. Erkut, and R. Batta, “On ﬁnding dissimilar paths,” Eur. J. Oper. Res., vol. 121, no. 2, pp. 232–246, Mar. 2000 [Online]. Available: http://dx.doi.org/10.1016/S0377-2217(99)00214–3.
[28] S. Yuan, S. Varma, and J. P. Jue, “Minimum-color path problems for reliability in mesh networks,” in Proc. IEEE Int. Conf. Comput. Commun. INFOCOM, Mar. 2005, pp. 2658–2669 [Online]. Available: http://dx.doi.org/10.1109/INFCOM.2005.1498549.
[29] D. Y. C. Chan and D. G. Kirkpatrick, “Multi-path algorithms for minimum-colour path problems with applications to approximating barrier resilience,” Theor. Comput. Sci., vol. 553, pp. 74–90, Oct. 2014 [Online]. Available: http://dx.doi.org/10.1016/j.tcs.2014.04.009.
[30] R. Martí, M. Gallego, A. Duarte, and E. G. Pardo, “Heuristics and metaheuristics for the maximum diversity problem,” J. Heuristics, vol. 19, no. 4, pp. 591–615, Aug. 2013 [Online]. Available: http://dx.doi.org/10. 1007/s10732-011-9172-4.
[31] T. H. Chung, G. A. Hollinger, and V. Isler, “Search and pursuit-evasion in mobile robotics—A survey,” Auton. Robots, vol. 31, no. 4, pp. 299–316, Nov. 2011 [Online]. Available: http://dx.doi.org/10.1007/s10514-0119241-4.
[32] R. R. Murphy, Disaster Robotics. Cambridge, MA, USA: MIT Press, Feb. 2014 [Online]. Available: https://mitpress.mit.edu/books/disasterrobotics.
[33] E. U. Acar and H. Choset, “Sensor-based coverage of unknown environments,” Int. J. Robot. Res., vol. 21, no. 4, pp. 345–366, Apr. 2002 [Online]. Available: http://dx.doi.org/10.1177/027836402320556368.
[34] J. Biswas, J. P. Mendoza, D. Zhu, B. Choi, S. D. Klee, and M. M. Veloso, “Opponent-driven planning and execution for pass, attack, and defense in a multi-robot soccer team,” in Proc. Int. Conf. Auton. Agents MultiAgent Syst. AAMAS, May 2014, pp. 493–500 [Online]. Available: http://dl.acm.org/citation.cfm?id=2615812.
[35] M. Rubenstein, C. Ahler, N. Hoff, A. Cabrera, and R. Nagpal, “Kilobot: A low cost robot with scalable operations designed for collective behaviors,” Robot. Auton. Syst., vol. 62, no. 7, pp. 966–975, Jul. 2014 [Online]. Available: http://dx.doi.org/10.1016/j.robot.2013.08.006.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 07:00:11 UTC from IEEE Xplore. Restrictions apply.

