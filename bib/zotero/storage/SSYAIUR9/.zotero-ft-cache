Representing Attitude: Euler Angles, Unit Quaternions, and Rotation Vectors
James Diebel Stanford University Stanford, California 94301–9010 Email: diebel@stanford.edu
20 October 2006
Abstract We present the three main mathematical constructs used to represent the attitude of a rigid body in threedimensional space. These are (1) the rotation matrix, (2) a triple of Euler angles, and (3) the unit quaternion. To these we add a fourth, the rotation vector, which has many of the beneﬁts of both Euler angles and quaternions, but neither the singularities of the former, nor the quadratic constraint of the latter. There are several other subsidiary representations, such as Cayley-Klein parameters and the axis-angle representation, whose relations to the three main representations are also described. Our exposition is catered to those who seek a thorough and uniﬁed reference on the whole subject; detailed derivations of some results are not presented. Keywords–Euler angles, quaternion, Euler-Rodrigues parameters, Cayley-Klein parameters, rotation matrix, direction cosine matrix, transformation matrix, Cardan angles, Tait-Bryan angles, nautical angles, rotation vector, orientation, attitude, roll, pitch, yaw, bank, heading, spin, nutation, precession, Slerp
1

Contents

1 Introduction

4

1.1 Overview of Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

1.2 Sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

1.3 Coordinate Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4

2 Rotation Matrix

4

2.1 Coordinate Transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.2 Transformation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.3 Pose of a Rigid Body . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.4 Coordinate Rotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.5 Direction Cosine Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.6 Basis Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6

2.7 Rotation Matrix Multiplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6

3 Kinematics

6

3.1 Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6

3.2 Motion of a Fixed Point on a Rigid Body . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

3.3 Motion of a Particle in a Moving Frame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

4 Finite Diﬀerence Approximations

7

5 Euler Angles

7

5.1 Rotation Sequence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

5.2 Euler Angle Rates and Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

5.3 Linearization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

5.4 Valid Rotation Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

5.5 Euler Angle Sequence (3,1,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

5.5.1 Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

5.5.2 Euler Angles ⇒ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

5.5.3 Euler Angles ⇐ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

5.5.4 Euler Angles ⇒ Euler Angle Rates Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

5.5.5 Euler Angles ⇒ Unit Quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

5.5.6 Singularities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

5.6 Euler Angle Sequence (1,2,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

5.6.1 Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

5.6.2 Euler Angles ⇒ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

5.6.3 Euler Angles ⇐ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

5.6.4 Euler Angles ⇒ Euler Angle Rates Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

5.6.5 Euler Angles ⇒ Unit Quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

5.6.6 Singularities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

5.7 Derivatives of Selected Trigonometric Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

5.8 Singularities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

5.9 Intra-Euler-Angle Conversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

5.9.1 Sequence (3,1,3) ⇐ Sequence (1,2,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

5.9.2 Sequence (1,2,3) ⇐ Sequence (3,1,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

6 Quaternions

14

6.1 General Quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

6.2 Quaternion Multiplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

6.3 Quaternion ⇒ Quaternion Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

6.4 Unit Quaternion ⇒ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

6.5 Unit Quaternion ⇐ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

6.6 Quaternion Rates ⇒ Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16

6.7 Quaternion Rates ⇐ Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16

6.8 Quaternion Rates ⇒ Angular Acceleration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16

6.9 Quaternion Rates ⇐ Angular Acceleration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16

6.10 Unit Quaternion ⇐ Cayley-Klein Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16

2

6.11 Unit Quaternion ⇒ Cayley-Klein Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 6.12 Unit Quaternion ⇐ Axis-Angle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 6.13 Unit Quaternion ⇒ Axis-Angle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 6.14 Unit Quaternion ⇐ Euler Angles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 6.15 Unit Quaternion ⇒ Euler Angles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 6.16 Optimization with Quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18

7 Rotation Vector Representation

18

7.1 Rotation Vector ⇐ Axis-Angle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18

7.2 Rotation Vector ⇒ Axis-Angle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18

7.3 Rotation Vector ⇒ Unit Quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

7.4 Rotation Vector ⇐ Unit Quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

7.5 Rotation Vector ⇒ Quaternion Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

7.6 Rotation Vector ⇒ Quaternion Rates Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

7.7 Rotation Vector ⇒ Rotation Matrix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

7.8 Rotation Vector Multiplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

7.9 Rotation Vector Rates ⇒ Quaternion Rates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

7.10 Rotation Vector Rates ⇒ Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

7.11 Rotation Vector Rates ⇐ Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

7.12 Integration of Angular Velocity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

8 A Catalog of Euler Angle Parameterizations

22

8.1 Euler Angle Sequence (1,2,1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

8.2 Euler Angle Sequence (1,2,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24

8.3 Euler Angle Sequence (1,3,1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25

8.4 Euler Angle Sequence (1,3,2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

8.5 Euler Angle Sequence (2,1,2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

8.6 Euler Angle Sequence (2,1,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

8.7 Euler Angle Sequence (2,3,1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

8.8 Euler Angle Sequence (2,3,2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30

8.9 Euler Angle Sequence (3,1,2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31

8.10 Euler Angle Sequence (3,1,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32

8.11 Euler Angle Sequence (3,2,1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33

8.12 Euler Angle Sequence (3,2,3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34

3

1 Introduction

ventions. Quaternions, especially unit quaternions and the

axis-angle representation, are discussed in Sec. 6. The ro-

This document is intended as a uniﬁed reference on the tation vector is developed in Sec. 7 as a three-dimensional

subject of parameterizing the attitude of an object in three- parametrization of a quaternion. Finally, a catalog of the

dimensional space. It has been written to ﬁll a perceived twelve diﬀerent Euler angle parameterizations is presented

gap in the existing on-line literature. In particular, while in Sec. 8. Throughout this report, conversions between

there are many web pages and technical reports dedicated the various representations, and explanatory notes regard-

to the subject of Euler angles and quaternions, we were un- ing usage and naming conventions are included where ap-

able to ﬁnd any single reference that covers all the topics propriate.

with a consistent, detailed, and uniﬁed treatment. This

problem is exacerbated by the numerous conventions in current use, and the tendency among authors to assume a

1.2

Sources

particular convention without explicitly stating their choice, The mathematical results in this report have been derived

and without commenting on the alternatives. Further- from basic deﬁnitions and ﬁrst principles. Several sources

more, the existing on-line literature has a particularly large have been used to conﬁrm our results and to provide infor-

gap in the area of the various possible choices of Euler an- mation on the usage of the various conventions. On Euler

gle triples.

angles, we cite [1] and [4]. On Caley-Klein parameters, we

The most common way to represent the attitude of a cite [3]. On quaternions and Euler-Rodrigues parameters,

rigid body is a set of three Euler angles. These are popular we cite [5] and [2], especially the latter. On Kinematics,

because they are easy to understand and easy to use. Some we cite [1].

sets of Euler angles are so widely used that they have names

that have become part of the common parlance, such as the
roll, pitch, and yaw of an airplane. The main disadvantages 1.3 Coordinate Systems

of Euler angles are: (1) that certain important functions of Euler angles have singularities, and (2) that they are less accurate than unit quaternions when used to integrate

We consider the relationships between data expressed in two diﬀerent coordinate systems:

incremental changes in attitude over time. These deﬁciencies in the Euler angle representation have
led researchers to use unit quaternions as a parametriza-

• The world coordinate system is ﬁxed in inertial space. The origin of this coordinate system is denotedxw.

tion of the attitude of a rigid body. The relevant functions

• The body-ﬁxed coordinate system is rigidly attached

of unit quaternions have no singularities and the represen-

to the object whose attitude we would like to de-

tation is well-suited to integrating the angular velocity of

scribe. The origin of this coordinate system is de-

a body over time. The main disadvantages of using unit quaternions are: (1) that the four quaternion parameters

noted xb.

do not have intuitive physical meanings, and (2) that a

Points and vectors expressed in the body-ﬁxed coordi-

quaternion must have unity norm to be a pure rotation. nates are distinguished from those expressed in the world

The unity norm constraint, which is quadratic in form, is coordinates by a prime symbol. For example, if x is a

particularly problematic if the attitude parameters are to point is the world coordinates, then x is the same point

be included in an optimization, as most standard optimiza- expressed in the body-ﬁxed coordinates. Needless to say,

tion algorithms cannot encode such constraints.

xw and xb are both zero, but xw and xb are generally not.

As an alternative to Euler angles and the unit quater- Here, xw is the origin of the world coordinates expressed

nion, we oﬀer the rotation vector. The rotation vector in the body-ﬁxed coordinates, and xb is the origin of the

lacks both the singularities of the Euler angles and the body-ﬁxed coordinates expressed in the world coordinates.

quadratic constraint of the unit quaternion. This is not a

Some of the mathematics described in this document

new parametrization, but we have found the existing refer- only apply when the world coordinate system is rotation-

ences on this subject to be lacking in detail. The rotation ally ﬁxed. For many purposes, however, it is perfectly ac-

vector is particularly useful when seeking to optimize over ceptable to consider a slowly-rotating coordinate system,

the attitude parameters in cases in which the Euler angle such as one attached to Earth, to be a valid world coordi-

singularities cannot be avoided by careful design. It may nate system, despite its non-zero angular velocity.

not be the best choice in other circumstances.

1.1 Overview of Contents
In Sec. 1.3 we deﬁne the coordinate systems that are used throughout this report. Sec. 2 introduces the idea of rotation matrices and describes several of their key properties. Rigid-body kinematics are introduced in Sec. 3. Euler angles are discussed in all their diversity in Sec. 5, including detailed discussions of the three most commonly-used con-

2 Rotation Matrix

A rotation matrix is a matrix whose multiplication with a vector rotates the vector while preserving its length. The special orthogonal group of all 3 × 3 rotation matrices is denoted by SO(3). Thus, if R ∈ SO(3), then

det R = ±1 and R−1 = RT .

(1)

4

Rotation matrices for which det R = 1 are called proper and those for which det R = −1 are called improper. Improper rotations are also known as rotoinversions, and consist of a rotation followed by an inversion operation. We restrict our analysis to proper rotations, as improper rotations are not rigid-body transformations.
We reference the elements of a rotation matrix as follows:

R =  r1 r2 r3



(2)

r11 r12 r13

=  r21 r22 r23  .

(3)

r31 r32 r33

There are two possible conventions for deﬁning the rotation matrix that encodes the attitude of a rigid body and both are in current use. Some authors prefer to write the matrix that maps from the body-ﬁxed coordinates to the world coordinates; others prefer the matrix that maps from the world coordinates to the body-ﬁxed coordinates.
Though converting between the two conventions is as trivial as performing the transpose of a matrix, it is necessary to be sure that two diﬀerent sources are using the same convention before using results from both sources together. Indeed, one of the motivations of this report is to provide a single coherent reference that covers the entire subject.

2.1 Coordinate Transformations
We deﬁne the rotation matrix that encodes the attitude of a rigid body to be the matrix that when pre-multiplied by a vector expressed in the world coordinates yields the same vector expressed in the body-ﬁxed coordinates. That is, if z ∈ R3 is a vector in the world coordinates and z ∈ R3 is the same vector expressed in the body-ﬁxed coordinates, then the following relations hold:

z = Rz

(4)

z = RT z .

(5)

These expression apply to vectors, relative quantities lack-
ing a position in space. To transform a point from one
coordinate system to the other we must subtract the oﬀset
to the origin of the target coordinate system before applying the rotation matrix. Thus, if x ∈ R3 is a point in the world coordinates and x ∈ R3 is the same point expressed
in the body-ﬁxed coordinates, then we may write

x = R (x − xb) = R x + xw

(6)

x = RT (x − xw) = RT x + xb.

(7)

Substituting x = 0 into Eq. 6 and x = 0 into Eq. 7 yields

xw = −R xb

(8)

xb = −RT xw.

(9)

2.2 Transformation Matrix
It is quite common in the computer graphics community to write Eqs. 6 and 7 as matrix-vector products:

x 1

=

R 0T

xw 1

x 1

(10)

=

R 0T

−Rxb 1

x 1

(11)

x 1

=

RT 0T

xb 1

x 1

(12)

=

RT 0T

−RT xw 1

x 1

.

(13)

The substantial popularity of this convention is probably due to its adoption by the manufacturers of 3D-accelerated graphics hardware.

2.3 Pose of a Rigid Body
The pose of a rigid body is the position and attitude of that body. The bulk of this report deals with parameterizations of attitude. The position is most naturally encoded by xb, the position of the origin of the body-ﬁxed coordinates as expressed in world coordinates. It is, however, equally valid to store xw, the position of the origin of the world coordinates as expressed in the body-ﬁxed coordinates. The two are related to one another through the attitude of the body, according to Eqs. 8 and 9.

2.4 Coordinate Rotations

A coordinate rotation is a rotation about a single coordi-
nate axis. Enumerating the x-, y-, and z-axes with 1,2,
and 3, the coordinate rotations, Ri : R → SO(3), for i ∈ {1, 2, 3}, are





1

0

0

R1(α) =  0 cos (α) sin (α) 

(14)

0 − sin (α) cos (α)





cos (α) 0 − sin (α)

R2(α) =  0 1

0

(15)

sin (α) 0 cos (α)





cos (α) sin (α) 0

R3(α) =  − sin (α) cos (α) 0  .

(16)

0

01

A sample rotation of this form is illustrated in Fig. 1, which shows a rotation about the z-axis by an angle α.

2.5 Direction Cosine Matrix
A rotation matrix may also be referred to as a direction cosine matrix, because the elements of this matrix are the cosines of the unsigned angles between the body-ﬁxed axes and the world axes. Denoting the world axes by (x, y, z)

5

y y′
α
y
1
y′1
z, z′

[x′ y′ 0]T = R (α) [x y 0]T

1 1

3

1 1

x′

x′
1
x1

α x

2.7 Rotation Matrix Multiplication

The multiplication of two rotation matrices yields another rotation matrix whose application to a point eﬀects the same rotation as the sequential application of the two original rotation matrices. For example, let

z = Raz

(19)

z = Rb/az = Rb/aRaz = Rbz,

(20)

where

Rb = Rb/aRa.

(21)

Note that the rotations are applied in the reverse order. That is, here we apply Ra ﬁrst, followed by Rb/a.

Figure 1: A sample coordinate rotation about the z-axis by an angle α.

and the body-ﬁxed axes by (x , y , z ), let θx ,y be, for example, the unsigned angle between the x -axis and the y-
axis. In terms of these angles, the rotation matrix may be
written





cos(θx ,x) cos(θx ,y) cos(θx ,z)

R =  cos(θy ,x) cos(θy ,y) cos(θy ,z)  .

(17)

cos(θz ,x) cos(θz ,y) cos(θz ,z)

To illustrate this with a concrete example, consider the case

shown in Fig. 1. Here,

θy ,x

=

π 2

+ α,

θz ,z

=

θx ,x = θy ,y = 0, and θz ,{x,y}

α, =

θx ,y

=

π 2

−

θ{x ,y },z =

α,

π 2

.

Expanding Eq. 17,





cos(θx ,x) cos(θx ,y) 0 R =  cos(θy ,x) cos(θy ,y) 0 

0

0

1



cos(α)

=

cos(

π 2

+ α)

cos(

π 2

−

α)

cos(α)

 0 0

0

0

1





cos(α) sin(α) 0

=  − sin(α) cos(α) 0  .

(18)

0

01

This is the same result that is presented in Eq. 16 in Sec. 2.4.

3 Kinematics
Kinematics is the study of the motion of particles and rigid bodies, irrespective of the forces and moments involved. As such, it is the study of the nature of three-dimensional space, and falls at least partially into the scope of this report. In this section, we present, without derivation, several key results.
3.1 Notation
We consider the motion of a body, b, and a particle, p, in the world coordinate system, w. We present expressions for the velocity and acceleration of p in terms of the motion of b with respect to w, and the motion of p with respect to b. We deﬁne the relevant terms here.
All of these quantities may be expressed in either the world coordinates or the body-ﬁxed coordinates, whichever is more convenient. Body-ﬁxed quantities are noted with a prime symbol. Conversions of vectors between the two coordinate systems are carried out according to Eqs. 4 and 5, and conversions of points are performed with Eqs. 6 and 7. All the quantities deﬁned here are vector quantities, except xp and xb, which are points.
• xb, x˙ b, and x¨b are the position, velocity, and acceleration of b.
• xp, x˙ p, and x¨p are the position, velocity, and acceleration of p.
• xp/b, x˙ p/b, and x¨p/b are the position, velocity, and acceleration of p relative to b (i.e., as seen by an observer rigidly attached to b).

2.6 Basis Vectors
The rotation matrix may also be thought of as the matrix of basis vectors that deﬁne the world and body-ﬁxed coordinate systems. The rows of the rotation matrix are the basis vectors of the body-ﬁxed coordinates expressed in world coordinates, and the columns are the basis vectors of the world coordinates expressed in the body-ﬁxed coordinates.

• ω and ω˙ are the angular velocity and angular acceleration of b.
• R is the rotation matrix of b, whose application is illustrated in Eqs. 4-7.
Given these deﬁnitions, we consider two main cases. The ﬁrst deals with a point rigidly attached to the body, and the second deals with a particle moving with respect to it.

6

3.2 Motion of a Fixed Point on a Rigid Again, we may reconﬁgure this to yield a more useful ﬁnal

Body

expression:

Let p be rigidly attached to the body, b, such that x˙ p/b = x¨p/b = 0. The velocity of the point, p, is then

x¨p = x¨b + RT C(ω˙ ) + C(ω )2 xp/b

x˙ p = x˙ b + ω × xp/b

= x˙ b + C(ω) xp/b,

(22)

where the skew-symmetric cross product matrix function C : R3 → R3×3 is deﬁned by





0 −ω3 ω2

C(ω) =  ω3 0 −ω1  .

(23)

−ω2 ω1 0

Alternatively, we may express the velocity in more convenient terms by using a combination of world and body-ﬁxed terms:

x˙ p = x˙ b + RT ω × xp/b

= x˙ b + RT C(ω ) xp/b.

(24)

The acceleration of p is

x¨p = x¨b + ω˙ × xp/b + ω × ω × xp/b

= x¨b + C(ω˙ ) + C(ω)2 xp/b,

(25)

or, using a combination of world and body-ﬁxed terms:

x¨p = x¨b + RT ω˙ × xp/b + ω × ω × xp/b

= x¨b + RT C(ω˙ ) + C(ω )2 xp/b,

(26)

where

 −ω32 − ω22

ω2ω1

 ω3ω1

C(ω)2 =  ω2ω1 −ω32 − ω12 ω3ω2  . (27)

ω3ω1

ω3ω2

−ω22 − ω12

+ x¨p/b + 2C(ω )x˙ p/b .

(30)

From these results, it can be seen that Eqs. 28-30 are strict generalizations of Eqs. 22 and 24 and Eqs. 25 and 26.

4 Finite Diﬀerence Approximations

At several points in this paper the angular velocity of a rigid body is related to the time derivative of the the attitude parameters. In many applications, it is necessary to approximate these time derivatives using ﬁnite diﬀerence approximations. In this section, the most common and useful ﬁnite diﬀerence approximations are presented and discussed.
We will discuss a general time-varying vector quantity, z (t) ∈ Rn. Finite diﬀerence approximations are denoted with the operator ∆nS,h, where n is the order of the derivative, S is the stencil over which the ﬁnite diﬀerence approximation is computed, and h is the size of the time increment between samples. Finite diﬀerence operators are linear combinations of function evaluations in the neighborhood of the evaluation point. A general ﬁnite diﬀerence approximation is written

∆nS,hz (t0)

=

1 hn

ak z (t0 + kh)

k∈S

=

1 c hn

bk z (t0 + kh) ,

(31)

k∈S

where {ak ∈ Q|k ∈ S} is the set ﬁnite diﬀerence coeﬃcients for which c ∈ Z and {bk ∈ Z|k ∈ S} are a convenient rational decomposition. The actual derivative of the function
is

3.3 Motion of a Particle in a Moving Frame

z(n) (t0) = ∆nS,hz (t0) + d hmz(n+m) (η) ,

(32)

Next, we consider the case in which the point is not rigidly attached to the body, but is a particle moving relative to it. The velocity of the particle in the world frame is

where m is called the order of accuracy, and η ∈ [t0 −h, t0 + h] is some unknown evaluation point for the truncation
error term.
The error is not typically calculated, but m indicates

x˙ p = x˙ b + x˙ p/b + ω × xp/b

how the error depends on the step size, h. For example, halving the step size produces a fourfold improvement

= x˙ b + RT x˙ p/b + ω × xp/b

in accuracy for second-order accurate methods but only a twofold improvement for ﬁrst-order accurate methods.

= x˙ b + RT x˙ p/b + C(ω ) xp/b ,

(28)

Tables 1 and 2 show the ﬁnite diﬀerence coeﬃcients for

various stencils and orders.

and the acceleration is
angular

centripetal

5 Euler Angles

x¨p = x¨b + ω˙ × xp/b + ω × ω × xp/b + x¨p/b + 2ω × x˙ p/b .
Coriolis

5.1 Rotation Sequence
(29) Three coordinate rotations in sequence can describe any
rotation. Let us consider triple rotations in which the ﬁrst

7

Table 1: Finite diﬀerence coeﬃcients over a symmetric

seven-point stencil.

k

m c -3 -2 -1 0 1 2 3

d

First Derivative (bk)

11

-1 1

1/2

11

-1 1

-1/2

22

1 -4 3

1/3

22

-1 0 1

-1/6

22

-3 4 -1

1/3

3 6 -2 9 -18 11

1/4

36

1 -6 3 2

-1/12

36

-2 -3 6 -1

1/12

36

-11 18 -9 2 -1/4

4 12 -1 6 -18 10 3

-1/20

4 12

1 -8 0 8 -1

1/30

4 12

-3 -10 18 -6 1 -1/20

5 60 -2 15 -60 20 30 -3

1/60

5 60

3 -30 -20 60 -15 2 -1/60

6 60 -1 9 -45 0 45 -9 1 -1/140

Second Derivative (bk)

11

1 -2 1

1

11

1 -2 1

-1

2 1 -1 4 -5 2

11/12

21

1 -2 1

-1/12

21

2 -5 4 -1 11/12

3 12 -1 4 6 -20 11

-1/12

3 12

11 -20 6 4 -1 1/12

4 12

-1 16 -30 16 -1

1/90

6 180 2 -27 270 -490 270 -27 2 -1/560

Third Derivative (bk)

1 1 -1 3 -3 1

3/2

11

-1 3 -3 1

1/2

11

-1 3 -3 1

-1/2

11

-1 3 -3 1 -3/2

2 2 1 -6 12 -10 3

1/4

22

-1 2 0 -2 1

-1/4

22

-3 10 -12 6 -1 1/4

3 4 1 -7 14 -10 1 1

-1/8

34

-1 -1 10 -14 7 -1 1/8

4 8 1 -8 13 0 -13 8 -1 7/120

Fourth Derivative (bk)

1 1 1 -4 6 -4 1

1

11

1 -4 6 -4 1 -1

21

1 -4 6 -4 1

-1/6

4 6 -1 12 -39 56 -39 12 -1 7/240

Fifth Derivative (bk)

1 1 -1 5 -10 10 -5 1

1/2

11

-1 5 -10 10 -5 1 -1/2

2 2 -1 4 -5 0 5 -4 1 -1/3

Sixth Derivative (bk) 2 1 1 -6 15 -20 15 -6 1 -1/4

Table 2: Finite diﬀerence coeﬃcients over a one-sided

seven-point stencil.

k

m c 0 1 2 3 4 56

d

First Derivative (bk)

1 1 -1 1

-1/2

2 2 -3 4 -1

1/3

3 6 -11 18 -9 2

-1/4

4 12 -25 48 -36 16 -3

1/5

5 60 -137 300 -300 200 -75 12

-1/6

6 60 -147 360 -450 400 -225 72 -10 1/7

21 3 12 4 12

Second Derivative (bk) 2 -5 4 -1
35 -104 114 -56 11
45 -154 214 -156 61 -10

11/12 -5/6 137/180

Third Derivative (bk)

1 1 -1 3 -3 1

-3/2

2 2 -5 18 -24 14 -3

7/4

3 4 -17 71 -118 98 -41 7

-15/8

4 8 -49 232 -461 496 -307 104 -15 29/15

11 21 36

Fourth Derivative (bk) 1 -4 6 -4 1
3 -14 26 -24 11 -2
35 -186 411 -484 321 -114 17

-2 17/6 -7/2

11 22

Fifth Derivative (bk) -1 5 -10 10 -5 1
-7 40 -95 120 -85 32 -5

-5/2 25/6

Sixth Derivative (bk)

1 1 1 -6 15 -20 15 -6 1

-3

8

rotation is an angle ψ about the k-axis, the second rotation is an angle θ about the j-axis, and the third rotation is an angle φ about the i-axis. For notational brevity, let us arrange these angles in a three-dimensional vector called the Euler angle vector, deﬁned by

u := [φ, θ, ψ]T .

(33)

The function that maps an Euler angle vector to its corresponding rotation matrix, Rijk : R3 → SO(3), is

Rijk(φ, θ, ψ) := Ri(φ)Rj(θ)Rk(ψ).

(34)

Relative Error [%]

16

(α − sin(α))/sin(α)

14

(1 − cos(α))/cos(α)

12

10

8

6

4

2

As in the general case, if z ∈ R3 is a vector in the world coordinates and z ∈ R3 is the same vector expressed in the
body-ﬁxed coordinates, then the following relations hold:

z = Rijk(u) z

(35)

z = Rijk(u)T z .

(36)

5.2 Euler Angle Rates and Angular Velocity
The time-derivative of the Euler angle vector is the vector of Euler angle rates. The relationship between the Euler angle rates and the angular velocity of the body is encoded in the Euler angle rates matrix. Multiplying this matrix by the vector of Euler angle rates gives the angular velocity in the global coordinates. Letting eˆi be the ith unit vector, the function that maps an Euler angle vector to its corresponding Euler angle rates matrix, E : R3 → R3x3, is

Eijk(φ, θ, ψ) := Rk(ψ)T Rj(θ)T eˆi, Rk(ψ)T eˆj, eˆk , (37)

and the related conjugate Euler angle rates matrix function, E : R3 → R3x3, whose multiplication with the vector
of Euler angle rates yields the body-ﬁxed angular velocity
is

Eijk(φ, θ, ψ) := [eˆi, Ri(φ)eˆj, Ri(φ)Rj(θ)eˆk] . (38) Hence,

ω = Eijk(u) u˙

(39)

ω = Eijk(u) u˙ .

(40)

Noting also that the angular velocity in the body-ﬁxed coordinates may be related to the angular velocity in the global coordinates by

ω = Rijk(u) ω

(41)

ω = Rijk(u)T ω ,

(42)

we may eliminate ω, ω , and u˙ to yield

Rijk(u) = Eijk(u) [Eijk(u)]−1 Rijk(u)T = Eijk(u) Eijk(u) −1 .

(43) (44)

0

0

5

10

15

20

25

30

Angle, α [degrees]

Figure 2: Error in the linearized approximations to the sine and cosine as a function of the input angle.

5.3 Linearization

Many applications require linear equations. Functions of Euler angles depend on trigonometric primitives such as the sine and cosine. As a consequence, it is useful to consider the linearized versions of these functions.
We consider the case of linearizing about zero. In this context, linearization involves substituting:

cos(α) → 1

(45)

sin(α) → α.

(46)

Higher order terms are then set to zero. These substitu-
tions are valid for small values of α. Fig. 2 shows the
relative error in these approximations as a function of the
input angle. A relative error of 1% is reached in the approximation to the sine at an angle of 14◦; for the cosine, the same error is reached at an angle of 8.2◦. Typically,
these approximations are considered valid for angles less than 10◦.
We denote the linearization operation by L. For ex-
ample, the linearized version of the function Rijk(u) is L{Rijk(u)}. In Sec. 8 we include the linearized versions of several key functions in the exposition of each valid ro-
tation sequence.
Linearizing about an attitude other than zero is most
easily accomplished by considering small perturbations about
a ﬁxed attitude. Let u0 be the set of Euler angles about which we would like to linearize and let u be the vector of
perturbation angles. We write

Ru0 (u) = L {Rijk(u)} Rijk(u0).

(47)

Here, we are considering u0 to be constant, such that the product of the two rotation matrices is still linear in the
parameters of u.

5.4 Valid Rotation Sequences
Thus far, we have not speciﬁed what sequences of coordinate rotations are able to span the space of all three di-

9

Table 3: Corresponding quantities between the three most common Euler angle conventions.

(1,2,3) ψ θ φ x y z x y z

Rotation Sequence

(3,1,3)

−ψ

π 2

−

θ

φ

−y

−x

−z

z

−x

−y

(3,2,3)

−ψ

π 2

−θ

φ

x

−y

z

z

−y

x

mensional rotations. In fact, of the 27 possible sequences of three integers in {1, 2, 3}, there are only 12 that satisfy the constraint that no two consecutive numbers in a valid sequence may be equal. These are
(i, j, k) ∈ (1, 2, 1) , (1, 2, 3), (1, 3, 1) , (1, 3, 2) ,
(2, 1, 2) , (2, 1, 3) , (2, 3, 1) , (2, 3, 2) ,
(3, 1, 2) , (3, 1, 3), (3, 2, 1) , (3, 2, 3) . (48)
The three in bold, (1, 2, 3), (3, 1, 3), and (3, 2, 3), are the most common choices. These three conventions are contrasted in Table 3 and the ﬁrst two are discussed presently.

5.5 Euler Angle Sequence (3,1,3)
5.5.1 Usage
The most common sequence associated with the name Euler angles is (3, 1, 3), named for Leonhard Euler, an 18thcentury Swiss mathematician and physicist. To disambiguate it from the other conventions that share the same name, it is also known as the x-convention.
In the study of the gyroscopic motion of a spinning rigid body, the Euler angles, φ, θ, and ψ, are known respectively as spin, nutation, and precession.
A commonplace example of gyroscopic motion is a spinning top. In this case, the body-ﬁxed z-axis is aligned with the spin-axis of the top, and the body-ﬁxed x- and y-axes point out the sides of the top. The tilt of the top away from the world z-axis is the nutation angle, and the moment arising from this tilt produces the familiar slow orbiting motion, called precession.

5.5.2 Euler Angles ⇒ Rotation Matrix

For compact notation in this and subsequent sections, we
write cθ := cos(θ), sφ := sin(φ), etc. The function that maps a vector of Euler angles to its rotation matrix, and
that same function linearized, are

R313(φ, θ, ψ) = R3(φ)R1(θ)R3(ψ) =

cφcψ − sφcθsψ cφsψ + sφcθcψ

 −sφcψ − cφcθsψ −sφsψ + cφcθcψ

sθ sψ

−sθ cψ

 sφsθ cφsθ 
cθ

(49)





1 ψ+φ 0

L{R313(φ, θ, ψ)} =  −φ − ψ 1 θ  . (50)

0

−θ 1

The derivatives of the rotation matrix with respect to the Euler angles are

∂R313 ∂φ

=

−sφcψ − cφcθsψ  −cφcψ + sφcθsψ

0

−sφsψ + cφcθcψ −cφsψ − sφcθcψ
0

 cφsθ −sφsθ 
0

(51)



∂R313 ∂θ

=

sφ sθ sψ cφ sθ sψ cθ sψ

−sφ sθ cψ −cφ sθ cψ −cθ cψ

 sφcθ cφcθ  −sθ

(52)

∂R313 ∂ψ

=

−cφsψ − sφcθcψ  sφsψ − cφcθcψ

sθ cψ

cφcψ − sφcθsψ −sφcψ − cφcθsψ
sθ sψ

 0 0 . 0

(53)

5.5.3 Euler Angles ⇐ Rotation Matrix

The inverse mapping, which gives the Euler angles as a

function of the rotation matrix, and the composition of

that function with the rotation matrix as a function of the

unit quaternion, are  



φ313(R)

atan2 (r13, r23)

u313(R) =  θ313(R)  =  acos (r33)

 (54)

ψ313(R)

atan2 (r31, −r32)





atan2 2q1q3 − 2q0q2,

u313(Rq

(q))

=



2q2q3 + acos q32 − q22 atan2 2q1q3 +

2q0q1 − q12 + 2q0q2,

q02



(55)

−2q2q3 + 2q0q1

5.5.4 Euler Angles ⇒ Euler Angle Rates Matrices

The Euler angle rates matrices as a function of the Euler

angles, their linearized equivalents, and their inverses, are





sθsψ cψ 0

E313(φ, θ, ψ) =  −sθcψ sψ 0 

(56)

cθ

01





0 10

L{E313(φ, θ, ψ)} =  −θ ψ 0 

(57)

1 01





[E313(φ, θ, ψ)]−1

=

1 sθ



sψ sθ cψ −sψ cθ

−cψ sθ sψ cψ cθ

0 0 sθ

(58)

10

z′′, z′

z, z′′′

θ y′
y′′ φ

θ

y′′′ ψ

x

ψ

φ x′

y

x′′′, x′′

Figure 3: Euler Angle Sequence (3,1,3)





0 cφ sφsθ

E313(φ, θ, ψ) =  0 −sφ cφsθ 

(59)

1 0 cθ





010

L{E313(φ, θ, ψ)} =  0 −φ θ 

(60)

101





[E313(φ, θ, ψ)]−1 =

1 sθ



−sφcθ cφsθ sφ

−cφcθ −sφsθ
cφ

sθ 0 . 0

(61)

The derivatives of the Euler angle rates matrices with re-

spect to the Euler angles are





∂E313 ∂θ

=

cθ sψ −cθ cψ
−sθ

0 0 0

0 0 0

(62)





∂E313 ∂ψ

=

sθ cψ sθ sψ
0

−sψ cψ 0

0 0 0

(63)





∂E313 ∂φ

=

0 0 0

−sφ −cφ
0

cφsθ −sφsθ 
0

(64)





∂E313 ∂θ

=

0 0 0

0 0 0

sφcθ cφcθ  . −sθ

(65)

5.5.5 Euler Angles ⇒ Unit Quaternion

The function that maps Euler angles to their corresponding

unit quaternion is





q313(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2 cφ/2sθ/2sψ/2 − sφ/2cψ/2sθ/2

 .

cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2

(66)

5.5.6 Singularities
This parametrization has singularities at nutation values of θ = nπ for n ∈ Z. At these points, changes in spin and precession constitute the same motion. This can be most readily seen in Eq. 56, in which the leading coeﬃcient is 1/ sin(θ).
It is a notable characteristic of this parametrization, and all parameterizations of the form (i, j, i), that there exists a singularity at the home position, [φ, θ, ψ] = [0, 0, 0]. This and other singularities are discussed further in Sec. 5.8.

5.6 Euler Angle Sequence (1,2,3)
5.6.1 Usage
The angles associated with the sequence (1, 2, 3) are sometimes called Cardan angles, for Gerolamo Cardano, an Italian Renaissance mathematician; Tait-Bryan angles, for Peter Guthrie Tait, a 19th-century Scottish mathematical physicist; or nautical angles. They are commonly used in aerospace engineering and computer graphics.
Despite the lack of consensus on the issue, these angles are also commonly referred to simply as Euler angles in the aeronautics ﬁeld, in which φ, θ, and ψ are known respectively as roll, pitch, and yaw, or, equivalently, bank, attitude, and heading.
Respecting the common and technical usage of these terms, these angles describe a vehicle whose forward direction is along the positive body-ﬁxed x-axis, with the body-ﬁxed y-axis to starboard, and the body-ﬁxed z-axis downward. In such a conﬁguration, the home position, [φ, θ, ψ] = [0, 0, 0], is ﬂat and level, pointing forward along the world x-axis.
The non-intuitive downward-pointing z-axis is chosen in order to make a positive change in θ correspond to pitching upward. A less common standard using the same sequence is to have the y-axis point to port and the z-axis point upward. In this case, a positive change in θ corresponds to pitching downward.

5.6.2 Euler Angles ⇒ Rotation Matrix
The function that maps a vector of Euler angles to its rotation matrix, and that same function linearized, are

R123(φ, θ, ψ) = R1(φ)R2(θ)R3(ψ) =



cθ cψ

cθ sψ

−sθ

 sφsθcψ − cφsψ sφsθsψ + cφcψ cθsφ 

cφsθcψ + sφsψ cφsθsψ − sφcψ cθcφ

(67)





1 ψ −θ

L{R123(φ, θ, ψ)} =  −ψ 1 φ  . (68)

θ −φ 1

11

z, z′′′

5.6.4 Euler Angles ⇒ Euler Angle Rates Matrices

z′

z′′

θ

φ

The Euler angle rates matrices as a function of the Euler

angles, their linearized equivalents, and their inverses, are





cθcψ −sψ 0

E123(φ, θ, ψ) =  cθsψ cψ 0 

(74)

−sθ 0 1

x

ψ

x′′′ θ

y′

φ

ψ

y′′′, y′′

y





1 −ψ 0

L{E123(φ, θ, ψ)} =  ψ 1 0 

(75)

−θ 0 1





[E123(φ, θ, ψ)]−1

=

1 cθ



cψ −cθ sψ cψ sθ

sψ cθ cψ sψ sθ

0 0 cθ

(76)

x′′, x′
Figure 4: Euler Angle Sequence (1,2,3)
The derivatives of the rotation matrix with respect to the Euler angles are





1 0 −sθ

E123(φ, θ, ψ) =  0 cφ cθsφ 

(77)

0 −sφ cθcφ





1 0 −θ

L{E123(φ, θ, ψ)} =  0 1 φ 

(78)

0 −φ 1

∂R123 ∂φ

=

0

 cφsθcψ + sφsψ

−sφsθcψ + cφsψ

0
cφsθsψ − sφcψ −sφsθsψ − cφcψ

 0 cφcθ  −sφcθ



∂R123 ∂θ

=

−cψ sθ sφ cθ cψ cφ cθ cψ

−sψ sθ sφ cθ sψ cφ cθ sψ

 −cθ −sφsθ  −cφsθ

(69) (70)

∂R123 ∂ψ

=

−cθ sψ

 −sφsθsψ − cφcψ

−cφsθsψ + sφcψ

cθ cψ sφsθcψ − cφsψ cφsθcψ + sφsψ

 0 0 . 0

(71)

5.6.3 Euler Angles ⇐ Rotation Matrix

The inverse mapping, which gives the Euler angles as a

function of the rotation matrix, and the composition of

that function with the rotation matrix as a function of the

unit quaternion, are







φ123(R)

atan2 (r23, r33)

u123(R) =  θ123(R)  =  −asin (r13)  (72)

ψ123(R)

atan2 (r12, r11)





atan2 2q2q3 + 2q0q1,

u123 (Rq (q))

=



−asin atan2

q32 − q22 − q12 2q1q3 − 2q0q2 2q1q2 + 2q0q3,

+

q02



(73)

q12 + q02 − q32 − q22





[E123(φ, θ, ψ)]−1 =

1 cθ



cθ 0
0

sφsθ cφcθ sφ

cφsθ −sφcθ  .
cφ

(79)

The derivatives of the Euler angle rates matrices with re-

spect to the Euler angles are





∂E123 ∂θ

=

−cψ sθ −sψ sθ
−cθ

0 0 0

0 0 0

(80)





∂E123 ∂ψ

=

−cθ sψ cθ cψ
0

−cψ −sψ
0

0 0 0

(81)





∂E123 ∂φ

=

0 0 0

0
−sφ −cφ

0 cφcθ  −sφcθ

(82)





∂E123 ∂θ

=

0 0 0

0 0 0

−cθ −sφsθ  . −cφsθ

(83)

5.6.5 Euler Angles ⇒ Unit Quaternion

The function that maps Euler angles to their corresponding

unit quaternion is





q123(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 + sφ/2sθ/2sψ/2 −cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2 cφ/2cψ/2sθ/2 + sφ/2cθ/2sψ/2

 .

(84)

cφ/2cθ/2sψ/2 − sφ/2cψ/2sθ/2

12

5.6.6 Singularities

This parametrization has singularities at pitch values of

θ=

π 2

+

nπ,

for

n

∈

Z.

It is thus only suitable for de-

scribing vehicles that do not perform vertical or inverted

maneuvers, such as land vehicles, boats and ships, and

transport aircraft.

All Euler angle sequences that do not have a repeated

axis of rotation have this singularity. See Sec. 5.8 for

further details on this and other singularities.

5.7 Derivatives of Selected Trigonometric Functions

Throughout this report we use various trigonometric func-

tions. The derivatives of most of these will be familiar to

the reader, but three of them warrant mention. The four-

quadrant inverse tangent, atan2 : R × R → [−π, π], and its

derivatives are

  atan(y/x)

if x > 0

atan2(y,

x)

=



atan(y/x) atan(y/x)

− +

π π

if if

x<0 x<0

∧ ∧

y<0 y>0

(85)

A common strategy for dealing with this problem is to change representations whenever an object nears a singularity. Even more popular is the use of unit quaternions to represent an object’s attitude. Using unit quaternions to represent the attitude of an object completely avoids the problem of gimbal lock. Unit quaternions also have several other notable advantages that will be discussed in Sec. 6.
The main disadvantage of unit quaternions, however, is that they are constrained to have unit length, a constraint, that while inconsequential in many cases, can lead to complications when attempting to optimize over the quaternion parameters. This is due to the fact that a unity norm constraint is quadratic in form and thus impossible to include in most standard optimization techniques.
5.9 Intra-Euler-Angle Conversion
Converting between representations is sometimes necessary to avoid gimbal lock. In this section, the conversions between (3, 1, 3) sequence and the (1, 2, 3) sequence are provided, along with Jacobians required for ﬁltering applications.

∂atan2(y, x) ∂x

=

−y x2 + y2

(86)

∂atan2(y, x) ∂y

=

x2

x +

y2 .

(87)

The derivatives of the inverse sine and inverse cosine are

dasin(x) dx

=

√1 1−

x2

(88)

dacos(x) dx

=

√ −1 . 1 − x2

(89)

5.9.1 Sequence (3,1,3) ⇐ Sequence (1,2,3)
A set of (3, 1, 3) Euler angles may be written as a function of a set of (1, 2, 3) Euler angles according to

u132133

(φ, θ, 

ψ)

=

u313

(R123

(φ,

θ,

ψ))



atan2 (−sθ, sφcθ)

=

acos (cφcθ)

 (90)

atan2 (cφsθcψ + sφsψ, −cφsθsψ + sφcψ)

The Jacobian of this function with respect to the (1, 2, 3) Euler angles is

5.8 Singularities
The singularities found in the various Euler angle representations are said to arise from gimbal lock. Two examples of this phenomenon are presented in Sec’s. 5.5.6 and 5.6.6.
Gimbal lock may be understood in several diﬀerent ways. Intuitively, it arises from the indistinguishability of changes in the ﬁrst and third Euler angles when the second Euler angle is at some critical value. Take, for example, the (1, 2, 3) sequence. When the pitch angle is 90 degrees, the vehicle is pointing straight up, and roll and yaw are indistinguishable. In the case of the (3, 1, 3) sequence, when the nutation angle is zero, changes in the spin angle are the same as changes in the precession angle.
The phenomenon may also be seen in the mathematics, where it manifests itself as singularities. Again, consider the (1, 2, 3) sequence. In this case, when cos(θ) = 0, then r23 = r33 = r12 = r11 = 0, and the expressions for φ123(R) and ψ123(R) in Eq. 73 are undeﬁned. A similar consequence may be observed in the case of the (3, 1, 3) sequence when sin(θ) = 0. This eﬀect is even more obvious in Eqs. 56 and 74, where the singularity may be seen directly in the leading coeﬃcient.

∂ u132133 ∂u

=

∂ u132133
∂φ

∂ u132133 ∂θ

∂ u132133 ∂ψ

=

1 a



√cφassθφccθθ −sθ

√−acsφφsθ sφcφcθ

 0 0 a

(91)

where

a := 1 − c2φc2θ

(92)

is a repeating term that has been factored for notational and computational ease.

5.9.2 Sequence (1,2,3) ⇐ Sequence (3,1,3)
A set of (1, 2, 3) Euler angles may be written as a function of a set of (3, 1, 3) Euler angles according to

u311233

(φ, θ, 

ψ)

=

u123

(R313

(φ,

θ,

ψ))



atan2 (cφsθ, cθ)

=

−asin (sφsθ)

 (93)

atan2 (cφsψ + sφcθcψ, cφcψ − sφcθsψ)

13

The Jacobian of this function with respect to the (3, 1, 3) Euler angles is

∂ u311233 ∂u

=

∂ u311233 ∂φ

∂ u311233 ∂θ

 = 

−−a1√1sbφcsφθscθθ

1 c

cθ

s2φ + c2φ

∂ u311233 ∂ψ

1 a

cφ −

√1cb2θs+φ csθ 2θ

−

1 c

cφ

sφsθ

0 0  1

(94)

where

a := c2θ + c2φs2θ b := 1 − s2φs2θ c := s2φc2θ + c2φ

(95) (96)

are repeating terms that have been factored for notational and computational ease.

6 Quaternions
Quaternions were ﬁrst devised by William Rowan Hamilton, a 19th-century Irish mathematician. There is a substantial body of quaternion mathematics that are beyond the scope of this report. Consequently, we focus on the essential deﬁnitions required to use the quaternion as a representation of the attitude of an object.

6.1 General Quaternions

A quaternion, q ∈ H, may be represented as a vector,

q = [q0, q1, q2, q3]T =

q0 q1:3

,

(97)

along with a set of additional deﬁnitions and operations that may be applied to it. The adjoint, norm, and inverse of the quaternion, q, are

q¯ =

q0 −q1:3

(98)

q= q−1 =

q02 + q12 + q22 + q32

q¯ q

.

(99) (100)

6.2 Quaternion Multiplication

Quaternion multiplication is not commutative. Quaternion multiplication between quaternions q and p is deﬁned by

q · p = qm(q, p)

=

q0p0 − qT1:3p1:3 q0p1:3 + p0q1:3 − q1:3 × p1:3

=

q0

−qT1:3

q1:3 q0I3 − C(q1:3)

p0 p1:3

=

p0

−pT1:3

p1:3 p0I3 + C(p1:3)

q0 q1:3

,

(101) (102) (103) (104)

where the skew-symmetric cross product matrix function

C : R3 → R3×3 is deﬁned by





0 −x3 x2 C(x) =  x3 0 −x1  .

−x2 x1 0

(105)

6.3 Quaternion ⇒ Quaternion Matrices

More compactly, quaternion multiplication may be written as the second quaternion pre-multiplied by a matrix-valued function of the ﬁrst quaternion. That is,

q · p = qm(q, p) = Q(q)p = Q¯(p)q p · q = qm(p, q) = Q(p)q = Q¯(q)p,

(106) (107)

where the quaternion matrix function, Q : H → R4×4 is deﬁned by

Q(q) =

q0

−qT1:3

q1:3 q0I3 + C(q1:3)

 q0 −q1 −q2 −q3 

= 

q1 q2

q0 −q3

q3 q0

−q2 q1

 ,

q3 q2 −q1 q0

(108) (109)

and the the closely related conjugate quaternion matrix function, Q¯ : H → R4×4 is deﬁned by

Q¯(q) =

q0

−qT1:3

q1:3 q0I3 − C(q1:3)

 q0 −q1 −q2 −q3 

= 

q1 q2

q0 q3

−q3 q0

q2 −q1

 .

q3 −q2 q1 q0

Substituting Eq. 98 into Eqs. 108 and 110 yields

(110) (111)

Q(q¯) = Q(q)T Q¯(q¯) = Q¯(q)T .

(112) (113)

The derivatives of the quaternion multiplication function are

∂qm(q, p) ∂q

=

Q¯(p)

∂qm(q, p) ∂p

=

Q(q).

(114) (115)

The derivatives of the quaternion matrix functions with respect to the parameters of the quaternion are

1000

 0 −1 0 0 

∂Q ∂q0

= 

0 0

1 0

0 1

0 0



,

∂Q ∂q1

= 

1 0

0 0

0 0

0 1

 ,

0001

0 0 −1 0

0 0 −1 0 

0 0 0 −1 

∂Q ∂q2

= 01

0 0

0 0

−1 0



,

∂Q ∂q3

= 00

0 −1

1 0

0 0

 .

01 0 0

1000

(116) (117)

14

1000

0 −1 0 0 

∂Q¯ ∂q0

= 

0 0

1 0

0 1

0 0



,

∂Q¯ ∂q1

= 10

0 0

0 0

0 −1



,

(118)

0001

0010

0 0 −1 0 

 0 0 0 −1 

∂Q¯ ∂q2

=

01

0 0

0 0

1 0



,

∂Q¯ ∂q3

= 

0 0

0 1

−1 0

0 0

 .

(119)

0 −1 0 0

10 0 0

6.4 Unit Quaternion ⇒ Rotation Matrix

6.5 Unit Quaternion ⇐ Rotation Matrix

The reverse mapping, from a rotation matrix to a quaternion, is slightly more complicated. Inspection of Eq. 125 yields the following relations:

4q02 = 1 + rq11(q) + rq22(q) + rq33(q) 4q12 = 1 + rq11(q) − rq22(q) − rq33(q) 4q22 = 1 − rq11(q) + rq22(q) − rq33(q) 4q32 = 1 − rq11(q) − rq22(q) + rq33(q)

(131) (132) (133) (134)

Unit quaternions are quaternions with unity norm. Throughout this section, we assume that

q = 1.

(120)

A unit quaternion can be used to represent the attitude of a rigid body. Consider a vector z ∈ R3 in the global coordinates. If z ∈ R3 is the same vector in the body-
ﬁxed coordinates, then the following relations hold:

4q2q3 = rq23(q) + rq32(q) 4q1q3 = rq31(q) + rq13(q) 4q1q2 = rq12(q) + rq21(q) 4q0q1 = rq23(q) − rq32(q) 4q0q2 = rq31(q) − rq13(q) 4q0q3 = rq12(q) − rq21(q).

(135) (136) (137) (138) (139) (140)

where

0 z

=q·

0 z

· q−1

=q·

0 z

· q¯

= Q¯(q)T Q(q)

0 z

=

1 0T 0 Rq(q)

0 z

,

(121) (122) (123) (124)

Rqq(02q2+q)1=qq122

− −

q22 − q32 2q0q3

2q1q2 q02 − q12

+ +

2q0q3 q22 − q32

(125) 
2q1q3 − 2q0q2 2q2q3 + 2q0q1  .

2q1q3 + 2q0q2 2q2q3 − 2q0q1 q02 − q12 − q22 + q32

That is,

z = Rq(q)z z = Rq(q)T z .

(126) (127)

Just as with rotation matrices, sequences of rotations are represented by products of quaternions. That is, for unit quaternions q and p, it hods that

From these we arrive at four diﬀerent inverse mappings. These are qiR : SO(3) → H for i ∈ {0, 1, 2, 3}, deﬁned by



(1

+

r11

+

r22

+

r33

)

1 2



q0R(R)

=

1 2

((rr2331

− r32)/(1 + r11 − r13)/(1 + r11

+ r22 + r22

+ +

r33) r33)

1 2 1 2



(r12

−

r21)/(1

+

r11

+

r22

+

r33)

1 2

(141)

(r23

−

r32)/(1

+

r11

−

r22

−

r33)

1 2



q1R(R)

=

1 2

(r12

(1 + r11 − r22 + r21)/(1 + r11

− −

r33

)

1 2

r22 −

r33)

1 2



(r31

+

r13)/(1

+

r11

−

r22

−

r33)

1 2

(142)

(r31

−

r13)/(1

−

r11

+

r22

−

r33)

1 2



q2R(R)

=

1 2

(r12

+ r21)/(1 − r11 (1 − r11 + r22

+ −

r22 −

r33

)

1 2

r33)

1 2



(r23

+

r32)/(1

−

r11

+

r22

−

r33)

1 2

(143)

(r12

−

r21)/(1

−

r11

−

r22

+

r33

)

1 2



q3R(R)

=

1 2

((rr3213

+ r13)/(1 − r11 + r32)/(1 − r11

− r22 − r22

+ +

r33) r33)

1 2 1 2



.

(1

−

r11

−

r22

+

r33

)

1 2

(144)

Rq(q · p) = Rq(q)Rq(p).

(128)

The derivatives of the rotation matrix function with respect to the quaternion parameters are









∂Rq ∂q0

=

q0 2−q3
 q2

q3 q0 −q1

−q2 q1 , q0

∂Rq ∂q1

q1 q2 q3 = 2q2 −q1 q0 ,
 q3 −q0 −q1

(129)

∂Rq ∂q2

−q2 = 2 q1
q0

q1 q2 q3

−q0 q3
−q2

,

∂Rq ∂q3

−q3 = 2−q0
q1

q0 −q3
q2

q1 q2 q3

.

(130)

Depending on the values of R, some of these functions will produce complex results. To avoid such an event, we deﬁne the following composite function, which selects the best of these four, depending on the parameters of R. The function, qR : SO(3) → H, is

qR(R) :=

qq0R 1R

(R) (R)

if if

r22 > −r33, r22 < −r33,

r11 > −r22, r11 > r22,

r11 > −r33 r11 > r33

qq2R 3R

(R) (R)

if if

r22 > r33, r22 < r33,

r11 < r22, r11 < −r33 r11 < −r22, r11 < r33.

(145)

15

6.6 Quaternion Rates ⇒ Angular Velocity More compactly:

The time derivative of the unit quaternion is the vector of quaternion rates. The quaternion rates, q˙ , are related to
the angular velocity. The functions that map a unit quater-
nion and its temporal derivative to the angular velocity in world and body-ﬁxed coordinates are ωq : H × R4 → R3 and ωq : H × R4 → R3, deﬁned by

0 ωq(q, q˙ )
0 ωq(q, q˙ )
More compactly:

= 2q¯ · q˙ = 2Q(q)T q˙ = 2q˙ · q¯ = 2Q¯(q)T q˙ .

(146) (147)

ωq(q, q˙ ) := 2W (q)q˙ ωq(q, q˙ ) := 2W (q)q˙ ,

(148) (149)

q˙ ω(q, ω)

=

1 2

W

(q)T

ω

q˙ ω

(q, ω

)

=

1 2

W

(q)T ω

.

(158) (159)

6.8 Quaternion Rates ⇒ Angular Acceleration
The angular acceleration, expressed in the global and bodyﬁxed coordinates may also be related to time derivatives of the quaternion parameters by

0 ω˙

= 2q¯ · q¨ + 2

q˙ 2 0

= 2Q(q)T q¨ + 2

q˙ 2 0

(160) (161)

where the quaternion rates matrices, W : H → R3×4 and W : H → R3×4, are deﬁned by

 −q1
W (q) := −q2 −q3 −q1
W (q) := −q2 −q3

q0 q3 −q2
q0 −q3 q2

−q3 q0 q1
q3 q0 −q1

 q2 −q1 q0  −q2 q1  . q0

(150) (151)

The derivatives of the quaternion rates matrices with re-

spect to the parameters of the quaternion are









∂W ∂q0

0 = 0
0

1 0 0

0 1 0

0 0 1

,

∂W ∂q1

−1 = 0
0

0 0 0

0 0 1

0 −1 , 0









∂W ∂q2

0 = −1
0

0 0 −1

0 0 0

1 0 0



,

∂W ∂q3

0 = 0
−1

0 1 0

−1 0 0

0 0 , 0

(152) (153)









∂W ∂q0

0 = 0
0

1 0 0

0 1 0

0 0 1

,

∂W ∂q1

−1 = 0
0

0 0 0

0 0 −1

0 1 , 0

(154)









∂W ∂q2

0 = −1
0

0 0 1

0 0 0

−1 0 0



,

∂W ∂q3

0 0 10 =  0 −1 0 0 ,
−1 0 0 0

(155)

6.7 Quaternion Rates ⇐ Angular Velocity
The inverse mapping, from the angular velocity and the unit quaternion to the quaternion rates, is closely related. The functions q˙ ω : H × R3 → R4 and q˙ ω : H × R3 → R4

0 ω˙

= 2q¨ · q¯ + 2

q˙ 2 0

= 2Q¯(q)T q¨ + 2

q˙ 2 0

.

(162) (163)

More compactly:

ω˙ q(q, q˙ ) := 2W (q)q¨ ω˙ q(q, q˙ ) := 2W (q)q¨.

(164) (165)

6.9 Quaternion Rates ⇐ Angular Acceleration

The inverse mappings, from the angular acceleration rates to the second derivative of the quaternion, are

q¨ω(q, ω˙ )

:=

1 2

W

(q)T

ω¨

q¨ω

(q, ω˙

)

:=

1 2

W

(q)T ω¨

.

(166) (167)

6.10 Unit Quaternion ⇐ Cayley-Klein Parameters
The Cayley-Klein parameters are closely related to the unit quaternion. Consequently we will give it only brief mention here. The Cayley-Klein parameters are α, β, γ, and δ ∈ C. These parameters are often arranged as a 2 × 2 matrix,

K :=

αβ γδ

,

(168)

and satisfy the constraints

q˙ ω(q, ω)

=

1 2

q

·

0 ω

=

1 2

Q(q)

0 ω

q˙ ω

(q, ω

)

=

1 2

0 ω

·

q

=

1 2

Q¯(q)

0 ω

.

(156) (157)

αα¯ + γγ¯ = 1, αα¯ + ββ¯ = 1, αβ¯ + γδ¯ = 0, αδ + βγ = 1, β = −γ¯, and δ = α¯,
where α¯ is the complex conjugate of α.

(169) (170) (171)

16

The function that maps the Cayley-Klein parameters

to their corresponding unit quaternion, qK : C2×2 → H, is

qK

αβ γδ

 = 

−−121222ii(((βα(βα−++−γδγδ))))

  .

(172)

The function that maps the Cayley-Klein parameters to their corresponding rotation matrix, Rc : C2×2 → SO(3),
is

RK

αβ γδ

=

1  2i
2

(α2 −β 2 −γ 2 +δ 2 ) (α2 −β 2 +γ 2 −δ 2 )

(βδ−αγ)

2i12((−αα22+−ββ22++γγ22++δδ22)) i (αγ+βδ)

(173)  (γδ−αβ) −i (αβ+γδ) .
(αδ+βγ)

6.11 Unit Quaternion ⇒ Cayley-Klein Parameters
The inverse mapping is Kq : H → C2×2, deﬁned by

Kq(q) =

αq(q) βq(q) γq(q) δq(q)

=

q0 + iq3 iq1 − q2

iq1 + q2 q0 − iq3

.

(174)

Other relationships involving Cayley-Klein parameters, such as those between the Cayley-Klein parameters and the Euler angles may be derived from Eq. 172 through composition with the appropriate functions in Sec. 6 or Sec. 8.

6.12 Unit Quaternion ⇐ Axis-Angle

Any ﬁnite rotation may be achieved by a single rotation
about an appropriately chosen axis. It is therefore possi-
ble to parameterize the attitude of a rigid body with an angle α ∈ R and a unit vector n ∈ S2, where S2 := {v ∈ R3| v = 1}. The quaternion that arises from a rotation
α about an axis n is given by the axis-angle quaternion function, qa : R × S2 → H, deﬁne by

qa (α, n) :=

cos n sin

1212αα

.

(175)

Here, we emphasize that we are constrained to consider only vectors n that satisfy the quadratic norm constraint,
n = 1. Diﬀerentiating with respect to α and n yields

∂qa ∂α

=

−12 n12

sin cos

1 12 2

α α

(176)

∂qa ∂n

=



0T

I3 sin

1 2

α



000

= 

sα 2 0

0 sα

0 0

 .

2
0 0 sα

2

(177) (178)

The corresponding quaternion matrices are given by the functions Qa : R × S2 → R4×4 and Q¯a : R × S2 → R4×4, where

Qa(α, n) = Q (qa(α, n))



cα

= 

2

n1

s

α 2

n2

s

α 2

−n1

s

α 2

cα

2

−n3

s

α 2

−n2

s

α 2

n3

s

α 2

cα

2

−n3

s

α 2

−n2

s

α 2

n1

s

α 2



n3

s

α 2

n2

s

α 2

−n1

s

α 2

cα 2

(179) (180)

Q¯a(α, n) = Q¯(qa(α, n))



cα

= 

2

n1 n2

s s

α 2 α 2

−n1

s

α 2

cα

n3

s2

α 2

−n2

s

α 2

−n3s cα

α 2

2

−n3

s

α 2

−nn21ssα2α2

 .

n3

s

α 2

−n2

s

α 2

n1

s

α 2

cα 2

(181) (182)

The corresponding rotation matrix is given by the function Ra : R × S2 → SO(3), deﬁne by

Ra(α, n) = Rq(qa(α, n))

(183)

= ra1(α, n) ra2(α, n) ra3(α, n) , (184)

the columns of which read

 ra1(α, n) = 
 ra2(α, n) = 
 ra3(α, n) = 

n1

2−
2n1 2n1

n32 n2s n3s

−

α2

2 α

2

2

n2 −
+

2s
2n3 2n2

α 2
c c

2
α 2 α 2

+ sα
2
sα 2

c

α 2

2

n2

2n1 2− 2n2

n2s n32 n3s

α2
2
−
α2
2

+
n1 −

2n3 2s 2n1

c
α 2
c

α
22
α 2

sα 2
+ sα
2

c

α 2

2

n3

2n1 2n2 2−

n3s n3s n22

α2

2 α

2

2

−

− + n1

2n2 2n1 2s

c c
α 2

α 2 α
22

sα 2
sα 2
+

c

α 2

2

 
 
 .

(185) (186) (187)

This representation, while perhaps more intuitive than

the quaternion, is functionally equivalent to it: both re-

quire four parameters and a single quadratic constraint.

In order to overcome this problem, and produce a quater-

nion representation that requires only three parameters,

we will continue this development in Sec. 7.

Before moving on from the axis-angle representation,

we present some derivatives of key results. Diﬀerentiating

Eqs. 181-187 with respect to α and n yields

∂ra1 ∂α

 =

−

1 2

sα

1 − n12 + n22 + n32 n1n2sα − n3cα n1n3sα + n2cα

 

(188)





∂ra2 ∂α

=

−

1 2

sα

n1n2sα + n3cα 1 + n12 − n22 + n32 n2n3sα − n1cα



(189)





∂ra3 ∂α

=

−

1 2

sα

n1n3sα − n2cα n2n3sα + n1cα 1 + n12 + n22 − n32







∂Ra n1

n1(1 − cα) = n2(1 − cα)
n3(1 − cα)

n2(1 − cα) −n1(1 − cα)
−sα

n3(1 − cα)

sα



−n1(1 − cα)

(190) (191)

17





∂Ra n2

−n2(1 − cα) =  n1(1 − cα)
sα

n1(1 − cα) n2(1 − cα) n3(1 − cα)

−sα n3(1 − cα)  −n2(1 − cα)





∂Ra n3

−n3(1 − cα) =  −sα
n1(1 − cα)

sα −n3(1 − cα) n2(1 − cα)

n1(1 − cα) n2(1 − cα) n3(1 − cα)





∂Qa ∂α

=

cα/2 2



−tα/2 n1 n2

−n1 −tα/2 −n3

−n2 n3 −tα/2

−n3 −n2 n1



n3

n2 −n1 −tα/2





∂Q¯a ∂α

=

cα/2 2



−tα/2 n1 n2

−n1 −tα/2
n3

−n2 −n3 −tα/2

−n3 n2 −n1



n3 −n2 n1 −tα/2

(192) (193) (194) (195)

∂Qa ∂ni

= sin

α 2

∂ ∂

Q qi

,

and

∂Q¯a ∂ni

= sin

α 2

∂ ∂

Q¯ qi

,

for i ∈ {1, 2, 3}.

(196) (197)

Here, we have employed the shorthand tα/2 := tan(α/2) in addition to the familiar sα/2 := sin(α/2) and cα/2 := cos(α/2). Expression for ∂Q/∂qi and ∂Q¯/∂qi may be found in Eqs. 116-118.

6.13 Unit Quaternion ⇒ Axis-Angle
The inverse mappings, from a unit quaternion to the corresponding axis and angle of rotation, are αq : H → R and nq : H → S2, deﬁned by

αq(q) := 2acos(q0)

nq(q) :=

q1:3 q1:3

=

q1:3 . 1 − q02

(198) (199)

6.14 Unit Quaternion ⇐ Euler Angles

6.15 Unit Quaternion ⇒ Euler Angles
The inverse mapping, from a unit quaternion to a set of Euler angles, is uijk (Rq(q)). These results are presented with each Euler angle set in Sec. 8.
6.16 Optimization with Quaternions
Because of their simplicity, mathematical elegance, and lack of any singularities, quaternions are a very popular representation for encoding the attitude of a rigid body. This includes applications in which quaternions are included as state variables in an optimization. In these cases, the diﬃcult problem of how to impose the unity norm constraint arises. Various techniques are used to solve this problem, though none of them are completely satisfactory.
For iterative optimization algorithms, such as the conjugate gradient algorithm, it is possible to simply re-normalize the quaternions after each iteration. When using a direct method, however, this strategy is usually insuﬃcient. In such cases, terms of the form c (1 − q )2 are also included in the objective function to prevent large violations of the constraint. Renormalization after each iteration is usually still necessary.
7 Rotation Vector Representation
One of the major drawbacks of quaternions is that they require a quadratic norm constraint in order to be valid rotations. This problem can be overcome by folding the unity norm constraint into the parametrization. There are several ways in which to do this, but we present what appears to be the most natural three-dimensional parametrization of the quaternion representation of an object’s attitude.
7.1 Rotation Vector ⇐ Axis-Angle
We deﬁne the rotation vector as a function of the axis and angle of a rotation, va : R × S2 → R3, by

The unit quaternion arising from a particular Euler angle sequence may be written as the product of three axis-angle unit quaternions. That is, for an Euler angle sequence, (i, j, k), with rotation angles [φ, θ, ψ], the corresponding unit quaternion is
qijk(φ, θ, ψ) = qa(φ, eˆi) · qa(θ, eˆj) · qa(ψ, eˆk). (200)

va(α, n) := αn.

(204)

7.2 Rotation Vector ⇒ Axis-Angle
Noting that n = 1, we may invert this deﬁnition to yield the functions αv : R3 → R and nv : R3 → S2, deﬁned by

Diﬀerentiating with respect to the Euler angles yields

∂qijk(φ, θ, ψ) ∂φ

=

∂qa ∂α

· qa(θ, eˆj) · qa(ψ, eˆk)
φ,eˆi

∂qijk(φ, θ, ψ) ∂θ

= qa(φ, eˆi) ·

∂qa ∂α

θ,eˆj

· qa(ψ, eˆk)

∂qijk(φ, θ, ψ) ∂ψ

= qa(φ, eˆi) · qa(θ, eˆj) ·

∂qa ∂α

.
ψ,eˆk

(201) (202) (203)

αv(v) := v = v

nv(v) :=

v v

=

v v

.

Here we have used the shorthand,

v := v .

This will be used throughout this article.

(205) (206)
(207)

18

7.3 Rotation Vector ⇒ Unit Quaternion

We deﬁne the function that maps a rotation vector to a unit quaternion, qv : R3 → H, by

qv(v) := qa(αv(v), nv(v)) =

cos

v v

sin

v 2v
2

(208)

lim
v→0

qv (v)

=

lim
v→0

1

1 2

v

.

(209)

The derivatives of qv with respect to the parameters of v are presented in this section. In order to provide com-
pact expressions, we have factored them in terms of the
following two quantities:

a := c v v − 2s v

2

2

b := −s v v2 − 6c v v + 12s v .

2

2

2

We diﬀerentiate Eq. 208 to yield

(210) (211)

G(v) = [ g1(v), g2(v), g3(v) ]

:=

∂qv ∂v

=

∂qv ∂v1

,

∂qv ∂v2

,

∂qv ∂v3

sv

=

2
2v

−vT 2I3

+

a 2v3

0T vvT

(212)

−v1 −v2 −v3

0 0 0

=

sv 2
2v



2 0

0 2

0 0



+

a 2v3

vv11v22

v1v2 v22

vv12vv33

(213)

=

002

1 2v

32v−2svvv211vv+22asvv21

2

a

v1v3a

v1v3 v2v3 v32

−v2

v2

s

v 2

−v3

v

2

s

v 2

v1v2a

v1v3a

2v2s v 2

+ v22a

v2v3a

v2v3a

2v2s v 2

+ v32


 a

(214)

 −v1 −v2 −v3 

lim G(v)
v→0

=

1 4



2 0

0 2

0 0



002

(215)

∂G ∂vi

−s v

=

2
2v

eˆTi 03×3

+

a 4v3

+

vib 4v5

0T vvT

−vivT 2 eˆivT + veˆTi + viI3
(216)

lim
v→0

∂G ∂vi

=

−1 4

eˆTi 03×3

(217)

∂G ∂v1

−s v

=

2
2v

1 00

0 0 0

0

−v12

00

+

a 4v3



6v1 2v2

−v1v2 2v2 2v1

−v1v3

2v3 0



000

2v3 0

2v1

0 0 0

+

v1b 4v5

vv1v122

v1v2 v22

v1 v2

vv33

v1v3 v2v3 v32

(218)

∂G ∂v2

−s v

=

2
2v

0 00

1 0 0

0

−v1v2

00

+

a 4v3



2v2 2v1

−v22 2v1 6v2

−v2v3

0 2v3



000

0 2v3 2v2

0 0 0

+

v2b 4v5

vv1v122

v1v2 v22

vv21vv33

v1v3 v2v3 v32

(219)

∂G ∂v3

−s v

=

2
2v

0 00

0 0 0

1

−v1v3

00

+

a 4v3



2v3 0

−v2v3 0
2v3

−v32

2v1 2v2



000

2v1 2v2 6v3

0 0 0

+

v3b 4v5

vv1v122

v1v2 v22

vv21vv33 .

v1v3 v2v3 v32

(220)

7.4 Rotation Vector ⇐ Unit Quaternion
The inverse mapping, vq : H → R3, which maps a unit quaternion to a rotation vector, is deﬁned by

vq(q) := αq(q)nq(q)

= 2 acos(q0)

q1:3 q1:3

=

2 acos(q0)

(1

−

q02)

1 2

q1:3

(221) (222)
(223)

lim vq(q) = 2q1:3
q1:3 →0

(224)

c

:=

1 1 − q02

d := acos (q0) 1 − q02

(225) (226)





H(q) :=

∂vq ∂q

=

2cq1 (dq0 − 1) 2cq2 (dq0 − 1) 2cq3 (dq0 − 1)

2d 0 0

0 2d 0

0 0 2d

(227)





0200

lim H(q) =  0 0 2 0  .

q1:3 →0

0002

(228)

7.5 Rotation Vector ⇒ Quaternion Matrices
The quaternion matrices may be written as a function of the rotation vector by composition of Eqs. 108 and 110,

19

and Eq. 208:

Qv(v) := Q(qv(v))



vc v

=

1 v



2

v1

s

v 2

v2

s

v 2

−v1

s

v 2

vc v

2

v3

s

v 2

−v2

s

v 2

−v3

s

v 2

vc v

2

−v3

s

v 2

v2

s

v 2

−v1

s

v 2



v3

s

v 2

−v2

s

v 2

v1

s

v 2

vc v 2

Q¯ v (v)

:= =

v1Q¯(qvvvv(12cvssv2)vv22)

−v1s

vc

v 2

v 2

−v3

s

v 2

v3

s

v 2

v2

s

v 2

−v2

s

v 2

vv3csv2v2

−v1

s

v 2

−v3

s

v 2

−v2

s

v 2

vv1csv2v2

 

 2 −v1 −v2 −v3 

lim
v→0

Qv (v)

=

1 2



v1 v2

2 v3

−v3 2

v2 −v1



v3 −v2 v1 2

(229)

Wv(v) := W(qv(v))



=

1 v

−v1

s

v 2

−v2 −v3

s s

v 2 v 2

vc v 2
−vv23ssv2v2

v3

s

v 2

vc v

−v1

2s

v 2

−v2

s

v 2

vv1csvv2

2







lim
v→0

Wv

(v)

=

1 2



−v1 −v2 −v3

2
v3 −v2

−v3 2
v1

v2 −v1
2



(238) (239)

(230)





lim
v→0

Wv

(v)

=

1 2



−v1 −v2 −v3

2
−v3 v2

v3 2
−v1

−v2 v1 2

.

(240)

The derivatives of the quaternion rates matrices with respect to the rotation vector parameters are

(231)

∂Wv ∂vj

=

3 i=0

∂W ∂qi

∂qvi ∂vj

=

3 i=0

∂W ∂qi

gij (v)

= W (gj(v))

(241)

 2 −v1 −v2 −v3 

lim
v→0

Q¯v

(v)

=

1 2



v1 v2

2 −v3

v3 2

−v2 v1

 .

v3 v2 −v1 2

(232)

∂Wv ∂vj

=

3 i=0

∂W ∂qi

∂qvi ∂vj

=

3 i=0

∂W ∂qi

gij (v)

= W (gj(v)) .

(242)

The derivatives of the quaternion matrices with respect to the rotation vector parameters are

∂Qv ∂vj

=

3 i=0

∂Q ∂qvi ∂qi ∂vj

=

3 i=0

∂Q ∂qi

gij

(v)

= Q (gj(v))

(233)

lim
v→0

∂Qv ∂vj

=

1 ∂Qv 2 ∂qj

(234)

∂Q¯v ∂vj

=

3 i=0

∂Q¯ ∂qvi ∂qi ∂vj

=

3 i=0

∂Q¯ ∂qi

gij

(v)

= Q¯ (gj(v))

(235)

lim
v→0

∂Q¯v ∂vj

=

1 2

∂Q¯v ∂qj

.

(236)

7.6 Rotation Vector ⇒ Quaternion Rates Matrices
The quaternion rates matrices may be written as a function of the rotation vector by composition of Eqs. 150 and 151, and Eq. 208:

Wv(v) := W(qv(v))

=

1 v

−v1

s

v 2

−v2

s

v 2

−v3

s

v 2

vc

v 2

v3

s

v 2

−v2

s

v 2

−v3s

vc

v 2

v 2

v1

s

v 2

v2

s

v 2

−v1s

vc

v 2

v 2

 

(237)

7.7 Rotation Vector ⇒ Rotation Matrix

The rotation matrix may be written as a function of the rotation vector by composition of Eqs. 125 and 208:

Rv(v) := Rq(qv(v)) = rv1(v) rv2(v) rv3(v) ,

(243)

the columns of which read



rv1(v)

=

1 v2





rv2(v)

=

1 v2





rv3(v)

=

1 v2



v12 − v22 − v32

2s v 2

v1

v2

s

v 2

s2v + v2c2v

2

2

−

vv3c

v 2

 

2s v 2

v1

v3

s

v 2

2s v

v22

2
−

v1v2 v32 −

sv v122

+

vv2c

v 2

+v s2v

v3 +

cv v22

c2v

2

2

 

2s v 2

v2

v3

s

v 2

2s v 2

v1

v3

s

v 2

2s v

v32

2
−

v2v3 v12 −

sv v222

−

vv1c

v 2

−

vv2c

v 2

+v s2v

v1 +

cv v22

c2v

2

2

 .

For very small v, we have:





1 v3 −v2

lim
v→0

Rv (v)

=



−v3 v2

1 −v1

v1  . 1

(244) (245) (246)
(247)

The derivatives of the rotation matrix with respect to the parameters of the rotation vector are

∂Rv ∂vj

=

∂ rv1 ∂vj

∂ rv2 ∂vj

∂ rv3 ∂vj

3
=
i=0

∂Rq ∂qi

qv (v)

∂qvi ∂vj

.

(248)

20

where

∂rvi ∂vj

=

Fi(qv(v)) gj(v)





q0 q1 −q2 −q3

F1(q) = −q3 q2 q1 −q0

 q2 q3 q0 q1

q3 q2 q1 q0 F2(q) =  q0 −q1 q2 −q3

−q1 −q0 q3 q2

−q2 q3 −q0 q1 F3(q) =  q1 q0 q3 q2

q0 −q1 −q2 q3

(249) (250) (251) (252)

lim
v→0

∂Rv ∂vj

=

−C (eˆi )

(253)









lim
v→0

∂Rv ∂v1

=



0 0 0

0 0 −1

0 1 , 0

lim
v→0

∂Rv ∂v2

=



0 0 1

0 0 0

−1 0 , 0





lim
v→0

∂Rv ∂v3

=

0 −1 0

1 0 0

0 0 0

.

(254)

7.10 Rotation Vector Rates ⇒ Angular Velocity

The time derivative of the rotation vector is the vector of rotation vector rates. The rotation vector rates, v˙ , are
related to the angular velocity. The functions that map a
rotation vector and its temporal derivative to the angular velocity in world and body-ﬁxed coordinates are ωv : R3 × R3 → R3 and ωv : R3 × R3 → R3, deﬁned by

ωv(v, v˙ ) := 2Wv(v)q˙ v(v) = 2Wv(v)G(v)v˙ = 2V (v)v˙
ωv(v, v˙ ) := 2Wv(v)q˙ v(v) = 2Wv(v)G(v)v˙ = 2V (v)T v˙ ,

(259) (260)

where the rotation vector rates matrix, V : R3 → R3×3, is deﬁned by

V (v) := Wv(v)G(v),

(261)

where Wv(v) and G(v) are deﬁned in Eqs. 237 and 212. As it also holds that ω = Rv(v)ω, we have that

Rv(v) = V (v)T V (v)−1 Rv(v)T = V (v)V (v)−T .

(262) (263)

7.8 Rotation Vector Multiplication
The multiplication of two rotation vectors u and v ∈ R3 is deﬁned in terms of the product of quaternions:
v ∗ u = vm(v, u) = vq (qm (qv(v), qv(u))) . (255)
This product is best computed as written, by converting each rotation vector to a unit quaternion, performing the quaternion product, and then converting back to a rotation vector.
The derivatives of the rotation vector multiplication function are

7.11 Rotation Vector Rates ⇐ Angular Velocity

The functions that map the angular velocity in the body-
ﬁxed and world coordinates to the rotation vector rates, v˙ ω : R3 × R3 → R3 and v˙ ω : R3 × R3 → R3, are deﬁned by

v˙ ω(v, ω)

=

1 2

V

(v)−1

ω

v˙ ω

(v, ω

)

=

1 2

V

(v)−T

ω

.

(264) (265)

∂vm(v,u) ∂v

=

H(qm (qv(v), qv(u)) Q¯ (qv(u)) G(v)

(256)

∂vm(v,u) ∂u

= H(qm (qv(v), qv(u)) Q (qv(v)) G(u).

(257)

Here, H(q), Q¯(q), and G(v) are given in Eqs. 227 , 110, and 212.

7.9 Rotation Vector Rates ⇒ Quaternion Rates

The quaternion rates as a function of the rotation vector rates are given in the function q˙ v : H × R3 → R4, deﬁned
by

q˙ v(q, v˙ )

=

∂qv ∂v

∂v ∂t

=

G(v)v˙ .

(258)

Here, G(v) is given in Eq. 212.

7.12 Integration of Angular Velocity

Quaternions are very well suited to tracking the attitude of an object by integrating the body-ﬁxed angular velocity over time.
Consider an object with a body-ﬁxed angular velocity of ω (t). Let us consider the change in attitude from time t0 to time t1. We deﬁne the rotation vector over this interval to be

t1
vω (t0, t1) := ω (t) dt.
t0

(266)

If the body-ﬁxed angular velocity is provided as discrete samples, as, for example, from a set of rate gyros, the integration will have to be carried out numerically. The simplest such numerical integration is to compute the product of the time interval and the average of all the samples taken during that time interval.

21

If at time t0 the body has a quaternion attitude of q0, then the attitude at time t1 is

q1 = [qv ◦ vω (t0, t1)] · q0 = qv (vω (t0, t1)) · q0.
This equation may be easily generalized to read

(267)

qi+1 = qv (vω (ti, ti+1)) · qi,

(268)

giving us a simple update rule for tracking the attitude of an object over time, given some measure of the body-ﬁxed angular velocity. This method is much more accurate than integrating the Euler angle rates.

8 A Catalog of Euler Angle Parameterizations
In this section we present an exhaustive catalog of the twelve diﬀerent Euler angle parameterizations, including conversions to and from rotation matrices and quaternions, the relationship between the Euler angle rates and the angular velocity, and various derivatives of the fundamental results with respect to the Euler angles.

22

8.1 Euler Angle Sequence (1,2,1)

z′′′

z

R121(φ, θ, ψ) = R1(φ)R2(θ)R1(ψ) =



cθ

sθ sψ

 sφsθ cφcψ − sφcθsψ

−sθ cψ cφsψ + sφcθcψ 

cφsθ −sφcψ − cφcθsψ −sφsψ + cφcθcψ

 1
L{R121(φ, θ, ψ)} =  0 θ

0 1 −φ − ψ

 −θ ψ+φ  1







φ121(R)

atan2 (r21, r31)

u121(R) =  θ121(R)  =  acos (r11)



ψ121(R)

atan2 (r12, −r13)





atan2 2q1q2 − 2q0q3,

u121 (Rq (q))

=



2q1q3 + acos q12 + q02 atan2 2q1q2 +

2q0q2 − q32 − 2q0q3,

q22



−2q1q3 + 2q0q2





cθ

01

E121(φ, θ, ψ) =  sθsψ cψ 0 

−sθcψ sψ 0





1 01

L{E121(φ, θ, ψ)} =  0 1 0 

−θ ψ 0





1 0 cθ

E121(φ, θ, ψ) =  0 cφ sφsθ 

0 −sφ cφsθ





101

L{E121(φ, θ, ψ)} =  0 1 0 

0 −φ θ



[E121(φ, θ, ψ)]−1

=

1 sθ



0 0 sθ

sψ sθ cψ −cθ sψ

 −cψ sθsψ  cθ cψ



[E121(φ, θ, ψ)]−1

=

1 sθ



sθ 0
0

−sφcθ cφsθ sφ

 −cφcθ −sφsθ 
cφ





q121(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2 cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2



cφ/2sθ/2sψ/2 − sφ/2cψ/2sθ/2

(269) (270) (271) (272) (273) (274) (275) (276) (277) (278) (279)

∂R121 ∂φ

=

0

 cφsθ

−sφsθ

0
−sφcψ − cφcθsψ −cφcψ + sφcθsψ

 0 −sφsψ + cφcθcψ  −cφsψ − sφcθcψ

(280)

z′′ ψ
θ z′
φ

y′

φ

y′′′, y′′

x, x′′′ θ

ψ y

x′′, x′

Figure 5: Euler Angle Sequence (1,2,1)



∂R121 ∂θ

=

−sθ sφcθ cφcθ

cθ sψ sφ sθ sψ cφ sθ sψ

 −cθ cψ −sφsθcψ  −cφ sθ cψ

∂R121 ∂ψ

=

0

sθ cψ

 0 −cφsψ − sφcθcψ

0 sφsψ − cφcθcψ

 sθ sψ cφcψ − sφcθsψ  −sφcψ − cφcθsψ





∂E121 ∂θ

=

−sθ cθ sψ −cθ cψ

0 0 0

0 0 0





∂E121 ∂ψ

=

0
sθ cψ sθ sψ

0
−sψ cψ

0 0 0





∂E121 ∂φ

=

0 0 0

0
−sφ −cφ

0 cφsθ  −sφsθ





∂E121 ∂θ

=

0 0 0

0 0 0

−sθ sφcθ  cφcθ

(281)
(282) (283) (284) (285) (286)

23

8.2 Euler Angle Sequence (1,2,3)

z, z′′′

R123(φ, θ, ψ) = R1(φ)R2(θ)R3(ψ) =



cθ cψ

cθ sψ

−sθ

 sφsθcψ − cφsψ sφsθsψ + cφcψ cθsφ 

cφsθcψ + sφsψ cφsθsψ − sφcψ cθcφ





1 ψ −θ

L{R123(φ, θ, ψ)} =  −ψ 1 φ 

θ −φ 1

(287) (288)







φ123(R)

atan2 (r23, r33)

u123(R) =  θ123(R)  =  −asin (r13) 

ψ123(R)

atan2 (r12, r11)





atan2 2q2q3 + 2q0q1,

u123 (Rq (q))

=



−asin atan2

q32 − q22 − q12 2q1q3 − 2q0q2 2q1q2 + 2q0q3,

+

q02



q12 + q02 − q32 − q22





cθcψ −sψ 0

E123(φ, θ, ψ) =  cθsψ cψ 0 

−sθ 0 1





1 −ψ 0

L{E123(φ, θ, ψ)} =  ψ 1 0 

−θ 0 1

(289) (290) (291) (292)





1 0 −sθ

E123(φ, θ, ψ) =  0 cφ cθsφ 

0 −sφ cθcφ





1 0 −θ

L{E123(φ, θ, ψ)} =  0 1 φ 

0 −φ 1

(293) (294)



[E123(φ, θ, ψ)]−1

=

1 cθ



cψ −cθ sψ cψ sθ

sψ cθ cψ sψ sθ

 0 0 cθ

(295)



[E123(φ, θ, ψ)]−1

=

1 cθ



cθ 0
0

sφsθ cφcθ sφ

 cφsθ −sφcθ  cφ

(296)





q123(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 + sφ/2sθ/2sψ/2 −cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2 cφ/2cψ/2sθ/2 + sφ/2cθ/2sψ/2



cφ/2cθ/2sψ/2 − sφ/2cψ/2sθ/2

(297)

∂R123 ∂φ

=

0

 cφsθcψ + sφsψ

−sφsθcψ + cφsψ

0
cφsθsψ − sφcψ −sφsθsψ − cφcψ

 0 cφcθ  −sφcθ

(298)

z′

z′′

θ

φ

x

ψ

x′′′ θ

y′

φ

ψ

y′′′, y′′

y

x′′, x′

Figure 6: Euler Angle Sequence (1,2,3)



∂R123 ∂θ

=

−cψ sθ sφ cθ cψ cφ cθ cψ

−sψ sθ sφ cθ sψ cφ cθ sψ

 −cθ −sφsθ  −cφsθ

∂R123 ∂ψ

=



−cθ sψ

cθ cψ

0

 −sφsθsψ − cφcψ sφsθcψ − cφsψ 0 

−cφsθsψ + sφcψ cφsθcψ + sφsψ 0





∂E123 ∂θ

=

−cψ sθ −sψ sθ
−cθ

0 0 0

0 0 0





∂E123 ∂ψ

=

−cθ sψ cθ cψ
0

−cψ −sψ
0

0 0 0





∂E123 ∂φ

=

0 0 0

0
−sφ −cφ

0 cφcθ  −sφcθ





∂E123 ∂θ

=

0 0 0

0 0 0

−cθ −sφsθ  −cφsθ

(299)
(300) (301) (302) (303) (304)

24

8.3 Euler Angle Sequence (1,3,1)

R131(φ, θ, ψ) = R1(φ)R3(θ)R1(ψ) =



cθ

cψ sθ

 −cφsθ cφcθcψ − sφsψ

sψ sθ cφcθsψ + sφcψ 

sφsθ −sφcθcψ − cφsψ −sφcθsψ + cφcψ

 1
L{R131(φ, θ, ψ)} =  −θ 0

θ 1 −φ − ψ

 0 ψ+φ  1

(305) (306)







φ131(R)

atan2 (r31, −r21)

u131(R) =  θ131(R)  =  acos (r11)



ψ131(R)

atan2 (r13, r12)





atan2 2q1q3 + 2q0q2,

u131 (Rq (q))

=



−2q1q2 + 2q0q3 acos q12 + q02 − q32 − atan2 2q1q3 − 2q0q2,

q22



2q1q2 + 2q0q3





cθ

01

E131(φ, θ, ψ) =  cψsθ −sψ 0 

sψsθ cψ 0





101

L{E131(φ, θ, ψ)} =  θ −ψ 0 

010

(307) (308) (309) (310)





1 0 cθ

E131(φ, θ, ψ) =  0 sφ −cφsθ 

0 cφ sφsθ





10 1

L{E131(φ, θ, ψ)} =  0 φ −θ 

01 0

(311) (312)



[E131(φ, θ, ψ)]−1

=

1 sθ



0 0 sθ

cψ −sθ sψ −cθ cψ

 sψ sθcψ  −cθ sψ

(313)



[E131(φ, θ, ψ)]−1

=

1 sθ



sθ 0
0

cφcθ sφsθ −cφ

 −sφcθ cφsθ 
sφ

(314)





q131(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2 −cφ/2sθ/2sψ/2 + sφ/2cψ/2sθ/2



(315)

cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2

∂R131 ∂φ

=

0

0

 sφsθ −sφcθcψ − cφsψ

cφsθ −cφcθcψ + sφsψ

 0 −sφcθsψ + cφcψ  −cφcθsψ − sφcψ

(316)

z′′′, z′′

z′

φ

z ψ

y′
y′′ φ
y′′′ θ

ψ

y

θ

x′′, x′

x, x′′′

Figure 7: Euler Angle Sequence (1,3,1)



∂R131 ∂θ

=

−sθ −cφcθ sφcθ

cθ cψ −cφ sθ cψ sφ sθ cψ

 cθ sψ −cφsθsψ  sφ sθ sψ

∂R131 ∂ψ

=

0

−sθ sψ

 0 −cφcθsψ − sφcψ

0 sφcθsψ − cφcψ

 sθ cψ cφcθcψ − sφsψ  −sφcθcψ − cφsψ





∂E131 ∂θ

=

−sθ cθ cψ cθ sψ

0 0 0

0 0 0





∂E131 ∂ψ

=

0
−sθ sψ sθ cψ

0
−cψ −sψ

0 0 0





∂E131 ∂φ

=

0 0 0

0
cφ −sφ

0 sφsθ  cφsθ





∂E131 ∂θ

=

0 0 0

0 0 0

−sθ −cφcθ  sφcθ

(317)
(318) (319) (320) (321) (322)

25

8.4 Euler Angle Sequence (1,3,2)

z

R132(φ, θ, ψ) = R1(φ)R3(θ)R2(ψ) =



cθ cψ

sθ

 −cφsθcψ + sφsψ cφcθ

−cθ sψ cφsθsψ + sφcψ 

sφsθcψ + cφsψ −sφcθ −sφsθsψ + cφcψ





1 θ −ψ

L{R132(φ, θ, ψ)} =  −θ 1 φ 

ψ −φ 1







φ132(R)

atan2 (−r32, r22)

u132(R) =  θ132(R)  =  asin (r12)



ψ132(R)

atan2 (−r13, r11)





atan2 −2q2q3 + 2q0q1,

u132 (Rq (q))

=



q22 − q32 + q02 − asin 2q1q2 + 2q0q3 atan2 −2q1q3 + 2q0q2,

q12



q12 + q02 − q32 − q22





cθcψ sψ 0

E132(φ, θ, ψ) =  sθ

0 1

−cθsψ cψ 0





1 ψ0

L{E132(φ, θ, ψ)} =  θ 0 1 

−ψ 1 0





1 0 sθ

E132(φ, θ, ψ) =  0 sφ cφcθ 

0 cφ −sφcθ





10 θ

L{E132(φ, θ, ψ)} =  0 φ 1 

0 1 −φ





[E132(φ, θ, ψ)]−1

=

1 cθ



cψ cθ sψ −sθ cψ

0 0 cθ

−sψ cθcψ  sψ sθ



[E132(φ, θ, ψ)]−1

=

1 cθ



cθ 0
0

−cφsθ sφcθ cφ

 sφsθ cφcθ  −sφ





q132(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2sθ/2sψ/2 cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2 cφ/2cθ/2sψ/2 + sφ/2cψ/2sθ/2



cφ/2cψ/2sθ/2 − sφ/2cθ/2sψ/2

(323) (324) (325) (326) (327) (328) (329) (330) (331) (332) (333)

∂R132 ∂φ

=

0

 sφsθcψ + cφsψ

cφsθcψ − sφsψ

0
−sφcθ −cφcθ

 0 −sφsθsψ + cφcψ  −cφsθsψ − sφcψ

(334)

z′′′, z′′

z′

ψ

φ

y′

x ψ
θ

φ y′′
θ y, y′′′

x′′′

x′′, x′

Figure 8: Euler Angle Sequence (1,3,2)



∂R132 ∂θ

=

−sθ cψ −cφ cθ cψ sφ cθ cψ

cθ −cφsθ sφsθ

 sψ sθ cφcθsψ  −sφ cθ sψ

∂R132 ∂ψ

=



−cθ sψ

0

−cθ cψ

 cφsθsψ + sφcψ 0 cφsθcψ − sφsψ 

−sφsθsψ + cφcψ 0 −sφsθcψ − cφsψ





∂E132 ∂θ

=

−sθ cψ cθ
sψ sθ

0 0 0

0 0 0





∂E132 ∂ψ

=

−cθ sψ 0
−cθ cψ

cψ 0
−sψ

0 0 0





∂E132 ∂φ

=

0 0 0

0
cφ −sφ

0 −sφcθ  −cφcθ





∂E132 ∂θ

=

0 0 0

0 0 0

cθ −cφsθ  sφsθ

(335)
(336) (337) (338) (339) (340)

26

8.5 Euler Angle Sequence (2,1,2)

z

R212(φ, θ, ψ) = R2(φ)R1(θ)R2(ψ) =



cφcψ − sφcθsψ sθsφ −cφsψ − sφcθcψ



sθ sψ

cθ

sθ cψ



sφcψ + cφcθsψ −sθcφ −sφsψ + cφcθcψ





1 0 −ψ − φ

L{R212(φ, θ, ψ)} =  0

1

θ

φ + ψ −θ 1

(341) (342)







φ212(R)

atan2 (r12, −r32)

u212(R) =  θ212(R)  =  acos (r22)



ψ212(R)

atan2 (r21, r23)





atan2 2q1q2 + 2q0q3,

u212 (Rq (q))

=



−2q2q3 + 2q0q1 acos q22 − q32 + q02 − atan2 2q1q2 − 2q0q3,

q12



2q2q3 + 2q0q1





sθsψ cψ 0

E212(φ, θ, ψ) =  cθ

0 1

sθcψ −sψ 0





010

L{E212(φ, θ, ψ)} =  1 0 1 

θ −ψ 0

(343) (344) (345) (346)





0 cφ sθsφ

E212(φ, θ, ψ) =  1 0

cθ 

0 sφ −sθcφ





01 0

L{E212(φ, θ, ψ)} =  1 0 1 

0 φ −θ

(347) (348)





[E212(φ, θ, ψ)]−1

=

1 sθ



sψ sθ cψ −cθ sψ

0 0 sθ

cψ −sθsψ  −cψ cθ

(349)





[E212(φ, θ, ψ)]−1

=

1 sθ



−sφcθ sθ cφ sφ

sθ 0
0

cφcθ sθsφ  −cφ

(350)





q212(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2 cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2

 (351)

−cφ/2sθ/2sψ/2 + sφ/2cψ/2sθ/2

∂R212 ∂φ

=

−sφcψ − cφcθsψ



0

cφcψ − sφcθsψ

sθ cφ 0
sθ sφ



sφsψ − cφcθcψ

0



−cφsψ − sφcθcψ

(352)

z′′′ z′′
ψ
θ

z′

φ

x ψ

y′′, y′ θ
y, y′′′

φ x′′′, x′′

x′

Figure 9: Euler Angle Sequence (2,1,2)



∂R212 ∂θ

=

sφ sθ sψ cθ sψ
−cφ sθ sψ

sφcθ −sθ −cφcθ

 sφ sθ cψ
cθcψ  −cφ sθ cψ

∂R212 ∂ψ

=



−cφsψ − sφcθcψ 0 −cφcψ + sφcθsψ



sθ cψ

0

−sθ sψ



−sφsψ + cφcθcψ 0 −sφcψ − cφcθsψ





∂E212 ∂θ

=

cθ sψ −sθ cθ cψ

0 0 0

0 0 0





∂E212 ∂ψ

=

sθ cψ 0
−sθ sψ

−sψ 0
−cψ

0 0 0





∂E212 ∂φ

=

0 0 0

−sφ 0
cφ

sθ cφ 0
sθ sφ





∂E212 ∂θ

=

0 0 0

0 0 0

sφcθ −sθ  −cφcθ

(353)
(354) (355) (356) (357) (358)

27

8.6 Euler Angle Sequence (2,1,3)

R213(φ, θ, ψ) = R2(φ)R1(θ)R3(ψ) =



cφcψ − sφsθsψ cφsψ + sφsθcψ −cθsφ



−cθ sψ

cθ cψ

sθ 

sφcψ + cφsθsψ sφsψ − cφsθcψ cφcθ





1 ψ −φ

L{R213(φ, θ, ψ)} =  −ψ 1 θ 

φ −θ 1







φ213(R)

atan2 (−r13, r33)

u213(R) =  θ213(R)  =  asin (r23)



ψ213(R)

atan2 (−r21, r22)





atan2 −2q1q3 + 2q0q2,

u213 (Rq (q))

=



q32 − q22 − q12 + asin 2q2q3 + 2q0q1 atan2 −2q1q2 + 2q0q3,

q02



q22 − q32 + q02 − q12





−cθsψ cψ 0

E213(φ, θ, ψ) =  cθcψ sψ 0 

sθ 0 1





−ψ 1 0

L{E213(φ, θ, ψ)} =  1 ψ 0 

θ 01





0 cφ −cθsφ

E213(φ, θ, ψ) =  1 0 sθ 

0 sφ cφcθ





0 1 −φ

L{E213(φ, θ, ψ)} =  1 0 θ 

0φ 1



[E213(φ, θ, ψ)]−1

=

1 cθ



−sψ cθ cψ sψ sθ

cψ cθ sψ −cψ sθ

 0 0 cθ





[E213(φ, θ, ψ)]−1

=

1 cθ



sφsθ cφcθ −sφ

cθ 0
0

−cφsθ sφcθ  cφ





q213(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2sθ/2sψ/2 cφ/2cψ/2sθ/2 − sφ/2cθ/2sψ/2 cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2



cφ/2cθ/2sψ/2 + sφ/2cψ/2sθ/2

(359) (360) (361) (362) (363) (364) (365) (366) (367) (368) (369)

∂R213 ∂φ

=

−sφcψ − cφsθsψ



0

cφcψ − sφsθsψ

−sφsψ + cφsθcψ 0
cφsψ + sφsθcψ

 −cφcθ
0 −sφcθ

(370)

z, z′′′ z′′

z′

θ

φ

x

ψ

x′′′, x′′ φ

y′′, y′

θ

ψ

y′′′

y

x′

Figure 10: Euler Angle Sequence (2,1,3)



∂R213 ∂θ

=

−sφ cθ sψ sψ sθ cφ cθ sψ

sφ cθ cψ −cψ sθ −cφ cθ cψ

 sφsθ
cθ  −cφsθ

∂R213 ∂ψ

=



−cφsψ − sφsθcψ cφcψ − sφsθsψ 0



−cθ cψ

−cθ sψ

0

−sφsψ + cφsθcψ sφcψ + cφsθsψ 0





∂E213 ∂θ

=

sψ sθ −cψ sθ
cθ

0 0 0

0 0 0





∂E213 ∂ψ

=

−cθ cψ −cθ sψ
0

−sψ cψ 0

0 0 0





∂E213 ∂φ

=

0 0 0

−sφ 0
cφ

−cφcθ 0
−sφcθ





∂E213 ∂θ

=

0 0 0

0 0 0

sφsθ cθ 
−cφsθ

(371)
(372) (373) (374) (375) (376)

28

8.7 Euler Angle Sequence (2,3,1)

z′′′, z′′

z

z′

R231(φ, θ, ψ) = R2(φ)R3(θ)R1(ψ) =



cφcθ cφsθcψ + sφsψ cφsθsψ − sφcψ

 −sθ

cθ cψ

cθ sψ



sφcθ sφsθcψ − cφsψ sφsθsψ + cφcψ





1 θ −φ

L{R231(φ, θ, ψ)} =  −θ 1 ψ 

φ −ψ 1

(377) (378)







φ231(R)

atan2 (r31, r11)

u231(R) =  θ231(R)  =  −asin (r21) 

ψ231(R)

atan2 (r23, r22)





atan2 2q1q3 + 2q0q2,

u231 (Rq (q))

=



−asin atan2

q12 + q02 − q32 2q1q2 − 2q0q3 2q2q3 + 2q0q1,

−

q22



q22 − q32 + q02 − q12





−sθ 0 1

E231(φ, θ, ψ) =  cθcψ −sψ 0 

cθsψ cψ 0





−θ 0 1

L{E231(φ, θ, ψ)} =  1 −ψ 0 

ψ 10

(379) (380) (381) (382)





0 −sφ cφcθ

E231(φ, θ, ψ) =  1 0 −sθ 

0 cφ sφcθ





0 −φ 1

L{E231(φ, θ, ψ)} =  1 0 −θ 

01 φ

(383) (384)



[E231(φ, θ, ψ)]−1

=

1 cθ



0 0 cθ

cψ −cθ sψ sθ cψ

 sψ cθcψ  sθ sψ

(385)





[E231(φ, θ, ψ)]−1

=

1 cθ



cφsθ −sφcθ
cφ

cθ 0
0

sφsθ cφcθ  sφ

(386)





q231(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 + sφ/2sθ/2sψ/2 cφ/2cθ/2sψ/2 − sφ/2cψ/2sθ/2 −cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2



cφ/2cψ/2sθ/2 + sφ/2cθ/2sψ/2

(387)

∂R231 ∂φ

=

−sφcθ

0

cφcθ

−sφsθcψ + cφsψ 0
cφsθcψ + sφsψ



−sφsθsψ − cφcψ

0



cφsθsψ − sφcψ

(388)

ψ φ

y′′′

y′′, y′

θ

x, x′′′

x′′ θ φ
x′

ψ y

Figure 11: Euler Angle Sequence (2,3,1)



∂R231 ∂θ

=

−cφsθ −cθ −sφsθ

cφ cθ cψ −sθ cψ sφ cθ cψ

 cφ cθ sψ −sθsψ  sφ cθ sψ

∂R231 ∂ψ

=

0 −cφsθsψ + sφcψ

0

−cθ sψ

0 −sφsθsψ − cφcψ



cφsθcψ + sφsψ

cθ cψ



sφsθcψ − cφsψ





∂E231 ∂θ

=

−cθ −sθ cψ −sθ sψ

0 0 0

0 0 0





∂E231 ∂ψ

=

0
−cθ sψ cθ cψ

0
−cψ −sψ

0 0 0





∂E231 ∂φ

=

0 0 0

−cφ 0
−sφ

−sφcθ 0
cφcθ





∂E231 ∂θ

=

0 0 0

0 0 0

−cφsθ −cθ  −sφsθ

(389)
(390) (391) (392) (393) (394)

29

8.8 Euler Angle Sequence (2,3,2)

z

R232(φ, θ, ψ) = R2(φ)R3(θ)R2(ψ) =



cφcθcψ − sφsψ cφsθ −cφcθsψ − sφcψ



−sθ cψ

cθ

sθ sψ



sφcθcψ + cφsψ sφsθ −sφcθsψ + cφcψ





1 θ −ψ − φ

L{R232(φ, θ, ψ)} =  −θ 1

0

φ+ψ 0 1







φ232(R)

atan2 (r32, r12)

u232(R) =  θ232(R)  =  acos (r22)



ψ232(R)

atan2 (r23, −r21)





atan2 2q2q3 − 2q0q1,

u232 (Rq (q))

=



2q1q2 + acos q22 − q32 atan2 2q2q3 +

2q0q3 + q02 − 2q0q1,

q12



−2q1q2 + 2q0q3





−sθcψ sψ 0

E232(φ, θ, ψ) =  cθ

0 1

sθsψ cψ 0





−θ ψ 0

L{E232(φ, θ, ψ)} =  1 0 1 

0 10





0 −sφ cφsθ

E232(φ, θ, ψ) =  1 0

cθ 

0 cφ sφsθ





0 −φ θ

L{E232(φ, θ, ψ)} =  1 0 1 

010





[E232(φ, θ, ψ)]−1

=

1 sθ



−cψ sθ sψ cθ cψ

0 0 sθ

sψ sθcψ  −sψ cθ





[E232(φ, θ, ψ)]−1

=

1 sθ



−cφcθ −sφsθ
cφ

sθ 0
0

−sφcθ cφsθ  sφ





q232(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2sθ/2sψ/2 − sφ/2cψ/2sθ/2 cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2



cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2

(395) (396) (397) (398) (399) (400) (401) (402) (403) (404) (405)

∂R232 ∂φ

=

−sφcθcψ − cφsψ



0

cφcθcψ − sφsψ

−sφsθ 0
cφsθ



sφcθsψ − cφcψ

0



−cφcθsψ − sφcψ

(406)

z′′′, z′′ ψ
z′ φ

x ψ

θ φ

x′′′

x′′

y′′, y′ θ
y, y′′′

x′

Figure 12: Euler Angle Sequence (2,3,2)



∂R232 ∂θ

=

−cφ sθ cψ −cθ cψ −sφ sθ cψ

cφcθ −sθ sφcθ

 cφ sθ sψ cθsψ  sφ sθ sψ

∂R232 ∂ψ

=



−cφcθsψ − sφcψ 0 −cφcθcψ + sφsψ



sθ sψ

0

sθ cψ



−sφcθsψ + cφcψ 0 −sφcθcψ − cφsψ





∂E232 ∂θ

=

−cθ cψ −sθ cθ sψ

0 0 0

0 0 0





∂E232 ∂ψ

=

sθ sψ 0
sθ cψ

cψ 0
−sψ

0 0 0





∂E232 ∂φ

=

0 0 0

−cφ 0
−sφ

−sφsθ 0
cφsθ





∂E232 ∂θ

=

0 0 0

0 0 0

cφcθ −sθ  sφcθ

(407)
(408) (409) (410) (411) (412)

30

8.9 Euler Angle Sequence (3,1,2)

z

R312(φ, θ, ψ) = R3(φ)R1(θ)R2(ψ) =



cφcψ + sφsθsψ sφcθ −cφsψ + sφsθcψ  −sφcψ + cφsθsψ cθcφ sφsψ + cφsθcψ 

cθ sψ

−sθ

cθ cψ





1 φ −ψ

L{R312(φ, θ, ψ)} =  −φ 1 θ 

ψ −θ 1

(413) (414)







φ312(R)

atan2 (r12, r22)

u312(R) =  θ312(R)  =  −asin (r32) 

ψ312(R)

atan2 (r31, r33)





atan2 2q1q2 + 2q0q3,

u312 (Rq (q))

=



−asin atan2

q22 − q32 + q02 2q2q3 − 2q0q1 2q1q3 + 2q0q2,

−

q12



q32 − q22 − q12 + q02





cθsψ cψ 0

E312(φ, θ, ψ) =  −sθ 0 1 

cθcψ −sψ 0





ψ 10

L{E312(φ, θ, ψ)} =  −θ 0 1 

1 −ψ 0

(415) (416) (417) (418)





0 cφ sφcθ

E312(φ, θ, ψ) =  0 −sφ cθcφ 

1 0 −sθ





01 φ

L{E312(φ, θ, ψ)} =  0 −φ 1 

1 0 −θ

(419) (420)





[E312(φ, θ, ψ)]−1

=

1 cθ



sψ cθ cψ sθ sψ

0 0 cθ

cψ −cθsψ  cψ sθ

(421)



[E312(φ, θ, ψ)]−1

=

1 cθ



sφsθ cθ cφ sφ

cφsθ −sφcθ
cφ

 cθ 0 0

(422)





q312(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 + sφ/2sθ/2sψ/2 cφ/2cψ/2sθ/2 + sφ/2cθ/2sψ/2 cφ/2cθ/2sψ/2 − sφ/2cψ/2sθ/2



−cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2

(423)

∂R312 ∂φ

=

−sφcψ + cφsθsψ  −cφcψ − sφsθsψ

0

cθ cφ −sφcθ
0

 sφsψ + cφsθcψ cφsψ − sφsθcψ 
0

(424)

z′′, z′

z′′′

ψ

y′

θ

φ

y′′

x ψ φ
x′

θ y, y′′′

x′′′, x′′

Figure 13: Euler Angle Sequence (3,1,2)



∂R312 ∂θ

=

sφ cθ sψ cφ cθ sψ −sθ sψ

−sφsθ −cφsθ −cθ

 sφ cθ cψ cφcθcψ  −sθ cψ

∂R312 ∂ψ

=



−cφsψ + sφsθcψ 0 −cφcψ − sφsθsψ  sφsψ + cφsθcψ 0 sφcψ − cφsθsψ 

cθ cψ

0

−cθ sψ





∂E312 ∂θ

=

−sθ sψ −cθ
−sθ cψ

0 0 0

0 0 0





∂E312 ∂ψ

=

cθ cψ 0
−cθ sψ

−sψ 0
−cψ

0 0 0





∂E312 ∂φ

=

0 0 0

−sφ −cφ
0

cθ cφ −sφcθ 
0





∂E312 ∂θ

=

0 0 0

0 0 0

−sφsθ −cφsθ  −cθ

(425)
(426) (427) (428) (429) (430)

31

8.10 Euler Angle Sequence (3,1,3)

z′′, z′

z, z′′′

R313(φ, θ, ψ) = R3(φ)R1(θ)R3(ψ) =

cφcψ − sφcθsψ cφsψ + sφcθcψ  −sφcψ − cφcθsψ −sφsψ + cφcθcψ

sθ sψ

−sθ cψ

 sφsθ cφsθ 
cθ





1 ψ+φ 0

L{R313(φ, θ, ψ)} =  −φ − ψ 1 θ 

0

−θ 1







φ313(R)

atan2 (r13, r23)

u313(R) =  θ313(R)  =  acos (r33)



ψ313(R)

atan2 (r31, −r32)





atan2 2q1q3 − 2q0q2,

u313 (Rq (q))

=



2q2q3 + acos q32 − q22 atan2 2q1q3 +

2q0q1 − q12 + 2q0q2,

q02



−2q2q3 + 2q0q1





sθsψ cψ 0

E313(φ, θ, ψ) =  −sθcψ sψ 0 

cθ

01





0 10

L{E313(φ, θ, ψ)} =  −θ ψ 0 

1 01





0 cφ sφsθ

E313(φ, θ, ψ) =  0 −sφ cφsθ 

1 0 cθ





010

L{E313(φ, θ, ψ)} =  0 −φ θ 

101



[E313(φ, θ, ψ)]−1

=

1 sθ



sψ sθ cψ −sψ cθ

−cψ sθ sψ cψ cθ

 0 0 sθ



[E313(φ, θ, ψ)]−1

=

1 sθ



−sφcθ cφsθ sφ

−cφcθ −sφsθ
cφ

 sθ 0 0





q313(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2 cφ/2sθ/2sψ/2 − sφ/2cψ/2sθ/2



cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2

(431) (432) (433) (434) (435) (436) (437) (438) (439) (440) (441)

∂R313 ∂φ

=

−sφcψ − cφcθsψ  −cφcψ + sφcθsψ

0

−sφsψ + cφcθcψ −cφsψ − sφcθcψ
0

 cφsθ −sφsθ 
0

(442)

θ y′
y′′ φ

θ

y′′′ ψ

x

ψ

φ x′

y

x′′′, x′′

Figure 14: Euler Angle Sequence (3,1,3)



∂R313 ∂θ

=

sφ sθ sψ cφ sθ sψ
sψ cθ

−sφ sθ cψ −cφ sθ cψ −cψ cθ

 sφcθ cφcθ  −sθ

∂R313 ∂ψ

=



−cφsψ − sφcθcψ cφcψ − sφcθsψ 0

 sφsψ − cφcθcψ −sφcψ − cφcθsψ 0 

sθ cψ

sθ sψ

0





∂E313 ∂θ

=

sψ cθ −cψ cθ −sθ

0 0 0

0 0 0





∂E313 ∂ψ

=

sθ cψ sθ sψ
0

−sψ cψ 0

0 0 0





∂E313 ∂φ

=

0 0 0

−sφ −cφ
0

cφsθ −sφsθ 
0





∂E313 ∂θ

=

0 0 0

0 0 0

sφcθ cφcθ  −sθ

(443)
(444) (445) (446) (447) (448)

32

8.11 Euler Angle Sequence (3,2,1)

R321(φ, θ, ψ) = R3(φ)R2(θ)R1(ψ) =



cφcθ sφcψ + cφsθsψ sφsψ − cφsθcψ  −sφcθ cφcψ − sφsθsψ cφsψ + sφsθcψ 

sθ

−sψ cθ

cψ cθ





1 φ −θ

L{R321(φ, θ, ψ)} =  −φ 1 ψ 

θ −ψ 1







φ321(R)

atan2 (−r21, r11)

u321(R) =  θ321(R)  =  asin (r31)



ψ321(R)

atan2 (−r32, r33)





atan2 −2q1q2 + 2q0q3,

u321 (Rq (q))

=



q12 + q02 − q32 − asin 2q1q3 + 2q0q2 atan2 −2q2q3 + 2q0q1,

q22



q32 − q22 − q12 + q02





sθ 0 1

E321(φ, θ, ψ) =  −sψcθ cψ 0 

cψcθ sψ 0





θ 01

L{E321(φ, θ, ψ)} =  −ψ 1 0 

1 ψ0





0 sφ cφcθ

E321(φ, θ, ψ) =  0 cφ −sφcθ 

1 0 sθ





0φ 1

L{E321(φ, θ, ψ)} =  0 1 −φ 

10 θ



[E321(φ, θ, ψ)]−1

=

1 cθ



0 0 cθ

−sψ cθ cψ sθ sψ

 cψ cθsψ  −sθ cψ



[E321(φ, θ, ψ)]−1

=

1 cθ



−cφsθ sφcθ cφ

sφsθ cφcθ −sφ

 cθ 0 0





q321(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2sθ/2sψ/2 cφ/2cθ/2sψ/2 + sφ/2cψ/2sθ/2 cφ/2cψ/2sθ/2 − sφ/2cθ/2sψ/2



cφ/2sθ/2sψ/2 + cθ/2cψ/2sφ/2

(449) (450) (451) (452) (453) (454) (455) (456) (457) (458) (459)

∂R321 ∂φ

=

−sφcθ  −cφcθ

0

cφcψ − sφsθsψ −sφcψ − cφsθsψ
0

 cφsψ + sφsθcψ −sφsψ + cφsθcψ 
0

(460)

z z′′′

z′′, z′

ψ θ

y′ y′′′, y′′ φ

ψ

y
x, x′′′ θ φ x′

x′′

Figure 15: Euler Angle Sequence (3,2,1)



∂R321 ∂θ

=

−cφsθ sφsθ
cθ

cφ cθ sψ −sφ cθ sψ
sθ sψ

 −cφ cθ cψ sφcθcψ  −sθ cψ

(461)

∂R321 ∂ψ

=

0 −sφsψ + cφsθcψ  0 −cφsψ − sφsθcψ

0

−cθ cψ

 sφcψ + cφsθsψ cφcψ − sφsθsψ 
−cθ sψ





∂E321 ∂θ

=

cθ sθ sψ −sθ cψ

0 0 0

0 0 0





∂E321 ∂ψ

=

0
−cθ cψ −cθ sψ

0
−sψ cψ

0 0 0





∂E321 ∂φ

=

0 0 0

cφ −sφ
0

−sφcθ −cφcθ 
0





∂E321 ∂θ

=

0 0 0

0 0 0

−cφsθ sφsθ 
cθ

(462) (463) (464) (465) (466)

33

8.12 Euler Angle Sequence (3,2,3)

z, z′′′

R323(φ, θ, ψ) = R3(φ)R2(θ)R3(ψ) =

cφcθcψ − sφsψ cφcθsψ + sφcψ  −sφcθcψ − cφsψ −sφcθsψ + cφcψ

sθ cψ

sθ sψ

 −cφsθ sφsθ 
cθ

 1
L{R323(φ, θ, ψ)} =  −φ − ψ θ

ψ+φ 1 0

 −θ 0 1

(467) (468)







φ323(R)

atan2 (r23, −r13)

u323(R) =  θ323(R)  =  acos (r33)



ψ323(R)

atan2 (r32, r31)





atan2 2q2q3 + 2q0q1,

u323 (Rq (q))

=



−2q1q3 + 2q0q2 acos q32 − q22 − q12 + atan2 2q2q3 − 2q0q1,

q02



2q1q3 + 2q0q2





sθcψ −sψ 0

E323(φ, θ, ψ) =  sθsψ cψ 0 

cθ

01





θ −ψ 0

L{E323(φ, θ, ψ)} =  0 1 0 

101

(469) (470) (471) (472)





0 sφ −cφsθ

E323(φ, θ, ψ) =  0 cφ sφsθ 

1 0 cθ





0 φ −θ

L{E323(φ, θ, ψ)} =  0 1 0 

10 1

(473) (474)



[E323(φ, θ, ψ)]−1

=

1 sθ



cψ −sθ sψ −cψ cθ

sψ sθ cψ −sψ cθ

 0 0 sθ

(475)



[E323(φ, θ, ψ)]−1

=

1 sθ



cφcθ sφsθ −cφ

−sφcθ cφsθ sφ

 sθ 0 0

(476)





q323(φ, θ, ψ) = 

cφ/2cθ/2cψ/2 − sφ/2cθ/2sψ/2 −cφ/2sθ/2sψ/2 + sφ/2cψ/2sθ/2 cφ/2cψ/2sθ/2 + sφ/2sθ/2sψ/2



(477)

cφ/2cθ/2sψ/2 + cθ/2cψ/2sφ/2

∂R323 ∂φ

=

−sφcθcψ − cφsψ  −cφcθcψ + sφsψ

0

−sφcθsψ + cφcψ −cφcθsψ − sφcψ
0

 sφsθ cφsθ 
0

(478)

z′′, z′ θ

x

ψ

x′′′ θ

φ

φ ψ y

y′ y′′′, y′′

x′′

x′

Figure 16: Euler Angle Sequence (3,2,3)



∂R323 ∂θ

=

−cφ sθ cψ sφ sθ cψ
cθ cψ

−cφ sθ sψ sφ sθ sψ
cθ sψ

 −cφcθ sφcθ  −sθ

∂R323 ∂ψ

=



−cφcθsψ − sφcψ cφcθcψ − sφsψ 0

 sφcθsψ − cφcψ −sφcθcψ − cφsψ 0 

−sθ sψ

sθ cψ

0





∂E323 ∂θ

=

cθ cψ cθ sψ −sθ

0 0 0

0 0 0





∂E323 ∂ψ

=

−sθ sψ sθ cψ
0

−cψ −sψ
0

0 0 0





∂E323 ∂φ

=

0 0 0

cφ −sφ
0

sφsθ cφsθ 
0





∂E323 ∂θ

=

0 0 0

0 0 0

−cφcθ sφcθ  −sθ

(479)
(480) (481) (482) (483) (484)

34

References

[1] Donald T. Greenwood. Principles of Dynamics, Second Edition. Prentice Hall, Upper Saddle River, NJ, 1988.

[2] Arend L. Schwab.

Quaternions, ﬁ-

nite rotation and euler parameters.

http://tam.cornell.edu/ als93/quaternion.pdf, 2002.

[3] Eric W. Weisstein.

Cayley-klein parame-

ters. From MathWorld–A Wolfram Web Re-

source.

http://mathworld.wolfram.com/Cayley-

KleinParameters.html.

[4] Eric W. Weisstein.

Euler angles.

From

MathWorld–A

Wolfram

Web

Resource.

http://mathworld.wolfram.com/EulerAngles.html.

[5] Eric W. Weisstein.

Euler parameters.

From MathWorld–A Wolfram Web Resource.

http://mathworld.wolfram.com/EulerParameters.html.

35

