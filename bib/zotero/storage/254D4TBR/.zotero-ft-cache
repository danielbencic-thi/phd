Teppo Luukkonen
Modelling and control of quadcopter
School of Science
Mat-2.4108 Independent research project in applied mathematics Espoo, August 22, 2011
A? Aalto University School of Science
This document can be stored and made available to the public on the open internet pages of Aalto University. All other rights are reserved.

ii

Contents

Contents

ii

1 Introduction

1

2 Mathematical model of quadcopter

2

2.1 Newton-Euler equations . . . . . . . . . . . . . . . . . . . . . . . . . 4

2.2 Euler-Lagrange equations . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.3 Aerodynamical eﬀects . . . . . . . . . . . . . . . . . . . . . . . . . . 6

3 Simulation

7

4 Stabilisation of quadcopter

10

5 Trajectory control

13

5.1 Heuristic method for trajectory generation . . . . . . . . . . . . . . . 14

5.2 Integrated PD controller . . . . . . . . . . . . . . . . . . . . . . . . . 18

6 Conclusion

21

References

23

1 Introduction
Quadcopter, also known as quadrotor, is a helicopter with four rotors. The rotors are directed upwards and they are placed in a square formation with equal distance from the center of mass of the quadcopter. The quadcopter is controlled by adjusting the angular velocities of the rotors which are spun by electric motors. Quadcopter is a typical design for small unmanned aerial vehicles (UAV) because of the simple structure. Quadcopters are used in surveillance, search and rescue, construction inspections and several other applications.
Quadcopter has received considerable attention from researchers as the complex phenomena of the quadcopter has generated several areas of interest. The basic dynamical model of the quadcopter is the starting point for all of the studies but more complex aerodynamic properties has been introduced as well [1, 2]. Diﬀerent control methods has been researched, including PID controllers [3, 4, 5, 6], backstepping control [7, 8], nonlinear H∞ control [9], LQR controllers [6], and nonlinear controllers with nested saturations [10, 11]. Control methods require accurate information from the position and attitude measurements performed with a gyroscope, an accelerometer, and other measuring devices, such as GPS, and sonar and laser sensors [12, 13].
The purpose of this paper is to present the basics of quadcopter modelling and control as to form a basis for further research and development in the area. This is pursued with two aims. The ﬁrst aim is to study the mathematical model of the quadcopter dynamics. The second aim is to develop proper methods for stabilisation and trajectory control of the quadcopter. The challenge in controlling a quadcopter is that the quadcopter has six degrees of freedom but there are only four control inputs.
This paper presents the diﬀerential equations of the quadcopter dynamics. They are derived from both the Newton-Euler equations and the Euler-Lagrange equations which are both used in the study of quadcopters. The behaviour of the model is examined by simulating the ﬂight of the quadcopter. Stabilisation of the quadcopter is conducted by utilising a PD controller. The PD controller is a simple control method which is easy to implement as the control method of the quadcopter. A simple heuristic method is developed to control the trajectory of the ﬂight. Then a PD controller is integrated into the heuristic method to reduce the eﬀect of the ﬂuctuations in quadcopter behaviour caused by random external forces.
The following section presents the mathematical model of a quadcopter. In the third section, the mathematical model is tested by simulating the quadcopter with given control inputs. The fourth section presents a PD controller to stabilise the quadcopter. In the ﬁfth section, a heuristic method including a PD controller is presented to control the trajectory of quadcopter ﬂight. The last section contains the conlusion of the paper.

2
2 Mathematical model of quadcopter

The quadcopter structure is presented in Figure 1 including the corresponding angular velocities, torques and forces created by the four rotors (numbered from 1 to 4).

f4

f1

z

ω4

zB

ω1

τM4

τM1

y
φ

x
ψ

f3 yB

xB f2

θ

τM3

τM2

ω3

ω2

Figure 1: The inertial and body frames of a quadcopter

The absolute linear position of the quadcopter is deﬁned in the inertial frame x,y,zaxes with ξ. The attitude, i.e. the angular position, is deﬁned in the inertial frame with three Euler angles η. Pitch angle θ determines the rotation of the quadcopter around the y-axis. Roll angle φ determines the rotation around the x-axis and yaw angle ψ around the z-axis. Vector q contains the linear and angular position vectors

x ξ =  y ,
z

φ η =  θ ,
ψ

q=

ξ η

.

(1)

The origin of the body frame is in the center of mass of the quadcopter. In the body frame, the linear velocities are determined by VB and the angular velocities by ν

 vx,B 

p

VB =  vy,B  , ν =  q  .

(2)

vz,B

r

The rotation matrix from the body frame to the inertial frame is

 CψCθ CψSθSφ − SψCφ CψSθCφ + SψSφ 

R =  SψCθ SψSθSφ + CψCφ SψSθCφ − CψSφ  ,

(3)

−Sθ

Cθ Sφ

Cθ Cφ

in which Sx = sin(x) and Cx = cos(x). The rotation matrix R is orthogonal thus R−1 = RT which is the rotation matrix from the inertial frame to the body frame.

3

The transformation matrix for angular velocities from the inertial frame to the body

frame is Wη, and from the body frame to the inertial frame is Wη−1, as shown in [14],

η˙ = Wη−1 ν,

 φ˙   1 SφTθ CφTθ   p 

 θ˙  =  0 Cφ −Sφ   q  ,

ψ˙

0 Sφ/Cθ Cφ/Cθ

r

(4)

ν = Wη η˙ ,

 p   1 0 −Sθ   φ˙ 

 q  =  0 Cφ CθSφ   θ˙  ,

r

0 −Sφ CθCφ

ψ˙

in which Tx = tan(x). The matrix Wη is invertible if θ = (2k − 1)φ/2, (k ∈ Z).

The quadcopter is assumed to have symmetric structure with the four arms aligned

with the body x- and y-axes. Thus, the inertia matrix is diagonal matrix I in which

Ixx = Iyy

 Ixx 0 0 

I =  0 Iyy 0  .

(5)

0 0 Izz

The angular velocity of rotor i, denoted with ωi, creates force fi in the direction of the rotor axis. The angular velocity and acceleration of the rotor also create torque

τMi around the rotor axis

fi = k ωi2, τMi = b ωi2 + IM ω˙ i,

(6)

in which the lift constant is k, the drag constant is b and the inertia moment of the rotor is IM . Usually the eﬀect of ω˙ i is considered small and thus it is omitted.

The combined forces of rotors create thrust T in the direction of the body z-axis. Torque τB consists of the torques τφ, τθ and τψ in the direction of the corresponding body frame angles

4

4

0

T = fi = k ωi2, T B =  0  ,

(7)

i=1

i=1

T

τB

 =


τφ τθ









=

 



lk lk

( −ω22 + ω42) ( −ω12 + ω32)
4





 

,

(8)





τψ



τMi



i=1

in which l is the distance between the rotor and the center of mass of the quadcopter. Thus, the roll movement is acquired by decreasing the 2nd rotor velocity and increasing the 4th rotor velocity. Similarly, the pitch movement is acquired by decreasing the 1st rotor velocity and increasing the 3th rotor velocity. Yaw movement is acquired by increasing the the angular velocities of two opposite rotors and decreasing the velocities of the other two.

4

2.1 Newton-Euler equations

The quadcopter is assumed to be rigid body and thus Newton-Euler equations can
be used to describe its dynamics. In the body frame, the force required for the acceleration of mass mV˙B and the centrifugal force ν × (m VB) are equal to the gravity RTG and the total thrust of the rotors TB

mV˙B + ν × (m VB) = RTG + TB.

(9)

In the inertial frame, the centrifugal force is nulliﬁed. Thus, only the gravitational force and the magnitude and direction of the thrust are contributing in the acceleration of the quadcopter

mξ¨ = G + R TB,

 

x¨ y¨

 

=

−g

 

0 0

 +

T m

 

CψSθCφ + SψSφ SψSθCφ − CψSφ

 .

(10)

z¨

1

CθCφ

In the body frame, the angular acceleration of the inertia Iν˙ , the centripetal forces ν × (Iν) and the gyroscopic forces Γ are equal to the external torque τ

Iν˙ + ν × (Iν) + Γ = τ ,

  p   Ixx p   p   0 



ν˙ = I−1 −  q  ×  Iyy q  − Ir  q  ×  0  ωΓ + τ  ,

r

Izz r

r

1

(11)

 p˙   (Iyy − Izz) q r/Ixx 

 q/Ixx 

 τφ/Ixx 

 q˙  =  (Izz − Ixx) p r/Iyy  − Ir  −p/Iyy  ωΓ +  τθ/Iyy  ,

r˙

(Ixx − Iyy) p q/Izz

0

τψ /Izz

in which ωΓ = ω1 − ω2 + ω3 − ω4. The angular accelerations in the inertial frame are then attracted from the body frame accelerations with the transformation matrix Wη−1 and its time derivative

η¨

=

d dt

Wη−1 ν

=

d dt

Wη−1

ν + Wη−1 ν˙

 0 φ˙CφTθ + θ˙Sφ/Cθ2

−φ˙SφCθ + θ˙Cφ/Cθ2 

(12)

= 0

−φ˙ Sφ

−φ˙ Cφ

 ν + Wη−1 ν˙ .

0 φ˙Cφ/Cθ + φ˙SφTθ/Cθ −φ˙Sφ/Cθ + θ˙CφTθ/Cθ

5
2.2 Euler-Lagrange equations
The Lagrangian L is the sum of the translational Etrans and rotational Erot energies minus potential energy Epot

L (q, q˙) = Etrans +

Erot

− Epot

(13)

= (m/2) ξ˙T ξ˙ + (1/2) νT I ν − mgz.

As shown in [10] the Euler-Lagrange equations with external forces and torques are

f τ

=

d dt

∂L ∂q˙

−

∂L ∂q

.

(14)

The linear and angular components do not depend on each other thus they can be studied separately. The linear external force is the total thrust of the rotors. The linear Euler-Lagrange equations are

0

f = R TB = mξ¨+ mg  0  ,

(15)

1

which is equivalent with Equation (10).

The Jacobian matrix J (η) from ν to η˙ is

J (η) = J = WηT I Wη,

 Ixx

= 

0

−IxxSθ

0 IyyCφ2 + IzzSφ2 (Iyy − Izz) CφSφCθ

−IxxSθ



(Iyy − Izz) CφSφCθ

. 

IxxSθ2 + IyySφ2Cθ2 + IzzCφ2Cθ2

(16)

Thus, the rotational energy Erot can be expressed in the inertial frame as

Erot = (1/2) νT I ν = (1/2) η¨T J η¨.

(17)

The external angular force is the torques of the rotors. The angular Euler-Lagrange equations are

τ

=

τB

=

J

η¨ +

d dt

(J )

η˙

−

1 2

∂ ∂η

η˙ T J η˙

= J η¨ + C (η, η˙) η˙.

(18)

,

in which the matrix C (η, η˙) is the Coriolis term, containing the gyroscopic and centripetal terms.

6

The matrix C (η, η˙) has the form, as shown in [9],
 C11 C12 C13  C (η, η˙ ) =  C21 C22 C23  ,
C31 C32 C33
C11 = 0
C12 = (Iyy − Izz)(θ˙CφSφ + ψ˙ Sφ2Cθ) + (Izz − Iyy)ψ˙ Cφ2Cθ − Ixxψ˙ Cθ C13 = (Izz − Iyy)ψ˙ CφSφCθ2 C21 = (Izz − Iyy)(θ˙CφSφ + ψ˙ SφCθ) + (Iyy − Izz)ψ˙ Cφ2Cθ + Ixxψ˙ Cθ C22 = (Izz − Iyy)φ˙CφSφ C23 = −Ixxψ˙ SθCθ + Iyyψ˙ Sφ2SθCθ + Izzψ˙ Cφ2SθCθ C31 = (Iyy − Izz)ψ˙ Cθ2SφCφ − Ixxθ˙Cθ C32 = (Izz − Iyy)(θ˙CφSφSθ + φ˙Sφ2Cθ) + (Iyy − Izz)φ˙Cφ2Cθ
+Ixxψ˙ SθCθ − Iyyψ˙ Sφ2SθCθ − Izzψ˙ Cφ2SθCθ C33 = (Iyy − Izz)φ˙CφSφCθ2 − Iyyθ˙Sφ2CθSθ − Izzθ˙Cφ2CθSθ + Ixxθ˙CθSθ.

(19)

Equation (18) leads to the diﬀerential equations for the angular accelerations which are equivalent with Equations (11) and (12)

η¨ = J −1 (τB − C (η, η˙ ) η˙ ) .

(20)

2.3 Aerodynamical eﬀects

The preceding model is a simpliﬁcation of complex dynamic interactions. To enforce more realistical behaviour of the quadcopter, drag force generated by the air resistance is included. This is devised to Equations (10) and (15) with the diagonal coeﬃcient matrix associating the linear velocities to the force slowing the movement, as in [15],

 

x¨ y¨ z¨

 

=

−g

 

0 0 1

 +

T m

 

CψSθCφ + SψSφ SψSθCφ − CψSφ
Cθ Cφ

 −


1 m

Ax 0 0

0 Ay 0

0   x˙ 

0   y˙  , (21)

Az

z˙

in which Ax, Ay and Az are the drag force coeﬃcients for velocities in the corresponding directions of the inertial frame.
Several other aerodynamical eﬀects could be included in the model. For example, dependence of thrust on angle of attack, blade ﬂapping and airﬂow distruptions have been studied in [1] and [2]. The inﬂuence of aerodynamical eﬀects are complicated and the eﬀects are diﬃcult to model. Also some of the eﬀects have signiﬁcant eﬀect only in high velocities. Thus, these eﬀects are excluded from the model and the presented simple model is used.

7
3 Simulation

The mathematical model of the quadcopter is implemented for simulation in Matlab 2010 with Matlab programming language. Parameter values from [3] are used in the simulations and are presented in Table 1. The values of the drag force coeﬃcients Ax, Ay and Az are selected such as the quadcopter will slow down and stop when angles φ and θ are stabilised to zero values.

Table 1: Parameter values for simulation

Parameter g m l k b IM

Value
9.81 0.468 0.225 2.980 · 10−6 1.140 · 10−7 3.357 · 10−5

Unit m/s2
kg m
kg m2

Parameter
Ixx Iyy Izz Ax Ay Az

Value 4.856 · 10−3 4.856 · 10−3 8.801 · 10−3
0.25 0.25 0.25

Unit kg m2 kg m2 kg m2 kg/s kg/s kg/s

The mathematical model is tested by simulating a quadcopter with an example case as following. The quadcopter is initially in a stable state in which the values of all positions and angles are zero, the body frame of the quadcopter is congruent with the inertial frame. The total thrust is equal to the hover thrust, the thrust equal to gravity. The simulation progresses at 0.0001 second intervals to total elapsed time of two seconds. The control inputs, the angular velocities of the four rotors, are shown in Figure 2, the inertial positions x, y and z in Figure 3, and the angles φ, θ and ψ in Figure 4.
For the ﬁrst 0.25 seconds the quadcopter ascended by increasing all of the rotor velocities from the hover thrust. Then, the ascend is stopped by decreasing the rotor velocities signiﬁcantly for the following 0.25 seconds. Consequently the quadcopter ascended 0.1 meters in the ﬁrst 0.5 seconds. After the ascend the quadcopter is stable again.
Next the quadcopter is put into a roll motion by increasing the velocity of the fourth rotor and decreasing the velocity of the second rotor for 0.25 seconds. The acceleration of the roll motion is stopped by decreasing the velocity of the fourth and increasing the velocity of the second rotor for 0.25 seconds. Thus, after 0.5 seconds in roll motion the roll angle φ had increased approx. 25 degrees. Because of the roll angle the quadcopter accelerated in the direction of the negative y-axis.
Then, similar to the roll motion, a pitch motion is created by increasing the velocity of the third rotor and decreasing the velocity of the ﬁrst. The motion is stopped by decreasing the velocity of the third rotor and increasing the velocity of the ﬁrst rotor. Due to the pitch movement, the pitch angle θ had increased approximately

8

22 degrees. The acceleration of the quadcopter in the direction of the positive x-axis is caused by the pitch angle.
Finally, the quadcopter is turned in the direction of the yaw angle ψ by increasing the velocities of the ﬁrst and the third rotors and decreasing the velocities of the second and the fourth rotors. The yaw motion is stopped by decreasing the velocities of the ﬁrst and the third rotors and increasing the velocities of the second and the fourth rotors. Consequently the yaw angle ψ increases approximately 10 degrees.
During the whole simulation the total thrust of the rotors had remained close to the initial total thrust. Thus, the deviations of the roll and pitch angles from the zero values decrease the value of the thrust in the direction of the z-axis. Consequently the quadcopter accelerates in the direction of the negative z-axis and is descending.
700

675

Control input ωi (rad/s)

650

625

600

ω1

575

ω2

ω3

ω4

550

0

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

2

Time t (s)

Figure 2: Control inputs ωi

Position (m)

1.5

1

0.5

0

−0.5

−1

−1.5
Position x
Position y
−2
Position z

−2.5

0

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

2

Time t (s)

Figure 3: Positions x, y, and z

9

Angle (deg)

30

Angle φ

25

Angle θ

Angle ψ

20

15

10

5

0

−5

0

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

2

Time t (s)

Figure 4: Angles φ, θ, and ψ

10
4 Stabilisation of quadcopter

To stabilise the quadcopter, a PID controller is utilised. Advantages of the PID controller are the simple structure and easy implementation of the controller. The general form of the PID controller is

e(t) = xd(t) − x(t),

u(t)

=

KP e(t) + KI

t 0

e(τ )

d

τ

+

KD

d

e(t) dt

,

[16]

(22)

in which u(t) is the control input, e(t) is the diﬀerence between the desired state xd(t) and the present state x(t), and KP , KI and KD are the parameters for the proportional, integral and derivative elements of the PID controller.

In a quadcopter, there are six states, positions ξ and angles η, but only four control inputs, the angular velocities of the four rotors ωi. The interactions between the states and the total thrust T and the torques τ created by the rotors are visible from the quadcopter dynamics deﬁned by Equations (10), (11), and (12). The total thrust T aﬀects the acceleration in the direction of the z-axis and holds the quadcopter in the air. Torque τφ has an aﬀect on the acceleration of angle φ, torque τθ aﬀects the acceleration of angle θ, and torque τψ contributes in the acceleration of angle ψ.
Hence, the PD controller for the quadcopter is chosen as, similarly as in [4],

T

=

(g

+

Kz,D

(z˙d

−

z˙)

+

Kz,P

(zd

−

z))

m CφCθ

,

τφ =

Kφ,D φ˙d − φ˙ + Kφ,P (φd − φ) Ixx,

τθ =

Kθ,D θ˙d − θ˙ + Kθ,P (θd − θ) Iyy,

τψ =

Kψ,D ψ˙d − ψ˙ + Kψ,P (ψd − ψ) Izz,

(23)

in which also the gravity g, and mass m and moments of inertia I of the quadcopter are considered.
The correct angular velocities of rotors ωi can be calculated from Equations (7) and (8) with values from Equation (23)

ω12

=

T 4k

−

τθ 2kl

−

τψ 4b

ω22

=

T 4k

−

τφ 2kl

+

τψ 4b

ω32

=

T 4k

+

τθ 2kl

−

τψ 4b

(24)

ω42

=

T 4k

+

τφ 2kl

+

τψ 4b

The performance of the PD controller is tested by simulating the stabilisation of
a quadcopter. The PD controller parameters are presented in Table 2. The initial condition of the quadcopter is for position ξ = [0 0 1]T in meters and for angles

11 η = [10 10 10]T in degrees. The desired position for altitude is zd = 0. The purpose of the stabilisation is stable hovering, thus ηd = [0 0 0]T.

Table 2: Parameters of the PD controller

Parameter
Kz,D Kφ,D Kθ,D Kψ,D

Value 2.5 1.75 1.75 1.75

Parameter
Kz,P Kφ,P Kθ,P Kψ,P

Value 1.5 6 6 6

The control inputs ωi, the positions ξ and the angles η during the simulation are presented in Figures 5, 6, and 7. The altitude and the angles are stabilised to zero value after 5 seconds. However, the positions x and y deviated from the zero values because of the non-zero values of the angles. Before the quadcopter is stabilised to hover, it has already moved over 1 meters in the direction of the positive x axis and 0,5 meters in the direction of the negative y axis. This is because the control method of the PD contoller does not consider the accelerations in the directions of x and y. Thus, another control method should be constructed to give a control on all of positions and angles of the quadcopter.

Control input ωi (rad/s)

630

620

610

600

590

580

570

ω1

ω2

560

ω3

ω4

550

0

1

2

3

4

5

6

Time t (s)

Figure 5: Control inputs ωi

Position (m)

1.2

1
Position x

0.8

Position y

Position z
0.6

0.4

0.2

0

−0.2

−0.4

−0.6

0

1

2

3

4

5

6

Time t (s)

Figure 6: Positions x, y, and z

Angle (deg)

10

8

6

4

2

0

Angle φ

−2

Angle θ

Angle ψ

0

1

2

3

4

5

Time t (s)

Figure 7: Angles φ, θ, and ψ

12
6

13
5 Trajectory control

The purpose of trajectory control is to move the quadcopter from the original location to the desired location by controlling the rotor velocities of the quadcopter. Finding optimal trajectory for a quadcopter is a diﬃcult task because of complex dynamics. However, a simple control method is able to control the quadcopter adequately. Thus, a heuristic approach is studied and developed here.

The basis of the development of a control method is the study of the interactions and dependances between states, state derivatives and control inputs. These interactions and dependances are deﬁned by Equations (7), (8), (20) and (21) and presented in Figure 8.

The given control inputs ωi deﬁne the total thrust T and the torques τφ, τθ and τψ.
The torques aﬀect the angular accelerations depending on the current angles and
angular velocities. The angles η can be integrated from the angular velocities η˙, which are integrated from the angular accelerations η¨. The linear accelerations ξ¨ depend on the total thrust T , the angles η and the linear velocities ξ˙. The linear position ξ is integrated from the linear accelerations ξ¨ through the linear velocities ξ˙.

Hence, to ﬁnd proper control inputs ωi for given states ξ this line of thought has to be done in reverse.

ω

¨¨¨B rrrj

T τ

E ξ¨ © E ξ˙

d s

d

E η¨

E η˙

d E

η

Eξ

us

Figure 8: Interactions between states, state derivatives, and control inputs

One method is to generate linear accelerations which accomplish the wanted trajectory according to positions x, y and z for each time t. From Equation (21), three equations are received

0

   0   Ax 0 0  

TB =  0  = RT m ξ¨+  0  +  0 Ay 0  ξ˙ .

(25)

T

g

0 0 Az

in which ξ¨, ξ˙, and ψ are desired trajectory values as well as angles φ and θ and total thrust T are unknown values to be solved.

From this equation, the required angles φ and θ and the total thrust T for each time t can be calculated, as shown in [5],

14

φ = arcsin

dx Sψ − dy Cψ d2x + d2y + (dz + g)2

,

θ = arctan

dx Cψ + dy Sψ dz + g

,

(26)

T = m (dx (SθCψCφ + SψSφ) + dy (SθSψCφ − CψSφ) +( dz + g ) CθCφ) ,

in which

dx = x¨ + Axx˙ /m,

dy = y¨ + Ayy˙/m,

(27)

dz = z¨ + Azz˙/m.

When the values of the angles φ and θ are known, the angular velocities and accelerations can be calculated from them with simple derivation. With the angular velocities and accelerations, the torques τ can be solved from Equation (20). When the torques and thrust are known, the control inputs ωi can be calculated from Equation (24).

5.1 Heuristic method for trajectory generation
The generation of proper accelerations ξ¨ is diﬃcult because the composition of the third and fourth derivatives of the position, jerk and jounce, has to be reasonable. The inﬂuence of the jounce values is visible in the composition of the control inputs ωi. High jounce values will mean high control input values and thus the jounces have to be considered closely when generating the accelerations.
A heuristic method can be used to generate jounce values. The method utilises a symmetric structure in jouce function f (t) to control the derivatives. One inﬂuencial part of the function is deﬁned by three sine functions as following

 

a sin



1 b

π

t

,

0 ≤ t ≤ b,

f (t) =

−a sin

1 b

π

t

−

π

,

b ≤ t ≤ 3b,

(28)

 

a sin

1 b

π

t

−

3π

,

3b ≤ t ≤ 4b.

The structure of the function is visualised in Figure 9. The sine functions are used to give a smooth function. These three sine functions form a function in which the ﬁrst half increases acceleration to certain value and then the second half of the function decreases it back to zero. This acceleration generates constant velocity. Mirror image of the function can be used to decelerate the velocity back to zero. The ﬁnal position depends on the parameters a and b of the sine functions, presented

15

in Equation (28), and the time c between the accelerating part and the decelerating part, the mirror image, of the jounce.

a sin

1 b

π

t

a sin

1 b

π

t

−

3π

Jounce (m/s4)

a

2b

b a

a
Time t (s) b

−a sin

1 2b

π

t

−

π

Figure 9: Heuristic method for the generation of jounce functions
Unfortunately, the method does not give optimal trajectories. Thus, a dynamic optimisation model and a suitable algorithm would be needed to calculate optimally the trajectory of the quadcopter. However, the method presented is easy to use to generate proper values of jounce which will achieve the wanted trajectory.
The functionality of the method is studied with an example simulation. Jounce of position x is created according to Equation (28) with parameters a = 1, b = 0.5 and c = 2. The position x and its derivatives derived from the planned jounce are presented in Figure 10. The jounce could also be generated simultaneously for y and z. However, in this example, only position x is considered because the relationship between the jounce of position x and the control inputs ω1 and ω3, controlling the angle θ, is more visible.

16

Jounce (m/s4) Jerk (m/s3)
Acceleration (m/s2)

1

0.8

0.6

0.4

0.2

0

−0.2

−0.4

−0.6

−0.8

−1

0

1

2

3

4

5

6

7

Time t (s)

(a) Jounce

0.4

0.3

0.2

0.1

0

−0.1

−0.2

−0.3

−0.4

0

1

2

3

4

5

6

7

Time t (s)

(b) Jerk

0.2

0.15

0.1

0.05

0

−0.05

−0.1

−0.15

−0.2

0

1

2

3

4

5

6

7

Time t (s)

(c) Acceleration

Velocity (m/s) Position (m)

0.18

0.16

0.14

0.12

0.1

0.08

0.06

0.04

0.02

0

−0.02

0

1

2

3

4

5

6

7

Time t (s)

(d) Velocity

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

1

2

3

4

5

6

7

Time t (s)

(e) Position

Figure 10: Planned position x and its derivatives with given jounce

The simulation of the example case is performed with previously given accelerations and velocities of position x. The planned value of angle ψ is zero for each time t. First, the required angles φ and θ and thrust T are solved from Equation (26) for each time t. The angular velocities and accelerations are calculated from the solved angles with derivation. Then, the torques are solved using the angular velocities and accelerations. Finally, the control inputs are solved. Then, the simulation is performed with given control inputs.
The calculated control inputs are presented in Figure 11. The simulated positions ξ are presented in Figure 12 and the simulated angles η in Figure 13. According to Figure 12, the simulated position x is the same as the planned position x in Figure 10(e) and the values of the positions y and z stay as zeroes. The angle θ increases during the acceleration and then stabilises to a constant value to generate the constant acceleration required to compensate the drag force caused by the planned constant velocity. Finally, the angle is changed to the opposite direction to decelerate the quadcopter to a halt.
The shape of the calculated control inputs ω1 and ω3 in Figure 11 are similar to planned jounce in Figure 10(a). The shape of the simulated angle θ follows the shape of the planned acceleration x¨. The shapes of the control inputs and the angles diﬀer from the planned values of the jounce and the acceleration because the drag force, caused by the velocity, has to be compensated.

Control input ωi (rad/s)

17

621

620.9

620.8

620.7

620.6

620.5

ω1

620.4

ω2

ω3

620.3

ω4

0

1

2

3

4

5

6

7

Time t (s)

Figure 11: Control inputs ωi

Position (m)

0.7
Position x

0.6

Position y

Position z

0.5

0.4

0.3

0.2

0.1

0

0

1

2

3

4

5

6

Time t (s)

Figure 12: Positions x, y, and z

Angle (deg)

1.5

1.25

1

0.75

0.5

0.25

0

−0.25
Angle φ

−0.5

Angle θ

−0.75

Angle ψ

−1

0

1

2

3

4

5

6

7

Time t (s)

Figure 13: Angles φ, θ, and ψ

The method can also be used even if there are unmodeled linear forces, wind for example, which aﬀect the linear accelerations and consequently the position of the quadcopter. If the trajectory is calculated in shorter distances, it is possible to correct the trajectory with new calculation from the current, but inaccurate, location to the next checkpoint. Example of this method is presented in Figure 14. The arrows with dash lines indicate the planned trajectory in the x, y-plane and the solid arrows indicate the realised trajectory. The black squares mark the start and the ﬁnish positions and the white squares mark the checkpoints for the trajectory.

18
The control inputs are calculated from the current location of the quadcopter to the next checkpoint but because of random and unmodelled forces the realised position, marked with X, diﬀers from the planned. If the quadcopter is close enough to the target checkpoint, the target checkpoint is changed to the next one and new control inputs are calculated. After repeating this and going through all of the checkpoints, the quadcopter reaches the ﬁnal destination.

Figure 14: Example of checkpoint ﬂight pattern with external disturbances
The biggest weakness in the proposed method is that it works as shown only if the quadcopter starts from a stable attitude, the angles φ and θ and their derivatives are zeros, and there are no external forces inﬂuencing the attitude during the ﬂight. Small deviations in the angles can result into a huge deviation in the trajectory. One way to solve this problem is to stabilise the quadcopter at each checkpoint with a PD controller proposed earlier or by using the heuristic method to angles. However, if the angular disturbances are continuous, the beneﬁt from temporary stabilisation is only momentary.

5.2 Integrated PD controller
Another method to take into account the possible deviations in the angles, is to integrate a PD controller into the heuristic method. This is a simpliﬁed version of the proposed control method in [5]. The required values dx, dy, and dz in Equation (26) are given by the PD controller considering the deviations between the current and desired values (subscript d) of the positions ξ, velocities ξ˙, and accelerations ξ¨.

dx = Kx,P (xd − x) + Kx,D (x˙ d − x˙ ) + Kx,DD (x¨d − x¨) ,

dy = Ky,P (yd − y) + Ky,D (y˙d − y˙) + Ky,DD (y¨d − y¨) ,

(29)

dz = Kz,P (zd − z) + Kz,D (z˙d − z˙) + Kz,DD (z¨d − z¨) .

Then, the commanded angles φc and θc and thrust T are given by Equation (26). The torques τ are controlled by the PD controller in Equation (30), same as in

19

Equation (23). The control inputs can be solved with the calculated thrust and torques by using Equation (24)

τφ = τθ = τψ =

Kφ,P (φc − φ) + Kφ,D Kθ,P (θc − θ) + Kθ,D Kψ,P (ψd − ψ) + Kψ,D

φ˙c − φ˙ θ˙c − θ˙ ψ˙d − ψ˙

Ixx, Iyy ,
Izz .

(30)

The performance of the PD controller is demonstrated with an example case in which for all positions x, y and z and their derivatives the values are same as in Figure 10. The simulation is performed with the PD parameters presented in Table 3.

Table 3: Parameters of the PD controller

Variable i x y z φ θ ψ

Parameter value Ki,P Ki,D Ki,DD 1.85 0.75 1.00 8.55 0.75 1.00 1.85 0.75 1.00 3.00 0.75 3.00 0.75 3.00 0.75 -

The results of the simulation are presented Figures 15 - 17. The simulated control inputs are presented in Figure 15, the simulated positions in Figure 16 and the simulated angles in Figure 17. The position of the quadcopter is close to the planned position after 6 seconds but the position keeps ﬂuctuating close to the planned values for several seconds. The angles variate greatly during the simulation to achieve the wanted positions, velocities, and accelerations. The values of the control inputs oscillated during the acceleration but then their behaviour became more stable.

Control input ωi (rad/s)

626

625

624

623

622

621

620

ω1

ω2

619

ω3

ω4

618

0

2

4

6

8

10

12

14

Time t (s)

Figure 15: Control inputs ωi

Position (m)

20

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

Position x

Position y

0

Position z

−0.1

0

2

4

6

8

10

12

14

Time t (s)

Figure 16: Positions x, y, and z

Angle (deg)

1.5

1.25

1

0.75

0.5

0.25

0

−0.25

−0.5

−0.75

−1

Angle φ

−1.25

Angle θ

Angle ψ

−1.5

0

2

4

6

8

10

12

14

Time t (s)

Figure 17: Angles φ, θ, and ψ

The proposed integrated PD controller performed well in the example case. However, the performance of the controller is highly depended on the parameter values. If the parameter values are small, the controller will not respond quickly enough to follow the planned trajectory. If the parameter values are substantial, the quadcopter can not perform the required drastic changes in the angular velocities of the rotor and the control inputs, calculated from Equation (24), can be infeasible with certain torques. Thus, the use of equations considering the torques and the control inputs requires a method to calculate the best feasible torques, and from them the best control inputs. Another possible method would be to variate the PD parameters according to the current positions and angles and their derivatives but it is extremely diﬃcult.

21
6 Conclusion
This paper studied mathematical modelling and control of a quadcopter. The mathematical model of quadcopter dynamics was presented and the diﬀerential equations were derived from the Newton-Euler and the Euler-Lagrange equations. The model was veriﬁed by simulating the ﬂight of a quadcopter with Matlab. Stabilisation of attitude of the quadcopter was done by utilising a PD controller. A heuristic method was developed to control the trajectory of the quadcopter. The PD contoller was integrated into the heuristic method for better response to disturbances in the ﬂight conditions of the quadcopter.
The simulation proved the presented mathematical model to be realistic in modelling the position and attitude of the quadcopter. The simulation results also showed that the PD controller was eﬃcient in stabilising the quadcopter to the desired altitude and attitude. However, the PD controller did not considered positions x and y. Thus, the values of x and y variated from their original values during the stabilisation process. This was a result of the deviation of the roll and pitch angles from zero values.
According to the simulation results, the proposed heuristic method produced good ﬂight trajectories. The heuristic method required only three parameters to generate the values for the jounce of the position. The position and its other derivatives were calculated from the jounce values. The total thrust and the pitch and roll angles to achieve given accelerations were solved from the linear diﬀerential equations. Then, the torques were determined by the angular accelerations and angular velocities calculated from the angles. Finally, the required control inputs were solved from the total thrust and the torques. The simulation results indicated that the quadcopter could be controlled accurately with the control inputs given by the method.
The proposed heuristic method does not consider unmodelled disturbances, such as wind, and thus the PD controller was integrated into the control method. The integrated PD controller operated well in the example simulation. The quadcopter followed the given trajectory and began to stabilise after reaching the ﬁnal destination. However, the PD controller can perform poorly if the parameter values are not properly selected and are too small or high.
The presented mathematical model only consists of the basic structures of the quadcopter dynamics. Several aerodynamical eﬀects were excluded which can lead to unrealiable behaviour. Also the electric motors spinning the fours rotors were not modelled. The behaviour of a motor is easily included in the model but would require estimation of the parameter values of the motor. The position and attitude information was assumed to be accurate in the model and the simulations. However, the measuring devices in real life are not perfectly accurate as random variations and errors occur. Hence, the eﬀects of imprecise information to the ﬂight of the quadcopter should be studied as well. Also methods to enhance the accuracy of the measurements should be researched and implemented to improve all aspects required

22
for robust quadcopter manoeuvres.
The presented model and control methods were tested only with simulations. Real experimental prototype of a quadcopter should be constructed to achieve more realistic and reliable results. Even though the construction of a real quadcopter and the estimation of all the model parameters are laborious tasks, a real quadcopter would bring signiﬁcant beneﬁts to the research. With a real propotype, the theoretical framework and the simulation results could be compared to real-life measurements. This paper did not include these higlighted matters in the study but presented the basics of quadcopter modelling and control. This paper can thus be used as a stepping-stone for future research in more complex modelling of the quadcopter.

23
References
[1] G. M. Hoﬀmann, H. Huang, S. L. Waslander, and C. J. Tomlin, “Quadrotor helicopter ﬂight dynamics and control: Theory and experiment,” Proceedings of the AIAA Guidance, Navigation and Control Conference and Exhibit, Aug. 2007.
[2] H. Huang, G. M. Hoﬀmann, S. L. Waslander, and C. J. Tomlin, “Aerodynamics and control of autonomous quadrotor helicopters in aggressive maneuvering,” IEEE International Conference on Robotics and Automation, pp. 3277–3282, May 2009.
[3] A. Tayebi and S. McGilvray, “Attitude stabilization of a four-rotor aerial robot,” 43rd IEEE Conference on Decision and Control, vol. 2, pp. 1216–1221, 2004.
[4] I˙. C. Dikmen, A. Arısoy, and H. Temelta¸s, “Attitude control of a quadrotor,” 4th International Conference on Recent Advances in Space Technologies, pp. 722– 727, 2009.
[5] Z. Zuo, “Trajectory tracking control design with command-ﬁltered compensation for a quadrotor,” IET Control Theory Appl., vol. 4, no. 11, pp. 2343–2355, 2010.
[6] S. Bouabdallah, A. Noth, and R. Siegwart, “PID vs LQ control techniques applied to an indoor micro quadrotor,” IEEE/RSJ International Conference on Intelligent Robots and Systems, vol. 3, pp. 2451–2456, 2004.
[7] T. Madani and A. Benallegue, “Backstepping control for a quadrotor helicopter,” IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 3255–3260, 2006.
[8] K. M. Zemalache, L. Beji, and H. Marref, “Control of an under-actuated system: Application to a four rotors rotorcraft,” IEEE International Conference on Robotic and Biomimetics, pp. 404–409, 2005.
[9] G. V. Raﬀo, M. G. Ortega, and F. R. Rubio, “An integral predictive/nonlinear H∞ control structure for a quadrotor helicopter,” Automatica, vol. 46, no. 1, pp. 29–39, 2010.
[10] P. Castillo, R. Lozano, and A. Dzul, “Stabilisation of a mini rotorcraft with four rotors,” IEEE Control Systems Magazine, pp. 45–55, Dec. 2005.
[11] J. Escaren˜o, C. Salazar-Cruz, and R. Lozano, “Embedded control of a four-rotor UAV,” American Control Conference, vol. 4, no. 11, pp. 3936–3941, 2006.
[12] P. Martin and E. Salau¨n, “The true role of acceleromter feedback in quadrotor control,” IEEE International Conference on Robotics and Automation, pp. 1623–1629, May 2010.

24
[13] R. He, S. Prentice, and N. Roy, “Planning in information space for a quadrotor helicopter in a GPS-denied environment,” IEEE International Conference on Robotics and Automation, pp. 1814–1820, 2008.
[14] T. S. Alderete, “Simulator aero model implementation.” NASA Ames Research Center, Moﬀett Field, California, http://www.aviationsystemsdivision. arc.nasa.gov/publications/hitl/rtsim/Toms.pdf.
[15] H. Bouadi and M. Tadjine, “Nonlinear observer design and sliding mode control of four rotors helicopter,” Proceedings of World Academy of Science, Engineering and Technology, vol. 25, pp. 225–230, 2007.
[16] K. J. ˚Astro¨m and T. H¨agglund, Advanced PID Control. ISA - Instrumentation, Systems and Automation Society, 2006.

