IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/jax/output/HTML-CSS/autoload/mtable.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
A UAV Global Planner to Improve Path Planning in Unstructured Environments
Publisher: IEEE
Cite This
PDF
  << Results   
Lidia Rocha ; Marcela Aniceto ; Igor Araújo ; Kelen Vivaldini
All Authors
View Document
1
Paper
Citation
167
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Local Planning Techniques
    III.
    Proposed Global Planner
    IV.
    Methods
    V.
    Simulations and Discussion

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: A good performance for path planning is essential to carry out real-world missions. In this paper, the path planning consists of a global planner, that finds the optimal ... View more
Metadata
Abstract:
A good performance for path planning is essential to carry out real-world missions. In this paper, the path planning consists of a global planner, that finds the optimal path, and in a local planner, recalculates the path to avoid obstacles. The main focus is to improve the performance of local planning techniques decreasing the complexity. There are two main ways to do it: bidirectional algorithms, improving time, and global planners, improving time and completeness. Thus, we propose a global planner algorithm that generates auxiliary nodes, backtracking by the goal node. We perform a comparison among A*, Bi A*, Artificial Potential Field (APF), Bi APF, Rapid Exploring Random Tree (RRT), and Bi RRT with and without the global planner through statistical metrics of time, path length, CPU, and memory. The results show the advantages of using bidirectional algorithms and the proposed global planner. The bidirectional algorithms decrease the time to return to the trajectory and sometimes assist in the algorithm's completeness. The proposed global planner reduced the planning time by 91.6% and improved the completeness of all algorithms in an unstructured indoor environment.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20901986
DOI: 10.1109/ICUAS51884.2021.9476692
Publisher: IEEE
Conference Location: Athens, Greece
Funding Agency:
Contents
SECTION I.
Introduction

In recent years, Unmanned Aerial Vehicle (UAV) have been adopted to carry out important tasks in several interesting applications in unstructured environments [1] , enabling various research segments, such as the monitoring of eucalyptus [2] , underground mine environments [3] , surveillance [4] , urban environment [5] , search and rescue [6] , [7] , and others. To carry out these tasks efficiently a path planning that aims to solve unstructured environments is essential.

Path planning for UAVs aims to find an optimal path, avoiding obstacles [8] . The planner needs to make optimal decisions to solve UAV's mission-critical operations. These decisions require a map or graph of the mission scenario so that UAVs are aware of their locations and obstacles [9] , [10] .

The main techniques that uses maps are classical and widely employed to solve path planning problems [11] , [12] given the fact that they are easy techniques implementation and have good results. Among the classic techniques, were chosen from the 3 main subgroups: The RRT of the sampling-based algorithm group, the A* (A-Star) of the graph search group, and the Artificial Potential Field (APF) of the potential field group.

According to [13] , classical techniques have disadvantages because they have high computational costs and problems when working with uncertainties in the scenarios. These algorithms tend to have significant complications to return a trajectory in large and unstructured environments due to the computational cost, increasing uncertainties [14] .

Thus, to reduce these problems, the following bidirectional techniques of these algorithms were developed: Bidirectional RRT [15] , Bidirectional A* [16] , and Bidirectional APF [17] . The goal of those techniques is to divide the algorithm's complexity to improve response time and completeness.

In unstructured outdoor environments, the UAVs need to consider many obstacles and different shapes, like forests. Furthermore, in unstructured indoor environments, the UAVs tends to get lost during navigation due to many narrow path options [6] , like caves. In that scenario, the local planner algorithm has difficulty turning back at the initial nodes, aiming to choose a better path when it is significantly ahead.

The classic algorithms generate a trajectory in an indoor environment with a high computational cost because it has more obstacles and has fewer trajectory options, consequently, taking a longer time. In outdoor environments, there is the possibility that not all algorithms return a trajectory due to the high complexity of the environment, causing the algorithms to fall into a minimum location [13] . On the other hand, with bidirectional algorithms, the complexity of both environments will be decreased. In this way, the response time will be shorter and may improve the completeness, potentially finding a viable path [18] .

However, there are still scenarios in which bidirectional algorithms may not find a viable path. Even if the complexity is reduced by half, there is still a possibility that the algorithm will fall to a minimum local in a large environment. However, to carry out missions in the real-world, the path planning algorithms are necessary once they are optimized to work within milliseconds to support real-time without collisions [14] .

One way to optimize the algorithm's completeness and even better, the response time, is with the adoption a global planner, which is responsible for showing the shortest path for the UAV carry out, consequently bringing lower computational and time costs for the local planner. In addition that, to preventing the algorithm from falling into local minima, improving its completeness [19] .

This article proposes a global planner that uses the auxiliary nodes in areas where the local planning algorithm's complexity is high. Lessening the algorithm's chances of falling to a local minimum. In the same way, the algorithm's time to return a trajectory is also reduced since the complexity decreases.

According to [20] – [21] [22] , as the algorithm's implementation is geometrical, 3D validation would bring the same results as a 2D validation. Additionally is possible to fly in certain unstructured environments considering only two dimensions, as forests [23] , [24] , which also need, to decrease the complexity of the algorithms to return a trajectory on time.

In this context, the proposed global planner was validated in 2D to obtain more accurate data about time planning and the distance between the start and goal nodes. Along with that, this paper describes the complexity analysis of each algorithm and proves them by analyzing the results. Therefore, it is possible to know the time to return the trajectory and the use of memory of the 3D path planners. The main difference for 3D planning is that the auxiliary points can be placed in 3 dimensions.

This paper is organized as followed: Section II presents a brief description of the local planning approach; Section III describes the proposed algorithm for the global planner; Section IV explain the environment of simulation and how each data was collected; the tests in simulated environments and discussion are given in Section V ; finally, Section VI presents the conclusion and future works.
SECTION II.
Local Planning Techniques

This section presents a brief description of each techquines implemented, such as A-Star (A*), Bidirectional A-Star (Bi A*), Rapidly-Exploring Random Tree (RRT), Bidirectional Rapidly-Exploring Random Exploring Tree (Bi RRT), Artificial Potential Field (APF), and Bidirectional Artificial Potential Field (Bi APF). Besides, it shows how the paths are smoothed and the time and space complexity of the algorithms.
A. A*

The A* algorithm, developed by [25] , aims to improve the computational cost and processing time presented by the graphs in search problems. The algorithm is based on a heuristic, defined to guide the search process [26] . This heuristic estimates the cost of traveling from the origin to the destination, usually determined by the distance between the nodes, which tends to accelerate the exploratory process. The algorithm also tracks the cost needed to reach each position ( f_{n} ), which 3can be seen in Equation 1 , where the cost is g_{n} , the heuristic is h_{n} , and the n means that refers to the current node. \begin{equation*}f_{n}=g_{n}+h_{n}\tag{1}\end{equation*}
View Source \begin{equation*}f_{n}=g_{n}+h_{n}\tag{1}\end{equation*}

B. Bi A*

Bidirectional A* starts two searches parallel from start to finish and one from finish to the goal node until they find each other. A big tree is worse than two small trees, so, computationally, it is better to have two small search trees.

The redirect approach abandons simultaneous searches in the forward and backward directions. Instead, it performs a forward search for a short time, chooses the best forward candidate, and then performs a backward search, not to the starting point, but to that candidate. It chooses the best backward candidate and performs a forward search from the best forward candidate to the best backward candidate. This process continues until the two candidates are on the same point [16] .
C. RRT

The RRT generates nodes randomly and is connected to the closest available node [27] . The algorithm expands at free space towards randomly positioned nodes. In this way, a tree is built, checking if there is a collision in each interaction. If the distance to the random node and the closest vertex is greater than the growth factor, it is limited to that factor's value.
D. Bi RRT

RRT variation was implemented to improve its performance [28] , the bidirectional RRT, which uses two RRT [29] trees. One of the trees is born from the source node, and the other from the destination node, for this reason, being called RRT-bidirectional [30] , [31] . As the RRT tree grows, the algorithm tries to connect both trees while they are expanded. If it succeeds, it will be considered the last expansion of the tree. Otherwise, the two trees change roles, the tree that was expanding now will try to connect, and the other will expand [32] . If the path is still not found, the first tree expands to the closest possible point [33] .

The bidirectional RRT divides at the computational cost between the exploration of the environment and the growth of trees, one towards the other, until they are connected, and the solution found [15] .
E. APF

A Potential Field is any physical field that fulfills Laplace's equation. Potential Fields in the world are calculated for each search between two nodes. The UAV always goes to the next position with the lowest potential, analyzing every 10 centimeters. The electrical-charge goes to a node where the electrical potential is lower until reaching the goal. Some common examples of Potential Fields include electrical, magnetic, and gravitational fields.

The Attractive-Repulsive Potential method is based on an attractive Potential Field to the target and a repulsive Potential Field to the world's obstacles. The sum of these two potential gives us the robot's current potential (Eq. 2 ). \begin{equation*}U(n)=U_{att}(n)+U_{rep}(n)\tag{2}\end{equation*}
View Source \begin{equation*}U(n)=U_{att}(n)+U_{rep}(n)\tag{2}\end{equation*}

The attractive potential depends on the distance from the target. Where x and y are coordinates of the current node, x_{goal} and y_{goal} are the goal node. C is a constant. KP is a control variable for the gradient magnitude (Eq. 3 ). \begin{equation*}U_{att}(n)=C\ast KP\ast\sqrt{(x-x_{goal})^{2}+(y-y_{goal})^{2}}\tag{3}\end{equation*}
View Source \begin{equation*}U_{att}(n)=C\ast KP\ast\sqrt{(x-x_{goal})^{2}+(y-y_{goal})^{2}}\tag{3}\end{equation*}

The repulsive potential depends on distances from obstacles, being calculated according to each obstacle, and the sum of them is the total repulsive function. This force is useful in keeping the robot away from the boundaries. Where rr is the robot radius, C is a constant, ETA is a repulsive potential gain and x_{o} and y_{o} are coordinates of the obstacles (Eq. 4 ). \begin{equation*}U_{rep}(n)=C\ast ETA\ast(\frac{1}{\sqrt{(x-x_{o})^{2}+(y-y_{o})^{2}}}-\frac{1}{rr})^{2}\tag{4}\end{equation*}
View Source \begin{equation*}U_{rep}(n)=C\ast ETA\ast(\frac{1}{\sqrt{(x-x_{o})^{2}+(y-y_{o})^{2}}}-\frac{1}{rr})^{2}\tag{4}\end{equation*}

F. Bi APF

The artificial potential field can also occur bidirectional, as implemented by [17] . The authors vary the checkpoint for choosing the next node between the starting and target node at each iteration. However, we implemented the exchange between the source and objective node to occur only when one of the searches is at a local minimum. The objective node makes the first calculation of the potential field. As proposed by [17] , there would still be cases where local minimums would occur, especially in unstructured and unknown environments, similarly, the path would be very winding due to so many changes to the field.
G. UAV Constraints

According to [34] , the trajectories to be followed by UAVs need to minimize the jerk while maintaining constant torque. We implemented an improvement that reduces the number of curves in the trajectory, checking unnecessary nodes in the curve and delete them [35] .

The path needs to be smoothed, aiming at continuous movement [36] [37] . For this reason, b-spline curves were applied to the trajectory.

Cubic Spline interpolation is an approximation technique that divides the interval of interest into several subintervals and interpolates, as smoothly as possible, based on cubic polynomials [38] . Thus, the trajectory generated is smoother, making it easier for the UAV to carry out.
H. Complexity Analysis

The time complexity of A* in the worst case is bigO(MovesObsN). N is the path length; Moves is the number of possible directions that the UAV can make (in a discrete environment are 4: up, left, right, down); Obs is the number of obstacles in the environment. The complexity is directly proportional to the path length and the number of obstacles in the environment. By reducing one of these, the algorithm tends to have a faster response.

The space complexity A* is bigO(2N+2E). N is each of the arrays where the ( x, y ) coordinates of the path will be stored, and E is each of the arrays that will keep the environment's coordinates. Using arrays instead of a matrix to save the path makes it possible to access more quickly (in Python) and make the code more flexible, as well as saving the environment, due to the fact that only spaces with obstacles are known, so more memory would be being used than necessary in contrast to using an array.

The time complexity of Bi A* is bigO(bigO(A\ast^{2})) because despite the instructions being executed in the same loop, the functions to find the best path are repeated, influencing the growth rate in all aspects. Bi A*'s space complexity is the same as A*, although each array of the trajectory is only created up to half of the path, four arrays are used, being equivalent to A*.

The RRT time complexity in the worst case is bigO(ItObs)s . It is the number of iterations, and Obs the number of obstacles. The best case is when it gets the least number of iterations. Depending on randomness, that is, what will be investigated in the next node.

The RRT space complexity is bigO(2N) as Bi RRT. Both complexities are the same since the algorithm returns a node at each iteration, and it is unnecessary to create an array for each side of the Bi RRT. The nodes can be implemented directly in just one array. The time complexity of Bi RRT is bigO(2bigO(RRT)) because the iterations run in sequence until they reach the objective node.

The APF time complexity in the worst case is bigO(N+ Obs) . The best case is directly proportional to the path length. Obs is added because the array with obstacles is generated at the algorithm's initialization and reused. The Bi APF time complexity is bigO(2bigO(APF)) for the same reason as the time complexity between RRT and Bi RRT. The space complexity of APF and Bi APF is bigO(2N) , for the same reason as RRT and Bi RRT.

In all the algorithms presented, the worst case will be the same as the expected case. The bigO(Obs) complexity cannot be improved in any of the algorithms as it will always be necessary to check all obstacles for a collision. Therefore, by decreasing the number of obstacles in the environment, the algorithm tends to be faster. The complexity of APF and Bi APF are less affected by the number of obstacles in the environment.
SECTION III.
Proposed Global Planner

This Section explains the proposed global planner and how it works.
A. Motivation

The proposed global planner's main goal is to decrease the algorithms' time complexity, making them return the path faster and carry out missions that they previously did not manage. This algorithm's general idea is to break the trajectory's complexity into several auxiliary points, making it easier for the local planner to find the best path. In this way, several smaller trajectories are created, decreasing the algorithms' complexity and increasing the completeness.

As seen in Section II-H , A*, Bi A*, RRT, and Bi RRT are algorithms that have their complexity proportional to the number of obstacles in the scenario. The complexity of the APF and Bi APF depends on the obstacles but on a smaller scale. The proposed global planner will check collision with all obstacles in the scenario. Consequently, these constants in time complexity are unchanged.

The APF and Bi APF are the most improved algorithms with our algorithm because their complexity depends only on the number of obstacles, on a small scale, and the path length, decreasing considerably. The other algorithms are more influenced by the number of obstacles and variables in which the global planner does not directly optimize, such as the number of iterations. For the other algorithms, the proposed global planner will shorten the time to return the path and improve the completeness, but on a smaller scale than APF and Bi APF.

A* and Bi A* also depend on the path length and the number of obstacles. Even though the trajectory size is reduced, the complexity will not be as reduced as APF and Bi APF because the time complexity is proportional to the number of obstacles. The proposed algorithm also optimizes RRT and Bi RRT because the auxiliary node are closer than the goal node. Hence, less iterations are necessary. Finally, if the algorithm follows numerous auxiliary nodes to the goal node, there is less chance of RRT and Bi RRT being lost in the middle of the path, increasing its completeness.
B. Proposed Algorithm

The proposed algorithm creates auxiliary nodes from the goal until the start node, while also creating two maps, the first starting from the goal node (m1) and the second starting from the start node (m2). Each map considers the distance between the current and goal or start node and the number of obstacles between them. As shown in Equation 5 , where d is the distance between the nodes, K_{n} is the number of obstacles in a line of sight until the current node, and L is the penalty when the trajectory between the current and goal node crosses a obstacle. \begin{equation*}loss=\log_{d}+L\ast K_{n}\tag{5}\end{equation*}
View Source \begin{equation*}loss=\log_{d}+L\ast K_{n}\tag{5}\end{equation*}

This equation is based on the attenuation formula, shown in [39] . The distance value is given in logarithm to prioritize values that are most likely to have no collision. Those are, the values closest to the beginning.

The first map helps determine which are the best auxiliary nodes to be followed from the goal node. These are the nodes that had no collision and have a lower value of loss , calculated with the Equation 5 . The second map aims to guide what are the best direction to be followed. For example, the first map can generate many better points to follow. However, if we consider the second map, the best path to follow will go towards the start node. Therefore, the next step is to create a heat map by adding both maps.

With the heat map generated, considering the relation between the start and goal node, final adjustments are made to UAV that does not loop in the scenario and does not collide with any obstacle. Firstly, depending on the UAV, the algorithm checks whether the radius and current position do not collide with any wall. If true, this node is disregarded, and the algorithm searches for a new best auxiliary node. Otherwise, the algorithm checks if the node is in the same direction from where it was explored. With it is possible to avoid repeating the nodes, which do not go towards the goal node. If it is in the same direction, a new node is requested. If not, that node is the auxiliary node.

The algorithm saves the angle between the current and next node in each movement. With this information, it is possible to compare the angles formed between the previous and the current node. If the angles are on opposite sides in the cartesian plane, the UAV is going in the same direction as the last node. For example: In the first movement, the UAV makes an angle of 45°, and in the second, it would make an angle of 225°. The second node would be creating a new node in the same direction as the first, probably creating a loop.

Auxiliary nodes are chosen based on the values of this new map. This choice can be seen in Figure 1 , which uses the indoor scenario, presented in Section IV-C , to exemplify algorithm operation.

The red nodes have highest values while the blues, the lowest value. It is possible to see the sum of the first two maps, mentioned previously, in Figure 1 (a) . The blue nodes directly connect with the start node, and the nodes with an even darker blue, almost black, left the goal node without collision. When adding both maps, we have that the best node to be chosen as an auxiliary node is the one that has the highest value among the nodes that had no collision. That is the node with no collision and has more influence with the path from the start node.

Figure 1 (a) shows the goal node and the heat map used to define the first auxiliary node. Figure 1 (b) shows the chosen auxiliary node and the new heat map used to discover the next auxiliary node. Finally, Figure 1 (c) shows the chosen auxiliary node and the new heat map to be considered. In this case, the next node will already be the start node. The local planning algorithms generate a trajectory until each of the auxiliary nodes until reaching the goal node. This algorithm's workflow can be seen in Figure 2 .
SECTION IV.
Methods

In this section, we present the preliminary information for the paper and explain the scenarios used in the simulations. The simulations were carry out on a notebook with an Intel Core i7 7700HQ processor with 16 GB of RAM and an Intel® HD Graphics 620.
A. Simulated Environment

In this research, we use MRS UAV system in the Gazebo simulator [40] , Robot Operating System (ROS) [41] for communication, and the programming language Python 2.7.

In this system, we use UAV F-450. It is a quadcopter kit has a low-cost and is easy to acquire and assemble [42] . This model has connections to install microcontrollers and micro computers, such as Jetson for the use of Cuda, RPLidar, laser scanner, blue fox camera, among others [43] .

The UAV uses the structure showed in Figure 3 . The MRS system provides an estimation system for supporting flights through realistic simulations. The technique used for localization was the visual-inertial state estimation (VIO) [44] . The control is also provided by the system, the control adopted was Model Predictive Control (MPC), which stands out when applied to problems with many manipulated control variables and their restrictions, changes in control objectives, equipment failure tolerance, and time delays [45] . The local and global planner modules were explained in the Sections II and III , respectively.
Fig. 1.

Heat map for each auxiliaries node. In (a) First,(b) Second and (c) Third iteration of global planner in indoor environment

Show All
Fig. 2.

Algorithm workflow

Show All
Fig. 3.

UAV structure

Show All

To flight, the VIO algorithm returns to the current position ( x, y ). With these nodes, the global planner calculates the best auxiliary nodes and sends them to the local planner to generate the best path to complete the mission. The control receives these nodes and moves the UAV for each one, which can be easily replicated to simulated environments and realworld experiments [40] .
B. Parameters

All algorithms consider the radius 40 cm, for the F-450 in view of the real-world model has 22 cm and 18 cm, so the simulation has approximately 20 cm for the security area. The path resolution is 0.1 meters. In other words, for the scenario with 100 nodes, the real size is 10 meters. The goal threshold for RRT, Bi RRT, APF, A* and Bi A* is 20 cm. The parameters of each algorithm are shown in Table I .
Table I Parameters for each algorithm

C. Scenarios

In this paper two scenarios were used, as showed in Figure 4 . Each scenario has 10 meters. The first scenario is an unstructured outdoor environment, and the second scenario is an unstructured indoor environment.

Figure 5 shows 3D view of these scenarios. The yellow circle represents the start node (1, 1) in both scenarios, and the red circles are the goal node. The second scenario has two goal nodes because the UAV needs to reach them in order. The goal node for the first scenario is (9.5, 9.5), and for the second scenario is (3, 4.5) and (5, 4.7), respectively.

The indoor environments are more complicated for classic algorithms because they have narrow passages, challenging the local planners [46] [47] . A* and Bi A* are based on graphs, so it needs to build a graph throughout the environment. The graph will be created mainly on the main diagonal between the initial and objective in the outdoor scenario. However, in an indoor setting, the graph will need to cover almost the entire environment around the walls, having a higher computational cost and taking longer.
Fig. 4.

Top view of scenarios. In (a) Outdoor environment and (b) Indoor environment

Show All
Fig. 5.

3D view of scenarios. In (a) Outdoor environment and (b) Indoor environment

Show All

RRT and BI RRT* have the euclidean distance between the current and the goal node as a heuristic and are algorithms based on sampling (random values). Therefore, the algorithms may go to a node with a short euclidean distance but with an obstacle between the nodes. If this happens, the algorithm will reach another node that has a short distance to the target. However, this action will be computationally costly and will likely exceed the maximum number of iterations.

APF and Bi APF have a higher probability to stuck in a minimum location in an indoor than in an outdoor environment because they have poor performance in narrow passages and difficulties to solve problems in environments with symmetrical obstacles [48] .
SECTION V.
Simulations and Discussion

This section presents the results and discusses them. The simulations were carried out in an indoor and outdoor environment, with and without the proposed global planner. Each algorithm was executed ten times to generate statistical data and reliable results.

The Tables presented in this section follow the heading:

    PP T is the time of the local planner in seconds ;

    Distance is the path length in meters ;

    CPU is the use of processing in MHz ;

    Memory is the use of memory in MB ;

    GP T is the time of the global planner in seconds .

The data in the tables is the average of the executions and the standard deviation.

Table II presents the statistical results of simulations in an outdoor environment without the proposed global planner. In this table, we can see that all bidirectional algorithms are faster than their original versions. The memory usage for the algorithms is approximately the same, as shown by the complexity analysis in the Section II-H .

The CPU usage of all algorithms was also similar, except for Bi A*, which is almost double. The CPU usage did not affect the planning time because, for the computer on which the simulations were made, the algorithm used just 30% of processing. However, it is essential to analyze whether the UAV processor could support the processing without braking for onboard flights.

According to Table II , the path length returned by the algorithms maintains almost the same average. Thus the fact that the algorithm is bidirectional does not affect the path length of the generated trajectory. The standard deviation for the algorithms A*, Bi A*, APF, and Bi APF is 0 because they are exact techniques, meaning that, all simulations will always return the same trajectory. RRT and Bi RRT are sampling-based techniques, so in each simulation, the trajectory returned is different. However, they returned a low standard deviation, showing that the average distance is reliable.
Table II Statistical analysis in outdoor environment without global planner

Table III presents the outdoor environment results with the proposed global planner. In this scenario, all the algorithms managed to return an adequate UAV trajectory with and without the proposed global planner. In other words, all algorithms had a 100% completeness.

Analyzing only the difference among the original algorithms for the bidirectional ones, some aspects. Stood out the bidirectional algorithms returns the trajectory in a shorter time. The bidirectional algorithms' trajectory size is also smaller, except for Bi RRT, which returned a larger trajectory. RRT and Bi RRT's standard deviation was 0 because the algorithms are following auxiliary points, so their trajectory already tends to follow only one direction. Further, the algorithm is also used to decrease curves and then smooth them, leaving all trajectories equal.

The use of memory was similar for all algorithms, even with the proposed global planner. The use of processing has increased in all algorithms, except Bi A*. The increase was small for all algorithms, except for APF and Bi APF. With that, we can see that the global planner uses much more processing than these two algorithms, but that for others, the difference is not much different.
Table III Statistical analysis in outdoor environment with global planner

The time of the local planner was faster in all cases with the proposed global planner. In some cases, the difference was small. As for Bi A*, the time was less than just 0.5 seconds. However, the global planner's time is 0.04 seconds, so even when using both algorithms, the final time considering the proposed global planner is less than local planner time without the proposed global planner. Moreover, there are also cases in which the time was 91.6% shorter, as in the APF.

Table IV presents the statistical results of simulations in an indoor environment without the proposed global planner. In the table, we can see that RRT, APF, and Bi APF were unable to return a trajectory without collision to the scenario. In this case, we observed the bidirectional algorithms, decreasing the time, and managing to improve the algorithm's completeness, such as Bi RRT. The original RRT was unable to find a trajectory using the number of pre-defined iterations, whereas the Bi RRT succeeded, despite having a much longer planning time. In the case of A* and Bi A*, the bidirectional algorithm time was 59% shorter.

The memory usage for the algorithms is approximately the same, as shown by the complexity analysis in the II-H section. The CPU usage of all the algorithms was also similar.

According to Table IV , the path length returned by the algorithms maintains almost the same average. Bi RRT has returned to a trajectory with greater path length and in a longer time. We can understand that the algorithm had difficulties returning the path and probably must have found a path in the last iterations.
Table IV Statistical analysis in indoor environment without global planner

Table V presents the indoor environment results with the proposed global planner. In this scenario, all the algorithms managed to return an adequate UAV trajectory with the proposed global planner. Our algorithm helps the algorithms return to the trajectory in less time and improves the completeness of the algorithms.

Some aspects were noted by analyzing only the difference between the original algorithms and their bidirectional versions. The bidirectional algorithms return a smaller trajectory except for Bi RRT, which returned slightly larger than RRT.

Memory usage was similar for all algorithms, even with the use of the global planner. The use of processing has increased in all algorithms. Considering the difference in CPU usage between the four tables presented in this section, we can conclude that the proposed global planner uses approximately 200 MHz of processing.
Table V Statistical analysis in indoor environment with global planner

Performing the time analysis in Table III and V , we can recognize the global planner's time in all simulations is approximately 0.04 seconds, regardless of the scenario, with a standard deviation of at most 0.0008. That is, the proposed global planner can return the auxiliary points practically in real-time.

The time of the local planner was faster in all cases when with the proposed global planner. Mainly, for Bi RRT, where the time decreases by 79%. Even, there were cases in which the difference was small-as for Bi A*, the time decreased by only 14%.
Fig. 6.

Bi APF in outdoor environment

Show All
Fig. 7.

Bi APF in indoor environment

Show All

As in the outdoor scenario, in the indoor scenario, when adding the time of the global planner and local planner algorithms with the proposed algorithm, it is less than the time of the local planner when not with our global planner.

As shown in the II-H section, APF and Bi APF would be the most affected algorithms with our global planner as their time complexity depends mainly on the path length. As the proposed algorithm creates several small trajectories, APF and Bi APF were more optimized than the other algorithms.

The use of the proposed global planner increases the CPU usage by approximately 200 MHz. If used to perform simulations on the computer or perform flights where processing takes place on the computer, there will be no problems as it is small processing for a computer. To perform onboard flights is essential to analyze whether the microcontroller will handle an extra 200 MHz.

In indoor and outdoor scenarios, with the proposed global planner, the Bi APF algorithm returned to its trajectory in less time, with the shortest distance. Figures 6 and 7 show the trajectory returned by Bi APF with the global planner in outdoor and indoor scenario, respectively. The trajectories returned in both cases preserve the drone's torque to the maximum, increasing its Jerk. When curves are necessary, they are smoothed-being ideal trajectories for a UAV to follow.
SECTION VI.
Conclusions

This paper proposed a UAV global planner to avoid minimum local and improve autonomous flights for UAVs, focusing on constructing path planning for unstructured environments. Our global planner creates several auxiliary nodes to decrease the complexity of the local planner algorithms. The simulations were performed considering the original classic algorithms and bidirectional ones.

The bidirectional algorithms were faster than the classic algorithms and improved Bi RRT's completeness in an indoor environment. With the proposed global planner, all algorithms' completeness have been improved, making all algorithms find a trajectory in the indoor environment. Moreover, it optimized the local planner algorithms' time from 14% to 91.6%.

The use of memory for original algorithms, bidirectional algorithms, utilizing the proposed global planner, or not, is the same. And, the CPU usage increased by approximately 200 MHz. The time to generate the auxiliary nodes is approximately 0.04 seconds, so even with the local and global planner together, the final path planner time will be less than without the proposed global planner.

This method can be easily implemented in any ROS-based system, as was done with the control system, to do a complete mission. For example, when adding the computer vision and exploration path planning modules to carry out monitoring missions. We intend to develop a 3D global planner for future works.
ACKNOWLEDGMENT

The authors acknowledge Brazilian research agencies CNPq and CAPES for the financial support of this research.

Authors
Figures
References
Citations
Keywords
Metrics
   Back to Results   
More Like This
Dynamic Collision Avoidance Path Planning for Mobile Robot Based on Multi-sensor Data Fusion by Support Vector Machine

2007 International Conference on Mechatronics and Automation

Published: 2007
Multiple mobile robot path planning for rollover prevention and collision avoidance

2011 11th International Conference on Control, Automation and Systems

Published: 2011
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
