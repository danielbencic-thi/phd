1116

IEEE TRANSACTIONS ON CONTROL SYSTEMS TECHNOLOGY, VOL. 25, NO. 3, MAY 2017

3-D Trajectory Planning of Aerial Vehicles Using RRT*
P. Pharpatara, B. Hérissé, and Y. Bestaoui

Abstract— This brief presents a trajectory planning algorithm for aerial vehicles traveling in 3-D space while avoiding obstacles. The nature of the obstacles can be, for example, radar detection areas, cooperating and non-cooperating vehicles, and so on. Thus, it is a complex trajectory planning problem. The proposed planner is based on the optimal rapidly exploring random tree (RRT*) algorithm. Artiﬁcial potential ﬁelds are combined with the RRT* algorithm to accelerate the convergence speed to a suboptimal solution by biasing the random state generation. The performance of this framework is demonstrated on a complex missile application in a heterogeneous environment. Indeed, since the air density decreases exponentially with altitude, the maneuverability of the aerial vehicle depending on aerodynamic forces also decreases exponentially with altitude. To face this problem, the shortest paths of Dubins-like vehicles traveling in a heterogeneous environment are used to build the metric. In the simulation results, this framework can ﬁnd the ﬁrst solution with fewer iterations than the RRT and the RRT* algorithm. Moreover, the ﬁnal solution obtained within a given number of iterations is closer to an optimal solution regarding the considered criterion.
Index Terms— Aerial robotics, complex environment, optimal control, optimal rapidly exploring random tree (RRT*) algorithm, path planning algorithm.
I. INTRODUCTION
T HE DEVELOPMENT of autonomous aerial vehicles, such as drones, missiles, or unmanned combat aerial vehicles together with advances in technology, has led to increasingly complex autonomous tasks. In particular, advances in embedded computing have allowed aerial vehicles to perform complex trajectory planning algorithms on board the vehicle. These planning algorithms have to face not only static and dynamic obstacles, for example, radar detection areas and cooperating and non-cooperating vehicles, but also the changes of an objective task during the mission. Consequently, such embedded algorithms that can be very demanding regarding numerical computations also need to consider real-time constraints. Then, it is of signiﬁcance to solve
Manuscript received November 17, 2015; revised April 6, 2016; accepted June 12, 2016. Date of publication July 7, 2016; date of current version April 11, 2017. Manuscript received in ﬁnal form June 15, 2016. Recommended by Associate Editor L. Marconi.
P. Pharpatara was with ONERA–The French Aerospace Lab, Palaiseau F-91761, France. He is now with The Geo-Informatics and Space Technology Development Agency (Public Organization), Bangkok 10210, Thailand (e-mail: pawit@gistda.or.th).
B. Hérissé is with ONERA–The French Aerospace Lab, Palaiseau F-91761, France (e-mail: bruno.herisse@onera.fr).
Y. Bestaoui is with the Laboratoire Informatique, Biologie Intégrative et Systèmes Complexes, Université d’Evry-Val-d’Essonne, Evry 91020, France (e-mail: yasmina.bestaoui@ufrst.univ-evry.fr).
Color versions of one or more of the ﬁgures in this paper are available online at http://ieeexplore.ieee.org.
Digital Object Identiﬁer 10.1109/TCST.2016.2582144

a trajectory planning problem with a good computational efﬁciency.
A trajectory planning problem can be considered as an optimal control problem leading to a constrained two-point boundary value problem that can be solved using direct or indirect methods [1]. However, solving such a numerical problem can be challenging, especially when obstacles inducing state constraints are considered. Then, other methods have often been preferred, even recently. For example, closed-loop guidance laws [2] relying on a simpliﬁed model of the system can be used to choose waypoints along the path in order to avoid obstacles. However, the performance of such an algorithm remains limited. In particular, global optimality with respect to a given criterion cannot be easily achieved. Model predictive control techniques are also widely used [3] by combining open-loop optimal control with feedback control. These techniques provide a good tradeoff between the computational effort and the global performance of the solution. In the robotic ﬁeld, many trajectory planning methods have been studied. Cell decomposition methods, such as D* [4], and potential ﬁeld methods [5], [6] are used to ﬁnd a trajectory for an aerial vehicle. However, the complexity of the considered system model is often limited using such techniques. Sampling-based path planning methods, such as probabilistic roadmap methods [7] or rapidly exploring random trees (RRTs) [8], have been proposed to ﬁnd collisionfree trajectories in complex environments. These methods are often used for path planning of nonholonomic vehicles in environments cluttered by obstacles [9]. It is demonstrated in [10] that this method can be applied to trajectory planning for a two-stage interceptor missile. However, using only the RRT algorithm, an optimal solution cannot be obtained efﬁciently regarding a speciﬁed criterion. Recently, a new algorithm called optimal rapidly exploring random tree (RRT*) [11] has been developed to overcome the optimality problem. Moreover, since it is an incremental algorithm that keeps searching for better solutions, it is ideally suited for real-time applications that need a valid result on-demand. This algorithm has also been extended to systems with differential constraints, such as the nonholonomic constraints [12]. Thus, the asymptotic optimality of the RRT* can be ensured for aerial vehicles, such as airplanes or missiles.
In this brief, a general framework for the trajectory planning algorithm of aerial vehicles traveling in a 3-D space while avoiding obstacles is proposed based on the RRT* algorithm in [11]. In this framework, nonholonomic constraints of such vehicles are considered and artiﬁcial potential ﬁelds (APFs) [13], [14] are integrated to bias the random

1063-6536 © 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

PHARPATARA et al.: 3-D TRAJECTORY PLANNING OF AERIAL VEHICLES USING RRT*

1117

Fig. 1. Vehicle model.

sampling to accelerate the convergence speed to both the ﬁrst solution and the asymptotic optimal solution. Indeed, it is fascinating to obtain the ﬁrst trajectory quickly if the objective is to make the algorithm run in real time. Moreover, the approach is designed so that it can easily be combined with other probabilistic methods aiming at improving convergence speed, such as the informed-RRT* [15] or the RRT*-SMART [16] for example. Note that there are very few works that use similar strategies (see [17] for an example) and they often address holonomic problems only. Convergence assumptions discussed in [11] to ensure asymptotic convergence are recalled in the context of nonholonomic systems.
To illustrate the approach, a missile application is presented. Since the maneuverability of such a vehicle decreases with altitude [18], making it hard to predict the trajectory, it is a challenging problem. It extends the work in [18] which solves the 2-D problem for this speciﬁc application. Simulation results demonstrate that the algorithm can efﬁciently ﬁnd a feasible near-optimal trajectory.
This paper is organized as follows. First, environment, system modeling, and problem formulation are presented in Section II. Then, the RRT* path planner is introduced in Section III along with the integration of the APF in the algorithm. Next, an application of the RRT* framework is described in Section IV as an example. Then, the simulation results are shown, compared with the existing algorithms, and analyzed in Section V. Finally, some concluding remarks are made in Section VI.

II. PROBLEM STATEMENT

A. System Modeling

In this brief, the aerial vehicle is modeled as a rigid body of

mass m. Three frames (Fig. 1) are introduced to describe the

motion of the vehicle: an earth-centered earth-ﬁxed reference

frame I centered at point O and associated with the basis

vectors (i, j, k); a body-ﬁxed frame B attached to the vehicle

at its center of mass Cg with the basis vector (e1b, e2b, e3b);

and a velocity frame V attached to the vehicle at Cg with

the of

basis vector (e1v , e2v , e3v ), the vehicle is denoted v

where the translational velocity = ve1v and v is the speed of

the vehicle. Position and velocity deﬁned in I are denoted

ξ = (x, y, z) ∈ R3 and v = (x˙, y˙, z˙) ∈ R3. Denote

γ and χ the orientation with respect to I of the velocity v,

where γ is the ﬂight path angle and χ is the azimuth

angle.

The dynamics of the aerial vehicle can be written as

⎧

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨zxy˙˙˙ v˙

= = =
=

v cos γ v cos γ v sin γ
−g sin

cos χ sin χ
γ + Fa1

+

Fp1

+

T1

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩γχ˙˙

= =

−

g v

cos γ

Fa2

m mm + Fa3 + Fp3 + T3
mv mv mv + Fp2 + T2

(1)

mv cos γ mv cos γ mv cos γ

where γ ∈ [−π/2, π/2] and χ ∈ [−π, π ]. T1, T2, and T3 are the components of the propulsion, Fa1 , Fa2 , and Fa3 are the components of the aerodynamic forces, including the drag
force fD and the lift forces fL2 and fL3 expressed as follows:

fD

=

−

1 2

ρ

(z)S

C

D

va

va

fL2

=

1 2

ρ

(z

)SC

L

2

va2

e2va

fL3

=

−

1 2

ρ

(z

)

SC

L

3

va2

e3va

where CD, CL2 , and CL3 are the aerodynamic coefﬁcients, S is the surface of reference, ρ(z) is the density of air, and va is the absolute value of the air velocity va expressed as va = v − vw, where vw is the wind velocity. e2va and e3va are the two unit vectors perpendicular to va. Note that if vw = 0, e2va = e2v and e3va = e3v . The forces Fp1 , Fp2 , and Fp3 include other perturbation forces acting on the aircraft.
For the control of the vehicle, the aerodynamic forces fL2 and fL3 as well as the propulsion forces (T1, T2, T3) are used.
For the environment modeling, the U.S. Standard
Atmosphere, 1976 (U.S.-76) can be used. In the lower earth atmosphere (altitude < 35 km), the density of air ρ and atmospheric pressure decreases exponentially with altitude and
approach zero around 35 km. As we consider an unmanned
aerial vehicle with aerodynamic ﬂight controls, the maneuver-
ing capabilities are linked to the density of air and approach
zero at 35 km.

B. Problem Formulation
Let x(t) = (ξ , v, γ , χ) ∈ X = R6 be the measurable state of the system and u ∈ U be a control input in the set U of admissible controls including aerodynamic and propulsive forces as described in Section II-A. Then, the differential system (1) can be rewritten as

x˙ = f(x, u)

(2)

where f is the vehicle system model. X = R6 is the state space. It is divided into two subsets.
Let Xfree be the set of admissible states. Xobs = X \ Xfree is deﬁned as the obstacle region. The initial state of the system is xinit ∈ Xfree.
The path planning algorithm is given a rendezvous set Xgoal ⊂ Xfree. In order to achieve its mission, the vehicle

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

1118

IEEE TRANSACTIONS ON CONTROL SYSTEMS TECHNOLOGY, VOL. 25, NO. 3, MAY 2017

has to reach Xgoal while avoiding obstacles and minimizing a performance criterion J deﬁned as

tf

J (t0, t f , u) =

f 0(x(t), u(t)) dt + k(x(t f ))

(3)

t0

where f 0 : R6 × R3 → R and k : R6 → R are C1 [1]. Note that if the minimal time problem is considered, f 0 = 1 and
k = 0 are chosen, and if the minimal maximum ﬁnal speed is considered, f 0 = 0 and k = −v(t f ) are chosen.
To sum up, the motion planning problem is to ﬁnd
a collision-free trajectory x(t) : [0, t f ] → Xfree with x˙ = f(x, u), that starts at xinit, reaches the goal region Xgoal, i.e., x(0) = xinit and x(t f ) ∈ Xgoal and minimizes the cost
function J .

Algorithm 1 RRT* Path Planner

III. MOTION PLANNING FRAMEWORK
A. Optimal Rapidly Exploring Random Trees or RRT*
RRT* [11], [12] is an incremental method designed to explore efﬁciently nonconvex high-dimensional spaces by growing the search tree toward large Voronoi areas [19] with the asymptotic optimality property, i.e., almost-sure convergence to an optimal solution. The principle of the RRT* as a path planner is described in Algorithm 1.
Let G be the exploration tree, V be the set of vertices of the tree, E be the set of connecting edges of the tree, and cost({(x1, x2)}) be the minimal cost from x1 to x2 according to the speciﬁed criterion J deﬁned in (3). Let cost(x) also be the total cost to arrive at x, that is cost(x) = cost({(xinit, x)}).
First, the initial state xinit is added to the tree G. Then, a state xrand ∈ Xfree is either generated randomly or with help of some heuristics. In this brief, APFs are used as a heuristic (see Section III-B). The nearest_neighbor function (see Section III-C) searches the tree G for the nearest vertex to xrand according to a user-deﬁned metric d. This state is called xnearest. In steer function, a control input u∗ is selected according to the speciﬁed criterion, i.e., such that J (tnearest, trand, u∗) is minimized.
Then, the system model is integrated from tnearest to trand, to ﬁnd a new state xnew, that is
xnew = xnearest + trand f (x, u∗) dt.
tnearest
A collision test (collision_free_path function) is performed: if xnew and the path between xnearest and xnew lie in Xfree, then xnew is added in V .
Next, the RRT* algorithm tries to ﬁnd a better parent for xnew, that is a parent providing a lower cost to xnew than xnearest. The near_vertices_parents function in line 16 will search the tree G for a set of other potential parents in a neighborhood Xnear ⊂ V of xnew (see Section III-D). The state xmin ∈ Xnear ∪ {xnearest} that is collision-free and minimizes the cost to xnew is chosen to be its new parent. Therefore, the connecting edge from xmin to xnew is added in E.
Afterward, the near_vertices_children function in line 18 will search the tree G for a set of potential children in a neighborhood Xnear ⊂ V of xnew (see Section III-D).

For each xnear ∈ Xnear, if the cost to xnear passing by xnew is better than cost(xnear) and the path is collision-free, then the rewire function will replace the existing connecting edge by
the connecting edge from xnew to xnear.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

PHARPATARA et al.: 3-D TRAJECTORY PLANNING OF AERIAL VEHICLES USING RRT*

1119

These steps are repeated until the algorithm reaches K iterations. Thus, the RRT* algorithm will improve the optimality of the solution over time even after the ﬁrst solution is found.

B. State Generation Using Artiﬁcial Potential Fields or APF

The random state xrand is generally generated by a uniform distribution in such a way that xrand ∈ Xfree. In this brief, a biased random state generation using APFs [13], [14] is introduced.
The APF is a reactive approach where trajectories are not generated explicitly. Instead, the environments generate some forces leading the vehicle to the destination. However, problems, such as local minima and oscillatory movement, can make the goal nonreachable.
The APF can be used to direct xrand to Xgoal, i.e., the orientation (γ , χ ) of xrand is generated using the APF. By combining with the RRT*, the disadvantages of the APF can be solved by the randomness of the RRT*, i.e., the vehicle leaves the local minima by trying to go to xrand [20], [21]. At the same time, it is expected that the APF also increases the rate of convergence to the optimal solution.
An artiﬁcial vector fAPF used to direct the vehicle is induced by an artiﬁcial potential U ∈ R, i.e., fAPF = −∇U ∈ R3. The potentials can be deﬁned in several ways according to the characteristics of the mathematical functions. In this brief, the following artiﬁcial potentials and vectors are used.
1) The repulsive potential [14] is usually used around an obstacle for the vehicle to avoid it. It can also be used to guide the vehicle away from the initial state. The repulsive potential and force can be expressed as

1

1

Uinit = 2 Kinit ||ξ − ξ init||22

(4)

finit

=

K

init

ξ ||ξ

− ξ init − ξ init||42

(5)

where Uinit and finit are the repulsive potential and vector ﬁeld centered at ξ init and Kinit is a constant. 2) The attractive potential, opposing to the repulsive poten-
tial, is used to direct the vehicle to the desired des-
tination. The attractive potential and force can be
expressed as

Ugoal

=

−

1 2

K

goal

||ξ

−

1 ξ goal||22

(6)

fgoal

=

−

Kgoal

ξ ||ξ

− ξ goal − ξ goal||42

(7)

where Ugoal and fgoal are the attractive potential and vector ﬁelds centered at ξ goal and Kgoal is a constant. 3) The rotational vector ﬁeld [22] is used instead of the
repulsive potential to guide the vehicle around the obsta-
cles in order to reduce the local minimum problem. In Fig. 2, let ξ obsc denote the center of gravity of an obstacle, Sobs denote the set of the obstacle surface, dobs denote a maximum distance of inﬂuence from the obstacle, robs denote the shortest distance of the

Fig. 2. Example of rotational vector ﬁeld around the obstacle.

vehicle from the obstacle, and t, σ , λ are unit vectors deﬁned as

σ = ξ goal − ξ obsc ||ξ goal − ξ obsc ||

λ

=

ξ ||ξ

− ξ obs − ξ obs||

t

=

λ × (σ ||λ × (σ

× ×

λ) λ)||

.

Remark 1: If λ is collinear to σ , t can be chosen arbitrarily. In that case, the most simple solution is to choose a random t perpendicular to λ. Other strategies could also be adopted. The vector ﬁeld function can be deﬁned as

fobs = Kobs

dobs − robs robs

t,

robs ≤ dobs

(8)

fobs = 0, robs > dobs

(9)

where ξ obs ∈ Sobs is the nearest point of an obstacle

to ξ and Kobs is a constant. Note that for a spherical

obstacle,

λ

=

ξ ||ξ

−ξ −ξ

obsc obsc

||

.

Thus, the summation of artiﬁcial vector ﬁelds expressed as

n

fAPF = fi = fgoal + finit + fobs

(10)

i =1

is used as a basis to generate (γrand, χrand) of xrand. Thus, the random_state function generates a random
state xrand ∈ Xfree by using the uniform distribution as in the original algorithm. The orientation of the randomly generated
state is biased toward the destination using the direction of
fAPF with a given margin, that is, xrand is chosen in the convex cone shown in Fig. 3 pointing toward fAPF with apex ξ rand and apex angle 2φAPF. This makes that our approach differs from [17] as their approach uses fAPF to update the position of the generated xrand before using it and the orientations are not considered. Moreover, a bias toward the goal, used
in RRT-GoalBias [9], is also used to increase the rate of convergence to a solution. It consists in choosing xrand ∈ Xgoal with a probability p.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

1120

IEEE TRANSACTIONS ON CONTROL SYSTEMS TECHNOLOGY, VOL. 25, NO. 3, MAY 2017

The shortest 3-D Dubins’ path in a heterogeneous environment as the user-deﬁned metric d (see [25] for details) is used. This shortest 3-D Dubins’ path was speciﬁcally developed for missile applications. In Sections IV-A–IV-C, the problem statement of the case study is described. Then, the use of Dubins’s metric is explained.

Fig. 3. Deﬁnition of convex cone C(x, φ).
C. nearest_neighbor
The nearest state xnear to xrand is determined by a metric. The Euclidean metric is often used in such an algorithm. It ﬁnds the shortest line-of-sight distance between two states. Moreover, the kd-tree [23] can be used to enhance the robustness of the algorithm. Thus, it is fast and easy to implement. However, for a nonholonomic vehicle, the Euclidean metric is not appropriate for several reasons. The main reason is that it does not consider the orientation of the vehicle. A suitable metric can be, for example, based on the shortest Dubins’ path used in [24] even if it does not perfectly ﬁt the vehicle model. Another suitable metric can be, for example, based on Bézier curves or other methods based on a simpliﬁed suboptimal trajectory calculation. Although more complex to compute, the most interesting metric in our framework consists in considering the cost from xnear to xrand, i.e., cost({(xnear, xrand)}).
D. near_vertices
In the RRT* algorithm described in [11] and [12], the near_vertices function uses the same metric function as nearest_neighbor function to determine the neighborhood Xnear of the state x. This function searches for the vertices in a reachable set containing a ball, centered at x, of volume λ1 ln(n)/n, where n is the number of vertices in V and λ1 is a positive constant chosen appropriately to ensure asymptotic optimality.
In the present framework, the k-nearest neighbors algorithm is used to determine a set of near vertices Xnear of the state x. It selects the ﬁrst k-nearest vertices according to the user-deﬁned metric d and returns them to the set Xnear. To ensure asymptotic optimality, k(n) is chosen such that k(n) > λ2 ln(n), where λ2 is a positive constant (see the Appendix for more details).
The original near_vertices function is divided into two functions in this brief: near_vertices_parents function in line 16, and near_vertices_children function in line 18. The ﬁrst one searches for the k-nearest vertices to arrive at xnew, while the latter one searches for the k-nearest vertices from xnew to other vertices.
This APF-biased framework is expected to be able to ﬁnd a feasible near-optimal solution with less number of iterations than the existing RRT* algorithm. This will be demonstrated in simulations in Section V for the application considered in Section IV.
IV. APPLICATION
The performance of the previously mentioned framework is demonstrated using the application of an interceptor missile.

A. System Modeling

A simpliﬁed hypersonic vehicle is used to simulate results.

In this brief, an unpowered interceptor missile during mid-

course phase is chosen. For a hypersonic missile, wind speed has such a negligible effect to the system that a zero wind

assumption is applied. Then, the translational velocity v is

assumed to coincide with the apparent velocity. Besides,

a hypersonic missile is studied. Thus, the gravity can be

neglected, which is a strong hypothesis that is only valid

for missile-like aircraft ﬂying with a high Mach number in

a short distance. Moreover, the drag can be ignored, since the

objective is to ﬁnd the shortest path between two states, i.e., the path of minimum length. Thus, the dynamics of the velocity

does not need to be considered. Moreover, the aerodynamic

coefﬁcient CL2 is equal to CL3 , because an axisymmetric missile is considered here.

By simplifying (1) according to the mentioned conditions

and applying a change of variables from t to curvilinear

abscissa s(t) =

t 0

v(u) du,

the

dynamics

of

a

Dubins-like

aerial vehicle can be written as

⎧ ⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨xy

= dx ds
= dy ds dz

= cos γ cos χ = cos γ sin χ

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩χγz

= = sin γ

ds

dγ 1

= ds = 2m ρ(z)SCLmax μ = c(z)μ,

=

dχ ds

=

1 2m

ρ

(z

)

SC

L

max

η cos

γ

=

c(z)

η cos

γ

(11)

where CLmax is the maximum lift coefﬁcient, μ and η are the normalized control inputs bounded by condition (μ2 + η2)1/2 ≤ 1, ρ(z) is the air density, and c(z) is the
maximum path curvature of the vehicle. Note that μ and η

are directly related the angle of attack and the sideslip angle. The simpliﬁed air density function can be expressed as

ρ(z) = ρ0e−z/zr

(12)

where ρ0 is the air density at standard atmosphere at sea level and zr is a reference altitude.
As a consequence, the path curvature can be written in the
same way as

c(z) = c0e−z/zr .

(13)

where c0 is the maximum curvature at sea level. At this point, it can be noticed that the maneuverability of the vehicle is exponentially decreasing with altitude, since c(z) is exponentially decreasing. Thus, it is a challenging problem to control such a vehicle at high altitude.
Remark 2: Our objective is to ﬁnd a reference trajectory for such a vehicle. It is meant to follow the reference trajectory

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

PHARPATARA et al.: 3-D TRAJECTORY PLANNING OF AERIAL VEHICLES USING RRT*

1121

with its controller. Therefore, the elements related to the controller [26], such as model uncertainties and measurement errors, are not considered here.

B. Problem Formulation

In this application, x = (ξ , γ , χ) ∈ X = R5 is the measurable state of the system and u = (μ, η) ∈ U is an admissible control input. The set of admissible control inputs is deﬁned as

U = {u ∈ R2 : ||u|| ≤ 1}.

(14)

The differential system (11) is rewritten as

x = f(x, u).

(15)

The obstacle region Xobs is deﬁned by the exploration space occupied by no-ﬂy zones such as city areas and radar detection
zones, and the set of admissible states is the remaining of the exploration space, i.e., Xfree = X \ Xobs.
The path planning starts at the initial state xinit ∈ Xfree. The destination of the path planning is given by a rendezvous set Xgoal ⊂ Xfree and deﬁned as

Xgoal = Pgoal × Vgoal

(16)

where Pgoal is the set of the desired arrival positions and Vgoal is the set of the desired orientations of the vehicle. In this application, they are deﬁned as

Pgoal = {ξ rdv} Vgoal = {(γ , χ ) ∈ R2 : (γ , χ ) ∈ C(xrdv, φ f )} (17)

where xrdv is the rendezvous state, and C(xrdv, φ f ) is the convex cone (see Fig. 3) pointing toward the orientation of

the vehicle deﬁned by γrdv and χrdv with apex ξ rdv and apex angle 2φ f , where φ f is a maximal acceptable orien-

tation error deﬁned by the detection range of the embedded

radar or infrared sensor.

The objective of path planning algorithm is to ﬁnd a

collision-free trajectory x(s) : [0, s f ] → Xfree with x = f(x, u), that starts at xinit, reaches the goal region Xgoal, i.e., x(0) = xinit and x(s f ) ∈ Xgoal and minimizes the cost

function

sf

J = ds.

(18)

0

C. Dubins’ Paths for the Metric
Interestingly, the shortest 3-D Dubins’ path in a heterogeneous environment developed in [25] solves the optimal problem (18) for the considered model (11) provided that the environment is not cluttered with obstacles. In presence of obstacles, it can still provide locally optimal solutions. That is the reason why the proposed metric is based on this path.
There are two cases to consider when using Dubins’ paths as the user-deﬁned metric d.
1) xrand ∈/ Xgoal: The shortest CSC (curve-segment-curve) path is used to calculate the nearest neighbor.
2) xrand ∈ Xgoal: Since Xgoal is a set, it is more interesting to consider the shortest path between each x ∈ G and Xgoal than considering a single xrand ∈ Xgoal.

Fig. 4. Illustration of the scenario.
Indeed, there can exist a shortest path to another element of Xgoal than the shortest path to xrand. To this manner, the degenerated form (CS) of CSC path needs to be considered ﬁrst. Indeed, if the shortest path to the set Xgoal is a CS path, then it arrives with the orientation within the arrival cone C, and thus, the expected shortest path is this CS path. If no CS path arrives in C, the shortest path is necessarily a CSC path whose arrival orientation is one of the extremities of the arrival cone C. Thus, for each x ∈ G, the approach ﬁrst consists in ﬁnding the shortest CS path to the desired ﬁnal position, i.e., ξ rand = ξ rdv. If the ﬁnal orientation is in the arrival cone, it is the expected solution. If not, the solution is the shortest CSC path to one of the extremities of Xgoal.
V. SIMULATION RESULTS
Simulation results are obtained using MATLAB. The scenario shown in Fig. 4 is considered with the following conﬁgurations: the initial state xinit = (1 km, 1 km, 1 km, π/2, 0)
Xgoal = Pgoal × Vgoal Pgoal = {ξ rdv} Vgoal = {(γ , χ ) ∈ R2 : (γ , χ ) ∈ C(xrdv, 5°)} (19)
with xrdv = (90 km, 90 km, 25 km, 0, −π/8) . In Fig. 4, the arrows represent the orientations of the initial
state xinit and of the rendezvous state
xrdv = ξ rdv, γrdv, χrdv .
Xobs is represented by the 3-D shaded surfaces (in gradient color). The nature of obstacles can be no-ﬂy zones, such as the area above and around cities, which are represented by cylinders and radar detection zones which are represented by a half sphere.
Here, three different algorithms are considered: 1) RRT; 2) RRT*; 3) RRT* biased by APF with a given margin for the
orientation of the randomly generated state xrand of 10° (φAPF = 10°). For all algorithms, a bias toward the goal consisting in generating xrand ∈ Xgoal with a probability p = 0.1 is used. Moreover, the Dubins’ path is used for the metric as mentioned in Section IV-C.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

1122

IEEE TRANSACTIONS ON CONTROL SYSTEMS TECHNOLOGY, VOL. 25, NO. 3, MAY 2017

Fig. 5. Exploration trees and results after 1000 iterations of RRT algorithm: path length 200 km.

In the following ﬁgures, the exploration tree is represented in light gray and thick solid curve is the ﬁnal solution found by the algorithms. Fig. 5 shows a result obtained after 1000 iterations by the RRT algorithm. It shows that the RRT algorithm is capable of ﬁnding a solution for the problem. However, the obtained trajectory is clearly not the shortest since some loops and turns can be observed. This is because no optimality criteria are considered by the RRT. Moreover, no reconnection is done to improve the path quality.
The other two algorithms are employed on the same scenario. Fig. 6 shows one of the best results obtained by the RRT* and by the RRT* biased by APF after 200 iterations. As we can see from the results, the RRT* algorithm can ﬁnd a better solution than the RRT. In Fig. 6, the difference between the two RRT* algorithms is that the exploration tree of the RRT* biased by APF [see Fig. 6(b)] tends toward the destination, while the other one expands in every direction [see Fig. 6(a)].
For the in-depth analysis, for each algorithm, 100 Monte Carlo simulations within 200 iterations are simulated to obtain statistic results. Here, the computational efﬁciency is compared using the number of iterations rather than the computing time, since the code is not fully optimized (MATLAB implementation) to assess its real-time ability. Moreover, the computational effort is mostly spent by the metric function, which can still be optimized. The average iteration needed to obtain the ﬁrst solution, the average length of the ﬁrst solution, and the average length of the ﬁnal solution are observed in Table I.
According to the statistic results in Table I, the ﬁrst solution can be obtained at almost the same iteration for both RRT and RRT* algorithms. Note also that the optimality of the ﬁnal solution of the RRT* improves with respect to the number of iterations. The RRT* biased by APF is the fastest to ﬁnd the ﬁrst solution. On top of that, both ﬁrst and ﬁnal solutions are closer to the optimal solution than the others. The reason is that the heuristic consisting in using the APF helps to bias the search toward the feasible and optimal solutions rather than blindly search the exploration space, i.e., increase the probability of reconnection of the RRT*. Obviously, the RRT* can achieve the same ﬁnal performance if more iterations are given.

Fig. 6. Exploration trees and results after 200 iterations. (a) RRT*: path length 140.36 km. (b) RRT* biased by APF: path length 139.89 km.
TABLE I RESULTS OF 100 MONTE CARLO SIMULATIONS WITHIN 200 ITERATIONS
Monte Carlo simulations of several scenarios, which are not shown here, have also been simulated. For less complex scenarios, i.e., fewer obstacles, the results of the RRT* and the RRT* biased with APF are mostly the same. Since there are few obstacles, the algorithms converge rapidly, because the probability of reconnection is already high. Thus, it is reasonable that the performance does not improve as much in less complex environments for nonholonomic problems.
VI. CONCLUSION In this brief, an efﬁcient trajectory planning framework for aerial vehicles traveling in 3-D space while avoiding obstacles is presented. The algorithm is based on the RRT* algorithm to ﬁnd a near-optimal trajectory. Moreover, the APF is integrated into the algorithm to accelerate the convergence speed to the optimal solution. The capability of this framework is

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

PHARPATARA et al.: 3-D TRAJECTORY PLANNING OF AERIAL VEHICLES USING RRT*

1123

demonstrated on a missile application. The shortest Dubins’ paths in a heterogeneous environment are used for the metric. As a result, the approach shows a good performance in simulation results. Compared with the RRT and the RRT* algorithms, better solutions are found with less number of iterations due to the integration of the APF. Although the computational complexity of this method is not rigorously analyzed in this brief, real-time constraints will be easier to verify if the algorithm is implemented on board and the vehicle as less number of iterations is required to ﬁnd a solution. Moreover, it is important to notice that the algorithm is anytime, since the ﬁrst admissible solution can be obtained pretty fast, the remaining computing resources being only used to improve the optimality. This property is very interesting for real-time applications. In future work, replanning will be considered to improve the performance of the algorithm in case of dynamic environment or changes in the mission.
APPENDIX CONVERGENCE ANALYSIS
In this section, a set of sufﬁcient conditions is proposed to guarantee the convergence of the RRT* algorithm for the aerial vehicle path planning. As stated in [11], local controllability of the system, as well as the existence of an optimal trajectory with sufﬁcient free space in its neighborhood, is necessary conditions to ensure asymptotic optimality of the RRT* algorithm. Since the aerial system considered in this brief is assumed to be controllable in its domain of use, local controllability is guaranteed. Therefore, it is only required to assume that there exists an optimal trajectory with free space around it, as explained thoroughly in [11]. Thus, completeness and almost-sure convergence are allowed. The APF bias that is used in the framework does not contradict this assumption, since a given margin φAPF described in Section III-B is used for the uniform state generation. Indeed, to ensure free space in the neighborhood, it is only required that any states x on the optimal path are in the convex cone C(xAPF, φAPF) (see Fig. 3 for a deﬁnition of C), where xAPF is a state on the vector ﬁeld at position ξ (ξ APF = ξ ).
To ensure asymptotic optimality, the near_vertices function needs to be analyzed. In [11], it is shown that if the area of research contains a ball of volume λ1 ln(n)/n, λ1 > 0, then the almost-sure convergence is ensured provided that λ1 is sufﬁciently large. If the k-nearest neighbors algorithm is used, k needs to verify k > λ2 ln(n), λ2 > 0. Indeed, since a uniform distribution is used for the state generation, the expected number of vertices contained in a ball of volume λ1 ln(n)/n after iteration n is λ1 ln(n)/λ0, where λ0 is the total volume of the free space. The proof is straightforward since the number of vertices contained in the ball follows a binomial distribution with parameters n and λ1 ln(n)/λ0 n. Thus, intuitively, both techniques are equivalent and choosing k > λ1 ln(n)/λ0 for the k-nearest neighbors algorithm ensures asymptotic optimality. A thorough proof can be found in [12].
REFERENCES
[1] E. Trélat, “Optimal control and applications to aerospace: Some results and challenges,” J. Optim. Theory Appl., vol. 154, no. 3, pp. 713–758, 2012.

[2] C.-F. Lin, Modern Navigation, Guidance, And Control Processing. Upper Saddle River, NJ, USA: Prentice-Hall, 1991.
[3] H. J. Kim, D. H. Shim, and S. Sastry, “Nonlinear model predictive tracking control for rotorcraft-based unmanned aerial vehicles,” in Proc. Amer. Control Conf., vol. 5. 2002, pp. 3576–3581.
[4] J. Carsten, D. Ferguson, and A. Stentz, “3D ﬁeld D∗: Improved path planning and replanning in three dimensions,” in Proc. IEEE Int. Conf. Intell. Robots Syst., Oct. 2006, pp. 3381–3386.
[5] R. Daily and D. M. Bevly, “Harmonic potential ﬁeld path planning for high speed vehicles,” in Proc. Amer. Control Conf., 2008, pp. 4609–4614.
[6] X. Chen and J. Zhang, “The three-dimension path planning of UAV based on improved artiﬁcial potential ﬁeld in dynamic environment,” in Proc. Int. Conf. Intell. Human-Mach. Syst. Cybern., 2013, pp. 144–147.
[7] L. E. Kavraki, P. Svestka, J.-C. Latombe, and M. H. Overmars, “Probabilistic roadmaps for path planning in high-dimensional conﬁguration spaces,” IEEE Trans. Robot. Automat., vol. 12, no. 4, pp. 566–580, Aug. 1996.
[8] S. M. LaValle, Planning Algorithms. Cambridge, U.K.: Cambridge Univ. Press, 2006.
[9] S. M. LaValle and J. J. Kuffner, Jr., “Randomized kinodynamic planning,” Int. J. Robot. Res., vol. 20, no. 5, pp. 378–400, 2001.
[10] P. Pharpatara, R. Pepy, B. Hérissé, and Y. Bestaoui, “Missile trajectory shaping using sampling-based path planning,” in Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst., Nov. 2013, pp. 2533–2538.
[11] S. Karaman and E. Frazzoli, “Optimal kinodynamic motion planning using incremental sampling-based methods,” in Proc. IEEE Conf. Decision Control, Dec. 2010, pp. 7681–7687.
[12] S. Karaman and E. Frazzoli, “Sampling-based algorithms for optimal motion planning,” Int. J. Robot. Res., vol. 30, no. 7, pp. 846–894, 2011.
[13] J. R. Andrews and N. Hogan, “Impedance control as a framework for implementing obstacle avoidance in a manipulator,” in Proc. ASME Winter Annu. Meeting Control Manuf. Process. Robot. Syst.. 1983, pp. 243–251.
[14] O. Khatib, “Real-time obstacle avoidance for manipulators and mobile robots,” in Proc. IEEE Int. Conf. Robot. Autom., Mar. 1985, pp. 500–505.
[15] J. D. Gammell, S. S. Srinivasa, and T. D. Barfoot, “Informed RRT∗: Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic,” in Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst., Sep. 2014, pp. 2997–3004.
[16] F. Islam, J. Nasir, U. Malik, Y. Ayaz, and O. Hasan, “RRT∗-smart: Rapid convergence implementation of RRT∗ towards optimal solution,” in Proc. IEEE Int. Conf. Mechatronics Autom., Aug. 2012, pp. 1651–1656.
[17] A. H. Qureshi, K. F. Iqbal, S. M. Qamar, F. Islam, Y. Ayaz, and N. Muhammad, “Potential guided directional-RRT∗ for accelerated motion planning in cluttered environments,” in Proc. IEEE Int. Conf. Mechatronics Autom., Aug. 2013, pp. 519–524.
[18] P. Pharpatara, B. Hérissé, R. Pepy, and Y. Bestaoui, “Shortest path for aerial vehicles in heterogeneous environment using RRT∗,” in Proc. IEEE Int. Conf. Robot. Autom., May 2015, pp. 6388–6393.
[19] G. Voronoi, “Nouvelles applications des paramétres continus à la théorie des formes quadratiques,” J. fur die Reine und Angewandte Math., vol. 133, pp. 97–178, 1908.
[20] J. Barraquand and J.-C. Latombe, “A Monte-Carlo algorithm for path planning with many degrees of freedom,” in Proc. IEEE Int. Conf. Robot. Autom., vol. 3. May 1990, pp. 1712–1717.
[21] J. Barraquand and J.-C. Latombe, “Robot motion planning: A distributed representation approach,” Int. J. Robot. Res., vol. 10, no. 6, pp. 628–649, 1991.
[22] P. Falstad. (Feb. 2014). 3-D Vector Fields Applet. [Online]. Available: http://www.falstad.com/vector3d/directions.html
[23] J. L. Bentley, “Multidimensional binary search trees used for associative searching,” Commun. ACM, vol. 18, no. 9, pp. 509–517, 1975.
[24] L. E. Dubins, “On curves of minimal length with a constraint on average curvature, and with prescribed initial and terminal positions and tangents,” Amer. J. Math., vol. 79, no. 3, pp. 497–516, 1957.
[25] P. Pharpatara, B. Hérissé, and Y. Bestaoui, “3D-shortest paths for a hypersonic glider in a heterogeneous environment,” in Proc. IFAC Workshop Adv. Control Navigat. Auto. Aerosp. Vehicles, 2015, pp. 186–191.
[26] E. Devaud, H. Siguerdidjane, and S. Font, “Some control strategies for a high-angle-of-attack missile autopilot,” Control Eng. Pract., vol. 8, no. 8, pp. 885–892, 2000.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:08:55 UTC from IEEE Xplore. Restrictions apply.

