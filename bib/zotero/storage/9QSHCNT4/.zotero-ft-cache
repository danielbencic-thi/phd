IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 41%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Journals & Magazines > IEEE Transactions on Control ... > Volume: 25 Issue: 3
3-D Trajectory Planning of Aerial Vehicles Using RRT*
Publisher: IEEE
Cite This
PDF
P. Pharpatara ; B. Hérissé ; Y. Bestaoui
All Authors
36
Paper
Citations
1507
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Statement
    III.
    Motion Planning Framework
    IV.
    Application
    V.
    Simulation Results

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Abstract:
This brief presents a trajectory planning algorithm for aerial vehicles traveling in 3-D space while avoiding obstacles. The nature of the obstacles can be, for example, radar detection areas, cooperating and non-cooperating vehicles, and so on. Thus, it is a complex trajectory planning problem. The proposed planner is based on the optimal rapidly exploring random tree (RRT*) algorithm. Artificial potential fields are combined with the RRT* algorithm to accelerate the convergence speed to a suboptimal solution by biasing the random state generation. The performance of this framework is demonstrated on a complex missile application in a heterogeneous environment. Indeed, since the air density decreases exponentially with altitude, the maneuverability of the aerial vehicle depending on aerodynamic forces also decreases exponentially with altitude. To face this problem, the shortest paths of Dubins-like vehicles traveling in a heterogeneous environment are used to build the metric. In the simulation results, this framework can find the first solution with fewer iterations than the RRT and the RRT* algorithm. Moreover, the final solution obtained within a given number of iterations is closer to an optimal solution regarding the considered criterion.
Published in: IEEE Transactions on Control Systems Technology ( Volume: 25 , Issue: 3 , May 2017 )
Page(s): 1116 - 1123
Date of Publication: 07 July 2016
ISSN Information:
INSPEC Accession Number: 16759985
DOI: 10.1109/TCST.2016.2582144
Publisher: IEEE
SECTION I.
Introduction

The Development of autonomous aerial vehicles, such as drones, missiles, or unmanned combat aerial vehicles together with advances in technology, has led to increasingly complex autonomous tasks. In particular, advances in embedded computing have allowed aerial vehicles to perform complex trajectory planning algorithms on board the vehicle. These planning algorithms have to face not only static and dynamic obstacles, for example, radar detection areas and cooperating and non-cooperating vehicles, but also the changes of an objective task during the mission. Consequently, such embedded algorithms that can be very demanding regarding numerical computations also need to consider real-time constraints. Then, it is of significance to solve a trajectory planning problem with a good computational efficiency.

A trajectory planning problem can be considered as an optimal control problem leading to a constrained two-point boundary value problem that can be solved using direct or indirect methods [1] . However, solving such a numerical problem can be challenging, especially when obstacles inducing state constraints are considered. Then, other methods have often been preferred, even recently. For example, closed-loop guidance laws [2] relying on a simplified model of the system can be used to choose waypoints along the path in order to avoid obstacles. However, the performance of such an algorithm remains limited. In particular, global optimality with respect to a given criterion cannot be easily achieved. Model predictive control techniques are also widely used [3] by combining open-loop optimal control with feedback control. These techniques provide a good tradeoff between the computational effort and the global performance of the solution. In the robotic field, many trajectory planning methods have been studied. Cell decomposition methods, such as D* [4] , and potential field methods [5] , [6] are used to find a trajectory for an aerial vehicle. However, the complexity of the considered system model is often limited using such techniques. Sampling-based path planning methods, such as probabilistic roadmap methods [7] or rapidly exploring random trees (RRTs) [8] , have been proposed to find collision-free trajectories in complex environments. These methods are often used for path planning of nonholonomic vehicles in environments cluttered by obstacles [9] . It is demonstrated in [10] that this method can be applied to trajectory planning for a two-stage interceptor missile. However, using only the RRT algorithm, an optimal solution cannot be obtained efficiently regarding a specified criterion. Recently, a new algorithm called optimal rapidly exploring random tree (RRT*) [11] has been developed to overcome the optimality problem. Moreover, since it is an incremental algorithm that keeps searching for better solutions, it is ideally suited for real-time applications that need a valid result on-demand. This algorithm has also been extended to systems with differential constraints, such as the nonholonomic constraints [12] . Thus, the asymptotic optimality of the RRT* can be ensured for aerial vehicles, such as airplanes or missiles.

In this brief, a general framework for the trajectory planning algorithm of aerial vehicles traveling in a 3-D space while avoiding obstacles is proposed based on the RRT* algorithm in [11] . In this framework, nonholonomic constraints of such vehicles are considered and artificial potential fields (APFs) [13] , [14] are integrated to bias the random sampling to accelerate the convergence speed to both the first solution and the asymptotic optimal solution. Indeed, it is fascinating to obtain the first trajectory quickly if the objective is to make the algorithm run in real time. Moreover, the approach is designed so that it can easily be combined with other probabilistic methods aiming at improving convergence speed, such as the informed-RRT* [15] or the RRT*-SMART [16] for example. Note that there are very few works that use similar strategies (see [17] for an example) and they often address holonomic problems only. Convergence assumptions discussed in [11] to ensure asymptotic convergence are recalled in the context of nonholonomic systems.

To illustrate the approach, a missile application is presented. Since the maneuverability of such a vehicle decreases with altitude [18] , making it hard to predict the trajectory, it is a challenging problem. It extends the work in [18] which solves the 2-D problem for this specific application. Simulation results demonstrate that the algorithm can efficiently find a feasible near-optimal trajectory.

This paper is organized as follows. First, environment, system modeling, and problem formulation are presented in Section II . Then, the RRT* path planner is introduced in Section III along with the integration of the APF in the algorithm. Next, an application of the RRT* framework is described in Section IV as an example. Then, the simulation results are shown, compared with the existing algorithms, and analyzed in Section V . Finally, some concluding remarks are made in Section VI .
SECTION II.
Problem Statement
A. System Modeling

In this brief, the aerial vehicle is modeled as a rigid body of mass m . Three frames ( Fig. 1 ) are introduced to describe the motion of the vehicle: an earth-centered earth-fixed reference frame I centered at point O and associated with the basis vectors ( i , j , k ) ; a body-fixed frame B attached to the vehicle at its center of mass C g with the basis vector ( e b 1 , e b 2 , e b 3 ) ; and a velocity frame V attached to the vehicle at C g with the basis vector ( e v 1 , e v 2 , e v 3 ) , where the translational velocity of the vehicle is denoted v = v e v 1 and v is the speed of the vehicle. Position and velocity defined in I are denoted ξ = ( x , y , z ) ⊤ ∈ R 3 and v = ( x ˙ , y ˙ , z ˙ ) ⊤ ∈ R 3 . Denote γ and χ the orientation with respect to I of the velocity v , where γ is the flight path angle and χ is the azimuth angle.
Fig. 1. - Vehicle model.
Fig. 1. - Vehicle model.
Fig. 1.

Vehicle model.

Show All

The dynamics of the aerial vehicle can be written as
⎧ ⎩ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ x ˙ = v cos γ cos χ y ˙ = v cos γ sin χ z ˙ = v sin γ v ˙ = − g sin γ + F a 1 m + F p 1 m + T 1 m γ ˙ = − g v cos γ + F a 3 m v + F p 3 m v + T 3 m v χ ˙ = F a 2 m v cos γ + F p 2 m v cos γ + T 2 m v cos γ (1)
View Source Right-click on figure for MathML and additional features. \begin{align} \begin{cases} \dot {x} = v\cos \gamma \cos \chi \\ \dot {y} = v\cos \gamma \sin \chi \\ \dot {z} = v\sin \gamma \\ \dot {v} = -g\sin \gamma +\displaystyle \frac {F_{a_{1}}}{m}+\displaystyle \frac {F_{p_{1}}}{m}+\displaystyle \frac {T_{1}}{m} \\[0.6pc] \dot {\gamma } = -\displaystyle \frac {g}{v}\cos \gamma + \displaystyle \frac {F_{a_{3}}}{mv}+\displaystyle \frac {F_{p_{3}}}{mv}+\displaystyle \frac {T_{3}}{mv}\\[0.6pc] \dot {\chi } = \displaystyle \frac {F_{a_{2}}}{mv\cos \gamma }+\displaystyle \frac {F_{p_{2}}}{mv\cos \gamma }+\displaystyle \frac {T_{2}}{mv\cos \gamma } \end{cases} \end{align} where γ ∈ [ − π / 2 , π / 2 ] and χ ∈ [ − π , π ] . T 1 , T 2 , and T 3 are the components of the propulsion, F a 1 , F a 2 , and F a 3 are the components of the aerodynamic forces, including the drag force f D and the lift forces f L 2 and f L 3 expressed as follows:
f D = f L 2 = f L 3 = − 1 2 ρ ( z ) S C D v a v a 1 2 ρ ( z ) S C L 2 v 2 a e v a 2 − 1 2 ρ ( z ) S C L 3 v 2 a e v a 3
View Source Right-click on figure for MathML and additional features. \begin{align*} \mathbf {f}_ {D} =&-\frac {1}{2}\rho (z)S C_{D} v_{a} \mathbf {v}_ {a} \\ \mathbf {f}_ {L_{2}} =&\frac {1}{2}\rho (z)S C_{L_{2}} v^{2}_{a} \mathbf {e}_{2}^ {v_{a}} \\ \mathbf {f}_ {L_{3}} =&- \frac {1}{2}\rho (z)S C_{L_{3}} v^{2}_{a} \mathbf {e}_{{3}}^ {v_{a}} \end{align*} where C D , C L 2 , and C L 3 are the aerodynamic coefficients, S is the surface of reference, ρ ( z ) is the density of air, and v a is the absolute value of the air velocity v a expressed as v a = v − v w , where v w is the wind velocity. e v a 2 and e v a 3 are the two unit vectors perpendicular to v a . Note that if v w = 0 , e v a 2 = e v 2 and e v a 3 = e v 3 . The forces F p 1 , F p 2 , and F p 3 include other perturbation forces acting on the aircraft.

For the control of the vehicle, the aerodynamic forces f L 2 and f L 3 as well as the propulsion forces ( T 1 , T 2 , T 3 ) are used.

For the environment modeling, the U.S. Standard Atmosphere, 1976 (U.S.-76) can be used. In the lower earth atmosphere (altitude < 35 km), the density of air ρ and atmospheric pressure decreases exponentially with altitude and approach zero around 35 km. As we consider an unmanned aerial vehicle with aerodynamic flight controls, the maneuvering capabilities are linked to the density of air and approach zero at 35 km.
B. Problem Formulation

Let x ( t ) = ( ξ ⊤ , v , γ , χ ) ⊤ ∈ X = R 6 be the measurable state of the system and u ∈ U be a control input in the set U of admissible controls including aerodynamic and propulsive forces as described in Section II-A . Then, the differential system (1) can be rewritten as
x ˙ = f ( x , u ) (2)
View Source Right-click on figure for MathML and additional features. \begin{equation} \dot { \mathbf {x}}= \mathbf {f}( \mathbf {x}, \mathbf {u}) \end{equation} where f is the vehicle system model.

X = R 6 is the state space. It is divided into two subsets. Let X free be the set of admissible states. X obs = X ∖ X free is defined as the obstacle region. The initial state of the system is x init ∈ X free .

The path planning algorithm is given a rendezvous set X goal ⊂ X free . In order to achieve its mission, the vehicle has to reach X goal while avoiding obstacles and minimizing a performance criterion J defined as
J ( t 0 , t f , u ) = ∫ t f t 0 f 0 ( x ( t ) , u ( t ) ) d t + k ( x ( t f ) ) (3)
View Source Right-click on figure for MathML and additional features. \begin{equation} J(t_{0},t_{f}, \mathbf {u})=\int _{t_{0}}^{t_{f}}f^{0}( \mathbf {x}(t), \mathbf {u}(t))\, dt + k( \mathbf {x}(t_{f})) \end{equation} where f 0 : R 6 × R 3 → R and k : R 6 → R are C 1 [1] . Note that if the minimal time problem is considered, f 0 = 1 and k = 0 are chosen, and if the minimal maximum final speed is considered, f 0 = 0 and k = − v ( t f ) are chosen.

To sum up, the motion planning problem is to find a collision-free trajectory x ( t ) : [ 0 , t f ] → X free with x ˙ = f ( x , u ) , that starts at x init , reaches the goal region X goal , i.e., x ( 0 ) = x init and x ( t f ) ∈ X goal and minimizes the cost function J .
SECTION III.
Motion Planning Framework
A. Optimal Rapidly Exploring Random Trees or RRT*

RRT* [11] , [12] is an incremental method designed to explore efficiently nonconvex high-dimensional spaces by growing the search tree toward large Voronoi areas [19] with the asymptotic optimality property, i.e., almost-sure convergence to an optimal solution. The principle of the RRT* as a path planner is described in Algorithm 1 .
Algorithm 1 - RRT* Path Planner
Algorithm 1 - RRT* Path Planner
Algorithm 1

RRT* Path Planner

Show All

Let G be the exploration tree, V be the set of vertices of the tree, E be the set of connecting edges of the tree, and cost( { ( x 1 , x 2 ) } ) be the minimal cost from x 1 to x 2 according to the specified criterion J defined in (3) . Let cost( x ) also be the total cost to arrive at x , that is cost( x ) = cost ( { ( x init , x ) } ).

First, the initial state x init is added to the tree G . Then, a state x rand ∈ X free is either generated randomly or with help of some heuristics. In this brief, APFs are used as a heuristic (see Section III-B ). The nearest_neighbor function (see Section III-C ) searches the tree G for the nearest vertex to x rand according to a user-defined metric d . This state is called x nearest . In steer function, a control input u ∗ is selected according to the specified criterion, i.e., such that J ( t nearest , t rand , u ∗ ) is minimized.

Then, the system model is integrated from t nearest to t rand , to find a new state x new , that is
x new = x nearest + ∫ t rand t nearest f ( x , u ∗ ) d t .
View Source Right-click on figure for MathML and additional features. \begin{equation*} \mathbf {x}_{\text {new}} = \mathbf {x}_{\text {nearest}} + \int _{t_{\text {nearest}}}^{t_{\text {rand}}} \mathbf {f}( \mathbf {x}, \mathbf {u}^{*}) \, dt. \end{equation*} A collision test ( collision_free_path function ) is performed: if x new and the path between x nearest and x new lie in X free , then x new is added in V .

Next, the RRT* algorithm tries to find a better parent for x new , that is a parent providing a lower cost to x new than x nearest . The near_vertices_parents function in line 16 will search the tree G for a set of other potential parents in a neighborhood X near ⊂ V of x new (see Section III-D ). The state x min ∈ X near ∪ { x nearest } that is collision-free and minimizes the cost to x new is chosen to be its new parent. Therefore, the connecting edge from x min to x new is added in E .

Afterward, the near_vertices_children function in line 18 will search the tree G for a set of potential children in a neighborhood X near ⊂ V of \mathbf {x}_{\text {new}} (see Section III-D ). For each \mathbf {x}_{\text {near}} \in \mathbb {X}_{\text {near}} , if the cost to \mathbf {x}_{\text {near}} passing by \mathbf {x}_{\text {new}} is better than cost ( \mathbf {x}_{\text {near}}) and the path is collision-free, then the rewire function will replace the existing connecting edge by the connecting edge from \mathbf {x}_{\text {new}} to \mathbf {x}_{\text {near}} .

These steps are repeated until the algorithm reaches K iterations. Thus, the RRT* algorithm will improve the optimality of the solution over time even after the first solution is found.
B. State Generation Using Artificial Potential Fields or APF

The random state \mathbf {x}_{\text {rand}} is generally generated by a uniform distribution in such a way that \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {free}} . In this brief, a biased random state generation using APFs [13] , [14] is introduced.

The APF is a reactive approach where trajectories are not generated explicitly. Instead, the environments generate some forces leading the vehicle to the destination. However, problems, such as local minima and oscillatory movement, can make the goal nonreachable.

The APF can be used to direct \mathbf {x}_{\text {rand}} to \mathbb {X}_{\text {goal}} , i.e., the orientation (\gamma ,\chi ) of \mathbf {x}_{\text {rand}} is generated using the APF. By combining with the RRT*, the disadvantages of the APF can be solved by the randomness of the RRT*, i.e., the vehicle leaves the local minima by trying to go to \mathbf {x}_{\text {rand}} [20] , [21] . At the same time, it is expected that the APF also increases the rate of convergence to the optimal solution.

An artificial vector \mathbf {f}_{\text {APF}} used to direct the vehicle is induced by an artificial potential U\in \mathbb {R} , i.e., \mathbf {f}_{\text {APF}}=-\nabla U\in \mathbb {R}^{3} . The potentials can be defined in several ways according to the characteristics of the mathematical functions. In this brief, the following artificial potentials and vectors are used.

    The repulsive potential [14] is usually used around an obstacle for the vehicle to avoid it. It can also be used to guide the vehicle away from the initial state. The repulsive potential and force can be expressed as \begin{align} U_{\text {init}}=&\frac {1}{2}K_{\text {init}}\frac {1}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}||_{2}^{2}} \\ \mathbf {f}_{\text {init}}=&K_{\text {init}}\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}||_{2}^{4}} \end{align}
    View Source Right-click on figure for MathML and additional features. \begin{align} U_{\text {init}}=&\frac {1}{2}K_{\text {init}}\frac {1}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}||_{2}^{2}} \\ \mathbf {f}_{\text {init}}=&K_{\text {init}}\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {init}}||_{2}^{4}} \end{align} where U_{\text {init}} and \mathbf {f}_{\text {init}} are the repulsive potential and vector field centered at \boldsymbol {\xi }_{\text {init}} and K_{\text {init}} is a constant.

    The attractive potential, opposing to the repulsive potential, is used to direct the vehicle to the desired destination. The attractive potential and force can be expressed as \begin{align} U_{\text {goal}}=&-\frac {1}{2}K_{\text {goal}}\frac {1}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}||_{2}^{2}} \\ \mathbf {f}_{\text {goal}}=&-K_{\text {goal}}\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}||_{2}^{4}} \end{align}
    View Source Right-click on figure for MathML and additional features. \begin{align} U_{\text {goal}}=&-\frac {1}{2}K_{\text {goal}}\frac {1}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}||_{2}^{2}} \\ \mathbf {f}_{\text {goal}}=&-K_{\text {goal}}\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {goal}}||_{2}^{4}} \end{align} where U_{\text {goal}} and \mathbf {f}_{\text {goal}} are the attractive potential and vector fields centered at \boldsymbol {\xi }_{\text {goal}} and K_{\text {goal}} is a constant.

    The rotational vector field [22] is used instead of the repulsive potential to guide the vehicle around the obstacles in order to reduce the local minimum problem. In Fig. 2 , let \boldsymbol {\xi }_{\text {obs}_{c}} denote the center of gravity of an obstacle, \mathbb {S}_{\text {obs}} denote the set of the obstacle surface, d_{\text {obs}} denote a maximum distance of influence from the obstacle, r_{\text {obs}} denote the shortest distance of the vehicle from the obstacle, and \mathbf {t} , \boldsymbol \sigma , \boldsymbol \lambda are unit vectors defined as \begin{align*} \boldsymbol \sigma=&\frac { \boldsymbol {\xi }_{\text {goal}}- \boldsymbol {\xi }_{\text {obs}_{c}}}{|| \boldsymbol {\xi }_{\text {goal}}- \boldsymbol {\xi }_{\text {obs}_{c}}||}\\ \boldsymbol \lambda=&\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}}||}\\ \mathbf {t}=&\frac {\boldsymbol \lambda \times (\boldsymbol \sigma \times \boldsymbol \lambda )}{||\boldsymbol \lambda \times (\boldsymbol \sigma \times \boldsymbol \lambda )||}.\\ {}\end{align*}
    View Source Right-click on figure for MathML and additional features. \begin{align*} \boldsymbol \sigma=&\frac { \boldsymbol {\xi }_{\text {goal}}- \boldsymbol {\xi }_{\text {obs}_{c}}}{|| \boldsymbol {\xi }_{\text {goal}}- \boldsymbol {\xi }_{\text {obs}_{c}}||}\\ \boldsymbol \lambda=&\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}}||}\\ \mathbf {t}=&\frac {\boldsymbol \lambda \times (\boldsymbol \sigma \times \boldsymbol \lambda )}{||\boldsymbol \lambda \times (\boldsymbol \sigma \times \boldsymbol \lambda )||}.\\ {}\end{align*}

    Remark 1:

    If \boldsymbol \lambda is collinear to \boldsymbol \sigma , \mathbf {t} can be chosen arbitrarily. In that case, the most simple solution is to choose a random \mathbf {t} perpendicular to \boldsymbol \lambda . Other strategies could also be adopted.

    The vector field function can be defined as \begin{align} \mathbf {f}_{\text {obs}}=&K_{\text {obs}}\left ({\frac {d_{\text {obs}}-r_{\text {obs}}}{r_{\text {obs}}}}\right ) \mathbf {t}, \quad r_{\text {obs}} \leq d_{\text {obs}} \\ \mathbf {f}_{\text {obs}}=&\mathbf {0}, \quad r_{\text {obs}} > d_{\text {obs}} \end{align}
    View Source Right-click on figure for MathML and additional features. \begin{align} \mathbf {f}_{\text {obs}}=&K_{\text {obs}}\left ({\frac {d_{\text {obs}}-r_{\text {obs}}}{r_{\text {obs}}}}\right ) \mathbf {t}, \quad r_{\text {obs}} \leq d_{\text {obs}} \\ \mathbf {f}_{\text {obs}}=&\mathbf {0}, \quad r_{\text {obs}} > d_{\text {obs}} \end{align} where \boldsymbol {\xi }_{\text {obs}}\in \mathbb {S}_{\text {obs}} is the nearest point of an obstacle to \boldsymbol {\xi } and K_{\text {obs}} is a constant. Note that for a spherical obstacle, \boldsymbol \lambda =\frac { \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}_{c}}}{|| \boldsymbol {\xi }- \boldsymbol {\xi }_{\text {obs}_{c}}||} .

Fig. 2. - Example of rotational vector field around the obstacle.
Fig. 2. - Example of rotational vector field around the obstacle.
Fig. 2.

Example of rotational vector field around the obstacle.

Show All

Thus, the summation of artificial vector fields expressed as \begin{equation} \mathbf {f}_{\text {APF}}=\sum \limits _{i=1}^{n} \mathbf {f}_{\text {i}}= \mathbf {f}_{\text {goal}}+ \mathbf {f}_{\text {init}}+ \mathbf {f}_{\text {obs}} \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} \mathbf {f}_{\text {APF}}=\sum \limits _{i=1}^{n} \mathbf {f}_{\text {i}}= \mathbf {f}_{\text {goal}}+ \mathbf {f}_{\text {init}}+ \mathbf {f}_{\text {obs}} \end{equation} is used as a basis to generate (\gamma _{\text {rand}},\chi _{\text {rand}}) of \mathbf {x}_{\text {rand}} .

Thus, the random_state function generates a random state \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {free}} by using the uniform distribution as in the original algorithm. The orientation of the randomly generated state is biased toward the destination using the direction of \mathbf {f}_{\text {APF}} with a given margin, that is, \mathbf {x}_{\text {rand}} is chosen in the convex cone shown in Fig. 3 pointing toward \mathbf {f}_{\text {APF}} with apex \mathbf { \boldsymbol {\xi }}_{\text {rand}} and apex angle 2 \phi _{\text {APF}} . This makes that our approach differs from [17] as their approach uses \mathbf {f}_{\text {APF}} to update the position of the generated \mathbf {x}_{\text {rand}} before using it and the orientations are not considered. Moreover, a bias toward the goal, used in RRT- GoalBias [9] , is also used to increase the rate of convergence to a solution. It consists in choosing \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {goal}} with a probability p .
Fig. 3. - Definition of convex cone $ \mathbb {C}( \mathbf {x},\phi )$ .
Fig. 3. - Definition of convex cone $ \mathbb {C}( \mathbf {x},\phi )$ .
Fig. 3.

Definition of convex cone \mathbb {C}( \mathbf {x},\phi ) .

Show All

C. nearest_neighbor

The nearest state \mathbf {x}_{\text {near}} to \mathbf {x}_{\text {rand}} is determined by a metric. The Euclidean metric is often used in such an algorithm. It finds the shortest line-of-sight distance between two states. Moreover, the kd-tree [23] can be used to enhance the robustness of the algorithm. Thus, it is fast and easy to implement. However, for a nonholonomic vehicle, the Euclidean metric is not appropriate for several reasons. The main reason is that it does not consider the orientation of the vehicle. A suitable metric can be, for example, based on the shortest Dubins’ path used in [24] even if it does not perfectly fit the vehicle model. Another suitable metric can be, for example, based on Bézier curves or other methods based on a simplified suboptimal trajectory calculation. Although more complex to compute, the most interesting metric in our framework consists in considering the cost from \mathbf {x}_{\text {near}} to \mathbf {x}_{\text {rand}} , i.e., cost( \{( \mathbf {x}_{\text {near}}, \mathbf {x}_{\text {rand}})\} ).
D. near_vertices

In the RRT* algorithm described in [11] and [12] , the near_vertices function uses the same metric function as nearest_neighbor function to determine the neighborhood \mathbb {X}_{\text {near}} of the state \mathbf {x} . This function searches for the vertices in a reachable set containing a ball, centered at \mathbf {x} , of volume \lambda _{1} \ln (n)/n , where n is the number of vertices in V and \lambda _{1} is a positive constant chosen appropriately to ensure asymptotic optimality.

In the present framework, the k -nearest neighbors algorithm is used to determine a set of near vertices \mathbb {X}_{\text {near}} of the state \mathbf {x} . It selects the first k -nearest vertices according to the user-defined metric d and returns them to the set \mathbb {X}_{\text {near}} . To ensure asymptotic optimality, k(n) is chosen such that k(n)>\lambda _{2} \ln (n) , where \lambda _{2} is a positive constant (see the Appendix for more details).

The original near_vertices function is divided into two functions in this brief: near_vertices_parents function in line 16, and near_vertices_children function in line 18. The first one searches for the k -nearest vertices to arrive at \mathbf {x}_{\text {new}} , while the latter one searches for the k -nearest vertices from \mathbf {x}_{\text {new}} to other vertices.

This APF-biased framework is expected to be able to find a feasible near-optimal solution with less number of iterations than the existing RRT* algorithm. This will be demonstrated in simulations in Section V for the application considered in Section IV .
SECTION IV.
Application

The performance of the previously mentioned framework is demonstrated using the application of an interceptor missile. The shortest 3-D Dubins’ path in a heterogeneous environment as the user-defined metric d (see [25] for details) is used. This shortest 3-D Dubins’ path was specifically developed for missile applications. In Sections IV-A – IV-C , the problem statement of the case study is described. Then, the use of Dubins’s metric is explained.
A. System Modeling

A simplified hypersonic vehicle is used to simulate results. In this brief, an unpowered interceptor missile during midcourse phase is chosen. For a hypersonic missile, wind speed has such a negligible effect to the system that a zero wind assumption is applied. Then, the translational velocity \mathbf {v} is assumed to coincide with the apparent velocity. Besides, a hypersonic missile is studied. Thus, the gravity can be neglected, which is a strong hypothesis that is only valid for missile-like aircraft flying with a high Mach number in a short distance. Moreover, the drag can be ignored, since the objective is to find the shortest path between two states, i.e., the path of minimum length. Thus, the dynamics of the velocity does not need to be considered. Moreover, the aerodynamic coefficient C_{L_{2}} is equal to C_{L_{3}} , because an axisymmetric missile is considered here.

By simplifying (1) according to the mentioned conditions and applying a change of variables from t to curvilinear abscissa s(t)=\int _{0}^{t}v(u)\,du , the dynamics of a Dubins-like aerial vehicle can be written as \begin{align} \begin{cases} x' = \displaystyle \frac {dx}{ds} = \cos \gamma \cos \chi \\[4pt] y' = \displaystyle \frac {dy}{ds} = \cos \gamma \sin \chi \\[4pt] z' = \displaystyle \frac {dz}{ds} = \sin \gamma \\[4pt] \gamma ' = \displaystyle \frac {d\gamma }{ds} = \displaystyle \frac {1}{2m}\rho (z)SC_{L_{\text {max}}}\mu = c(z)\mu ,\\[4pt] \chi ' = \displaystyle \frac {d\chi }{ds} = \displaystyle \frac {1}{2m}\rho (z)SC_{L_{\text {max}}}\displaystyle \frac {\eta }{\cos \gamma } = c(z)\displaystyle \frac {\eta }{\cos \gamma } \end{cases} \end{align}
View Source Right-click on figure for MathML and additional features. \begin{align} \begin{cases} x' = \displaystyle \frac {dx}{ds} = \cos \gamma \cos \chi \\[4pt] y' = \displaystyle \frac {dy}{ds} = \cos \gamma \sin \chi \\[4pt] z' = \displaystyle \frac {dz}{ds} = \sin \gamma \\[4pt] \gamma ' = \displaystyle \frac {d\gamma }{ds} = \displaystyle \frac {1}{2m}\rho (z)SC_{L_{\text {max}}}\mu = c(z)\mu ,\\[4pt] \chi ' = \displaystyle \frac {d\chi }{ds} = \displaystyle \frac {1}{2m}\rho (z)SC_{L_{\text {max}}}\displaystyle \frac {\eta }{\cos \gamma } = c(z)\displaystyle \frac {\eta }{\cos \gamma } \end{cases} \end{align} where C_{L_{\text {max}}} is the maximum lift coefficient, \mu and \eta are the normalized control inputs bounded by condition ({\mu ^{2}+\eta ^{2}})^{1/2}\leq 1 , \rho (z) is the air density, and c(z) is the maximum path curvature of the vehicle. Note that \mu and \eta are directly related the angle of attack and the sideslip angle.

The simplified air density function can be expressed as \begin{equation} \rho (z)=\rho _{0}e^{-z/z_{r}} \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} \rho (z)=\rho _{0}e^{-z/z_{r}} \end{equation} where \rho _{0} is the air density at standard atmosphere at sea level and z_{r} is a reference altitude.

As a consequence, the path curvature can be written in the same way as \begin{equation} c(z)=c_{0}e^{-z/z_{r}}. \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} c(z)=c_{0}e^{-z/z_{r}}. \end{equation} where c_{0} is the maximum curvature at sea level. At this point, it can be noticed that the maneuverability of the vehicle is exponentially decreasing with altitude, since c(z) is exponentially decreasing. Thus, it is a challenging problem to control such a vehicle at high altitude.

Remark 2:

Our objective is to find a reference trajectory for such a vehicle. It is meant to follow the reference trajectory with its controller. Therefore, the elements related to the controller [26] , such as model uncertainties and measurement errors, are not considered here.
B. Problem Formulation

In this application, \mathbf {x}=( \boldsymbol {\xi }^\top ,\gamma ,\chi )^\top \in \mathbb {X}= \mathbb {R}^{{5}} is the measurable state of the system and \mathbf {u}=(\mu ,\eta )^\top \in \mathbb {U} is an admissible control input. The set of admissible control inputs is defined as \begin{equation} \mathbb {U}=\{ \mathbf {u}\in \mathbb {R}^{{2}}:|| \mathbf {u}||\leq 1\}. \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} \mathbb {U}=\{ \mathbf {u}\in \mathbb {R}^{{2}}:|| \mathbf {u}||\leq 1\}. \end{equation}

The differential system (11) is rewritten as \begin{equation} \mathbf {x}'= \mathbf {f}( \mathbf {x}, \mathbf {u}). \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} \mathbf {x}'= \mathbf {f}( \mathbf {x}, \mathbf {u}). \end{equation}

The obstacle region \mathbb {X}_{\text {obs}} is defined by the exploration space occupied by no-fly zones such as city areas and radar detection zones, and the set of admissible states is the remaining of the exploration space, i.e., \mathbb {X}_{\text {free}}= \mathbb {X}\setminus \mathbb {X}_{\text {obs}} .

The path planning starts at the initial state \mathbf {x}_{\text {init}}\in \mathbb {X}_{\text {free}} . The destination of the path planning is given by a rendezvous set \mathbb {X}_{\text {goal}}\subset \mathbb {X}_{\text {free}} and defined as \begin{equation} \mathbb {X}_{\text {goal}} = \mathbb {P}_{\text {goal}}\times \mathbb {V}_{\text {goal}} \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} \mathbb {X}_{\text {goal}} = \mathbb {P}_{\text {goal}}\times \mathbb {V}_{\text {goal}} \end{equation} where \mathbb {P}_{\text {goal}} is the set of the desired arrival positions and \mathbb {V}_{\text {goal}} is the set of the desired orientations of the vehicle. In this application, they are defined as \begin{align} \mathbb {P}_{\text {goal}}=&\{ \boldsymbol {\xi }_{\text {rdv}}\}\notag \\ \mathbb {V}_{\text {goal}}=&\{(\gamma ,\chi )\in \mathbb {R}^{2} : (\gamma ,\chi ) \in \mathbb {C}( \mathbf {x}_{\text {rdv}},\phi _{f})\} \end{align}
View Source Right-click on figure for MathML and additional features. \begin{align} \mathbb {P}_{\text {goal}}=&\{ \boldsymbol {\xi }_{\text {rdv}}\}\notag \\ \mathbb {V}_{\text {goal}}=&\{(\gamma ,\chi )\in \mathbb {R}^{2} : (\gamma ,\chi ) \in \mathbb {C}( \mathbf {x}_{\text {rdv}},\phi _{f})\} \end{align} where \mathbf {x}_{\text {rdv}} is the rendezvous state, and \mathbb {C}( \mathbf {x}_{\text {rdv}},\phi _{f}) is the convex cone (see Fig. 3 ) pointing toward the orientation of the vehicle defined by \gamma _{\text {rdv}} and \chi _{\text {rdv}} with apex \boldsymbol {\xi }_{\text {rdv}} and apex angle 2\phi _{f} , where \phi _{f} is a maximal acceptable orientation error defined by the detection range of the embedded radar or infrared sensor.

The objective of path planning algorithm is to find a collision-free trajectory \mathbf {x}(s) : [0,s_{f}] \rightarrow \mathbb {X}_{\text {free}} with \mathbf {x}'= \mathbf {f}( \mathbf {x}, \mathbf {u}) , that starts at \mathbf {x}_{\text {init}} , reaches the goal region \mathbb {X}_{\text {goal}} , i.e., \mathbf {x}(0)= \mathbf {x}_{\text {init}} and \mathbf {x}(s_{f})\in \mathbb {X}_{\text {goal}} and minimizes the cost function \begin{equation} J=\int _{0}^{s_{f}}\, ds. \end{equation}
View Source Right-click on figure for MathML and additional features. \begin{equation} J=\int _{0}^{s_{f}}\, ds. \end{equation}

C. Dubins’ Paths for the Metric

Interestingly, the shortest 3-D Dubins’ path in a heterogeneous environment developed in [25] solves the optimal problem (18) for the considered model (11) provided that the environment is not cluttered with obstacles. In presence of obstacles, it can still provide locally optimal solutions. That is the reason why the proposed metric is based on this path.

There are two cases to consider when using Dubins’ paths as the user-defined metric d .

    \mathbf {x}_{\text {rand}}\notin \mathbb {X}_{\text {goal}} : The shortest CSC (curve-segment-curve) path is used to calculate the nearest neighbor.

    \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {goal}} : Since \mathbb {X}_{\text {goal}} is a set, it is more interesting to consider the shortest path between each \mathbf {x}\in G and \mathbb {X}_{\text {goal}} than considering a single \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {goal}} . Indeed, there can exist a shortest path to another element of \mathbb {X}_{\text {goal}} than the shortest path to \mathbf {x}_{\text {rand}} . To this manner, the degenerated form (CS) of CSC path needs to be considered first. Indeed, if the shortest path to the set \mathbb {X}_{\text {goal}} is a CS path, then it arrives with the orientation within the arrival cone \mathbb {C} , and thus, the expected shortest path is this CS path. If no CS path arrives in \mathbb {C} , the shortest path is necessarily a CSC path whose arrival orientation is one of the extremities of the arrival cone \mathbb {C} .

Thus, for each \mathbf {x}\in G , the approach first consists in finding the shortest CS path to the desired final position, i.e., \boldsymbol {\xi }_{\text {rand}}= \boldsymbol {\xi }_{\text {rdv}} . If the final orientation is in the arrival cone, it is the expected solution. If not, the solution is the shortest CSC path to one of the extremities of \mathbb {X}_{\text {goal}} .
SECTION V.
Simulation Results

Simulation results are obtained using MATLAB. The scenario shown in Fig. 4 is considered with the following configurations: the initial state \mathbf {x}_{\text {init}}=(1~\text {km},1~\text {km},1~\text {km},\pi /2, 0)^\top \begin{align} \mathbb {X}_{\text {goal}}=&\mathbb {P}_{\text {goal}}\times \mathbb {V}_{\text {goal}}\notag \\[-2pt] \mathbb {P}_{\text {goal}}=&\{ \boldsymbol {\xi }_{\text {rdv}}\}\notag \\[-2pt] \mathbb {V}_{\text {goal}}=&\{(\gamma ,\chi )\in \mathbb {R}^{2} : (\gamma ,\chi )\in \mathbb {C}( \mathbf {x}_{\text {rdv}},5 {^{\circ }})\} \end{align}
View Source Right-click on figure for MathML and additional features. \begin{align} \mathbb {X}_{\text {goal}}=&\mathbb {P}_{\text {goal}}\times \mathbb {V}_{\text {goal}}\notag \\[-2pt] \mathbb {P}_{\text {goal}}=&\{ \boldsymbol {\xi }_{\text {rdv}}\}\notag \\[-2pt] \mathbb {V}_{\text {goal}}=&\{(\gamma ,\chi )\in \mathbb {R}^{2} : (\gamma ,\chi )\in \mathbb {C}( \mathbf {x}_{\text {rdv}},5 {^{\circ }})\} \end{align} with \mathbf {x}_{\text {rdv}}=(90~\text {km},90~\text {km},25~\text {km},0,-\pi /8)^\top .

Fig. 4. - Illustration of the scenario.
Fig. 4. - Illustration of the scenario.
Fig. 4.

Illustration of the scenario.

Show All

In Fig. 4 , the arrows represent the orientations of the initial state \mathbf {x}_{\text {init}} and of the rendezvous state \begin{equation*} \mathbf {x}_{\text {rdv}}=\big ( \boldsymbol {\xi }_{\text {rdv}}^\top ,\gamma _{\text {rdv}},\chi _{\text {rdv}}\big )^\top . \end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} \mathbf {x}_{\text {rdv}}=\big ( \boldsymbol {\xi }_{\text {rdv}}^\top ,\gamma _{\text {rdv}},\chi _{\text {rdv}}\big )^\top . \end{equation*} \mathbb {X}_{\text {obs}} is represented by the 3-D shaded surfaces (in gradient color). The nature of obstacles can be no-fly zones, such as the area above and around cities, which are represented by cylinders and radar detection zones which are represented by a half sphere.

Here, three different algorithms are considered:

    RRT;

    RRT*;

    RRT* biased by APF with a given margin for the orientation of the randomly generated state \mathbf {x}_{\text {rand}} of 10° ( \phi _{\text {APF}}=10 {^{\circ }} ).

For all algorithms, a bias toward the goal consisting in generating \mathbf {x}_{\text {rand}}\in \mathbb {X}_{\text {goal}} with a probability p=0.1 is used. Moreover, the Dubins’ path is used for the metric as mentioned in Section IV-C .

In the following figures, the exploration tree is represented in light gray and thick solid curve is the final solution found by the algorithms. Fig. 5 shows a result obtained after 1000 iterations by the RRT algorithm. It shows that the RRT algorithm is capable of finding a solution for the problem. However, the obtained trajectory is clearly not the shortest since some loops and turns can be observed. This is because no optimality criteria are considered by the RRT. Moreover, no reconnection is done to improve the path quality.
Fig. 5. - Exploration trees and results after 1000 iterations of RRT algorithm: path length 200 km.
Fig. 5. - Exploration trees and results after 1000 iterations of RRT algorithm: path length 200 km.
Fig. 5.

Exploration trees and results after 1000 iterations of RRT algorithm: path length 200 km.

Show All

The other two algorithms are employed on the same scenario. Fig. 6 shows one of the best results obtained by the RRT* and by the RRT* biased by APF after 200 iterations. As we can see from the results, the RRT* algorithm can find a better solution than the RRT. In Fig. 6 , the difference between the two RRT* algorithms is that the exploration tree of the RRT* biased by APF [see Fig. 6(b) ] tends toward the destination, while the other one expands in every direction [see Fig. 6(a) ].
Fig. 6. - Exploration trees and results after 200 iterations. (a) RRT*: path length 140.36 km. (b) RRT* biased by APF: path length 139.89 km.
Fig. 6. - Exploration trees and results after 200 iterations. (a) RRT*: path length 140.36 km. (b) RRT* biased by APF: path length 139.89 km.
Fig. 6.

Exploration trees and results after 200 iterations. (a) RRT*: path length 140.36 km. (b) RRT* biased by APF: path length 139.89 km.

Show All

For the in-depth analysis, for each algorithm, 100 Monte Carlo simulations within 200 iterations are simulated to obtain statistic results. Here, the computational efficiency is compared using the number of iterations rather than the computing time, since the code is not fully optimized (MATLAB implementation) to assess its real-time ability. Moreover, the computational effort is mostly spent by the metric function, which can still be optimized. The average iteration needed to obtain the first solution, the average length of the first solution, and the average length of the final solution are observed in Table I .
TABLE I Results of 100 Monte Carlo Simulations Within 200 Iterations
Table I- Results of 100 Monte Carlo Simulations Within 200 Iterations
Table I- Results of 100 Monte Carlo Simulations Within 200 Iterations

According to the statistic results in Table I , the first solution can be obtained at almost the same iteration for both RRT and RRT* algorithms. Note also that the optimality of the final solution of the RRT* improves with respect to the number of iterations. The RRT* biased by APF is the fastest to find the first solution. On top of that, both first and final solutions are closer to the optimal solution than the others. The reason is that the heuristic consisting in using the APF helps to bias the search toward the feasible and optimal solutions rather than blindly search the exploration space, i.e., increase the probability of reconnection of the RRT*. Obviously, the RRT* can achieve the same final performance if more iterations are given.

Monte Carlo simulations of several scenarios, which are not shown here, have also been simulated. For less complex scenarios, i.e., fewer obstacles, the results of the RRT* and the RRT* biased with APF are mostly the same. Since there are few obstacles, the algorithms converge rapidly, because the probability of reconnection is already high. Thus, it is reasonable that the performance does not improve as much in less complex environments for nonholonomic problems.
SECTION VI.
Conclusion

In this brief, an efficient trajectory planning framework for aerial vehicles traveling in 3-D space while avoiding obstacles is presented. The algorithm is based on the RRT* algorithm to find a near-optimal trajectory. Moreover, the APF is integrated into the algorithm to accelerate the convergence speed to the optimal solution. The capability of this framework is demonstrated on a missile application. The shortest Dubins’ paths in a heterogeneous environment are used for the metric. As a result, the approach shows a good performance in simulation results. Compared with the RRT and the RRT* algorithms, better solutions are found with less number of iterations due to the integration of the APF. Although the computational complexity of this method is not rigorously analyzed in this brief, real-time constraints will be easier to verify if the algorithm is implemented on board and the vehicle as less number of iterations is required to find a solution. Moreover, it is important to notice that the algorithm is anytime, since the first admissible solution can be obtained pretty fast, the remaining computing resources being only used to improve the optimality. This property is very interesting for real-time applications. In future work, replanning will be considered to improve the performance of the algorithm in case of dynamic environment or changes in the mission.
Appendix Convergence Analysis

In this section, a set of sufficient conditions is proposed to guarantee the convergence of the RRT* algorithm for the aerial vehicle path planning. As stated in [11] , local controllability of the system, as well as the existence of an optimal trajectory with sufficient free space in its neighborhood, is necessary conditions to ensure asymptotic optimality of the RRT* algorithm. Since the aerial system considered in this brief is assumed to be controllable in its domain of use, local controllability is guaranteed. Therefore, it is only required to assume that there exists an optimal trajectory with free space around it, as explained thoroughly in [11] . Thus, completeness and almost-sure convergence are allowed. The APF bias that is used in the framework does not contradict this assumption, since a given margin \phi _{\text {APF}} described in Section III-B is used for the uniform state generation. Indeed, to ensure free space in the neighborhood, it is only required that any states \mathbf {x} on the optimal path are in the convex cone \mathbb {C}( \mathbf {x}_{\text {APF}},\phi _{\text {APF}}) (see Fig. 3 for a definition of \mathbb {C} ), where \mathbf {x}_{\text {APF}} is a state on the vector field at position \boldsymbol {\xi } ( \boldsymbol {\xi }_{\text {APF}}= \boldsymbol {\xi } ).

To ensure asymptotic optimality, the near_vertices function needs to be analyzed. In [11] , it is shown that if the area of research contains a ball of volume \lambda _{1} \ln (n)/n,\lambda _{1}>0 , then the almost-sure convergence is ensured provided that \lambda _{1} is sufficiently large. If the k -nearest neighbors algorithm is used, k needs to verify k > \lambda _{2} \ln (n),\lambda _{2}>0 . Indeed, since a uniform distribution is used for the state generation, the expected number of vertices contained in a ball of volume \lambda _{1} \ln (n)/n after iteration n is \lambda _{1} \ln (n)/\lambda _{0} , where \lambda _{0} is the total volume of the free space. The proof is straightforward since the number of vertices contained in the ball follows a binomial distribution with parameters n and \lambda _{1}\ln (n)/\lambda _{0}~n . Thus, intuitively, both techniques are equivalent and choosing k > \lambda _{1}\ln (n) /\lambda _{0} for the k -nearest neighbors algorithm ensures asymptotic optimality. A thorough proof can be found in [12] .

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
Distributed unmanned aircraft collision avoidance using limit cycle

2011 11th International Conference on Control, Automation and Systems

Published: 2011
Research on formation collision avoidance of aircraft cooperative penetration based on improved potential field method

2020 3rd International Conference on Unmanned Systems (ICUS)

Published: 2020
Show More
References
1. E. Trélat, "Optimal control and applications to aerospace: Some results and challenges", J. Optim. Theory Appl. , vol. 154, no. 3, pp. 713-758, 2012.
Show in Context CrossRef Google Scholar
2. C.-F. Lin, Modern Navigation Guidance And Control Processing, Upper Saddle River, NJ, USA:Prentice-Hall, 1991.
Show in Context Google Scholar
3. H. J. Kim, D. H. Shim and S. Sastry, "Nonlinear model predictive tracking control for rotorcraft-based unmanned aerial vehicles", Proc. Amer. Control Conf. , vol. 5, pp. 3576-3581, 2002.
Show in Context CrossRef Google Scholar
4. J. Carsten, D. Ferguson and A. Stentz, "3D field D*: Improved path planning and replanning in three dimensions", Proc. IEEE Int. Conf. Intell. Robots Syst. , pp. 3381-3386, Oct. 2006.
Show in Context CrossRef Google Scholar
5. R. Daily and D. M. Bevly, "Harmonic potential field path planning for high speed vehicles", Proc. Amer. Control Conf. , pp. 4609-4614, 2008.
Show in Context View Article Full Text: PDF (499) Google Scholar
6. X. Chen and J. Zhang, "The three-dimension path planning of UAV based on improved artificial potential field in dynamic environment", Proc. Int. Conf. Intell. Human-Mach. Syst. Cybern. , pp. 144-147, 2013.
Show in Context CrossRef Google Scholar
7. L. E. Kavraki, P. Svestka, J.-C. Latombe and M. H. Overmars, "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", IEEE Trans. Robot. Automat. , vol. 12, no. 4, pp. 566-580, Aug. 1996.
Show in Context View Article Full Text: PDF (1960) Google Scholar
8. S. M. LaValle, Planning Algorithms, Cambridge, U.K.:Cambridge Univ. Press, 2006.
Show in Context CrossRef Google Scholar
9. S. M. LaValle and J. J. Kuffner, "Randomized kinodynamic planning", Int. J. Robot. Res. , vol. 20, no. 5, pp. 378-400, 2001.
Show in Context CrossRef Google Scholar
10. P. Pharpatara, R. Pepy, B. Hérissé and Y. Bestaoui, "Missile trajectory shaping using sampling-based path planning", Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst. , pp. 2533-2538, Nov. 2013.
Show in Context CrossRef Google Scholar
11. S. Karaman and E. Frazzoli, "Optimal kinodynamic motion planning using incremental sampling-based methods", Proc. IEEE Conf. Decision Control , pp. 7681-7687, Dec. 2010.
Show in Context CrossRef Google Scholar
12. S. Karaman and E. Frazzoli, "Sampling-based algorithms for optimal motion planning", Int. J. Robot. Res. , vol. 30, no. 7, pp. 846-894, 2011.
Show in Context CrossRef Google Scholar
13. J. R. Andrews and N. Hogan, "Impedance control as a framework for implementing obstacle avoidance in a manipulator", Proc. ASME Winter Annu. Meeting Control Manuf. Process. Robot. Syst. , pp. 243-251, 1983.
Show in Context Google Scholar
14. O. Khatib, "Real-time obstacle avoidance for manipulators and mobile robots", Proc. IEEE Int. Conf. Robot. Autom. , pp. 500-505, Mar. 1985.
Show in Context View Article Full Text: PDF (493) Google Scholar
15. J. D. Gammell, S. S. Srinivasa and T. D. Barfoot, "Informed RRT*: Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic", Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst. , pp. 2997-3004, Sep. 2014.
Show in Context Google Scholar
16. F. Islam, J. Nasir, U. Malik, Y. Ayaz and O. Hasan, "RRT*-smart: Rapid convergence implementation of RRT* towards optimal solution", Proc. IEEE Int. Conf. Mechatronics Autom. , pp. 1651-1656, Aug. 2012.
Show in Context Google Scholar
17. A. H. Qureshi, K. F. Iqbal, S. M. Qamar, F. Islam, Y. Ayaz and N. Muhammad, "Potential guided directional-RRT* for accelerated motion planning in cluttered environments", Proc. IEEE Int. Conf. Mechatronics Autom. , pp. 519-524, Aug. 2013.
Show in Context View Article Full Text: PDF (929) Google Scholar
18. P. Pharpatara, B. Hérissé, R. Pepy and Y. Bestaoui, "Shortest path for aerial vehicles in heterogeneous environment using RRT*", Proc. IEEE Int. Conf. Robot. Autom. , pp. 6388-6393, May 2015.
Show in Context CrossRef Google Scholar
19. G. Voronoi, "Nouvelles applications des paramétres continus à la théorie des formes quadratiques", J. fur die Reine und Angewandte Math. , vol. 133, pp. 97-178, 1908.
Show in Context Google Scholar
20. J. Barraquand and J.-C. Latombe, "A Monte-Carlo algorithm for path planning with many degrees of freedom", Proc. IEEE Int. Conf. Robot. Autom. , vol. 3, pp. 1712-1717, May 1990.
Show in Context CrossRef Google Scholar
21. J. Barraquand and J.-C. Latombe, "Robot motion planning: A distributed representation approach", Int. J. Robot. Res. , vol. 10, no. 6, pp. 628-649, 1991.
Show in Context CrossRef Google Scholar
22. P. Falstad, 3-D Vector Fields Applet, Feb. 2014, [online] Available: http://www.falstad.com/vector3d/directions.html.
Show in Context Google Scholar
23. J. L. Bentley, "Multidimensional binary search trees used for associative searching", Commun. ACM , vol. 18, no. 9, pp. 509-517, 1975.
Show in Context CrossRef Google Scholar
24. L. E. Dubins, "On curves of minimal length with a constraint on average curvature and with prescribed initial and terminal positions and tangents", Amer. J. Math. , vol. 79, no. 3, pp. 497-516, 1957.
Show in Context CrossRef Google Scholar
25. P. Pharpatara, B. Hérissé and Y. Bestaoui, "3D-shortest paths for a hypersonic glider in a heterogeneous environment", Proc. IFAC Workshop Adv. Control Navigat. Auto. Aerosp. Vehicles , pp. 186-191, 2015.
Show in Context CrossRef Google Scholar
26. E. Devaud, H. Siguerdidjane and S. Font, "Some control strategies for a high-angle-of-attack missile autopilot", Control Eng. Pract. , vol. 8, no. 8, pp. 885-892, 2000.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
