Proceedings of the Twenty-Ninth International Conference on Automated Planning and Scheduling (ICAPS 2019)

Speeding Up Search-Based Motion Planning via Conservative Heuristics
Ishani Chatterjee, Maxim Likhachev, Ashwin Khadke, Manuela Veloso∗
The Robotics Institute, Carnegie Mellon University

Abstract
Weighted A* search (wA*) is a popular tool for robot motionplanning. Its efﬁciency however depends on the quality of heuristic function used. In fact, it has been shown that the correlation between the heuristic function and the true costto-goal signiﬁcantly affects the efﬁciency of the search, when used with a large weight on the heuristics. Motivated by this observation, we investigate the problem of computing heuristics that explicitly aim to minimize the amount of search efforts in ﬁnding a feasible plan. The key observation we exploit is that while heuristics tries to guide the search along what looks like an optimal path towards the goal, there are other paths that are clearly sub-optimal yet are much easier to compute. For example, in motion planning domains like footstep-planning for humanoids, a heuristic that guides the search along a path away from obstacles is less likely to encounter local minima compared with the heuristics that guides the search along an optimal but close-to-obstacles path. We utilize this observation to deﬁne the concept of conservative heuristics and propose a simple algorithm for computing such a heuristic function. Experimental analysis on (1) humanoid footstep planning (simulation), (2) path planning for a UAV (simulation), and a real-world experiment in footstep-planning for a NAO robot shows the utility of the approach.
Introduction
Weighted A* (wA*) (Pohl 1970), has been widely used for relatively low-dimensional motion planning problems such 2D navigation (Ferguson, Likhachev, and Stentz 2005), path planning for UAVs (Hwangbo, Kuffner, and Kanade 2007), (Liu et al. 2018), and footstep planning for humanoids (Hornung, Maier, and Bennewitz 2013). wA* with high weight shows better search efﬁciency in domains that show a strong correlation of the heuristic function with the node-distanceto-goal (Wilt and Ruml 2012). A weak correlation may create heuristic depression regions, or local minima, where the path suggested by the heuristic may not be feasible, severely degrading search efﬁciency (Wilt and Ruml 2012). We investigate the idea of computing heuristic functions that explicitly aim to reduce search expansions by wA*.
∗This work was in part supported by ONR grant N00014-15-12129 Copyright c 2019, Association for the Advancement of Artiﬁcial Intelligence (www.aaai.org). All rights reserved.

For heuristic computation, it is common to solve a simpler planning problem in a space formed by relaxing some constraints in the original space (Bulitko et al. 2007), (Holte et al. 1996). We deﬁne an edge in the relaxed space as conservative if for each corresponding state in the original space there is an edge to at least one corresponding successor state. Existence of a path composed only of conservative edges in the relaxed space, guarantees existence of a feasible path in the original space. If the heuristic computation ﬁnds such a path in the relaxed space, then simply following the heuristic gradient can guide the search to the goal, while expanding only the states that appear in the solution. Our ﬁrst contribution is in observing that in motion planning problems formulated as heuristic search one can often identify conservative edges in the relaxed space. Secondly, we propose a heuristic computation algorithm that minimizes the use of non-conservative edges to reduce inefﬁcient expansions in the original space.
Motivation behind the conservative property is similar to several ideas explored in classical hierarchical planning. Relaxed spaces and “safe” abstractions (Haslum and others 2007) have been used to compute solutions that could be reﬁned/extended to the original space (Bacchus and Yang 1991). Bacchus and Yang showed that plans in the relaxed space can be reﬁned to a plan in original space with a high probability if the relaxed space satisﬁes the Downward Reﬁnement Property (DRP). It is difﬁcult to ﬁnd nontrivial relaxed spaces with DRP. In our work, the relaxed spaces do not satisfy DRP, but we observe that we can identify conservative edges in the relaxed space that can direct the search in the original space towards goal. Also, we do not reﬁne plans computed in the relaxed space but use them to compute a heuristic to be used by the original search. Many works use relaxed spaces to compute heuristics (Pearl 1984), (Hoffmann and Nebel 2001), (Holte et al. 1996). Pattern databases (Culberson and Schaeffer 1998) store a table mapping states or sub-goals in a relaxed version of the original problem, to the cost-to-go of a precomputed solution in the relaxed space to reach these subgoals. (Helmert et al. 2007) compute heuristics in abstractspaces for automated-planning, where abstractions are computed using different sets of state-variables. The Fast Downward Planner attempts to combine reﬁnement with heuristics (Helmert 2006). (Ba¨ckstro¨m and Jonsson 2013) deﬁne the

674

weak reﬁnement property (WRP) in studying the relationship between reﬁnement and heuristics, and (Pang and Holte 2011) deﬁne “strong matching”, both of which come close to the conservative property, except that it is not a requirement in our relaxed spaces. Also, these works mainly deal with symbolic planning, whereas our focus is in motion planning. (Vega-Brown and Roy 2018) use abstraction-based search in motion-planning that divides the environment into overlapping regions and has the effect of heuristically guiding the search towards the next region, based on some computed bounds. However, they make assumptions about the convexity of the regions. In our case, there is no such assumption about the planning environment. To the best of our knowledge, no attempt has been made to identify and use conservative edges for heuristic computation in the context of motion planning.

Planning with Conservative Heuristics

Deﬁnitions, Notations and Problem Description

Consider a graph G = (S, E, c), where S is the set of
states, E = {(s, s )|s, s ∈ S} denotes the set of feasi-
ble transitions/edges in the graph and, c is a cost-function
such that c(si, sj) is the cost of an edge (si, sj). A planning problem consists of ﬁnding a path π(si, sj) in G from si to sj. π∗(si, sj) denotes the least-cost path between si and sj. The cost of any path π(si, sj) is the cumulative cost of all edges along it and is denoted by c(π(si, sj)). Let hc : S → N be our conservative heuristic function estimating cost-to-goal. We assume that si ∈ S is a goal-state if and only if hc(si) = 0. We use wA* to compute a path in G from a start state sst to any state in the goal-set Sg = {s ∈ S | hc(s) = 0}.

Heuristic Space: Consider another state-space S˜, an ab-
stract space used to compute heuristics. We call it the heuristic-space. Let λ : S → S˜ be a many-to-one mapping
representing the projection of each state in S to the heuristicspace S˜, such that |S˜| < |S|. Moreover, λ−1(s˜) = {s ∈ S | λ(s) = s˜} ∀s˜ ∈ S˜. The heuristic-space has its own set of transitions E˜ = {(s˜i, s˜j)|s˜i, s˜j ∈ S˜}. Let G˜ be the graph deﬁned by S˜ and E˜. π(s˜i, s˜j) denotes a path in G˜ from s˜i to s˜j, and c(π(s˜i, s˜j)) denotes its cost in G˜. We assume that for every pair of states si and sj in S,

c(π∗(si, sj))) ≥ c(π∗(λ(si), λ(sj)))

(1)

if ∃ π(si, sj) s.t |c(π(si, sj))| < ∞,
then ∃ π(λ(si), λ(sj)) s.t |c(π(λ(si), λ(sj)))| < ∞ (2)
We assume states in the goal-set Sg map to one goal-state s˜g in the heuristic space, ie, s˜g = λ(sg)∀sg ∈ Sg.
Conservative Edges: An edge (s˜, s˜ ) ∈ E˜ is conservative iff ∀s ∈ λ−1(s˜) ∃ (s, s ) ∈ E s.t s ∈ λ−1(s˜ ). A conservative edge (s˜, s˜ ) guarantees that every state s ∈ λ−1(s˜) is connected to at least one state in λ−1(s˜ ). Thus, existence of a path in the heuristic-space from λ(si) to λ(sj) which consists of only conservative edges, guarantees existence of

Figure 1: (a) A conservative edge in (S˜) and its corresponding set of states and edges in (G). (b) Non-conservative edges (red) with missing edges between some pairs of corresponding states in S. (c) Path (green) in S, comprising solely of conservative edges in S˜.
Figure 2: A planning environment with obstacles (red) inﬂated by the circumradius of a polygonal robot. Edges inside the inﬂated region (light blue) are non-conservative, while those outside (dark blue) are conservative.
a path from si to sj in the original space. Fig. 1 illustrates this reasoning. If the search in G is guided to always prefer successors connected via conservative edges in G˜, it would reach the goal by expanding only such successors, making the number of expansions equal to the solution size.
Identifying conservative edges in G˜ is a domaindependent process. For example, when planning in S = (x, y, orientation) for a non-circular robot, S˜ can be obtained by dropping the orientation, or, S˜ = (x, y). Here, the heuristic-space is obtained by abstracting away a speciﬁc geometric property of the robot (in this case the orientation), which is equivalent to treating the non-circular robot as a circular one in the heuristic-space. Inﬂating obstacles by the radius of the robot-footprint’s circumcircle (circumradius) identiﬁes the space that the robot can physically occupy for all possible orientations. States in S˜ lying outside of this inﬂated-obstacle region are surely not in collision with obstacles, therefore an omni-directional robot can surely move between neighbouring states. Thus, edges between these states are conservative. Fig. 2 shows the conservative and non-conservative edges in a 2D environment inﬂated by the robot circumradius.
Conservative Heuristic Computation We want to compute hc(s) such that it (1) guides the search in the original space along paths that minimize the number of non-conservative edges in S˜, (2) prefers the shortest be-

675

tween all paths made purely of conservative edges and, (3)
is α consistent (∞ > α > 1). We deﬁne a heuristic to be
α-consistent if for all s, s ∈ S such that s is a successor of
s, hc(s) ≤ αc(s, s ) + hc(s ), and hc(s) = 0 for all s ∈ Sg. Consider a graph G˜m = (S˜, E˜, cm), which is G˜ but with modiﬁed edge-cost. For any s ∈ S and its image s˜ = λ(s),
we deﬁne hc(s) = cm(πm(s˜, s˜g)), where πm is the optimal path in G˜m from s˜ to s˜g, Let E˜co be the set of conservative edges in E˜, E˜nco = E˜ \ E˜co . Let cmin be the minimum edge-cost in G˜. We deﬁne cm in Eq. (3).

cm(s˜i, s˜j) =

cmin/|E˜co| if (s˜i, s˜j ) ∈ E˜co αcmin if (s˜i, s˜j ) ∈ E˜nco

(3)

From Eq. (3), we see that the optimal path (πm(s˜, s˜g)) in G˜m would rather consist of all possible conservative edges than incorporating a single non-conservative one. Thus, the
desired properties of hc are achieved. Algorithm 1 shows the heuristic computation in detail. We
need to ﬁrst compute cmin and total number of conservative edges |E˜co| (Lines 1:5). We then compute the shortest path in G˜m from s˜g to every state in G˜m. This is done by running a backward Dijstra’s search on G˜m from s˜g to every state in G˜m. G˜m is implicitly constructed: for each expanded s˜ and a predecessor s˜ , we check whether (s˜, s˜ ) is conservative
and assign costs according to the scheme described in Eq.
(3) (Lines 6:19).
For each state s expanded by wA* search in the original
graph G, we ﬁrst ﬁnd its projection s˜ = λ(s). g(s˜) which
was updated when s˜ was expanded in the heuristic computation search, is the cost of the shortest path in G˜m. Therefore, hc(s) = g(s˜).

Algorithm 1 Conservative Heuristic Computation

1: cmin = min∀(s˜,s˜ )∈E˜ c(s˜, s˜ )

2: n = 0

3: for every (s˜, s˜ ) do

Compute |E˜co|

4: if is conservative((s˜, s˜ )) == True then

5:

n=n+1

6: |E˜co| = n

7: g(s˜g) = 0

8: OPEN = s˜g, CLOSED = ∅

9: while at least one s˜ ∈ S˜ hasn’t been expanded and OPEN = ∅

do

10: remove s˜ from OPEN with minimum g(s˜)

11: insert s˜ into CLOSED

12: for every predecessor s˜ of s˜ s.t s˜ not in CLOSED do

13:

if is conservative((s˜, s˜ )) == True then

14:

cm(s˜, s˜ ) = cmin/|E˜co|

15:

else

16:

cm(s˜, s˜ ) = αcmin

17:

if g(s˜) > g(s) + cm(s˜, s˜ ) then

18:

g(s˜) = g(s) + cm(s˜, s˜ )

19:

Insert s˜ into OPEN with g(s˜) as key

We prove the following (full proofs can be found in (Chatterjee et al. 2019)):
• hc is α consistent.

• wA* using hc is complete, with cost of the returned solution being no more than w.α times optimal solution cost in G (Thm 1,3).
• The chosen cost-scheme guarantees that the longest purely conservative path has lower cost than any path with a non-conservative edge in G˜m (Thm 4).
• If a purely conservative path exists in G˜m from s˜st to s˜g, then number of expansions made by wA* with sufﬁciently large w equals the length of the shortest purely conservative path from s˜st to s˜g (Thm 5). If not, hc will still guide the search towards the use of edges in G that have conservative mappings in G˜m. In doing so, wA* returns a solution with cost within the stated sub-optimality bound. However, no guarantees on the number of expansions can be provided.
It is to be noted that ﬁnding conservative edges (function is conservative((s˜, s˜ )) in Lines 3 and 13) is domain-dependent. However, in navigation-planning domains, domain-knowledge helps in computing conservative edges efﬁciently. In the aformentioned example of planning in (x, y, orientation), given the map of the environment and the circumradius rc of the robot, an edge can be deemed conservative by checking if both the vertices comprising the edge are at a distance greater than rc from the nearest obstacle 1. This check is an O(1) operation and can be performed during the implicit construction of G˜m. The next section shows how conservative edges can be computed efﬁciently for two navigation domains: (1) path-planning for a UAV, and (2) humanoid foot-step planning.
Implementation and Experimental Analysis
Path Planning for a UAV in (X,Y,Z)
We ﬁrst evaluated the effectiveness of our heuristic computation for path planning in S = (X, Y, Z) for a simulated omnidirectional UAV. We discretized the environment (Fig 3 bottom left), terrain (obstacles) in maroon) into 600 × 600 × 400 cells. G is a 3D 26-connected grid with transition costs proportional to euclidean distance between states.
Heuristic space: G˜ is deﬁned by dropping the z, or, λ([x, y, z]) = [x, y]. Thus, G˜ is a 2D 8-connected grid. We assume a maximum ﬂying range in z for the UAV given by zmax. We consider s˜ = [x, y] ∈ S˜ as ’free’ if there exists a z < zmax for which s = [x, y, z] is obstacle-free, thus ensuring Eq. (2) holds.
Conservative Edge Computation: For every 2D [x, y] state, obstacles in z are represented as the terrain elevationmap (Fig 3, example elevation values ze shown in yellow). For a 2D edge ([x, y], [x , y ]), let ze and ze be the respective elevations for [x, y] and [x , y ]. We compute zd = |ze − ze|, the absolute difference in elevation of two adjacent 2D states forming the edge. Since the 3D grid is 26-connected, a zd value of 0 or 1 implies that every s = [x, y, z] projecting to
1Distance-Transforms are typically used to compute and store the distance of each state in a 2D or 3D grid to its nearest obstacle.

676

Figure 3: (top left) Cons.(red and blue) and a non-Cons. edge(green) for UAV domain, terrain elevation map (grey: terrain, yellow: elev values(ze)). (top center, right) visualized h-values and optimal 2D paths by hc and hb respectively. (bottom left, right) 3D paths using hc, hb.
[x, y] has at least one collision-free edge to a s = [x , y , z ] projecting to [x , y ], making ([x, y], [x , y ]) conservative (Fig 3 (top left), red and blue). However, zd > 1 indicates that there is one state s = [x, y, z] projecting to [x, y], which has no collision-free edge to any s = [x , y , z ] projecting to [x , y ], making ([x, y], [x , y ]) non-conservative (Fig 3 (top left), green. zd = 2).
Results: We compare hc with a base-line heuristic hb, which is cost of the optimal path in (x,y) space but with the regular euclidean 2D edge-costs. hc is higher (yellow, red regions in Fig 3 (top center)) in the central region where elevation differences are steeper causing many infeasible 3D edges and more non-conservative edges. As a result, hc guides the search away from this region and on purely conservative paths (Fig 3(top center) white-line), unlike hb (Fig 3 (top right)). We evaluate in 20 ’Easy’(gradual terrain slopes, lesser depression regions) and 20 ’Difﬁcult’ (steeper slopes). Table 1 shows results. Success rate indicates the number of instances when the planner ﬁnds a solution. Heuristic computation time includes time taken to identify conservative edges and run the Backward Dijkstra’s search in G˜m, Planning time indicates time taken by wA* to compute a solution, total time being the sum of both. Statistics are computed for cases in which both planners were able to ﬁnd a solution. hc has signiﬁcantly less expansions, while producing similar solution costs and sizes. For the example in Fig 3, hc (Fig 3(bottom left)) generates a path around the steep regions, whereas hb (Fig 3(bottom right)) computes a path through the steep-sloped regions. The number of expansions using hc is 829, which is exactly equal to the solution size (829), and signiﬁcantly less than the number of expansions using hb (20940). However, solution cost using hc is 8280, which is slightly greater than that using hb (6270). For the ’easy’ scenarios where chances of encountering local minima are low, search using hc and hb performs similarly.
Humanoid Footstep Planning for Bipedal Walk
For this domain, state s = [xl, yl, θl, xr, yr, θr, ID] ∈ S consists of global position and orientation of the two feet

Figure 4: (left) Biped states s1, s2 (red, black) such that λ(s1) = λ(s2) = A ∈ S˜. States(pink) forming a “North” macro-move in E for s1. (right) States(yellow) forming a “North” macro-move in E for s2. (A, D) is the corresponding macro-move in E˜.
and ID of the foot being moved next (active foot). The environment was divided into 800x800 cells. θ has a resolution of 45◦. The active foot moves relative to the pivot foot. For each foot as pivot, there are 15 feasible motions of the active foot in the form of a = [δx, δy, δθ] relative to pivot foot. Transition-costs are proportional to euclidean distance between the feet centers.
Heuristic Space: G˜ is a 2D 8-connected grid. λ projects the 2 feet-positions in s to the 2D grid by computing their mean. Cost of an edge is proportional to the euclidean distance between 2D cell-centres.
Conservative Edge Computation: For an (s˜, s˜ ) to be conservative, every s ∈ λ−1(s˜) should have at least one valid pose leading to a state in λ−1(s˜ ), such that the mean moves along (s˜, s˜ ). Owing to the kinematic constraints of this humanoid, most edges in set E˜ are nonconservative. Consider the example in Fig 4, where the active foot (right) can have 2 feasible motions: a1 = [2, 0, 0] or a2 = [0, 0, 45◦]. Let s1, s2 be states in λ−1(A), shown in Fig 4 (left) in red and black respectively. None of the actions a1 or a2 applied in s2 result in a successor that projects to B. Similarly, no action applied in s1 results in a successor that projects to C. Thus, (A, B) and (A, C) are both nonconservative edges.
However, consider the state D, 5 edges North of A in the heuristic-space (Fig 4 (center)). Applying a1 thrice from s1 (Fig 4 (center)) moves the mean to D. Applying a2 and then a1 four times from s2 (Fig 4 (right)) also moves the mean to D. Thus, we can choose a state s˜ , k edges away from A in heuristic space, with k being sufﬁciently large such that every s ∈ λ−1(A) has a sequence of valid steps in G to move the mean to s˜ . We call this sequence of moves as a ’macromove’. Macro-moves exist in G as well as G˜. Fig 4 (center) and Fig 4 (right) depict macro-moves in G from s1 and s2 respectively, corresponding to the macro-move (A, D) in G˜. If we can ﬁnd macro-moves from every s ∈ λ−1(A) to some s ∈ λ−1(D), then (A, D) satisﬁes the conservative property and thus, becomes a conservative macro-move.
We can generate such macro-moves from A in other directions as well. Here, we select k = 20 and add macro-moves in 4 directions (North, East, West, South) in G˜. These macro-

677

type of environment difﬁcult difﬁcult easy easy

heuristic
hc hb hc hb

w in wA* 100 100 100 100

succ rate 100% 80% 100% 100%

# expansions 534±99
56687±30740 894±1263 1921±4300

sol size 534±99 537±94 381±96 346±112

sol cost 5333±994 5357±943 3798±969 3452±1160

planning time(s) 0.002±0.001 0.028±0.03 0.001±0.001 0.002±0.002

heur comp time(s) 0.21±0.003 0.21±0.01 0.21±0.009 0.20±0.05

Table 1: Comparison of hc with baseline hb for UAV domain in ’difﬁcult’ (more local minima) and ’easy’ scenarios

heuristic w in wA* succ. rate # expansions sol size

sol cost

planning time(s) heur comp time(s)

hc

100

37/39 1720±5850 50±35 156250±110820

6±19.8

0.07 ±1.39

hb

100

24/39 16000±19000 61.1±62.8 51630±52396

36±43

0.036±0.006

Table 2: Comparison of hc with baseline hb in Footstep Planning.

Figure 5: Results with hc (left) and hb (right) for footstep planning.
moves represent sequence of actions and are analogous to motion primitives and can be computed ofﬂine. Once computed for all s ∈ λ−1(A) for any A ∈ S˜, these can be applied to any state s ∈ S to compute its relevant successors.
We compute conservative heuristic hc(s) of state s, by performing a Dijstra’s search in G˜ with the macro-moves included. Note that, macro-moves are like any other edge and no edges have been removed from any of the graphs, hence all the guarantees described before still hold.
Results (Simulation): We used the model of a full-size humanoid for our experiments and allowed a maximum planning time of 90 seconds. We chose a typical indoor environment with narrow passages, corridors and varying doorway sizes. Also, the environment has multiple pathways for traversing between different locations, therefore requiring the search to explore these options. Table 2 compares the performance of conservative heuristic (hc) with the baseline 2D Dijkstra’s shortest path heuristic (hb). Results are averaged over 39 random starts and goals. hc has a remarkably higher success rate (94.8%) compared to hb (61.5%). Moreover, using hc reduces planning times by an order of ≈ 6 and expansions in the ﬁnal search by a factor of 10. The heuristic computation time is slightly higher for hc (0.07s) than hb (0.036s) owing to the addition of macro-moves in E˜. Two examples of the search using hc and hb shown in Fig 5 (left) and (right) respectively. In the ﬁrst example (top), wA* with hb takes a long time but ﬁnds a path through the narrow passage. In the second example (bottom), wA* with hb isn’t even able to ﬁnd the solution in 90s.

Figure 6: Initial environment (top left). Planner stuck in local minima (top center) created by the narrow passage between white and brown box using hb, NAO waiting for plan (top right). NAO executing plan computed using hc (bottom).
Results (Robot experiment): Fast re-planning is useful when the environment is changing. We implemented a footstep planner for the NAO robot based on (Hornung, Maier, and Bennewitz 2013) and show advantages of using hc in quickly computing footstep plans in the following scenario:
• We placed a set of static obstacles in the environment and computed initial footstep plans using hc and hb.
• During execution, we added an obstacle in the environment creating a narrow passage on the robot’s path, triggering re-planning. wA*(w=8) using hb keeps expanding states in the local minima created by the passage and fails to ﬁnd a path in the given time. wA*(w=8) using hc re-plans in 978 ms (heuristic computation time: 187 ms, planning time: 791 ms). A video demonstration of this experiment can be found here: https://youtu.be/ zs4HX84jE1w
Conclusion
We proposed a heuristic computation algorithm using conservative edges in the heuristic-space for reducing state expansions by wA*, proved theoretical properties and applied our approach in several motion planning domains, observing signiﬁcant reductions in expansions and planning times. Future work is to have a probabilistic deﬁnition of the conservative property.

678

References
Bacchus, F., and Yang, Q. 1991. The downward reﬁnement property. In Proceedings of the 12th International Joint Conference on Artiﬁcial Intelligence - Volume 1, IJCAI’91, 286–292. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc.
Ba¨ckstro¨m, C., and Jonsson, P. 2013. Bridging the gap between reﬁnement and heuristics in abstraction. In IJCAI, 2261–2267.
Bulitko, V.; Sturtevant, N. R.; Lu, J.; and Yau, T. 2007. Graph abstraction in real-time heuristic search. J. Artif. Intell. Res.(JAIR) 30:51–100.
Chatterjee, I.; Likhachev, M.; Khadke, A.; and Veloso, M. 2019. Speeding up search-based motion planning via conservative heuristics. Tech. Report, The Robotics Institute, Carnegie Mellon University.
Culberson, J. C., and Schaeffer, J. 1998. Pattern databases. Computational Intelligence 14(3):318–334.
Ferguson, D.; Likhachev, M.; and Stentz, A. 2005. A guide to heuristic-based path planning. In Proceedings of the international workshop on planning under uncertainty for autonomous systems, international conference on automated planning and scheduling (ICAPS), 9–18.
Haslum, P., et al. 2007. Reducing accidental complexity in planning problems. In IJCAI, 1898–1903.
Helmert, M.; Haslum, P.; Hoffmann, J.; et al. 2007. Flexible abstraction heuristics for optimal sequential planning. In ICAPS, 176–183.
Helmert, M. 2006. The fast downward planning system. Journal of Artiﬁcial Intelligence Research 26:191–246.
Hoffmann, J., and Nebel, B. 2001. The FF planning system: fast plan generation through heuristic search. Journal of Artiﬁcial Intelligence Research 14:253–302.
Holte, R. C.; Mkadmi, T.; Zimmer, R. M.; and MacDonald, A. J. 1996. Speeding up problem solving by abstraction: A graph oriented approach. Artiﬁcial Intelligence 85(12):321–361.
Hornung, A.; Maier, D.; and Bennewitz, M. 2013. M.: Search-based footstep planning. In In: ICRA Workshop Progress and Open Problems in Motion Planning and Navigation for Humanoids.
Hwangbo, M.; Kuffner, J. J.; and Kanade, T. 2007. Efﬁcient two-phase 3d motion planning for small ﬁxed-wing uavs. Proceedings 2007 IEEE International Conference on Robotics and Automation 1035–1041.
Liu, S.; Mohta, K.; Atanasov, N.; and Kumar, V. 2018. Search-based motion planning for aggressive ﬂight in se (3). IEEE Robotics and Automation Letters 3(3):2439–2446.
Pang, B., and Holte, R. C. 2011. State-set search. In Fourth Annual Symposium on Combinatorial Search.
Pearl, J. 1984. Heuristics: intelligent search strategies for computer problem solving.
Pohl, I. 1970. Heuristic search viewed as path ﬁnding in a graph. Artiﬁcial intelligence 1(3-4):193–204.

Vega-Brown, W., and Roy, N. 2018. Admissible abstractions for near-optimal task and motion planning. arXiv preprint arXiv:1806.00805.
Wilt, C. M., and Ruml, W. 2012. When does weighted a* fail? In SOCS, 137–144.

679

