2021 IEEE International Conference on Robotics and Automation (ICRA 2021) May 31 - June 4, 2021, Xi'an, China

2021 IEEE International Conference on Robotics and Automation (ICRA) | 978-1-7281-9077-8/21/$31.00 ©2021 IEEE | DOI: 10.1109/ICRA48506.2021.9561433

A Geometric Folding Pattern for Robot Coverage Path Planning
Lifeng Zhu1, Shuai Yao1,3, Boyang Li1,4, Aiguo Song1, Yiyang Jia2, and Jun Mitani2

Abstract— Conventional coverage path planning algorithms are mainly based on the zigzag and spiral patterns or their combinations. The traversal order is limited by the linear or inside-outside manner. We propose a new set of coverage patterns induced from geometric folding operations, called the geometric folding pattern, to make coverage paths with more ﬂexible traversal order. We study the modeling and parameterization of the geometric folding patterns. Then, a sampling operator is introduced. Based on the computational tools, we demonstrate the application of the proposed patterns in designing coverage paths. We show that the simple geometric folding patterns are ﬂexible and controllable, which enables more choices for the coverage path planning problem.
I. INTRODUCTION
Coverage path planning (CPP) is one topic in robotic motion planning, as it searches for a path that passes through every location of interest in a given region. It has been studied for its wide applications in robotics. For example, the CPP problem is related to unmanned aerial vehicles [1], cleaning robots [2], agricultural robots [3] or robots for additive manufacturing [4], etc. Various solutions of the CPP problem have been proposed for speciﬁc requirements from different applications.
Although there are many different solutions to the CPP problem, the coverage paths follow several major patterns, as shown in Fig. 1. The zigzag pattern (or the lawnmower pattern, the boustrophedon pattern) is one of the typical patterns. The simple back and forth movement of a mobile robot can be adapted to different domains or composed to form a coverage path. Another typical pattern is the spiral pattern, where a mobile robot moves from or to the center along a rotational path. These simple patterns are common but lack variability. For example, the starting and exit points of the path are ﬁxed. If a ﬂexible control path is required, it is necessary to decompose the domain. Sometimes, limited by the area, the decomposition cannot be found. More complex and general coverage paths are known as space-ﬁlling curves. But the search space of a general space-ﬁlling curve is too large and it is usually not tractable to use general spaceﬁlling curves to model coverage paths. In addition, a mobile robot may have more turns following a complex coverage path, which is not energy-efﬁcient.
In this work, we propose a new set of coverage path patterns from geometric folding operations. Geometric folding
1Lifeng Zhu, Shuai Yao, Boyang Li and Aiguo Song are with the The State Key Laboratory of Bioelectronics, Jiangsu Key Lab of Remote Measurement and Control, School of Instrument Science and Engineering,Southeast University, P.R.China lfzhulf@gmail.com
2Yiyang Jia and Jun Mitani are with University of Tsukuba, Japan 3Shuai Yao is with the China Jiliang University, China 4Boyang Li is with the Tsinghua University, China

Fig. 1. Typical patterns for coverage path planning.
Fig. 2. A strip of stamps (a) are folded into a pile (b) with its connection preserved. By embedding the folded strip observed from the side view into a domain, we obtain a folding path (c).
is an art to design patterns following which planar materials can be folded without interpenetration. A special folding problem called the stamp folding is to count the number of ways that a strip of stamps can be folded [5]. As shown in Fig. 2, by looking from the side view to see how the stamps are stacked along the folding creases, we observe a path covering a squared-shape region without any intersection. From this insight, we name the pattern of the path a geometric folding pattern and study the parameterization of the patterns for the CPP problem. We show that the geometric folding pattern is a generalization of the zigzag and spiral pattern. While it covers the zigzag and spiral pattern and shares their simplicity and intersection-free features, our generalization also has a larger trackable solution space, enabling more ﬂexible choices for the CPP problem.
It is not straightforward to adopt the stamp folding problem for CPP. The original work on stamp folding in combinatorial mathematics only focuses on counting the folding ways. In this work, we focus on the generation of the patterns with control. Given locations that should be passed in order, we design a searching method that enables a user to enumerate or randomly sample a coverage path following the proposed pattern. Based on the methods, we demonstrate the potential of the geometric folding pattern for CPP problems.
II. RELATED WORK We brieﬂy mention a few previous works that are closely related to our work. For a thorough review of the coverage path planning problem, we refer to the survey [6] [7]. Patterns in Coverage Path Planning. Although the coverage path planning problem has been studied for years, the

978-1-7281-9077-8/21/$31.00 ©2021 IEEE

8509

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

underlying patterns of the paths for different territories do not have many variations. Most popular patterns include the zigzag and spiral pattern [8]. These patterns are frequently adapted from a square domain to regions in a polygonal shape. For complex regions with concavity or holes, typical solutions are decomposing the region into cellulars and combining the zigzag path in the cellular [9], or computing and connecting the iso-contours into an adapted spiral path [10] [11]. On the other side, the most ﬂexible design of the coverage paths is the space-ﬁlling curve [12]. However, creating a general space-ﬁlling curve is expensive as the search space is too large and with complicated constraints if the curve needs to fully cover the space without intersections. One special space-ﬁlling curves called the Hilbert curve has been introduced to the CPP problem with multi-resolutional control [13]. As a variant of the typical spiral pattern, Fermat spiral is used in the path design for additive manufacturing [14]. In this work, we devise a new set of coverage path patterns which is ﬂexible, can be well parameterized and cover the most typical zigzag and spiral patterns. Geometric Folding. Geometric folding is a topic in combinatorial mathematics and computational geometry, with applications in structural design and origami [15]. When the folding creases are parallel, the folding operations are essentially applied on a one-dimensional material and then lead to a stamp folding problem which counts the number of the folding types [5]. It is also studied with its twodimensional counterpart called map folding [16] [17]. In combinatorial theory, researchers focus on establishing the symmetry and counting the number of the folding types [5]. Later, an algorithm to generate the foldings is developed [18]. The method to ﬁnd stamp folding from mountain-valley assignment is also proposed [19]. Different from the study in mathematics, we introduce the stamp folding to CPP and ﬁll gaps in modeling stamp folding for robot CPP.
III. COVERAGE PATH AS A FOLDABLE STRIP
In order to model the coverage path as a foldable strip and use the model for CPP, we ﬁrst introduce the parameterization of the proposed coverage path pattern and then present our algorithm to create the coverage path pattern.
Formally, a foldable strip can be stored as a permutation. As illustrated in Fig. 3, we regard the strip as a continuous bend line and number it from the beginning. After folding it, the order of the strip will be permutated. Suppose the strip is folded into n segments, by listing the indices of strip segments from top to bottom, we get a permutation to represent the folding status. If we regard the strip as a path of a mobile robot and embed the strip into a grid, a foldable strip describes the geometry of a coverage path, as shown in Fig. 2. We call the proposed coverage path a folding path. Each folding path is parameterized as a permutation p = {p1, p2, ..., pn}, where pi = σ(i) is a bijective map from {1, 2, ..., n}. We call p the order of the folding path. We also name the address a = {a1, a2, ..., an} of the folding path, where ai satisﬁes pai = i and stores the layer ID where the ith fold occurs.

Fig. 3. A folding path is parameterized as a permutation p as well as its address a by checking the order of the folds.
In our design, all the coverage paths with the proposed parameterization form a subset of Sn, where Sn is the symmetric group of {1, 2, ..., n}. As shown in Fig. 4, a permutation may lead to a path with self-intersections, which is not foldable. In other words, a foldable strip can be parameterized as a permutation but not all the permutations correspond to foldable strips. Suppose all the foldable strips with n segments form a set Fn, which is called the geometric folding pattern with order n, we have Fn ⊆ Sn. As a foldable strip corresponds to a coverage path without intersections, we need to test if a given permutation a is in Fn before using it to generate a coverage path. This problem has been studied in combinatorial mathematics. In [5], a method is devised to count the cardinality of Fn, i.e., the number of the elements in Fn. A permutation in Fn will be found with time complexity of O(n) with the dedicated date structure proposed in [18]. In CPP, we aim to ﬁnd a folding path to satisfy certain constraints and the existing methods does not directly apply. As an alternative solution, we may ﬁrst enumerate all permutations in Fn and ﬁlter the permutations using the given constraints. However, although Fn is smaller than Sn, the number of elements in Fn still grows rapidly as n increases. Therefore, it is still costly to ﬁnd good designs in Fn. On the other hand, the ratio of cardinality card(Fn)/card(Sn) gets smaller as n increases. For the task of folding path creation with constraints, it is not efﬁcient to either enumerate all elements in Fn or randomly pick and test an element in Sn. In this work, we present another valid method to sample a feasible folding path with constraints as a foldable strip parameterized as a permutation. We also introduce how to obtain the geometry of the folding path from the permutation for CPP.
Our method is based on an elementary test introduced in [5]. We ﬁrst brieﬂy summarize the elementary test here. As shown in Fig. 4, when folding a strip, self-intersections only happen when two local folds on the same side intersect. We then check all the local folds on the same side and
Fig. 4. One permutation may correspond to a folded result with selfintersections. By locally checking the address, we get the three types for pairs of local folds and ﬁnd self-intersections.

8510

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

Algorithm 1 Validation Test

Input: a = {a1, a2, ..., an}: the address of the folding path

Output: if the folding path has no self-intersection

1: function VALIDATIONTEST(a)

2: O ← {(i, i + 1)|i is an odd number}//one side

3: for all pairs oj, ok ∈ O, j = k do

4:

if ElementaryTest(oj, ok, a) == false then

5:

return false

6:

end if

7: end for

8: E ← {(i, i + 1)|i is an even number}//the other side

9: for all pairs ej, ek ∈ E, j = k do

10:

if ElementaryTest(ej, ek, a) == false then

11:

return false

12:

end if

13: end for

14: return true

15: end function

Algorithm 2 Elementary Test

Input: a = {a1, a2, ..., an}: the address of the folding path,

fj = (j, j + 1), fk = (k, k + 1): the jth and kth fold.

Output: if fj and fk do not intersect

1: function ELEMENTARYTEST(fj , fk, a)

2: (jl, jr) ← (min{aj, aj+1}, max{aj, aj+1})

3: (kl, kr) ← (min{ak, ak+1}, max{ak, ak+1})

4: if jr < kl or kr < jl then

5:

return true //Status 1

6: else if kl < jl < jr < kr or jl < kl < kr < jr then

7:

return true //Status 2

8: else

9:

return false //Status 3

10: end if

11: end function

report a feasible permutation only if they do not intersect. Speciﬁcally, we check the order of the address, as listed in Alg.1. The pseudo-code of the elementary test shown in Fig. 4 is listed in Alg.2. Based on the validation test, we develop our algorithm to either enumerate all folding paths or sample a random folding path with control. Folding Paths with Order Control. We now introduce our algorithm to create the stamp folding with order control. A previous study on stamp folding only works for enumerating the samples of stamping folding given the number of folds n. For designing a coverage path, we show that by parameterizing the coverage paths as permutations, the obtained folding path is more ﬂexible to cover an area with order control. Speciﬁcally, the input of our algorithm is a set of grid points in order, which constrains the folding path passing through them in order, as shown in Fig. 5(a).
Suppose the input m grid points are at the lines l1, l2, ..., lm, we aim to generate a permutation a ∈ Fn which contains a subset l1, l2, ..., lm in a speciﬁed order. Formally, all the permutations which satisfy the order constraints can

Fig. 5. (a)A user inputs the order constraint in grids. The output path is expected to pass these grids in the given order. (b)We initialize a set of incomplete addresses keeping the input order and then iteratively insert other rows into the address with validation test until the address is complete.
be written as the address a ∈ {(a1, a2, ..., an)|abi = li, i = 1, 2, ...m & bi < bj if i < j}. We start from the array {l1, l2, ..., lm} and pad zeros between the constraint line numbers to make an array with length n. Then, we iteratively insert the rows without constraints in L = {1, 2..., n} − {l1, l2, ..., lm}. Each time we insert a new row to the array, we run a validation test to check if the constraints are infeasible. We only test the pairs with non-zeros in Alg.1 and stop growing the array if it does not pass the validation test. In this way, we always maintain a valid array and avoid to enumerate and check all permutations. We repeat the insertion until the n-dimensional array is ﬁlled with a permutation of {1, 2, ...n}. We illustrate our method in Fig. 5(b) and summarize the algorithm in Alg.3. Sampling Random Feasible Coverage Patterns. Using Alg.3, we obtain all the permutations that satisfy the speciﬁed order control. We use a depth-ﬁrst search to ﬁnd all the possible orders to grow the array to a feasible permutation. It is also possible to sample a random feasible folding path in case it is not necessary to enumerate all the constraint paths. In this case, we iteratively pop a random row l ∈ L and ﬁll it in the array a at a random index i ∈ {i|ai = 0} to obtain a permutation. We also run the validation test at each step of insertion. If the validation test is not passed, we try another random insertion in this step or with a backtrace. We set a threshold and regard the random search failed if the number of the failure trials exceeds the threshold. The threshold of the trial times is set to 1000 in our experiment. Instantiation. After a feasible permutation which satisﬁes the input order control is obtained, we need to instantiate the folding path corresponding to the permutation. Formally, we are solving for the turning vertices {xi, yi} from the permutation a and the folding path forms by connecting the turning vertices. Suppose we are ﬁnding a folding path on a rectangular region with a grid partition and assume the robot primarily walks along the x direction, the order in the permutation deﬁnes the y-coordinates in the folding path. Speciﬁcally, yi is set to ai because the folding path is at the ith level as the address in a. In order to ﬁnd xi at the turning vertices, our solution is based on two observations. First, the folding path alternatively turns on the left and right side. Second, the local folds enclose each other and form a tree-like structure, as illustrated in Fig. 6. The turning vertex is close to the boundary if the corresponding local folds are close to the root in terms of the enclosing relationship.

8511

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

Algorithm 3 Folding Paths with Order Control

IV. EXPERIMENTS AND RESULTS

Input: L = {l1, l2, ..., lm}: the line numbers in an order, n:the size of the fold
Output: The set A of permutations which are stamp folding

We experiment with the proposed new parameterization of coverage paths with different conﬁgurations.

and pass through L in order. 1: function FOLDINGPATHS(L, n)

A. Experiments

2: A = ∅

We implement our method using Python and tested it on

3: B ←All combinations of m elements in {1, 2, ..., n} an Inter i7-10510U CPU 1.80GHz with a single thread. The

4: L = {1, 2, ..., n} − {l1, l2, ..., lm}

5: for {b1, b2, ...bm} ∈ B do

6:

a ← {0, 0, ..., 0}1×n

7:

for i = 1, 2, ..., m do

ﬁrst contribution of this work is a new pattern for CPP. In comparison with the zigzag or spiral pattern, the folding path is more ﬂexible to be controlled. We could obtain various folding paths to cover a domain. The ﬂexibility enables

8:

abi = li

9:

end for

10:

if ValidationTest(a)==true then

11:

Recu(L , a, A)

us to select a folding path with preference in its order or other design considerations. Note that the zigzag pattern and spiral pattern correspond to the permutation {1, 2, ..., n} and {1, n, 2, n − 2, 3, n − 3...} and the geometric folding pattern

12:

end if

can be regarded as a generalization of the typical patterns.

13: end for

We test our method on rectangular domains with different

14: return A

input conﬁgurations, as illustrated in Fig. 7. We design a user

15: end function

interface that allows users to click on a grid in order, yielding

16: function RECU(L , a, A)

a set of control points with its order shown in numbers. It

17: if L = ∅ then

supports folding paths along both the horizontal and vertical

18:

A ← A ∪ {a}

directions. Because we input the order control with the

19:

return

interface, we allow to add only one control point in a row if

20: end if

the folding path is along the horizontal direction. In order to

21: Pop l from L

provide feedback, we provide an enumeration mode that lists

22: for i in {i|ai = 0} do

23:

a ←a

all constraint folding paths or a random mode that reports a random folding path that satisﬁes the input order. Each time a

24:

ai = l //insert l at the index i

25:

if ValidationTest(a )==true then

user clicks the button, we show a folding path corresponding to a permutation and the arrow on the end of the folding path

26:

Recu(L , a , A)

visualizes the direction. After the instantiation, we test if the

27:

end if

path passes the input points. As shown in the left subﬁgure

28: end for

of Fig. 7(d), our system may output a path that seems to

29: end function

walk both horizontally and vertically because the length of

the stamp on certain levels may be zero after the embedding.

User may choose a horizontal or vertical path depending on

Therefore, we add a property of depth to each local fold and set it to zero by default. When we run the validation test, we can obtain the status of each pair of local folds, as shown in Fig. 4. If a local fold i is found to be inside another local fold j, its depth di is increased by one. In the validation test, we test all pairs of local folds and obtain the depth of all the local folds. At last xi is set to di if the turn corresponds to a local fold with depth di at the left side or is set to xmax − di if it is at the right side. If di > xmax, we report there is no valid geometric embedding of the permuation with the speciﬁed constraints.

their speciﬁc needs. We test the performance of both the enumeration mode
and the random mode. Generally, in the enumeration mode, the proposed method interactively enumerates all constraint folding paths on a grid with n up to 11. In addition to the resolution n, the computational time is also dependent on the input constraints. We therefore test the enumerator with different resolutions and under different input orders. Speciﬁcally, for each resolution n, we randomly sample m control points that specify the order of the folding path. Then, we run and time our method to ﬁnd all constraint folding paths. The timing statistics for n = 6 and n = 10

are summarized in Fig. 8 as a reference. Although it seems

that more constraint points make the problem complex, the

search space of the permutations is actually smaller if the

user imposes more control points. In an extreme case where

a user speciﬁes the permutation by input n constraint points

in different levels, a single validation test is run to validate

the design and compute the instantiation of the permutation.

We also validate our method with an alternative design in

Fig. 8. As another design, we may ﬁrst enumerate all stamp

Fig. 6. The enclosing relationship between the folds forms a tree. The

bound of the domain is set as a virtual root R.

8512

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

Fig. 7. (a) Three different folding paths satisfy the same input. (b) Three folding paths found by our method with different numbers and conﬁgurations of order constraints. (c) Results with different resolution n. (d) Folding paths created on rectangular domains with different orientations.

n

successful rate successful rate

(ours)

(reference)

computational time 95% conﬁdence interval

4

100%

66.6667%

[0.000358s, 0.000444s]

6

100%

20.0000%

[0.000708s, 0.000792s]

8

95.8%

3.4524%

[0.004511s, 0.005935s]

10

88.6%

0.3875%

[0.044793s, 0.063635s]

12

77%

0.0306%

[0.479046s, 0.630971s]

14

62%

0.0018%

[4.068389s, 5.284029s]

16

45.8%

0.0001%

[36.470972s, 47.623009s]

TABLE I THE TIMING STATISTICS FOR THE RANDOM SAMPLING MODE. WE TEST 500 RANDOM INPUTS WITH DIFFERENT RESOLUTION n AND m = n/2. WE LIST THE SUCCESSFUL RATE OF OUR METHOD. AS A REFERENCE,
THE MAXIMUM SUCCESSFUL RATE OF A COMPLETELY RANDOM GUESS
IS GIVEN AS card(Fn)/card(Sn) IN THE THIRD COLUMN.

Fig. 8. The timing statistics of the enumeration mode for n = 6 and n = 10. We randomly set the constraints for 500 times and show the box plot of the computational time w.r.t to the number of input points.
folding patterns of size n and then ﬁlter the results by checking if the stamp folding satisﬁes the order control. In this validation, we make a python implementation of the method in [18] to compute all the unconstraint stamp foldings, which could be regarded as the state-of-the-art design. We test the design alternative with the same conﬁgurations and plot the timing statistics in black boxes in Fig. 8. Because it is trivial to set only one constraint, we test with 2 < m ≤ n. We ﬁnd that the alternative design is optimized to ﬁnd all unconstraint stamp foldings. However, with more constraint points, the proposed method better encodes the order control and quickly gives all feasible folding paths. Based on the results of the test, we propose to enumerate unconstraint folding patterns using the traditional method when there are fewer or no constraints and switch to the proposed method in Alg.3 if m is large for better performance.
We then test the random sampling mode. In case if it is not necessary to enumerate all feasible folding paths, we support to sample a random folding path with order control because it will be faster in cases with high resolution n. For different resolution n, we set the number of the constraint

points to be half of n to check the scalability of the algorithm. We randomly sample 500 input orders. The timing statistics of the random sampling mode is shown in Tab.I. From the results, we ﬁnd that the average time for sampling a random feasible folding path is around 54ms for n = 10. We also test the scalability of our method by setting a larger n. Because the size of the space of the permutation is factorial, the computational time goes higher when n becomes extremely large. In our test, the prototype system samples a random feasible path of size n up to 16 at an interactive rate, e.g. it takes 40 seconds in average to sample a folding path with the resolution n = 16. We also list the successful rate of the random sampling. As a reference for the comparison, we list the ratio of the feasible foldings card(Fn)/card(Sn) to indicate the maximum successful rate if we randomly generate a permutation and then check if it is valid. For reference, we also time the validation test (Alg.1) and the instantiation for large n. Even for n = 50, the validation test costs 0.2ms and the instantiation costs 1.6ms in average.
The ﬂexibility of the proposed parameterization is at a cost of scalability. Although the computational time increases signiﬁcantly with large n, it is still acceptable because the folding path majorly moves along a horizontal or vertical direction rather than a free move. If we are searching for a coverage path which allows a completely free move on

8513

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

Fig. 9. (a)A drone’s ﬂying path is designed to loop over a domain to quickly check if the devices at A,B,C fail. (b)A robot is searching over an irregular domain and rescues known patients at A,B,C,D,E with a given priority.
a grid, each step a robot may move up/down/left/right. The search space is at an exponential scale. Compared to this exponential complexity, the proposed folding paths form a set smaller than Sn and the complexity is signiﬁcantly smaller than a fully free coverage pattern. Besides, the solution space of the folding paths is large enough for CPP, e.g., there are 28, 120 folding paths for n = 10. From the experiments, we show that by constraining the coverage paths to be folding paths, we reach a good trade-off between ﬂexibility and computational efﬁciency.
B. Applications and Extensions
Because we obtain a large space of variations of the coverage path in an interactive rate, the proposed folding paths ﬁnd different applications in robotics. Here we demonstrate its usage in CPP for robotic inspection and rescue. While the real cases are complicated, we take abstract scenarios here to demonstrate the potential application of our work.
One application of the folding path is for designing a coverage path of an inspection robot in a power plant. As shown in Fig. 9(a), a drone’s path should be designed to cover the entire area of a power plant to check if any part is not working properly. Given a prior distribution of the failure parts, we can mark a priority of the inspection. As shown in the ﬁgure, A, B, and C are the three most probable locations to have failure machines. We will have a high priority to inspect these three locations in order. We also need to cover all the area to see if the failure part is at other locations. In this case, we design a coverage path that prefers to pass A, B, and C in order. In addition, we hope to pass these three points as early as possible and make the path forms a loop to repeat the inspection. Since there are many solutions, we recommend a folding path to pass through the three points at the beginning. We only need to modify the Alg.3 by putting the line number of A, B, and C at beginning of the address a to start the search. We also ﬁlter the results by checking if the path forms a loop. Our method quickly outputs a feasible coverage path, as shown in Fig. 9(a). Similarly, we may ﬁnd a folding path with its starting point and exit point overlap by ﬁltering the space of solution.
A similar application is found in robotic rescue. As shown in Fig. 9(b), a robot is planned to cover a given irregular region to search for the wounded. If there are both known patients with a given priority to rescue and unknown patients with unknown priority in this region, we could apply the

Fig. 10. Folding paths on complex regions can be found by decomposing the domain.
folding path to design a coverage path, which passes through the known patients in a given order and covers the entire region to complete the search. By computing and adjusting the folding path to the region, the designed coverage path boosts the efﬁciency in robotic rescue. Note that the folding path is essentially a new pattern for coverage paths. We can adapt the folding path to an irregular region by aligning the path to the region or decomposing the region if necessary [9] [20].
The proposed folding path can be seen as a generalization of the zigzag and spiral pattern. Therefore, it is possible to extend this pattern for more complex coverage path design by using composition, as shown in Fig. 10. In this case, we ﬁrst decompose a complex domain to different quad regions. Then we specify the connecting points between the regions as the start or end point of the folding path. By connecting the folding path in each region, we obtain various complex coverage paths. In this mode, we still compute for the folding path with order control implied by the start and end point. After a folding path with order control is found, we check if the start and end points are the same with the input before we output it to the user. We show an example in Fig. 10. With our method, various coverage paths could be obtained. Because the computational cost is high for large n, it is also feasible to reduce the computational cost by decomposing a region with a large n to smaller regions and connecting the folding paths.
V. CONCLUSIONS
We propose a new pattern for CPP and use permutation as a new parameterization of the designed pattern. With the proposed pattern, we get a ﬂexible space of the coverage paths and allow to compute coverage paths with order control. We validate our design by experiments and demonstrate its applications. In the future, we will study for more efﬁcient data structures and faster algorithms to improve the performance of the folding path design by assessing the complexity of the algorithm. It is also interesting to look into the ways to decompose a complex domain and connect the folding paths. In addition, we will also study how to customize the folding path design problem for different applications to further promote the new path patterns to CPP.
ACKNOWLEDGMENT
This work has been supported by the National Key Technologies R&D Program under Grants No. 2019YFC0119303 and the Zhishan Youth Scholar Program of SEU.

8514

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

REFERENCES
[1] Taua˜ M. Cabreira, Lisane B. Brisolara and Paulo R. Ferreira Jr. Survey on Coverage Path Planning with Unmanned Aerial Vehicles. Drones 2019, 3(1), 4.
[2] R. N. De Carvalho, H. A. Vidal, P. Vieira and M. I. Ribeiro, Complete coverage path planning and guidance for cleaning robots, ISIE ’97 Proceeding of the IEEE International Symposium on Industrial Electronics, Guimaraes, Portugal, 1997, pp. 677-682 vol.2.
[3] K. Zhou, A. Leck Jensen, C.G. Sorensen, P. Busato, D.D. Bothtis, Agricultural operations planning in ﬁelds with multiple obstacle areas, Computers and Electronics in Agriculture, Vol 109, 2014, pp. 12-22.
[4] D.Ding, Z. S.Pan, D.Cuiuri and H.Li. A tool-path generation strategy for wire and arc additive manufacturing. Int. J. of Adv. Manufact. Tech. 73, 1-4, 2014, pp.173–183.
[5] Koehler, John E. Folding a strip of stamps. Journal of Combinatorial Theory. 1968. 5 (2): pp.135– 152.
[6] Choset, H. Coverage for robotics—A survey of recent results. Ann. Math. Artif. Intell. 2001; pp. 113–126.
[7] Enric Galceran and Marc Carreras. A survey on coverage path planning for robotics. Robotics and Autonomous Systems, vol.61, 2013, pp.1258–1276.
[8] Taua M. Cabreira, Lisane B. Brisolara and Ferreira Paulo R. Jr. . Survey on Coverage Path Planning with Unmanned Aerial Vehicles. Drones, vol.3(4), 2019, pp.1–38.
[9] Howie Choset and Philippe Pignon. Coverage Path Planning: The Boustrophedon Decomposition. Proceedings of International Conference on Field and Service Robotics, 1997.
[10] Fotios Balampanis, Ivan Maza and Anibal Ollero. Spiral-like Coverage Path Planning for Multiple Heterogeneous UAS Operating in Coastal Regions. In International Conference on Unmanned Aircraft Systems (ICUAS), 2017.
[11] Chenming Wu, Chengkai Dai, Xiaoxi Gong, Yong-Jin Liu, Jun Wang, Xianfeng Gu, Charlie C.L. Wang. Energy-Efﬁcient Coverage Path Planning for General Terrain Surfaces. The International Conference on Robotics and Automation (ICRA), 2019.
[12] Sagan, Hans. Space-Filling Curves, Springer-Verlag, 1994.

[13] S. A. Sadat, J. Wawerla, and R. Vaughan, Fractal trajectories for online non-uniform aerial coverage, Proceedings of IEEE International Conference on Robotics and Automation (ICRA), 2015
[14] Haisen Zhao and Fanglin Gu and Qi-Xing Huang and Jorge Garcia and Yong Chen and Changhe Tu and Bedrich Benes and Hao Zhang and Daniel Cohen-Or and Baoquan Chen. Connected Fermat Spirals for Layered Fabrication. ACM Transactions on Graphics. Vol 35(4), 2016, pp.100:1-100:10.
[15] Erik D. Demaine and Joseph O’Rourke. Geometric Folding Algorithms: Linkages, Origami, Polyhedra. Cambridge University Press; 1 edition, 2007.
[16] Lunnon, W. F. , A map-folding problem, Mathematics of Computation, 22 (101), 1968, pp.193–199.
[17] Rahnuma Islam Nishat and Sue Whitesides. Map Folding. The 25th Canadian Conference on Computational Geometry(CCCG), 2013.
[18] Joe Sawada and Roy Li, Stamp Foldings, Semi-meanders, and Open Meanders: Fast Generation Algorithms, The electronic journal of combinatorics, 19(2), 2012, P43.
[19] Ryuhei Uehara. Stamp Foldings with a Given Mountain-Valley Assignment. Fifth International Meeting of Origami Science, Mathematics, and Education (Origami 5), 2016.
[20] Acar EU, Choset H, Rizzi AA, Atkar PN, Hull D. Morse Decompositions for Coverage Tasks. The International Journal of Robotics Research. 2002;21(4):331-344.

8515 Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 14:24:17 UTC from IEEE Xplore. Restrictions apply.

