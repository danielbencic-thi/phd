2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) September 27 - October 1, 2021. Prague, Czech Republic
Accelerating Kinodynamic RRT* Through Dimensionality Reduction
Dongliang Zheng1 and Panagiotis Tsiotras2

2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) | 978-1-6654-1714-3/21/$31.00 ©2021 IEEE | DOI: 10.1109/IROS51168.2021.9636754

Abstract— Sampling-based motion planning algorithms such as RRT* are well-known for their ability to quickly ﬁnd an initial solution and then converge to the optimal solution asymptotically as the number of samples tends to inﬁnity. However, the convergence rate can be slow for high-dimensional planning problems, particularly for dynamical systems where the sampling space is not just the conﬁguration space but the full state space. In this paper, we introduce the idea of using a partial-ﬁnal-state-free (PFF) optimal controller in kinodynamic RRT* [1] to reduce the dimensionality of the sampling space. Instead of sampling the full state space, the proposed accelerated kinodynamic RRT*, called Kino-RRT*, only samples part of the state space, while the rest of the states are selected by the PFF optimal controller. We also propose a delayed and intermittent update of the optimal arrival time of all the edges in the RRT* tree to decrease the computation complexity. We tested the proposed algorithm using 4-D and 10-D state-space linear systems and showed that Kino-RRT* converges much faster than the kinodynamic RRT* algorithm.
I. INTRODUCTION
Robotic motion planning with the goal of ﬁnding a dynamically feasible and optimal trajectory for the robot through an environment with obstacles has gained much progress over the past decades. As a fundamental problem in robotics applications, it is still a challenging problem to solve when the environment is complex with irregular obstacles and the dynamics of the robot are to be considered.
Sampling-based motion planning algorithms, such as rapidly exploring randomized trees (RRTs) [2], have been developed to solve planning problems in high-dimensional continuous state spaces by incrementally building a tree through the search space. The asymptotic optimal variant of RRT, namely RRT* [3], almost surely converges asymptotically to the optimal solution. RRT* is well-suited for planning in high-dimensional spaces and obstacle-rich environments. Many applications of RRT* have been studied in recent years [4], [5].
One limitation of RRT* is that it requires any two points sampled in the planning space to be connected with an optimal trajectory. Thus, many works on RRT* consider robots with simple dynamics [4], [6] or assume a holonomic model and connect sampled points with straight lines [7]. For robots with differential constraints, the optimal trajectory between two states is obtained by solving a two-point boundary value problem (TPBVP), which is a non-trivial undertaking
This work has been supported by NSF awards IIS-1617630 and IIS2008695
1Dongliang Zheng is with School of Aerospace Engineering, Georgia Institute of Technology, Atlanta, GA 30332, USA dzheng@gatech.edu
2Panagiotis Tsiotras is with School of Aerospace Engineering and Institute for Robotics and Intelligent Machines, Georgia Institute of Technology, Atlanta, GA 30332, USA tsiotras@gatech.edu

for complex nonlinear systems. The solution to this local TPBVP is also referred to as the steering function. A version of the RRT* algorithm that explicitly considers differential dynamics is the kinodynamic RRT* [1], [6].
Solving TPBVPs is the computationally dominant component of kinodynamic RRT*, and thus researchers have looked into more efﬁcient ways to solve these TPBVPs. A steering function based on LQR is used in [8]. A ﬁxed-ﬁnal-state free-ﬁnal-time controller that optimally connects any pair of states is used in [1]. Learning-based RRT* algorithms are introduced in [9], [10], [11], where the TPBVP is solved using supervised learning [9], [10] and reinforcement learning [11].
Another challenge of RRT* is the slow convergence rate of the solution to the optimal one, which is especially evident for the kinodynamic case where the sampling space is not just the conﬁguration space but the full state space. Heuristic and informed sampling methods have been developed to improve the convergence rate [7], [12]. However, these methods only consider the geometric planning problem and the dynamics of the robot is not considered. Good heuristics for improving the convergence of kinodynamic RRT* is still an open research problem [13].

(a)

(b)

Fig. 1: Motivation of the partial-ﬁnal-state-free (PFF) optimal controller. (a) Existing kinodynamic RRT* algorithms sample the full state space, which results in inefﬁcient trajectories. (b) Kino-RRT* with a PFF controller samples the reduced state-space to improve convergence performance.

In this paper, we build on previous work on the kinodynamic RRT* [1] and propose a new algorithm, called KinoRRT*, which shows faster convergence. We propose the idea of using a partial-ﬁnal-state-free (PFF) optimal controller to reduce the sampling dimension of the state space. The motivation is illustrated in Figure 1. Instead of randomly uniformly sampling the full state space, the proposed KinoRRT* only samples part of the state space. The rest of the states are selected by the PFF optimal controller. Because part of the ﬁnal state is computed by the PFF optimal

978-1-6654-1714-3/21/$31.00 ©2021 IEEE

3674

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

controller to optimize the cost function, Kino-RRT* samples in the state space with reduced dimension. The method can also be interpreted as a heuristic for state-space sampling. Choosing the partial-free ﬁnal states by the PFF optimal controller is more efﬁcient than uniformly random sampling, and thus the resulting algorithm achieves faster convergence. We derive an analytical solution of the PFF optimal controller for the case of linear systems. Note, however, that the idea of using PFF controller in kinodynamic RRT* is not limited to linear systems. It can be adopted in combination with [14], [9], [10] to deal with nonlinear dynamics as well.
Finding the optimal arrival time for the TPBVP in the kinodynamic RRT* requires solving a root-ﬁnding problem of a high-order polynomial. Because the TPBVP is required to be solved repeatedly, the root-ﬁnding procedure can be computationally expensive. We therefore also propose a delayed and intermittent update of the optimal arrival time to reduce the computation complexity.
II. RELATED WORKS
Incremental sampling-based motion planning algorithms ﬁnd an initial solution in high dimensional planning spaces quickly and then incrementally improve the solution. For motion planning of robot systems, considering the differential constraints is necessary for generating feasible trajectories. The extension of RRT* to dynamic systems is studied in [6], where sufﬁcient conditions ensuring asymptotic optimality of the RRT* for dynamic systems were established. Every local steering and distance function in kinodynamic RRT* requires the solution of a TPBVP [6]. Assuming a solver of the TPBVP is available, references [15], [16] study the radius of the neighbor nodes in kinodynamic RRT* to guarantee asymptotic optimality.
Solving the TPBVPs is the computationally expensive component of the kinodynamic RRT* algorithm. Inﬁnitehorizon and ﬁnite-horizon LQR controllers were used as the steering function in kinodynamic RRT* for linear or linearized systems in [8] and [17], respectively. However, these methods cannot achieve the exact connection of two states, which is required in the kinodynamic RRT* algorithm. A ﬁxed-ﬁnal-state free-ﬁnal-time controller is used in [1] to achieve the exact connection of any pair of states for linear or linearized systems. The optimal arrival time is computed by solving a root-ﬁnding problem. To deal with nonlinear dynamics, [14] directly uses a numerical solver to solve the TPBVP online, and [18] uses discrete motion primitives. Learning-based methods have also been studied to solve the TPBVP in kinodynamic RRT*. References [9] and [10] use ofﬂine generated optimal trajectories and supervised learning to train neural networks to solve the TPBVP. In [11], the steering function is realized by a local policy trained using Deep Reinforcement Learning.
Other works solve the kinodynamic motion planning problem without relying on TPBVP solvers [19], [20]. These methods extended RRT-style shooting methods to kinodynamic planning by randomly sampling piece-wise constant control inputs of the system. The convergence to high-quality

trajectories in practice can be slow by the use of random controls as mentioned in [14], [21]. Our method improves algorithms that are based on steering functions. Comparison with shooting-based methods [20], [22] is left for future investigation.
III. PROBLEM FORMULATION
The optimal kinodynamic motion planning problem is deﬁned as ﬁnding a dynamically feasible trajectory for the robot to reach the goal state starting from an initial state, while satisfying the state and control constraints and minimizing a cost function [1], [6]. Speciﬁcally, given the planning domain X, free space Xfree, goal region Xgoal, initial state x0, consider the dynamics of the robot

x˙ = Ax + Bu + c,

(1)

and the cost function,

T

J(u) = (1 + u Ru) dτ,

(2)

0

the goal of the motion planning problem is to ﬁnd a control

u(t), t ∈ [0, T ], such that the solution x(t) to (1) is obstacle-

free, i.e. x(t) ∈ Xfree, t ∈ [0, T ], reaches the goal region, i.e. x(T ) ∈ Xgoal, and minimizes the cost functional (2). A, B, and c are constant and given. (1) represents the dynamics of

a linear or linearized system. R is a weighting matrix.

RRT*-type algorithms try to solve this problem by grow-

ing a tree, which involves sampling intermediate states

(nodes) and making optimal connections between states

(edges). This results in convergence to the optimal solution

asymptotically. In kinodynamic RRT*, every edge between

two states is the solution of a TPBVP given by

u∗ = arg min J(u),

u

s.t. x˙ = Ax + Bu + c,

(3)

x(0) = xa, x(tf) = xb,
where J is the same as in (2) but over the time interval [0,tf], and xa and xb are the sampled initial state and ﬁnal state of this edge, respectively. The solution of (3) with free-ﬁnaltime tf is given in [1]. Besides this ﬁxed-ﬁnal-state free-ﬁnaltime controller, next, we will present a partial-ﬁnal-state-free controller, which is the key ingredient of the proposed KinoRRT* algorithm.

IV. PARTIAL-FINAL-STATE-FREE OPTIMAL

CONTROLLER

Rewrite the state x ∈ Rn as the concatenation of two vectors x = [x1 x2 ] , where x1 ∈ Rn1 and x2 ∈ Rn2 with n1 + n2 = n. The partial-ﬁnal-state-free (PFF) optimal control
problem is given by

u∗ = arg min J(u),

u

s.t. x˙ = Ax + Bu + c,

(4)

x(0) = xa, x1(tf) = xc.
First, we consider the case where the arrival time tf is given. Instead of ﬁxing the states x(0) and x(tf) as in (3), only x(0) and x1(tf) are ﬁxed, and x2(tf) is free in (4).

3675

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

A. The PFF Optimal Controller
We solve this PFF optimal control problem using Pontryagin’s Maximum Principle [23]. The Hamiltonian of the system is given by

H(x, u,t, λ ) = 1 + u Ru + λ (Ax + Bu + c). (5)

The necessary conditions for optimality are

x˙ = Ax + Bu + c,

(6)

λ˙

= −∂H ∂x

= −A

λ,

(7)

0 = ∂ H = 2Ru + B ∂u

λ,

(8)

0 = λ2(tf),

(9)

where λ = [λ1 λ2 ] , λ1 ∈ Rn1 is the costate of x1, and λ2 ∈ Rn2 is the costate of x2. Solving for u using (8), we get

u = − 1 R−1B λ .

(10)

2

Substituting (10) into (6), yields

x˙ = Ax − 1 BR−1B λ + c.

(11)

2

The analytical solutions for the differential equations (7) and (11) are available and are given by

λ (t) = eA (tf−t)λ (tf),

(12)

x(t

)

=

eAt

x(0)

−

1 2

G(t

)λ

(tf)

+

t
eA(t−τ)c dτ,
0

(13)

where G(t) =

t 0

eA(t−τ

)BR−1B

eA

(tf−τ) dτ .

Note that if λ (tf) is known, then the problem can be

solved with the control given by (10) and (12), and the

state trajectory given by (13). Thus, the problem remains

to determine λ1(tf). To this end, evaluate (13) at tf to obtain

1

x(tf) = x¯(tf) − 2 G(tf)λ (tf),

(14)

where

x¯(tf) eAtf x(0) + tf eA(tf−τ)c dτ.

(15)

0

We may obtain x2(tf) and λ1(tf) by solving the linear equations (14). Using (9), rewrite (14) as

x¯1(tf) − x1(tf) x¯2(tf) − x2(tf)

=1 2

G11(tf) G21(tf)

G12(tf) G22(tf)

λ1(tf) , 0

(16)

where x¯(tf) = [x¯1 (tf) x2 (tf)] . Note that x¯1(tf) − x1(tf) is known and x¯2(tf) − x2(tf) is unknown. Then, (16) becomes

2(x¯1(tf) − x1(tf)) = G11(tf)λ1(tf),

(17)

2(x¯2(tf) − x2(tf)) = G21(tf)λ1(tf).

(18)

Assuming (A, B) is controllable, it follows that G(tf) is invertible and hence G11(tf) is invertible. From (17), we can solve for λ1(tf) as follows

λ1(tf) = 2G−111(tf)(x¯1(tf) − x1(tf)).

(19)

x2(tf) can be computed from (18). Finally, from (10) and (12), the open-loop optimal control is given by

u(t) = − 1 R−1B 2

eA

(tf−t)λ (tf).

(20)

Substituting (20) into (2), the optimal cost is

J(u∗)

=

tf

+

1 4

λ

(tf

)

G(tf)λ (tf).

(21)

B. The Optimal Arrival Time

Next, consider the case when tf is free. In this case, we have the transversality condition [23]

H(tf) = 0.

(22)

Substituting (10) into (5) and evaluating (5) at tf, then (22) becomes

H(tf) = 1 + λ (tf)

1 (Ax(tf) + c) − 4 λ (tf)

BR−1B

λ (tf) = 0.

(23)

We ﬁnd the optimal arrival time tf by solving (23), which requires ﬁnding the roots of a polynomial [1].

C. PFF with Quadratic Terminal Penalty

In some cases, it may be desired to add implicit constraints on the free-ﬁnal-state. Here, we extend the PFF optimal controller by adding a quadratic penalty on the free-ﬁnalstate to the cost function. Consider the PFF optimal control problem with the cost function,

1

tf

J(u) = 2 x2(tf) Sx2(tf) + 0 (1 + u Ru) dτ. (24)

The necessary conditions for optimality for the PFF control problem (4) with this new cost function are still given by (6)-(8), except that (9) is now replaced by

λ2(tf) = φx (x(tf)) = Sx2(tf),

(25)

where

φ (x(tf))

=

1 2

x2(tf

)

Sx2(tf).

Following the same derivation as before, we get the same

expression given by (14). The problem remains to solve for

λ (tf). Substituting (25) into (14), we get

1 x¯(tf) − x(tf) = 2 G(tf)

λ1(tf) Sx2(tf)

,

(26)

which is equvalent to

x¯1(tf) − x1(tf) x¯2(tf)

=M

λ1(tf) x2(tf)

,

(27)

where

M=

1 2 G(tf)

I 0

0 S

+

0 0

0 I

.

(28)

Note that M is invertible. Thus, we can calculate λ1(tf) and x2(tf) from (27). Along with (25), we obtain λ (tf).

3676

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

V. THE KINO-RRT* ALGORITHM
In this section, we present the details of the Kino-RRT* algorithm, which is built on both the PFF controller and the ﬁxed-ﬁnal-state free-ﬁnal-time controller. We summarize some primitive procedures. Some of them follow [3]. Sampling: The sampling procedure SamplePFF returns a partial state that is randomly sampled in a reduced state space and is collision-free in the corresponding reduced state space. For example, for a robot whose state space includes the position space and the velocity space, SamplePFF may sample a position of the robot that is collision-free. Nearest Neighbor: Given a tree G = (V, E), where V is the node set and E is the edge set, the procedure Nearest(V, x) returns the node in V that is closest to the state x. Near Nodes: The function Near(V, x, r) returns all the nodes in V that are contained in a ball of radius r centered at x. Collision Checking: The function CollisionFree(π) takes a trajectory π (an edge segment) as an input and returns true if and only if π lies entirely in the collision-free space. The function CollisionPoint(x) returns true if and only if the point x is collision-free. Cost: The procedure Cost(x) returns the cost-to-come from the root node to x. The procedure SegCost(xi, x j) returns the cost from xi to x j. Depending on x j, this cost is obtained by either solving the PFF control problem or the ﬁxed-ﬁnalstate free-ﬁnal-time control problem. Shrink: The procedure Shrink(xi, x j) returns x j if the distance between xi and x j is less than or equal to . Otherwise, it returns a new state xnew that lies on the line formed by xi and x j and is at a distance away from xi towards x j. The Shrink procedure is consistent with the RRT* algorithm and dictates that segments should have a maximum length . If one tries to connect two points that are far away, this connecting segment will collide with obstacles with a high probability. Steering: The procedure SteerPFF(xi, x j) solves the TPBVP using the PFF optimal controller, and it returns a trajectory π that starts from xi and ends at x j. The procedure Steer(xi, x j) solves the TPBVP using the ﬁxed-ﬁnal-state free-ﬁnal-time controller, and it returns a trajectory π that starts from xi and ends at x j. Note that x j in Steer(xi, x j) is a point in the full state space, while x j in SteerPFF(xi, x j) is a point in the reduced sampling space. FreeState: The function FreeSate takes the trajectory π returned by SteerPFF(xi, x j) as input and returns the rest of the state xfree at the endpoint of the trajectory that is not speciﬁed by x j.
The complete algorithm is given by Algorithm 1, 2, and 3. We use z to denote a point in the reduced sampling space. The rest of the state (free-state) xfree, which comes from the endpoint of the edge segment (state trajectory), is decided by the PFF optimal controller. After the ChooseParent step (line 11, Algorithm 1), the free-state is found and is combined with the sampled state to form a point in the full state space (line 12, Algorithm 1). Then, this point is added to the tree as a node (line 13, Algorithm 1).

Algorithm 1: Kino-RRT*

1 V ← {xinit}; E ← 0/ ; G ← (V, E);

2 for i = 1 : N do

3 zrand ← SamplePFF;

4 xnearest ← Nearest(V, zrand);

5 znew ← Shrink(xnearest, zrand); 6 if CollisionPoint(znew) then

7

π ← SteerPFF(xnearest, znew);

8

if CollisionFree(π) then

9

xfree ← FreeState(π);

10

Xnear ← Near(V, znew, r);

11

(xmin, xfree) ←

ChooseParent(Xnear, xnearest, znew);

12

xnew ← (znew, xfree);

13

V ← V ∪ {xnew};

14

E ← E ∪ {(xmin, xnew)};

15

E ← Rewire(Xnear, E, xnew, xmin);

16

G ← (V, E);

17 return G;

Algorithm 2: ChooseParent

1 ChooseParent (Xnear, xnearest, znew):

2

xmin ← xnearest;

3 cmin ← Cost(xnearest) + SegCost(xnearest, znew);

4 foreach xnear ∈ Xnear \ xnearest do

5

if Cost(xnear) + SegCost(xnear, znew) < cmin

then

6

π ← SteerPFF(xnear, znew);

7

if CollisionFree(π) then

8

xfree ← FreeState(π);

9

xmin ← xnear;

10

cmin ←

Cost(xnear) + SegCost(xnear, znew);

11 return (xmin, xfree);

Algorithm 3: Rewire

1 Rewire (Xnear, E, xnew, xmin):

2 foreach xnear ∈ Xnear \ xmin do

3

if Cost(xnew) + SegCost(xnew, xnear) <

Cost(xnear) then

4

π ← Steer(xnew, xnear);

5

if CollisionFree(π) then

6

xparent ← Parent(xnear);

7

E ← E \ {(xparent, xnear)};

8

E ← E ∪ {(xnew, xnear)};

9 return E;

3677

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

A. Delayed and Intermittent Update of the Arrival Time
For both the PFF controller and the ﬁxed-ﬁnal-state controller, ﬁnding the optimal arrival time of the TPBVP requires solving a root-ﬁnding problem of a high-order polynomial (see (23)). This root-ﬁnding procedure will slow down the kinodynamic RRT* algorithm, as the TPBVP is required to be solved repeatedly. Here we propose a delayed and intermittent update of the optimal arrival time, which is shown in Figure 2. The planning algorithm ﬁrst grows a tree using a heuristic of the arrival time (for example, by setting a desired average speed) without solving the root-ﬁnding problem (Figure 2(a)). Then, we intermittently update all the edges in the tree using the optimal arrival time (Figure 2(b)). If the updated edge is in-collision, we will use the original edge. We call this method KinoD-RRT*.

(a)

(b)

Fig. 2: Delayed and intermittent update of the arrival time. (a) Grow a tree using a heuristic of the arrival time (blue lines). (b) Update the optimal arrival time of all edges (red lines). If the updated edge is in-collision (red dash lines), the original edge is used (blue lines).

VI. EXPERIMENTAL RESULTS
We tested the Kino-RRT* algorithm on two kinodynamic systems: a 2D double integrator robot operating in a plane environment and a linearized quadrotor robot with a 10dimensional state-space. We compared the Kino-RRT* algorithm with a variant of the kinodynamic RRT* algorithm. The only difference between the Kino-RRT* and the compared algorithm (a variant of kinodynamic RRT*) is the utilization of the PFF controller in Kino-RRT*. The compared kinodynamic RRT* algorithm samples the full state space and uses the ﬁxed-ﬁnal-state free-ﬁnal-time controller to solve the TPBVPs. The gain of performance is solely due to the PFF controller. Thus, this comparison is informative.
A. Implementation Details
In kinodynamic RRT*, the near nodes are found by using the forward-reachable set or the backward-reachable set [1], [16]. Speciﬁcally, in line 12, Algorithm 1, Near(V, x, r) returns all nodes in V such that the cost J to go from these nodes to x is less than r (backward-reachable set). Checking membership in the forward/backward reachable set for a set of nodes can be computationally expensive.
We use Euclidean distance to ﬁnd the near nodes and the nearest node. This essentially means that we do not use the true distance. In this case, the forward-reachable set and

the backward-reachable set are the same. For kinodynamic motion planning, the true distance between two states is the minimum cost J from the solution of the TPBVP [6]. Using the true distance, the forward (or backward) reachable set deﬁnes an ε-radius sub-Riemannian ball centered at x. It is showed in [20] that there always exists a certain size Euclidean hyper-ball inside such sub-Riemannian ball under mild conditions, which justiﬁes the use of Euclidean norms. Euclidean distance is also used in [20]. After the nearest node and the near nodes are selected, the true distance is used in the ChooseParent and Rewire algorithms. The Euclidean distance is used only to pre-select relevant nodes and to help with the computations.
We also used a constant radius for the Euclidean hyperball for the near nodes, which implies a constant radius of the sub-Riemannian ball with respect to the true distance. Note that the kinodynamic RRT* is asymptotically optimal with a constant neighbor radius. The implementation is the same for the Kino-RRT* and the compared algorithm for an informative comparison.
B. 2D Double Integrator
The state of the 2D double integrator is given by x = [p v ] , where p = [x1 x2] is the position and v = [x3 x4] is the velocity. The control input is the acceleration. The weighting matrix in the cost function is set to R = I2.
For both Kino-RRT* and kinodynamic RRT* the position is uniformly sampled within the boundary of the environment, that is, p ∈ [0, 20]2 m. The free-ﬁnal-state of the PFF controller is the velocity. Thus, the Kino-RRT* algorithm does not sample the velocity space. For the kinodynamic RRT* algorithm, the velocity is uniformly sampled in v ∈ [−2, 2]2 m/s2. Note that a larger interval for the velocity essentially requires searching in a larger state space, which will result in slower convergence. However, if the sampling velocity interval is too small, the search is conﬁned to a small state space that may not contain the optimal solution. Here, the velocity interval is chosen to be small while containing the optimal solution.
The results of the kinodynamic RRT* algorithm and the Kino-RRT* algorithm are given in Figure 3 and Figure 4, respectively. The comparison of the Kino-RRT* and the kinodynamic RRT* is shown in Figure 5. In Figure 5, we can see that our algorithm ﬁnds a better trajectory from the beginning (the ﬁrst solution). In fact, the solution found by Kino-RRT* within 0.14 sec is comparable to the solution found by kinodynamic RRT* that took 8 sec after expanding 4000 nodes. After the Kino-RRT* ﬁnds the ﬁrst solution, the cost enters a sharp decrease phase. For the kinodynamic RRT* algorithm, the cost curve is close to ﬂat after 8 sec, and the probability of sampling good states to decrease the cost is low. Kino-RRT* is more than 50 times faster than the kinodynamic RRT* to ﬁnd a trajectory with the same cost. By sampling in a reduced state-space, the solution returned by Kino-RRT* is close to the optimal solution after a few seconds of computation. However, for the kinodynamic RRT* algorithm, it is difﬁcult to sample good velocities

3678

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

Fig. 5: Comparison of Kino-RRT* and kinodynamic RRT* for the 2D double integrator case.

Fig. 3: Kinodynamic RRT* results of the double integrator.

(a)

(b)

Fig. 6: Delayed and intermittent updates of the optimal arrival time of the 2D double integrator. The arrival time is updated whenever another 500 nodes are added to the tree.

arrival time. Non-optimal arrival times (which is the case with KinoD-RRT*) will result in a sub-optimal ﬁnal velocity. Thus, the performance of delayed update depends on the heuristic for the arrival time.

Fig. 4: Kino-RRT* results of the 2D double integrator.
that are comparable to the ones chosen by the PFF optimal controller, which leads to slow convergence.
Figure 6 shows the results of the delayed and intermittent update of the optimal arrival time. The Kinodynamic RRT* combined with the delayed and intermittent update of the optimal arrival time is called Kinodynamic RRT* with delay. Four methods, Kinodynamic RRT*, Kinodynamic RRT* with delay, Kino-RRT*, and KinoD-RRT*, are compared. Kinodynamic RRT* with delay is 3 times faster than Kinodynamic RRT* when expanding the same number of nodes. The planned trajectories have a similar cost for expanding the same number of nodes.
Kino-RRT* with delay is also 3 times faster than KinoRRT* when expanding the same number of nodes. We can see in Figure 6(b) that KinoD-RRT* (blue dash line) ﬁnds a better trajectory in the beginning as it expands more nodes in a given interval of time. However, Kino-RRT* outperforms KinoD-RRT* after some point. This is because the velocities (free-ﬁnal-state) chosen by KinoD-RRT* are not as optimized as the velocities chosen by Kino-RRT*. The velocity chosen by the PFF controller is affected by the

C. Linearized Quadrotor
A linearized quadrotor model adopted from [1] is used in this example. The 10-dimensional state is given by x = [p v r w ] , which consists of the three-dimensional position p and velocity v, and the two-dimensional orientation r and angular velocity w. The yaw rotation, which is a redundant degree of freedom, is not considered in the model.
The free-ﬁnal-state of the PFF controller is v, r, and w. Thus the Kino-RRT* algorithm only samples the position space. Since the quadrotor is linearized at the hovering state and the dynamics is sensitive to the roll and pitch angles, we will use the PPF controller with quadratic terminal penalty introduced in Section IV-C. The terminal penalty matrix is S = diag(0, 0, 0, 20, 20, 0, 0). The weighting matrix of the control is R = diag(15, 30, 30). For both Kino-RRT* and kinodynamic RRT* the position is uniformly sampled within the boundary of the 3D environment. The sampling intervals of v, r, and w for the kinodynamic RRT* are v ∈ [−2, 2]3 m/s, r ∈ [−1, 1]2 rad, and w ∈ [−4, 4]2 rad/s, respectively.
One solution from Kino-RRT* is shown in Figure 7(a). The comparison of Kino-RRT* and kinodynamic RRT* is shown in Figure 7(b). The solution of the PPF controller with quadratic terminal penalty is more complex than the ﬁxedﬁnal-state free-ﬁnal-time controller. Thus, the Kino-RRT* algorithm takes more time to expand the same number of nodes compared to the kinodynamic RRT*. Because each node in Kino-RRT* is more optimized, it still converges faster than

3679

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

(a)

(b)

Fig. 7: (a) Planning result of Kino-RRT*; (b) Comparison of Kino-RRT* and kinodynamic RRT* for the quadrotor case.

Fig. 8: Delayed and intermittent update of the optimal arrival time for the linearized quadrotor example.
kinodynamic RRT*. The detailed simulation results can be found in the extend version of the paper [24].
Figure 8 shows the results of the delayed and intermittent update of the optimal arrival time. For the linearized quadrotor example, the kinodynamic RRT* with delay is 2 times faster than the kinodynamic RRT* when expanding the same number of nodes, and is also 2 times faster for ﬁnding a trajectory with a similar cost. Similar performance improvement is observed for the KinoD-RRT* compared to Kino-RRT*. This performance improvement depends on the heuristic of the arrival time for the KinoD-RRT* algorithm.
VII. CONCLUSION
In this paper, we developed the Kino-RRT* algorithm, which utilizes a partial-ﬁnal-state-free (PFF) optimal controller to improve the convergence performance of samplingbased motion planning of kinodynamic systems. Instead of sampling the full state of the robot, Kino-RRT* only samples part of the state-space and the rest of the states are optimized by the PFF optimal controller. We tested the algorithm on robot systems with 4-D and 10-D state-spaces. In both cases, Kino-RRT* showed better convergence compared to the standard kinodynamic RRT*, achieving trajectories with better cost using much less time to compute. The proposed KinoRRT* algorithm shows potential for real-time kinodynamic motion planning for high-dimensional dynamical systems.
REFERENCES
[1] D. J. Webb and J. Van Den Berg, “Kinodynamic RRT*: Asymptotically optimal motion planning for robots with linear dynamics,” in IEEE International Conference on Robotics and Automation, pp. 5054–5061, May 2013.
[2] S. M. LaValle and J. J. Kuffner Jr, “Randomized kinodynamic planning,” The International Journal of Robotics Research, vol. 20, no. 5, pp. 378–400, 2001.

[3] S. Karaman and E. Frazzoli, “Sampling-based algorithms for optimal motion planning,” The International Journal of Robotics Research, vol. 30, pp. 846–894, June 2011.
[4] S. Karaman, M. R. Walter, A. Perez, E. Frazzoli, and S. Teller, “Anytime motion planning using the RRT*,” in IEEE International Conference on Robotics and Automation, pp. 1478–1483, May 2011.
[5] J. D. Gammell and M. P. Strub, “Asymptotically optimal samplingbased motion planning methods,” Annual Review of Control, Robotics, and Autonomous Systems, vol. 4, pp. 1–25, 2021.
[6] S. Karaman and E. Frazzoli, “Optimal kinodynamic motion planning using incremental sampling-based methods,” in 49th IEEE Conference on Decision and Control, pp. 7681–7687, December 2010.
[7] J. D. Gammell, S. S. Srinivasa, and T. D. Barfoot, “Informed RRT*: Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic,” in IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 2997–3004, 2014.
[8] A. Perez, R. Platt, G. Konidaris, L. Kaelbling, and T. Lozano-Perez, “LQR-RRT*: Optimal sampling-based motion planning with automatically derived extension heuristics,” in IEEE International Conference on Robotics and Automation, pp. 2537–2542, May 2012.
[9] W. J. Wolfslag, M. Bharatheesha, T. M. Moerland, and M. Wisse, “RRT-CoLearn: Towards kinodynamic planning without numerical trajectory optimization,” IEEE Robotics and Automation Letters, vol. 3, no. 3, pp. 1655–1662, 2018.
[10] D. Zheng and P. Tsiotras, “Sampling-based kinodynamic motion planning using a neural network controller,” in AIAA Scitech 2021 Forum, p. 1754, 2021.
[11] H. T. L. Chiang, J. Hsu, M. Fiser, L. Tapia, and A. Faust, “RL-RRT: Kinodynamic motion planning via learning reachability estimators from RL policies,” IEEE Robotics and Automation Letters, vol. 4, no. 4, pp. 4298–4305, 2019.
[12] L. Janson, E. Schmerling, A. Clark, and M. Pavone, “Fast marching tree: A fast marching sampling-based method for optimal motion planning in many dimensions,” The International Journal of Robotics Research, vol. 34, no. 7, pp. 883–921, 2015.
[13] B. Paden, V. Varricchio, and E. Frazzoli, “Veriﬁcation and synthesis of admissible heuristics for kinodynamic motion planning,” IEEE Robotics and Automation Letters, vol. 2, no. 2, pp. 648–655, 2017.
[14] C. Xie, J. van den Berg, S. Patil, and P. Abbeel, “Toward asymptotically optimal motion planning for kinodynamic systems using a two-point boundary value problem solver,” in IEEE International Conference on Robotics and Automation, pp. 4187–4194, May 2015.
[15] S. Karaman and E. Frazzoli, “Sampling-based optimal motion planning for non-holonomic dynamical systems,” in IEEE International Conference on Robotics and Automation, pp. 5041–5047, 2013.
[16] E. Schmerling, L. Janson, and M. Pavone, “Optimal sampling-based motion planning under differential constraints: the drift case with linear afﬁne dynamics,” in 54th IEEE Conference on Decision and Control, pp. 2574–2581, 2015.
[17] G. Goretkin, A. Perez, R. Platt, and G. Konidaris, “Optimal sampling-based planning for linear-quadratic kinodynamic systems,” in 2013 IEEE International Conference on Robotics and Automation, pp. 2429–2436, 2013.
[18] B. Sakcak, L. Bascetta, G. Ferretti, and M. Prandini, “Sampling-based optimal kinodynamic planning with motion primitives,” Autonomous Robots, vol. 43, no. 7, pp. 1715–1732, 2019.
[19] K. Hauser and Y. Zhou, “Asymptotically optimal planning by feasible kinodynamic planning in a state–cost space,” IEEE Transactions on Robotics, vol. 32, no. 6, pp. 1431–1443, 2016.
[20] Y. Li, Z. Littleﬁeld, and K. E. Bekris, “Asymptotically optimal sampling-based kinodynamic planning,” The International Journal of Robotics Research, vol. 35, no. 5, pp. 528–564, 2016.
[21] A. Sivaramakrishnan, Z. Littleﬁeld, and K. E. Bekris, “Towards learning efﬁcient maneuver sets for kinodynamic motion planning,” arXiv preprint, arXiv:1907.07876, 2019.
[22] Z. Littleﬁeld and K. E. Bekris, “Efﬁcient and asymptotically optimal kinodynamic motion planning via dominance-informed regions,” in IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 7410–7415, 2018.
[23] F. L. Lewis, D. Vrabie, and V. L. Syrmos, Optimal Control. John Wiley & Sons, 2012.
[24] D. Zheng and P. Tsiotras, “Accelerating kinodynamic RRT* through dimensionality reduction (extended version),” arXiv preprint arXiv:2107.01259, 2021.

3680

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 18,2022 at 13:56:30 UTC from IEEE Xplore. Restrictions apply.

