IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 100%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2013 IEEE/RSJ International C...
Generation of diverse paths in 3D environments
Publisher: IEEE
Cite This
PDF
Ana Huamán Quispe ; Tobias Kunz ; Mike Stilman
All Authors
View Document
1
Paper
Citation
95
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Previous Work
    III.
    Background
    IV.
    Algorithm
    V.
    Experiments

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: In this paper we propose a deterministic algorithm to produce a set of diverse paths between a given start and goal configuration in 3D environments. These diverse paths ... View more
Metadata
Abstract:
In this paper we propose a deterministic algorithm to produce a set of diverse paths between a given start and goal configuration in 3D environments. These diverse paths have the following properties: 1) They are bounded in length and 2) They are non-visibility-deformable into one another. Maintaining multiple path alternatives is important in practical applications such as planning in dynamic environments, in which a path may unexpectedly become infeasible due to unforeseen environmental changes. We present our approach, the distance cost considered (based on the path deformability concept previously introduced in [11]) and finally show results of simulated experiments that exemplify the effectiveness of our algorithm.
Published in: 2013 IEEE/RSJ International Conference on Intelligent Robots and Systems
Date of Conference: 03-07 November 2013
Date Added to IEEE Xplore : 02 January 2014
ISBN Information:
ISSN Information:
INSPEC Accession Number: 14002610
DOI: 10.1109/IROS.2013.6697226
Publisher: IEEE
Conference Location: Tokyo, Japan
Contents
SECTION I.
I ntroduction

Finding a single path between a goal and start configuration is a canonical motion planning problem. However, there are many situations in which more than one path must be considered. For instance, in multi-robot mapping applications, it is reasonable to design different trajectories for each agent such that they cover diverse regions of free space [3] . Other applications include motion planning in dynamic environments, in which considering multiple paths can be useful if one of them becomes infeasible due to unexpected changes in the environment. In general, if a robotic agent is provided with a diverse set of paths, it has the flexibility to choose what option is best at any given situation. The question then arises as to how to classify these paths such that they are as different (diverse) as possible from one another.

Homotopy is a classical approach to classify paths. Two paths, having the same start and goal configuration, belong to the same homotopy class if they can be continuously deformed into one another. Different homotopy classes may arise due to obstacles in the environment. Fig. 2(a) shows a 2D scenario with an obstacle and two paths. These two paths belong to different homotopic classes, since there is no smooth deformation that can convert one into the other.

Intuitively, we see that 2D obstacles arise different homotopy classes. This, however, is not the general case in 3D environments. Consider Fig. 2(b) , depicting one obstacle and four different paths. These paths belong to the same homotopy class since there exists a deformation (albeit complex) that can turn any of these paths into another. In practical applications, however, we might want to differentiate between paths that are easily deformable [11] , for which the homotopy criterion may not be suitable.
Fig. 1. - 4 diverse paths generated for a donut-shaped object
Fig. 1. 4 diverse paths generated for a donut-shaped object

Show All

A few authors have proposed to use different criteria to classify paths [11] , [14] . In this paper, we propose an algorithm to construct a set of diverse paths based on the concept of path visibility deformation [11] , [19] . We generate a set of paths that combines two desired properties: diversity and quality. In our approach quality is path length. We ensure path quality by defining a limiting factor by which the length of any path in the set can exceed the optimal path length. Diversity is ensured by generating candidate paths that go through selected via points. From these candidate paths we select paths that are non-visibility-deformable into each other and are far apart from each other.

The rest of this paper is organized as follows. Section II presents previous work relevant to path classification. Section III explains some background concepts that link homotopy with the deformation concept used in this paper. Section IV presents our approach as well as the algorithms implemented. Finally, section V presents experimental results showing diverse sets of paths generated for different test environments.
SECTION II.
P revious W ork

Previous efforts to produce diverse paths have largely been focused on homotopy. Early work on homotopy-based path classification includes geometric-based approaches such as [8] , [9] . and methods based on Probabilistic Roadmaps [13] , such as the work of Schmitzberger et al. [18] , who proposed a method to build PRMs that encode all the homotopy classes in 2D environments. More recent approaches successfully identify homotopy classes and their corresponding optimal paths in 2D discretized scenarios. Examples of these are [1] , which characterize the homotopy classes by using Complex Analysis. A rather simpler approach, proposed by Igarashi et al. in [10] uses overlapped manifolds to represent homotopy classes for cabled robots. Additionally, a few approaches (PRM-based) departed from the strict context of homotopy and instead proposed to include cycles in the map construction step in order to consider more than one possible path between two configurations [6] , [16] .
Fig. 2. - Comparison of homotopy in 2D and 3D
Fig. 2. Comparison of homotopy in 2D and 3D

Show All

On the side of 3D path classification, Battacharya et al. presented in [2] a planner that identifies homotopy classes and produces optimal paths for each of them. However, as it was noted in [16] , finding paths in different homotopy classes may fail to capture the variety of existing representative paths since they might belong to the same homotopy class but still be hard to deform into one another: A 3D scene with multiple finite obstacles can easily have only one homotopic family. In general, homotopy classes in three dimensions can be induced only by objects with infinite dimensions in two directions or by objects with holes on them [2] .

Alternative approaches not based on homotopy have been proposed to generate diverse paths. In [11] , Jaillet et al. presented a PRM-based approach to produce diverse paths based on path deformability , which consider less strong (easier) deformations than homotopy. This method is applicable for higher dimensions (such as 3D) but since it is a probabilistic approach, it can neither guarantee that the paths produced will be bounded in length nor that they will be the same each time they are generated.

The term path diversity has also been used by [7] to define path sets and extensions of this work applied to offline generation of local paths are presented in [14] . Under this approach, a set of paths is called diverse if it minimizes the dispersion metric between them. Our approach is similar to [7] in the sense that our algorithm produces a sequence of paths that attempts to maximize the diversity between them. In our context, diversity is quantified by the accumulated distance between a path and the rest of paths in the set, not by dispersion (although these metrics are related). Another important difference is that [7] generates an initial set of paths by combining any set of discrete inputs in a given model. While we also generate a initial set of candidate paths, our approach is different: We discretize our 3D environment into a 26-connected graph and then generate a set of paths bounded in length by using a graph-search based method (as it will be explained later in Section IV ).
SECTION III.
B ackground

We will briefly review the concept of homotopy [15] and path deformability [11] .
Fig. 3. - Deformation examples
Fig. 3. Deformation examples

Show All

A. Homotopy
Definition 1

Let P 0 and P 1 be two paths in a topological space X with the same initial point p 0 = P 0 ( 0 ) = P 1 ( 0 ) , and terminal point p 1 = P 0 ( 1 ) = P 1 ( 1 ) . P 0 is said to be homotopic to P 1 if there is a continuous function H : I 2 → X such that H ( 0 , t ) = p 0 0 ≤ t ≤ 1 H ( 1 , t ) = p 1 0 ≤ t ≤ 1 H ( x , 0 ) = P 0 ( x ) 0 ≤ x ≤ 1 H ( x , 1 ) = P 1 ( x ) 0 ≤ x ≤ 1 (1) View Source Right-click on figure for MathML and additional features. \eqalignno{&H(0, t)=p_{0}\qquad \qquad 0\leq t\leq 1\cr &H(1, t)=p_{1}\qquad \qquad 0\leq t\leq 1 \cr &H(x, 0)=P_{0}(x)\qquad\,\, 0\leq x\leq 1&{\hbox{(1)}} \cr &H(x, 1)=P_{1}(x)\qquad\,\, 0\leq x\leq 1 } where the function H is called a homotopy connecting P 0 to P 1 .

Notice that H represents any continuous function, which in turn may represent very complex deformations. For practical uses, however, we want to consider only simpler deformations, which are more likely to occur. Jaillet et al. introduced the concept of K-order deformations [11] , which we borrow here and explain below:
B. K-order Deformations
Definition 2

A K-order deformation is a particular homotopic deformation such that each curve transforming a point of P 0 into a point of P 1 is an angle line of K segments.

Fig. 3(a) and Fig. 3(b) show a 1st and 2 nd -order deformations respectively. In general, a K -order deformation can be obtained from the concatenation of K ruled surfaces.

In this paper, we consider 1 st -order deformations (also called visibility deformations) . Among other reasons, these deformations are important since:

    They capture the visibility between two paths: If a path P 0 can be deformed into a path P 1 with a 1 st -order deformation, then the corresponding points between both paths are visible , meaning that a straight line can join them without crossing any obstacle.

    Given two simple paths in a discretized environment, we can determine if they are 1 st -order deformable by simply applying collision-testing to the lines that join their corresponding points.

SECTION IV.
A lgorithm

The algorithm works by pruning and selecting paths from an initial set of candidate paths. Section IV-A describes the generation of the set of candidate paths. Section IV-B filters the set of candidate paths to only include high-quality paths of bounded length. Section IV-C describes how we select a diverse set of paths from the set of bounded paths.
A. Candidate Paths

A possible set of candidate paths would be the set of all possible simple paths (i.e., paths without loops) between the given start and goal. However, calculating the number of paths between two given vertices in a graph is #P-complete [17] , so it would be computationally expensive to enumerate all these paths. We could also attempt to frame the generation of the candidate paths as a K shortest simple paths problem. However, besides being also computationally intensive [12] , we do not know how many paths will be in the set beforehand.

Instead, we calculate the shortest paths from v s t a r t to v g o a l through one waypoint v for all vertices v ∈ V . Since the number of paths generated this way is still big, we further restrict the selection of v to vertices that are roughly middle points in the paths to-be-generated (line 2 of Algorithm 1 ). We could have also considered shortest paths through two or more waypoints. If the number of waypoints was unlimited, we would actually find all possible simple paths (and also some non-simple ones). By choosing the number of waypoints we trade-off complexity and completeness. We choose to consider only a single waypoint because that makes it especially simple to calculate all candidate paths. We only need to execute two Dijkstra searches [5] rooted at v s t a r t and v g o a l . This gives us the distances and shortest paths from every vertex v to v s t a r t and v g o a l . Concatenating the two yields the shortest paths from v s t a r t to v g o a l through a vertex v .
B. Bounded Paths

In order to ensure the quality of the paths in the set, we filter out all paths in the candidate set that exceed the length of the optimal path by a certain factor. We only retain paths that satisfy | | P i | | ≤ α B P ∗ , ∀ i ∈ [ 1 , n ] (2) View Source Right-click on figure for MathML and additional features. \vert\vert P_{i}\vert\vert \leq \alpha_{B}P^{\ast},\forall i\in[1, n]\eqno{\hbox{(2)}}

The set of candidate paths as described in Section IV-A is actually never explicitly calculated. Instead, the candidate paths are filtered from the beginning to only include paths that satisfy Eq. 2. Algorithm 1 combines the two steps of generating the candidate paths and filtering out paths that do not satisfy the bound on path length. D s t a r t and D g o a l are data structures representing the result of the Dijkstra searches rooted at the v s t a r t and v g o a l respectively. D s t a r t ( v ) is the distance of v from v s t a r t . P ∗ is the shortest path from v s t a r t to v g o a l and α B is the maximum factor by which the paths are allowed to exceed the optimal path length.

An example of a set of bounded paths generated using this approach is shown in Fig. 4 .
C. Diverse Paths

We iteratively build the set of diverse paths by choosing one path P i from the set of bounded paths P B and adding it to the set of diverse paths P until we reach the desired number of paths. In each step we pick the one path that

    maximizes the distance to all the other paths P 1 , P 2 , P 3 , … , P i − 1 already in the set of diverse paths and that

    is not visibility-deformable into any of the other paths that are already in the set of diverse paths.

Algorithm 1 Get Bounded Paths

Algorithm
Fig. 4. - Sample set of paths in ${\cal P}_{B}$
Fig. 4. Sample set of paths in P B

Show All

Definition 3

Given two paths P A and P B and a given number of waypoints cp , we define the distance δ between these two paths as: δ ( P A , P B ) = ∑ i = 1 c p d ( p i A , p i B ) (3) View Source Right-click on figure for MathML and additional features. \delta(P_{A}, P_{B})=\sum_{i=1}^{cp}d(p_{A}^{i}, p_{B}^{i})\eqno{\hbox{(3)}}

Algorithm 2 shows the main high-level routine to produce diverse paths. It receives as inputs the start and goal positions ( v s t a r t , v g o a l ) , the graph representation of the 3D space ( G ) and the number of paths desired (the algorithm stops if it cannot find more non-visibility-deformable paths, so this parameter is a maximum).

Our algorithm first precomputes the distances and shortest paths from every vertex to the start and goal vertices using Dijkstra's algorithm. We then calculate the shortest path between v s t a r t and v g o a l , which is added as the first path ( P 1 ) in our path set P and defines the upper bound on the length of all considered paths. The generation of bounded paths is performed in line 4 of Algorithm 2 .

Once we have the initial set of bounded paths P B , we sequentially produce paths P i that are non-visibility-deformable with respect to the existing paths P 1 , P 2 , P 3 , … , P i − 1 . To make sure that each new path generated will be non-visibility-deformable with respect to the previous paths, we prune the set of bounded paths at each iteration(line 7 of Algorithm 2 ) such that the bounded paths considered at each step i are non-visible w.r.t. P i − 1 .
Algorithm 2: Generate Diverse Paths

Algorithm

Algorithm 3 shows the process to prune the existing P B with respect to P i . The algorithm tests each path P ∈ P B against P i and prunes it if they are visible w.r.t, each other. To determine visibility, our algorithm builds a discretized ruled-surface between paths P and P i and test if there is any obstacle between them. If there is an obstacle, then the path is preserved (since it is not visible). If there is not, then the path is pruned. Fig. 5 shows the evolution of the pruning process: The green dots represents the middle points of the paths in P B after each iteration. As it can be seen, the number of paths considered decreases at each step since a new path is added and hence the visible paths w.r.t. it must be pruned.

The visibility test is shown in line 5 of Algorithm 3 . The FreeLine function receives as input a pair of corresponding points of paths P and P i , which are generated by equally dividing each of these paths in cp segments (lines 1 and 3 of Algorithm 3 ). If any of the points in the line joining these corresponding points is not free then the whole line is deemed non-visible (a visualization of this process is shown in Fig. 6 ).

Finally, once the test of visibility is done, a new set of non-visibility-deformable paths has been generated. In order to select one of them to be the next P i to be added to P , we choose the path P ∈ P B that have the maximum added distance ( δ ) with respect to P i − 1 (line 9 of Algorithm 2 ).
Fig. 5. - Pruning visualization: After a path $P_{i}$ is added to ${\cal P}$ the paths in ${\cal P}_{B}$ are decreased. Notice how the surviving paths agglomerate to the sides of the obstacle that are opposed to $P_{i}$ (not shown)
Fig. 5. Pruning visualization: After a path P i is added to P the paths in P B are decreased. Notice how the surviving paths agglomerate to the sides of the obstacle that are opposed to P i (not shown)

Show All
Fig. 6. - Example of visibility test procedure: Green lines represent free visibility lines and red lines are not visible due to the presence of obstacles. Blue markers represents the checkpoints $(C_{p}[i]$ and $C_{ref}[i])$ of each path tested)
Fig. 6. Example of visibility test procedure: Green lines represent free visibility lines and red lines are not visible due to the presence of obstacles. Blue markers represents the checkpoints ( C p [ i ] and C r e f [ i ] ) of each path tested)

Show All
Algorithm 3 Get Non-Deformable Paths

Algorithm

SECTION V.
E xperiments

To assess the variety of paths produced by our algorithm we produced a set of tests with different obstacle configurations.

In all the experiments the graph G that represents the 3D environment was discretized to voxels of 1.25 c m × 1.25 c m × 1.25 c m in a volume of 1 m × 1 m × 1 m (512000 voxels).

The line evaluation of the visibility test (line 5 of Algorithm 3 ) was implemented using the Bresenham's algorithm [4] which is a simple yet effective method to calculate which points in the discretized space are part of a line. We preferred this method over other popular, more exact methods (such as Wu's Algorithm [20] ) since it is simpler to implement and has higher speed.

We present the results of 5 experiments in which we used box-shaped objects as obstacles. Since these objects are finite and have neither holes nor handles, they do not arise different homotopy classes, so all paths presented are homotopically equivalent (with the exception of experiment 1 which has an obstacle with a hole, hence it presents two homotopy classes). The paths obtained are shown in Fig. 7 , 8 , 9 , 10 , and 11 .

Comparison of path lengths is presented in Table I . Due to the bound in length, only paths short enough are considered. Notice that for Experiments 3 and 7 we only present three paths that are non-visible with respect to each other (due to the particular geometry of the tested environment). For all experiments we used a bound factor α B = 2.0 and 10 checkpoints ( c p ) to measure line collisions.
TABLE I Path Lengths
Experiment 	Length(cm)
P 1 	P 2 	P 3 	P 4 	P 5
1 	80.6 	108.6 	113.2 	122.6 	124.9
2 	64.0 	89.8 	102.8 	104.8 	105.6
3 	64.0 	111.6 	113.6 	– 	–
4 	82.3 	86.8 	89.0 	– 	–
5 	60.8 	61.4 	70.7 	74.4 	–

Table II shows the size of the P B set at each iteration i . It is important to observe that the paths are calculated only once (at the start of the algorithm). The pruning then is only important to limit the number of visibility checks to generate the new path P i .
TABLE II Path Pruning
Experiment 	Size of (Pruned) P B at each iteration i
i = 1 	i = 2 	i = 3 	i = 4 	i = 5
1 	8544 	7441 	3963 	901 	462
2 	7650 	3130 	1731 	1185 	611
3 	8633 	1041 	628 	– 	–
4 	15335 	4362 	261 	– 	–
5 	21038 	20288 	17514 	12236 	–

Table III shows the time distribution for the test cases. Notice that the times could have been further reduced if we required less diverse paths (in the test cases we found all the possible paths that were non-visible with respect to each other). Further, if time constraints are present, our algorithm can be stopped at any time, having produced as many paths as it was feasible.
TABLE III Time measurements
Experiment 	Time Distribution(seconds)
Dij. Start 	Dij. Goal 	Initial Path Set 	Iter .	Total
1 	0.64 	0.65 	1.35 	2.77 	5.62
2 	0.73 	0.74 	1.31 	2.06 	4.86
3 	0.70 	0.71 	1.61 	1.67 	4.70
4 	0.86 	0.85 	2.8 	3.42 	7.97
5 	0.80 	0.80 	3.81 	7.39 	12.87

SECTION VI.
C onclusion and F uture W ork

We have presented an algorithm to generate diverse paths in 3D environments. Our approach finds paths that are bounded in length and cannot be deformed by means of visibility-deformations from one to another. We also present a simple yet effective distance cost to quantify the aggregated distance between paths.

As future work, we would like to experiment with second-order deformations and make a qualitative comparison with the paths obtained with the method presented. Also we are currently attempting to find better ways to generate the initial set of paths X with the least possible number of paths that are yet representative of the whole set of paths between v s t a r t and v g o a l .
Fig. 7. - Results of experiment 1: Paths around an object with a hole (2 homotopy classes)
Fig. 7. Results of experiment 1: Paths around an object with a hole (2 homotopy classes)

Show All
Fig. 8. - Results of experiment 2: U-shaped obstacle (l homotopy class)
Fig. 8. Results of experiment 2: U-shaped obstacle (l homotopy class)

Show All
Fig. 9. - Results of experiment 3: Two parallel objects (1 homotopy class)
Fig. 9. Results of experiment 3: Two parallel objects (1 homotopy class)

Show All
Fig. 10. - Results of experiment 4: Two obstacles (1 homotopy class)
Fig. 10. Results of experiment 4: Two obstacles (1 homotopy class)

Show All
Fig. 11. - Results of experiment 5: Complex obstacle with 1 homotopy class
Fig. 11. Results of experiment 5: Complex obstacle with 1 homotopy class

Show All

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
A Deterministic Improved Q-Learning for Path Planning of a Mobile Robot

IEEE Transactions on Systems, Man, and Cybernetics: Systems

Published: 2013
Real-Time Robot Path Planning Based on a Modified Pulse-Coupled Neural Network Model

IEEE Transactions on Neural Networks

Published: 2009
Show More
References
1.
Subhrajit Bhattacharya, Maxim Likhachev, and Vijay Kumar. Search-Based Path Planning with Homotopy Class Constraints. In Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence, 2010.
Show in Context Google Scholar
2.
Subhrajit Bhattacharya, Maxim Likhachev, and Vijay Kumar. Identification and Representation of Homotopy Classes of Trajectories for Search-based Path Planning in 3D. In Proceedings of Robotics: Science and Systems, Los Angeles, CA, USA, June 2011.
Show in Context Google Scholar
3.
Frederic Bourgault, Alexei A. Makarenko, Stefan B. Williams, Ben Grocholsky, and Hugh F. Durrant-Whyte. Information Based Adaptive Robotic Exploration. In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS, pages 540-545, 2002.
Show in Context View Article
Google Scholar
4.
Jack Elton Bresenham. Algorithm for computer control of a digital plotter. IBM Systems Journal, 4:25-30, 1965.
Show in Context View Article
Google Scholar
5.
Edsger Wybe Dijkstra. A Note on Two Problems in Connexion with Graphs. NUMERISCHE MATHEMATIK, 1(1):269-271, 1959.
Show in Context CrossRef Google Scholar
6.
Roland Geraerts and Mark H. Overmars. Creating High-quality Paths for Motion Planning. International Journal of Robotics Research, 26(8):845-863, August 2007.
Show in Context CrossRef Google Scholar
7.
Colin Green and Alonzo Kelly. Toward Optimal Sampling in the Space of Paths. In 13th International Symposium of Robotics Research, November 2007.
Show in Context Google Scholar
8.
Dima Grigoriev and Anatol Slissenko. Polytime Algorithm for the Shortest Path in a Homotopy Class Amidst Semi-Algebraic Obstacles in the Plane. In The International Symposium on Symbolic and Algebraic Computation (ISSAC), pages 17-24, 1998.
Show in Context CrossRef Google Scholar
9.
John Hershberger and Jack Snoeyink. Computing Minimum Length Paths of a Given Homotopy Class. Computational Geometry: Theory and Applications, 4:331-342, 1991.
Show in Context CrossRef Google Scholar
10.
Takeo Igarashi and Mike Stilman. Homotopic Path Planning on Manifolds for Cabled Mobile Robots. In Proceedings of the The Ninth International Workshop on the Algorithmic Foundations of Robotics (WAFR), 2010.
Show in Context CrossRef Google Scholar
11.
Leonard Jaillet and Thierry Simeon. Path deformation roadmaps: Compact graphs with useful cycles for motion planning. International Journal of Robotic Research, 27(11-12):1175-1188, 2008.
Show in Context CrossRef Google Scholar
12.
N. Katoh, T Ibaraki, and H. Mine. An efficient algorithm for K shortest simple paths. volume 12, pages 411-427, 1982.
Show in Context Google Scholar
13.
Lydia E. Kavraki, Petr Svestka, Jean-claude Latombe, and Mark H. Overmars. Probabilistic Roadmaps for Path Planning in High-Dimensional Configuration Spaces. IEEE Transactions on Robotics and Automation, 12:566-580, 1996.
Show in Context View Article
Google Scholar
14.
Ross Alan Knepper, Siddhartha Srinivasa, and Matthew T. Mason. Toward a deeper understanding of motion alternatives via an equivalence relation on local paths. International Journal of Robotics Research, 31(2):168-187, February 2012.
Show in Context CrossRef Google Scholar
15.
Bert Mendelson. Introduction to Topology. Dover, third edition, 1968.
Show in Context Google Scholar
16.
Dennis Nieuwenhuisen and Mark H. Overmars. Useful Cycles in Probabilistic Roadmap Graphs. In IEEE International Conference on Robotics and Automation (ICRA), pages 446-452, 2004.
Show in Context View Article
Google Scholar
17.
Ben Roberts and Dirk P. Kroese. Estimating the number of s-t paths in a graph. Journal of Graph Algorithms and Applications, 11(1):195-214, 2007.
Show in Context CrossRef Google Scholar
18.
E. Schmitzberger, J.L. Bouchet, M. Dufaut, M. Wolf, and R. Husson. Capture of Homotopy Classes with Probabilistic Roadmap. In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2002.
Show in Context View Article
Google Scholar
19.
Thierry Simeon, Jean-Paul Laumond, and Carole Nissoux. Visibilitybased probabilistic roadmaps for motion planning. Advanced Robotics, 14(6):477-493, 2000.
Show in Context CrossRef Google Scholar
20.
Xiaolin Wu. An Efficient Antialiasing Technique. SIGGRAPH Proceedings of the 18th annual conference on Computer graphics and interactive techniques, 25(4):143-152, July 1991.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
