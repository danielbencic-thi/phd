IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathZoom.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2021 IEEE/RSJ International C...
Fast Generation of Obstacle-Avoiding Motion Primitives for Quadrotors
Publisher: IEEE
Cite This
PDF
Saurabh Upadhyay ; Thomas Richardson ; Arthur Richards
All Authors
85
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Definition
    III.
    PROPOSED MOTION PRIMITIVE TOOL
    IV.
    Obstacle Avoiding Motion Primitives
    V.
    NUMERICAL EXAMPLES

Show Full Outline
Authors
Figures
References
Keywords
Metrics
Footnotes
Abstract:
This work considers the problem of generating computationally efficient quadrotor motion primitives between a given pose (position, velocity, and acceleration) and a goal plane in the presence of obstacles. A new motion primitive tool based on the logistic curve is proposed and a closed-form analytic approach is developed to satisfy constraints on starting pose, goal plane, velocity, acceleration, and jerk. The geometric obstacle avoidance problem is represented as a combinatorial set problem and a heuristic approach is proposed to accelerate the solution search. Numerical examples are presented to highlight the fast motion primitive generation in multi-obstacle pose-to-plane scenarios.
Published in: 2021 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 27 Sept.-1 Oct. 2021
Date Added to IEEE Xplore : 16 December 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 21504056
DOI: 10.1109/IROS51168.2021.9636002
Publisher: IEEE
Conference Location: Prague, Czech Republic
Funding Agency:
SECTION I.
Introduction

Motion primitive based motion planning approaches are widely used in UGV and UAV applications [1] [2] [3] [4] [5] – [6] . The reasons behind their popularity are as follows: (i) they discretize the configuration space allowing the graph search methods to be used directly [4] , and (ii) avoid the path smoothing step of the sampling-based motion planners for generating kinodynamically feasible trajectories [5] . Focusing on the kinodynamic motion planning, a prospective motion primitive tool should provide multiple trajectory segments originated from a prescribed starting pose (position, velocity, and acceleration) that have continuous velocity and acceleration variations with bounded values. It is also desirable that the motion primitives have obstacle avoidance properties.

One of the first works on motion primitives based motion planning was presented in [7] where an approximate algorithm using acceleration bang primitives was proposed. In [8] , an exact algorithm for planar workspace was discussed where position and velocity were time parameterized to obtain the motion primitives. Note that one of the important reasons behind the computation complexity of [7] and [8] was the absence of simple geometric conditions for obstacle avoidance [6] . Using a state-time space representation approach, motion planning in presence of dynamic obstacles was solved in [9] . This approach mapped the planning problem to a simple curve finding problem in the state-time space where piece-wise constant acceleration motion primitives were used to discretize the space in a grid and applying the graph search algorithms directly to find the shortest path. Reducing the computational complexity of the state-space time approach, a sampling-based motion planner was proposed in [10] which randomly sampled the grid points rather than considering all points, for finding the path.

A state lattice based approach was proposed in [11] to ensure the smoothness of the trajectory where motion primitives were represented by polynomial curvature function of path length. The position expressions of these primitives were given by polynomial spirals (also known as Cornu spirals) [12] with few design parameters that reduce the search space dimension, however, require numerical computation or approximation of Fresnel integrals for computing the position. Polynomial time parameterized motion primitives were used with state lattice approach in [4] to provide inherent smoothness of the trajectory, and simple bounded velocity and acceleration conditions. Therein, a constant control was applied for a time period and obstacle avoidance was checked over an occupancy grid map with conservative conditions. In [13] , quintic Bezier curve based´ motion primitives were proposed and integrated with the state lattice based approach to obtain the smooth trajectories with fewer design parameters and computation efficiency. Therein, a signed distance map was used to compute the distance from the obstacle, and avoidance was ensured by making the distance of a path segment less than the corresponding signed distance.

A polynomial time parameterized motion primitive approach with flexible end-point constraints and closed-form solutions was discussed in [14] . The free-end framework provided feasibility checking and trajectory generation with computational efficiency. Recently, a four parameter logistic (4PL) curve based path planning tool was proposed in [15] and applied to a UAV application with geometric obstacle avoidance conditions [16] . Explicit position coordinate expression of the 4PL curve with just two design parameters, shape flexibility, and asymptotic final point reachability makes it a computationally efficient path planning tool.

Inspired by [14] , this work defines the problem of generating smooth motion primitive in a pose-to-plane planning framework where the starting pose (position, velocity, and acceleration) and goal plane position are given. As the key contribution, a new motion primitive tool is derived from the 4PL curve and investigated as a prospective solution. Closed-form conditions are derived to satisfy the starting pose, goal plane, and dynamic feasibility (smooth and bounded velocity, acceleration, and jerk variations) constraints. The obstacle avoidance problem is solved by selecting appropriate com-binations of 1−D trajectories such that the set of intersection times is empty. A heuristic approach for finding all suitable combinations is proposed. Computational performance of the proposed approach is tested in simple and complex multi-obstacle scenarios.
Fig. 1: - Pose-to-plane motion primitives in the obstacle cluttered workspace
Fig. 1:

Pose-to-plane motion primitives in the obstacle cluttered workspace

Show All

The remainder of this paper is organized as follows: The concerned problem is defined in Section II . A logistic curve based motion primitive tool satisfying pose-to-plane and dynamic feasibility constraints is proposed in Section III . Section IV proposes an obstacle avoidance approach. The proposed method is validated with numerical examples in Section V . Section VI provides the concluding remarks.
SECTION II.
Problem Definition
A. Relationship between Quadrotor Motion and Time-Parameterized Curves

As discussed in [17] , a quadrotor position X =( x,y,z )∈ ℝ 3 can be defined as differential flat outputs and hence, each position component can be represented by a thrice differentiable time-parameterized curves. Using the quadrotor dynamics, expressions for the quadrotor control inputs in the inertial frame can be written as [18]
f = | | X ¨ − G | | , [ ω y − ω x ] = 1 f [ 1 0 0 1 0 0 ] R − 1 X ¨ (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*}f = ||\ddot X - G||,\quad \left[ {\begin{array}{c} {{\omega _y}} \\ { - {\omega _x}} \end{array}} \right] = \frac{1}{f}\left[ {\begin{array}{lll} 1&0&0 \\ 0&1&0 \end{array}} \right]{R^{ - 1}}\ddot X\tag{1}\end{equation*} where f and ( ω x ,ω y ) are the mass normalized force and component-wise angular velocities, respectively. The proper orthogonal matrix R converts a body frame vector to an inertial frame vector and G = [0,0,− g ] T where g represents the gravitational acceleration. As the yaw motion is independent of the translation motion, ω z = 0 (constant yaw ψ ) is assumed in this work. Here, X ¨ and X ¨ are the second (acceleration) and third derivatives (jerk) of the quadrotor center of mass position X with respect to time t , respectively. With this, the derivatives of all three curves (velocity V = X ˙ , acceleration A = X ¨ , and jerk J = X ... ) can be used in (1) to obtain the quadrotor control inputs. Also, the bounds on the inputs (force and angular velocities) can be considered in terms of the trajectory acceleration and jerk bounds [6] .

B. Problem Statement

Consider a motion planning workspace W ⊆ ℝ 3 with a given starting position s = ( x s ,y s ,z s ) and a goal plane g as shown in Fig. 1 . Without loss of generality, the goal plane can be defined as g : = { ( x g , y g , z g ) | y g ∈ [ y g , y ¯ g ] , z g ∈ [ z g , z ¯ g ] } ⊆ R 2 (here Y − Z plane) where x g , y – g , y ¯ g , z g – – , and z g ¯ ¯ ¯ ¯ ¯ are predefined constants. Velocity, acceleration and jerk of the 3-D motion primitives are represented by vectors V = [ v x ,v y ,v z ] and A = [ a x ,a y ,a z ], and J = [ j x , j y , j z ], respectively. Starting time t s , velocity V s = [ v sx ,v sy ,v sz ] and acceleration components A s =[ a sx ,a sy ,a sz ] at starting position are predefined. Also, the upper and lower bounds on the velocity ( v – , v ¯ ) , acceleration ( a – – , a ¯ ) , and jerk ( j – , j ¯ ) components are given. The workspace contains n known static rectangular shaped obstacles { R k } n k = 1 defined as R k : = [ x – – k , x ¯ k ] × [ y – k , y ¯ k ] × [ z – k , z ¯ k ] where ( x – – k , y – k , z – k ) and ( x ¯ k , y ¯ k , z ¯ k ) represent the extreme corners of the k obstacle. With this, the problem can be formally stated as follows: Find a motion primitive X ( t ) := { t → ( x ( t ) ,y ( t ) ,z ( t ))} ∈ ℝ 3 that

    connects the starting position and the goal plane, that is, X ( t s )=( x s ,y s ,z s ) and X ( t g )∈ g where, t g is the goal time, respectively.

    has desired velocity and acceleration values, respectively, at the starting position, that is, X ˙ ( t s ) = V s and X ¨ ( t s ) = A s ,

    has continuous velocity and acceleration variations within the prescribed bounds, that is, X ˙ ( t ) ∈ [ V – – , V ¯ ] and X ¨ ( t ) ∈ [ A – – , A ¯ ] , respectively, for all t ∈ [ t s ,t g ], and

    avoids all obstacles, that is, X ( t ) ∉ ⋃ k R k for all t.

This work assumes starting pose with strictly non-zero acceleration and velocity values to avoid degeneracy in the closed-form solution of the initial conditions. A variation on the provided equations can relax this requirement somewhat but is beyond the present scope.
SECTION III.
PROPOSED MOTION PRIMITIVE TOOL

First, the modified 4PL curve is introduced and its basic properties are discussed. Closed-form conditions are derived for generating a pose-to-plane 4PL motion primitive. Dynamic feasibility (bounded velocity, acceleration, and jerk) analysis is presented subsequently.
A. The Modified 4PL Curve with Time Scaling and Shifting Parameters

For generating the motion primitive with the prescribed starting constraints, the generic 4PL curve is defined as
p ( t ; t s , t d , B , C , p i , p g ) = p g + p i − p g 1 + ( t − t s + t d C ) 2 B (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*}p\left({t;{t_s},{t_d},B,C,{p_i},{p_g}}\right) = {p_g} + \frac{{{p_i} - {p_g}}}{{1 + {{\left({\frac{{t - {t_s} + {t_d}}}{C}}\right)}^{2B}}}}\tag{2}\end{equation*} where t ≥ 0 , t d ∈ ℝ , B > 2 , C ∈ ℝ , p i < p g , and t s ≥ 0 is fixed. The design variables p i and p g are the extrema of the curve which are to be sampled. Design parameters ( B,C ) and t d are obtained from the sampled ( p i , p g ) values and starting pose which provide shape control and time scaling, respectively, as shown in Fig. 2 . From (2) , the 3-D 4PL motion primitive components are written as
x ( t ) = p ( t ; t s , t d x , B x , C x , x i , x g ) y ( t ) = p ( t ; t s , t d y , B y , C y , y i , y g ) z ( t ) = p ( t ; t s , t d z , B z , C z , z i , z g ) (3) (4) (5)
View Source Right-click on figure for MathML and additional features. \begin{align*} & x(t) = p\left({t;{t_s},{t_{dx}},{B_x},{C_x},{x_i},{x_g}}\right)\tag{3} \\ & y(t) = p\left({t;{t_s},{t_{dy}},{B_y},{C_y},{y_i},{y_g}}\right)\tag{4} \\ & z(t) = p\left({t;{t_s},{t_{dz}},{B_z},{C_z},{z_i},{z_g}}\right)\tag{5}\end{align*}

Fig. 2: - Curve shape control by (B,C) and shifting by td
Fig. 2:

Curve shape control by ( B,C ) and shifting by t d

Show All

where, t ∈ [ t s ,t g ].

From (2) it can be seen that the 4PL curve attains the goal value p g asymptotically which is not desirable for motion planning. The final point reachability property [15] of the 4PL curve can be used to obtain a final time t g at which the 4PL primitive lies within an acceptable ε > 0 error band of the goal position. Imposing | p g − p ( t g )| ≤ ε , results in
t g ≥ t s − t d + | C | ( | p i − p g | − ε ε ) 1 2 B (6)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{t_g} \geq {t_s} - {t_d} + |C|{\left({\frac{{\left| {{p_i} - {p_g}} \right| - \varepsilon }}{\varepsilon }}\right)^{\frac{1}{{2B}}}}\,\tag{6}\end{equation*}

Expressions for first, second, and third time derivatives (velocity, acceleration, and jerk, respectively) of the 4PL motion primitive components are obtained as
v p = d p d t = 2 B C 2 B ( p g − p i ) ( t − t s + t d ) 2 B − 1 ( ( t − t s + t d ) 2 B + C 2 B ) 2 a p = d 2 p d t 2 = 2 B C 2 B ( p g − p i ) ( t − t s + t d ) 2 B − 2 ( ( t − t s + t d ) 2 B + C 2 B ) 2 [ ( 2 B − 1 ) − 4 B ( t − t s + t d ) 2 B ( t − t s + t d ) 2 B + C 2 B ] [ ( 2 B − 1 ) ( 2 B − 2 ) − 12 B ( 2 B − 1 ) ( t − t s + t d ) 2 B ( t − t s + t d ) 2 B + C 2 B 24 B 2 ( t − t s + t d ) 4 B ( ( t − t s + t d ) 2 B + C 2 B ) 2 ] (7) (8) (9)
View Source Right-click on figure for MathML and additional features. \begin{align*} & {v_p} = \frac{{dp}}{{dt}} = \frac{{2B{C^{2B}}\left({{p_g} - {p_i}}\right){{\left({t - {t_s} + {t_d}}\right)}^{2B - 1}}}}{{{{\left({{{\left({t - {t_s} + {t_d}}\right)}^{2B}} + {C^{2B}}}\right)}^2}}}\tag{7} \\ & \begin{array}{c} {a_p} = \frac{{{d^2}p}}{{d{t^2}}} = \frac{{2B{C^{2B}}\left({{p_g} - {p_i}}\right){{\left({t - {t_s} + {t_d}}\right)}^{2B - 2}}}}{{{{\left({{{\left({t - {t_s} + {t_d}}\right)}^{2B}} + {C^{2B}}}\right)}^2}}} \\ \left[ {(2B - 1) - \frac{{4B{{\left({t - {t_s} + {t_d}}\right)}^{2B}}}}{{{{\left({t - {t_s} + {t_d}}\right)}^{2B}} + {C^{2B}}}}} \right]\end{array}\tag{8} \\ & \begin{array}{c} \left[ {(2B - 1)(2B - 2) - \frac{{12B(2B - 1){{\left({t - {t_s} + {t_d}}\right)}^{2B}}}}{{{{\left({t - {t_s} + {t_d}}\right)}^{2B}} + {C^{2B}}}}} \right. \\ \left. {\frac{{24{B^2}{{\left({t - {t_s} + {t_d}}\right)}^{4B}}}}{{{{\left({{{\left({t - {t_s} + {t_d}}\right)}^{2B}} + {C^{2B}}}\right)}^2}}}} \right]\end{array}\tag{9}\end{align*} respectively, which have zero values at final time t g , for all B > 2. Also, from (7) , (8) , and (9) , it can be observed that the 4PL primitive has continuous velocity, acceleration, and jerk variation with respect to t for B > 2.

B. Proposed Motion Primitive Satisfying Given Starting Constraints

From the given starting position ( p s ), velocity ( v sp ), and acceleration ( a sp ), the explicit expressions of the design parameters are obtained as follows:
1) Computation of t d from the given starting position:

Imposing p = p s at t = t s in (2) , results in
t d = ± C ( p s − p i p g − p s ) 1 2 B (10)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{t_d} = \pm C{\left({\frac{{{p_s} - {p_i}}}{{{p_g} - {p_s}}}}\right)^{\frac{1}{{2B}}}}\tag{10}\end{equation*}

Figure 2 shows that any p s ∈ [ p i , p g ] can be achieved by shifting the curve with a t d computed from (10) .
2) Expression for C using v s :

Similarly, imposing starting velocity constraint in (7) and substituting t d from (10) , yields
C = 2 B ( p g − p s ) ( p s − p i ) v s p ( p g − p i ) ( p g − p s p s − p i ) 1 2 B (11)
View Source Right-click on figure for MathML and additional features. \begin{equation*}C = \frac{{2B\left({{p_g} - {p_s}}\right)\left({{p_s} - {p_i}}\right)}}{{{v_{sp}}\left({{p_g} - {p_i}}\right)}}{\left({\frac{{{p_g} - {p_s}}}{{{p_s} - {p_i}}}}\right)^{\frac{1}{{2B}}}}\tag{11}\end{equation*}

3) Parameter B from acceleration:

Using the starting acceleration value in (8) , and substituting t d and C from (10) and (11) , respectively, results in
B = 1 2 v 2 s p ( p g − p i ) v 2 s p ( p g − 2 p s + p i ) − a s p ( p g − p s ) ( p s − p i ) (12)
View Source Right-click on figure for MathML and additional features. \begin{equation*}B = \frac{1}{2}\frac{{v_{sp}^2\left({{p_g} - {p_i}}\right)}}{{v_{sp}^2\left({{p_g} - 2{p_s} + {p_i}}\right) - {a_{sp}}\left({{p_g} - {p_s}}\right)\left({{p_s} - {p_i}}\right)}}\tag{12}\end{equation*}

For the given starting pose ( p s ,v ps ,a ps ) and chosen ( p g , p i ), the parameters B , C , and t d can be determined in sequence from (12) , (11) , and (10) , respectively.

Remark 1: From (11) and (12) , it can be seen that zero starting velocity or acceleration leads to a singularity in the 4PL curve where p i = p g = p s . In this case, the parameters B and C become the design variables and all analysis need to be carried out in terms of ( B,C ) which is out of the scope of this paper.

Remark 2: For p i = p s = p g , the 4PL curve has a constant position p g and zero velocity, acceleration, jerk values for all t ∈ [ t s ,t g ].
C. Conditions Satisfying Velocity, Acceleration, and Jerk Bounds

By equating (8) , (9) , and the first derivative of (9) to zero and solving for t gives the time instants corresponding to velocity, acceleration, and jerk extrema ( v ⋆ , a ⋆ , j ⋆ ) , respectively. These extrema can be computed by substituting respective time instants in (7) , (8) , and (9) , respectively which are trivial expressions and omitted here for the sake of brevity. With this, the conditions for bounded velocity, acceleration, and jerk are written as
v – ≤ v ⋆ ≤ v ¯ a – – ≤ a ⋆ ≤ a ¯ j – ≤ j ⋆ ≤ j ¯ (13) (14) (15)
View Source Right-click on figure for MathML and additional features. \begin{align*} & \underline{v} \leq {v^ \star } \leq \bar v\tag{13} \\ & \underline{a} \leq {a^ \star } \leq \bar a\tag{14} \\ & \underline{j} \leq {j^ \star } \leq \bar j\tag{15}\end{align*}

D. Selection of Dynamically feasible Sets

Steps for computing a dynamically feasible set ( S f ) of ( p i , p g ) pairs that satisfy the starting pose, goal plane, and dynamic feasible constraints, are discussed in this subsection. First, ( p i , p g ) pairs are sampled from p i ∈ (−∞ , p g ) and p g ∈ [ p – g , p ¯ g ] . Using the sampled pairs, given starting pose, and goal plane position, design parameters B,C , and t d are computed in order from (12) , (11) , and (10) , respectively. Next, the dynamic feasibility conditions, given by (13) , (14) , and (15) are checked for computed parameters and all feasible pairs are stored in the set S f . Feasible design variable sets ( S x f , S y f , S z f ) for the 3-D motion primitive are obtained in each axis independently.

Remark 3: Sampling step (grid) size of the design variable space affects the performance of the proposed approach in terms of number which is related to the resolution completeness property. Hence, there is a trade-off between the number of solutions and computations.
Fig. 3: - Time intersection between an obstacle projection and 1-D 4PL primitive: Four possible intersections (cross markers) for a Type I 1-D 4PL primitive (a) and the remaining three possible primitive types: II) two intersection points (II.a and II.b), III) complete overlap, and IV) no intersection (b).
Fig. 3:

Time intersection between an obstacle projection and 1-D 4PL primitive: Four possible intersections (cross markers) for a Type I 1-D 4PL primitive (a) and the remaining three possible primitive types: II) two intersection points (II.a and II.b), III) complete overlap, and IV) no intersection (b).

Show All
TABLE I: Intersection intervals between the 4PL primitive and the obstacle projection and respective flag
Table I:- Intersection intervals between the 4PL primitive and the obstacle projection and respective flag
SECTION IV.
Obstacle Avoiding Motion Primitives

This section discusses the generation of 4PL motion primitives with obstacle avoidance. Avoidance of multiple obstacles can be guaranteed by avoiding their projections in at least one axis for all time. This is achieved in the following two steps:

    Find the time intervals during which a 4PL motion primitive in one axis overlaps with the projection of an obstacle into the same axis. These time intervals are computed for all dynamic feasible pairs of each axis.

    Find all combinations of 1−D motion primitives such that the time intervals of overlap with each obstacle do not all intersect, i.e. there is no time when the 3−D trajectory is inside the obstacle. Brute force evaluation of all combinations of 1−D primitives is the baseline approach. Here, we present heuristics to accelerate that search by exploiting special overlap cases.

Details of the steps are discussed in the sequel.
A. Overlap Between an Obstacle Projection and a 4PL Motion Primitive Component

Consider a static obstacle projection in the t − p (where p could be x , y , or z ) plane, as shown in Fig. 3 by the infinite red rectangular strip with width p ¯ k − p – k , where p ¯ k > p – k . For simplicity of notation, we assumed p i < p g for obtaining the time intervals. The p i and p g are swapped in the obtained time intervals for p g < p i . The overlap between the curve and obstacle is formally defined as T o v l : = { t | p ( t ) ∈ [ p – k , p ¯ k ] } . Based on the ( p i , p g ) position, four possible types of the 4PL curve exist that are defined in Table I and discussed as follows:
1) Type I (Four intersection points):

In the first case, the curve intersects the edges of the obstacle projection at four points as shown in Fig. 3a by the cross markers. By equating (2) to p ¯ k , the time instants for the left and right upper intersection points can be obtained as
t ¯ k l = t s − t d − C ( p ¯ k − p i p g − p ¯ k ) 1 2 B ; t ¯ k l = t s − t d + C ( p ¯ k − p i p g − p ¯ k ) 1 2 B (16)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{\bar t_{kl}} = {t_s} - {t_d} - C{\left({\frac{{{{\bar p}_k} - {p_i}}}{{{p_g} - {{\bar p}_k}}}}\right)^{\frac{1}{{2B}}}};{\bar t_{kl}} = {t_s} - {t_d} + C{\left({\frac{{{{\bar p}_k} - {p_i}}}{{{p_g} - {{\bar p}_k}}}}\right)^{\frac{1}{{2B}}}}\tag{16}\end{equation*} respectively. Similarly, the time instants corresponding to two lower intersection points are given as
t – k l = t s − t d − C ( p k − p i p g − p – k ) 1 2 B , t – k r = t s − t d + C ( x k − p i p g − x – – k ) 1 2 B (17)
View Source Right-click on figure for MathML and additional features. \begin{equation*}{\underline{t} _{kl}} = {t_s} - {t_d} - C{\left({\frac{{{p_k} - {p_i}}}{{{p_g} - {{\underline{p} }_k}}}}\right)^{\frac{1}{{2B}}}},{\underline{t} _{kr}} = {t_s} - {t_d} + C{\left({\frac{{{x_k} - {p_i}}}{{{p_g} - {{\underline{x} }_k}}}}\right)^{\frac{1}{{2B}}}}\tag{17}\end{equation*}

From (16) and (17) , the time intervals [ t ¯ k l , t – k l ] and [ t – k r , t ¯ k r ] correspond to the left and right curve-obstacle intersections.
2) Type II (Two intersection points):

The second type of the 4PL curve intersects the edges of obstacle projection at two points in such a way that either p i (Type II.a) or p g (Type II.b) lies within the obstacle projection. These two subtypes are labeled as II.a and II.b in Fig. 3b , respectively. As the p i ∈ [ p – k , p ¯ k ] for Type II.a curve, it has only one overlapping time interval [ t ¯ k l , t ¯ k r ] . In contrast, the Type II.b curve has two time intervals [ ∞ , t – k l ] , [ t – k r , ∞ ] .
3) Type III (Complete overlap):

This type of curve lies within the obstacle projection for all time as shown in Fig. 3b by the curve labeled III. Hence, the time interval span over the whole time period (−∞,∞).
4) Type IV (No intersection):

Any curve either above or below the obstacle projection (IV.a and IV.b label curves, respectively, in Fig. 3b ), falls under this category. For this type of curve, the overlapping interval is empty.

Effect of t s on the time intervals: The 1-D 4PL motion primitive is a part of the 4PL curve that starts from a specific t s . Hence, any time intersection point less than the t s should be replaced with t s in the overlapping time intervals. With this, the intersecting time intervals for all types are summarized in Table I which will be used in the next section for obstacle avoidance. To support the subsequent search, we define an overlap type flag as an output of this process: 0 for no overlap, 1 for continuous overlap, and 2 for partial overlap, i.e. for a subset of [ t s ,∞). The time intervals and intersection information for each dynamically feasible pairs ( p i , p g )∈ S f are stored in matrices T ( p i , p g ) and F ( p i , p g ) defined as T ( p i , p g ) : = { { t i n t } } n k = 1 and F ( p i , p g ) : = { f k } n k = 1 respectively, which are further stored in T : = { ( p i , p g ) j } | S f | j = 1 and F : = { F ( p i , p g ) j } | S f | j = 1 for all feasible pairs. Using this process, we can calculate T x , T y , and T z arrays, where T x ( j,k ) denotes the overlap interval T o vl between obstacle k and 1−D x −axis primitive j from S f x , and so on. Similarly, define matrices F x ,F y and F z such that F x ( j,k ) is the overlap type flag for x −primitive j from S f x with respect to obstacle k.
B. Heuristic-Based Obstacle Avoidance Approach

The steps of the proposed obstacle avoidance approach are discussed as follows:

    A motion primitive component not intersecting any obstacle edge avoids all obstacles. Hence, feasible design pairs not intersecting all obstacles in one axis and their combinations with all feasible pairs of other two axis components are stored as solutions. These pairs are removed from the feasible sets subsequently.

    Based on the number of design pair, dynamic feasible sets ( S x f , S y f , and S z f ) are selected in the ascending order which reduces the number of obstacle avoidance checks. Using the intersection type information sets ( F ), each pair of the first selected feasible set is checked against all feasible pairs of the second feasible set. Three possible pair combinations are as follows:

        A feasible pair combination avoiding every obstacle in both or either axis (flag combinations: (0,1 or 2),(1 or 2,0), (0,0)) is combined with the all feasible pairs of third feasible set and stored as solutions.

        If both axis components intersect one or more obstacles then the intersection of respective time intervals is checked. All pair combinations with no intersections for all obstacles are combined with all feasible pairs of the third component and stored as solutions.

        Remaining pair combinations are checked one by one against all pairs of third trajectory components. All pair combinations avoiding each obstacle in at least one axis are stored as solutions. Time intersection is checked for a pair combination with two or more components intersecting one or more obstacles. All pair combinations with no intersection for all obstacles are stored as solutions.

Using (3)-(5) , (10) - (12) , and all design variable sets of s , multiple dynamically feasible obstacle-avoiding motion primitives can be generated in one shot. The final time t g for a motion primitive is given as t g = max { t x g , t y g , t z g } where t x g , t y g , t z g are computed from (6) .
SECTION V.
NUMERICAL EXAMPLES

Two cases are considered to test the performance of the proposed approach in terms of the number of solutions and computation time. For both cases, start and goal positions are selected at s ( x s ,y s ,y g ) = (0,1.5,1) m, x g = 4 m, ( y – g , y ¯ g ) = ( 2.8 , 3.2 ) m, and ( z – g , z ¯ g ) = ( 1.7 , 2.3 ) m. The velocity, acceleration, and jerk bounds of ( v – , v ¯ ) = (−5,5) m/s, ( a – – , a ¯ ) = (−10,10) m/s 2 , and ( j – , j ¯ ) = (−50,50) m/s 3 , are considered for each axis component, respectively. The proposed approach is implemented in MATLAB R2019b on a 3.20 GHz Intel ® Core™ i7-8770 CPU with 16 GB RAM.
Fig. 4: - Case 1: Proposed pose-to-plane motion primitive generation (a), primitive components (b), and continuous bounded derivative profiles (c)-(e).
Fig. 4:

Case 1: Proposed pose-to-plane motion primitive generation (a), primitive components (b), and continuous bounded derivative profiles (c)-(e).

Show All
Fig. 5: - Multiple obstacle avoidance with three starting poses: Case 2a (green), Case 2b (blue), Case 2c (black).
Fig. 5:

Multiple obstacle avoidance with three starting poses: Case 2a (green), Case 2b (blue), Case 2c (black).

Show All
1) Case 1:

Trivial Obstacle Avoidance Scenario: Two obstacles are placed at both sides of the goal plane (red rectangular boxes in Fig. 4a ) in such a way that all dynamically feasible pairs avoid both obstacles. At the starting point, velocity V s = [3] , [3] , [1] and acceleration A s = [1,0.5,0.1] are considered. The ( p i , p g ) values are sampled over 6×6 grid. With these inputs, the proposed approach has computed 5, 25, and 32 dynamically feasible sets for x, y , and z −axis components, respectively, in 101 ms. As given in Table II , a brute-force obstacle avoidance approach takes 0.312 s to generate 2720 solutions whereas the proposed approach computes all solutions in only 172 ms. Feasible motion primitives are generated for ten solutions which are plotted in Fig. 4a by the solid green lines. Figure 4b shows that all motion primitive components satisfy the starting and goal position constraints. Velocity and acceleration profiles of the motion primitive components are plotted in Figs. 4c and 4d , respectively, that starts from the given velocity and acceleration values and have continuous and bounded variations. Figure 4e shows that the jerk variations for all motion primitives lie within the prescribed bounds ( j – , j ¯ ) .
TABLE II: Computation data for the numerical examples
Table II:- Computation data for the numerical examples
2) Case 2:

Multi-Obstacle Scenario: This case considers 10 randomly generated obstacles with 0.5 m width in each axis as shown in Fig. 5 . Three subcases with different starting poses are considered for which the starting pose values are provided in Table II . The first subcase (Case 2a) considers the starting pose of Case 1 for which the proposed approach computes 1636 solutions in 470 ms. Ten solutions are selected from the solution set and corresponding obstacle-avoiding motion primitives are plotted in Fig. 5 by the solid green lines. For Case 2b and 2c, the starting velocity and acceleration in z −axis are changed, respectively, and as given in Table II . The proposed approach has computed 493 and 1 solution in 195 and 444 ms, respectively. Motion primitives for Case 2b and 2c are plotted in Fig. 5 by the blue and purple lines, that avoid all obstacles and satisfy the pose-to-plane constraints.

Time to compute the first set of solutions is provided in Table II for all cases. It shows that the proposed approach can compute the first set of solutions in approximately half time of the total planning time. Also, for all cases, the proposed approach finds solutions faster than the brute-force approach.
SECTION VI.
CONCLUSIONS

A new logistic curve based motion primitive tool is introduced to connect a given starting pose and a goal plane. The starting pose, goal plane, and dynamic feasibility constraints are imposed and closed-form conditions are derived to obtain a set of feasible design variable pairs in each axis separately. Potential obstacle overlap intervals are also found analytically, axis by axis. The final stage is to identify combinations of axis primitives whose overlap intervals do not intersect and hence ensure obstacle avoidance. A heuristic approach is proposed to find all solutions with a fewer number of intersection checks. Numerical examples with multiple obstacle scenarios demonstrate that the proposed approach is capable of generating a large number of obstacle-avoiding motion primitives in a fraction of a second.

Authors
Figures
References
Keywords
Metrics
Footnotes
   Back to Results   
More Like This
Smart Real-Time Motion Control Framework for 2-DOF Helicopters: A Teleoperation Approach

2019 IEEE 28th International Symposium on Industrial Electronics (ISIE)

Published: 2019
Collision avoidance for a remotely-operated helicopter using haptic feedback

2004 IEEE International Conference on Systems, Man and Cybernetics (IEEE Cat. No.04CH37583)

Published: 2004
Show More
References
1. D. González, J. Pérez, V. Milanés and F. Nashashibi, "A Review of Motion Planning Techniques for Automated Vehicles", IEEE Transactions on Intelligent Transportation Systems , vol. 17, no. 4, pp. 1135-1145, Apr. 2016.
Show in Context View Article Full Text: PDF (3110) Google Scholar
2. B. Paden, M. Čáp, S. Z. Yong, D. Yershov and E. Frazzoli, "A Survey of Motion Planning and Control Techniques for Self-Driving Urban Vehicles", IEEE Transactions on Intelligent Vehicles , vol. 1, no. 1, pp. 33-55, Mar. 2016.
Show in Context View Article Full Text: PDF (1405) Google Scholar
3. D. Ferguson, T. M. Howard and M. Likhachev, "Motion planning in urban environments", Journal of Field Robotics , vol. 25, no. 11-12, pp. 939-960, 2008.
Show in Context CrossRef Google Scholar
4. S. Liu, N. Atanasov, K. Mohta and V. Kumar, "Search-based motion planning for quadrotors using linear quadratic minimum time control", IEEE International Conference on Intelligent Robots and Systems , pp. 2872-2879, Sep. 2017.
Show in Context View Article Full Text: PDF (3361) Google Scholar
5. B. Macallister, J. Butzke, A. Kushleyev, H. Pandey and M. Likhachev, "Path planning for non-circular micro aerial vehicles in constrained environments", IEEE International Conference on Robotics and Automation , pp. 3933-3940, May 2013.
Show in Context View Article Full Text: PDF (2058) Google Scholar
6. S. Liu, K. Mohta, N. Atanasov and V. Kumar, "Search-Based Motion Planning for Aggressive Flight in SE(3)", IEEE Robotics and Automation Letters , vol. 3, no. 3, pp. 2439-2446, 2018.
Show in Context View Article Full Text: PDF (842) Google Scholar
7. J. Canny, J. Reif, B. Donald and P. Xavier, "On the complexity of kinodynamic planning", Annual Symposium on Foundations of Computer Science , pp. 306-316, Oct. 1988.
Show in Context View Article Full Text: PDF (905) Google Scholar
8. J. Canny, A. Rege and J. Reif, "An exact algorithm for kinodynamic planning in the plane", Discrete & Computational Geometry , vol. 6, no. 1, pp. 461-484, Dec. 1991.
Show in Context CrossRef Google Scholar
9. T. Fraichard, "Trajectory planning in a dynamic workspace: A ’statetime space’ approach", Advanced Robotics , vol. 13, no. 1, pp. 75-94, Jan 1998.
Show in Context CrossRef Google Scholar
10. D. Hsu, R. Kindel, J.-C. Latombe and S. Rock, "Randomized Kinodynamic Motion Planning with Moving Obstacles", The International Journal of Robotics Research , vol. 21, no. 3, pp. 233-255, 2002.
Show in Context CrossRef Google Scholar
11. M. Pivtoraiko, R. A. Knepper and A. Kelly, "Differentially constrained mobile robot motion planning in state lattices", Journal of Field Robotics , vol. 26, no. 3, pp. 308-333, 2009.
Show in Context CrossRef Google Scholar
12. A. Kelly, B. Nagy and A. Kelly Bryan Nagy, "Reactive Nonholonomic Trajectory Generation via Parametric Optimal Control", The International Journal of Robotics Research , vol. 22, no. 7-8, pp. 583, 2003.
Show in Context CrossRef Google Scholar
13. J. Choi and K. Huhtala, "Constrained path optimization with bézier curve primitives", 2014 IEEE/RSJ International Conference on Intelligent Robots and Systems , pp. 246-251, 2014.
Show in Context View Article Full Text: PDF (2149) Google Scholar
14. M. W. Mueller, M. Hehn and R. Dandrea, "A Computationally Efficient Motion Primitive for Quadrocopter Trajectory Generation", IEEE Transactions on Robotics , vol. 31, no. 6, pp. 1294-1310, Dec. 2015.
Show in Context View Article Full Text: PDF (1006) Google Scholar
15. S. Upadhyay and A. Ratnoo, "Continuous-curvature path planning with obstacle avoidance using four parameter logistic curves", IEEE Robotics and Automation Letters , vol. 1, no. 2, pp. 609-616, July 2016.
Show in Context View Article Full Text: PDF (1190) Google Scholar
16. S. Upadhyay and A. Ratnoo, "Smooth Path Planning for Unmanned Aerial Vehicles with Airspace Restrictions", Journal of Guidance Control and Dynamics , vol. 40, no. 7, pp. 1596-1612, Jul. 2017.
Show in Context CrossRef Google Scholar
17. D. Mellinger and V. Kumar, "Minimum snap trajectory generation and control for quadrotors", IEEE International Conference on Robotics and Automation , pp. 2520-2525, 2011.
Show in Context View Article Full Text: PDF (1980) Google Scholar
18. M. Hehn and R. D’Andrea, "Quadrocopter trajectory generation and control", 18th IFAC World Congress , vol. 44, no. 1, pp. 1485-1491, Aug.-Sep. 2011.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
