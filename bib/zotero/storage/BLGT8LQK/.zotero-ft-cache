IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Processing math: 88%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
Three Dimensional Optimal Path Generation and Tracking for Quadrotors in Dynamic Environment
Publisher: IEEE
Cite This
PDF
  << Results   
R. Hariharan ; Siddarth Yadla ; Sikha Hota
All Authors
View Document
85
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Formulation
    III.
    Path Planning
    IV.
    Trajectory Tracking
    V.
    Simulation Results

Show Full Outline
Authors
Figures
References
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper presents a collision avoidance algorithm for quadrotors in a three-dimensional (3D) cluttered environment filled with dynamic obstacles, including a path re-pl... View more
Metadata
Abstract:
This paper presents a collision avoidance algorithm for quadrotors in a three-dimensional (3D) cluttered environment filled with dynamic obstacles, including a path re-planning algorithm to rejoin with its original trajectory in optimal time. The algorithms are based on a geometrical approach, accomplished by changing the heading and the pitch angles of the quadrotor simultaneously while keeping its speed constant. The novelty of the proposed work is that the algorithm ensures a smooth path generation for both the collision avoidance and re-planning maneuvers for the quadrotor with very low tracking error, including optimality in path length. To validate the proposed algorithm, the generated path is tracked using a dynamic model of a quadrotor using a Lyapunov-based backstepping controller in the presence of external disturbances.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20902112
DOI: 10.1109/ICUAS51884.2021.9476752
Publisher: IEEE
Conference Location: Athens, Greece
Contents
SECTION I.
Introduction

Quadrotors have been gaining a lot of momentum due to their applications in a large spectrum of human lives. They are popularly used because of ease of manufacturing, ability to lift off heavy payload, and inherent capability of automation.

For tasks to be completed successfully in a cluttered environment, it is necessary for quadrotors to plan their path, avoiding obstacles, both static and dynamic, on the way. Path planning algorithms are generally classified into two categories, global and local. The global planning algorithms provide solutions considering the information about the whole environment beforehand. So this requires a considerable amount of memory for storage and computation. The local planning algorithms, on the other hand, are reactive. They only provide solutions reacting to local information acquired from the sensors of quadrotors, which significantly reduces the computational requirements and makes it efficient to implement in real-time. But the drawback of local planning algorithms is that they may not provide global optimal solutions. Hence, a hybrid approach that plans the path before the task using a global planner and avoids obstacles on the way using a local planner is preferable [1] .

There have been a variety of approaches proposed over the years for collision avoidance. Some of the famous approaches include A* [2] , Delaunay Triangulation [3] , Rapidly-exploring Random Trees (RRT) [4] and Potential Field approaches [5] . A comprehensive survey of these methods is presented in [6] . These methods, even though they provide optimal solutions, require high computational memory and time. Geometric-based algorithms have been widely used as they require low memory and use low computation time, making them simple, efficient, and easy to implement. These algorithms use the geometric relation between an unmanned aerial vehicle (UAV) and an obstacle to calculate the optimal trajectory to evade obstacles. Many geometric-based collision avoidance algorithms exist in the existing literature, such as [7] – [8] [9] [10] [11] [12] [13] [14] . Each of these methods has assumed that the change in velocity of the UAV is instantaneous, which demands very high lateral acceleration and hence, impractical. A novel practical collision avoidance approach called 3-dimensional velocity obstacle (3DVO) method, achieved by using a pure turning maneuver of the UAV in a chosen avoidance plane, was proposed in [15] . Since the avoidance plane is selected from a finite set, the proposed solution does not guarantee global optimality.

In this paper, a collision avoidance strategy and a path re-planning algorithm for quadrotors are proposed to avoid dynamic obstacles and then return to its original trajectory. The collision avoidance algorithm is based on the geometric method that provides an optimal solution by minimizing the change in the velocity vector. In addition, a novel path-replanning algorithm which makes the quadrotor maneuver back to its original course after successful collision avoidance has been presented. The algorithm presented in this paper changes the heading and elevation of the quadrotor simultaneously for maneuvers, keeping its speed constant. In addition, the proposed work ensures a smooth transition of the velocity vector by maneuvering the quadrotor along circular curves in three-dimensional (3D) space, making it implementable in real-world applications with very low tracking error.

Along with the path planning, a path tracking algorithm [16] , [17] that guarantees asymptotic convergence of the UAV with the desired path is also presented here. In order to solve the trajectory tracking problem, many nonlinear controllers like Lyapunov-based control, Sliding mode control [18] , [19] , backstepping control [20] , [21] , feedback linearization control [22] , and model predictive control [23] , [24] exist in the literature. These control techniques take into account the nonlinearities of the dynamics and assure the stability of the nonlinear system [25] . In this work, a Lyapunov-based backstepping control with integral action and Saturation function [26] has been used to track the path derived from the collision avoidance algorithm efficiently with very low tracking error.

The rest of the paper is organized as follows: Section II describes the problem formulation. Section III-A deals with the collision detection algorithm. In section III-B , the collision avoidance approach is presented. Section III-C discusses the novel path replanning approach for the quadrotor to reach the original trajectory. Section IV presents the dynamic model of the quadrotor and the controller design to track the generated path. Section V demonstrates the simulation results. Finally, section VI concludes the paper.
SECTION II.
Problem Formulation

Fig. 1.

Position vectors of quadrotor A_{0} , obstacle B_{0} and the goal G .

Show All

Consider that a quadrotor is moving with constant speed along a trajectory generated using a global path planner. The quadrotor detects an intruder at position B_{0} moving with a constant velocity \overrightarrow{v} . Let the position and velocity of the quadrotor at this instant be A_{0} and \overrightarrow{u} respectively. All the vectors are measured in the inertial frame of reference with x, y, z coordinate axes (refer Fig. 1 ).

The quadrotor calculates that it would collide with the intruder if it advanced in the same direction [9] ; hence, it becomes necessary to change its trajectory course.

We focus mainly on two objectives in this paper:

    To develop a local path planning algorithm that not only avoids the collision with the intruder but also enables the quadrotor to rejoin with its initial trajectory.

    To design a trajectory tracking algorithm that will ensure the convergence of the quadrotor with the generated path.

SECTION III.
Path Planning
A. Collision Detection

The collision detection technique is excerpted from [9] . The relative velocity of the quadrotor with respect to the intruder is given by \overrightarrow{v_{rel}}=\overrightarrow{u}-\overrightarrow{v} (see Fig. 2 ). The minimum separation distance vector, \overrightarrow{d_{rel}} between the UAV and the obstacle as defined in [9] can be calculated as \begin{equation*} \overrightarrow{d_{rel}} =\frac{\overrightarrow{r}\cdot\overrightarrow{v_{rel}}}{\vert \overrightarrow{v_{rel}}\vert^{2}} \overrightarrow{v_{rel}}-\overrightarrow{r} \tag{1} \end{equation*} View Source \begin{equation*} \overrightarrow{d_{rel}} =\frac{\overrightarrow{r}\cdot\overrightarrow{v_{rel}}}{\vert \overrightarrow{v_{rel}}\vert^{2}} \overrightarrow{v_{rel}}-\overrightarrow{r} \tag{1} \end{equation*} where, \overrightarrow{r}=\overrightarrow{r_{v}} -\overrightarrow{r_{u}} . It is proved in [9] that the collision between the UAV and the obstacle is certain if and only if the following conditions are satisfied: \begin{equation*} \vert \overrightarrow{d_{rel}}\vert < d_{min}\quad \text{and}\quad \dot{r} < 0 \tag{2} \end{equation*} View Source \begin{equation*} \vert \overrightarrow{d_{rel}}\vert < d_{min}\quad \text{and}\quad \dot{r} < 0 \tag{2} \end{equation*} where d_{min} is the minimum distance radius , i.e., the radius of the avoidance sphere.
Fig. 2.

Definition of minimum separation distance vector

Show All

B. Collision Avoidance

Fig. 3.

Quadrotor turning maneuver along a circular path

Show All

Consider that the collision avoidance trajectory includes a circular turn with radius \rho for t_{0} seconds on an arbitrary plane, \pi followed by a straight line till the obstacle is evaded. \rho can be chosen according to the dynamics of the quadrotor. The quadrotor changes its velocity from \overrightarrow{u} to \overrightarrow{u_{new}} after the travel along the circular path (see Fig. 3(a) ), and this change avoids the collision with the intruder. Let the angle subtended by the circular path towards the center be \varphi . The relation between \varphi and t_{0} is given as: \begin{equation*} \varphi=\frac{\vert \overrightarrow{u}\vert t_{0}}{\rho} \tag{3} \end{equation*} View Source \begin{equation*} \varphi=\frac{\vert \overrightarrow{u}\vert t_{0}}{\rho} \tag{3} \end{equation*}

Let the positions of the quadrotor and the intruder, after the quadrotor makes the circular turn, be A_{t_{0}} and B_{t_{0}} , respectively. Let us consider two arbitrary points, A on the initial trajectory of the quadrotor and B on the trajectory of the intruder. These points are chosen such that if the quadrotor moves from the point A with the velocity \overrightarrow{u_{new}} and the intruder moves from the point B with the velocity \overrightarrow{v} , they reach the points A_{0} and B_{0} , respectively after t seconds. It is assumed that the initial trajectory is a straight line in the vicinity of the current position of the quadrotor, i.e., \overrightarrow{A_{0}A} has the same direction as \overrightarrow{u} . Using geometry, we can show that ( Fig. 3(b) ) \begin{gather*} t= \frac{AA_{t_{0}}}{\vert \overrightarrow{u}\vert}=\frac{A_{0}A}{\vert \overrightarrow{u}\vert}=\frac{\rho\tan(\varphi/2)}{\vert \overrightarrow{u}\vert} \tag{4}\\ \overrightarrow{r_{A}}= \overrightarrow{r_{u}}+\overrightarrow{u}.t \tag{5}\\ \overrightarrow{r_{B}}= \overrightarrow{r_{v}}+\overrightarrow{v}.(t_{0}-t) \tag{6} \end{gather*} View Source \begin{gather*} t= \frac{AA_{t_{0}}}{\vert \overrightarrow{u}\vert}=\frac{A_{0}A}{\vert \overrightarrow{u}\vert}=\frac{\rho\tan(\varphi/2)}{\vert \overrightarrow{u}\vert} \tag{4}\\ \overrightarrow{r_{A}}= \overrightarrow{r_{u}}+\overrightarrow{u}.t \tag{5}\\ \overrightarrow{r_{B}}= \overrightarrow{r_{v}}+\overrightarrow{v}.(t_{0}-t) \tag{6} \end{gather*} where \overrightarrow{r_{A}} and \overrightarrow{r_{A}} are the position vectors of the points A and B , respectively.

Now, we can redefine the problem as: “ Given that the quadrotor and the obstacle are at virtual positions , A and B , with the velocities \overrightarrow{u} and \overrightarrow{v} , respectively, find the optimal velocity vector for the quadrotor, which will change instantaneously from its current direction to avoid collision and make an angle \varphi with \overrightarrow{u} .”
Fig. 4.

Geometric visualization of collision avoidance approach

Show All

Consider the points D and F such that \overrightarrow{AD} has the same magnitude and direction of the relative velocity vector of the quadrotor, \overrightarrow{v_{rel}} and \overrightarrow{AF} has the same magnitude and direction of the vector -\overrightarrow{v} (refer fig. 4 ). The position vectors of the points, D and F are given by \begin{gather*} \overrightarrow{r_{D}}=\overrightarrow{r_{A}}+\overrightarrow{u}-\overrightarrow{v} \tag{7}\\ \overrightarrow{r_{F}}=\overrightarrow{r_{A}}-\overrightarrow{v}= \overrightarrow{r_{u}}+\overrightarrow{u}.t-\overrightarrow{v} \tag{8} \end{gather*} View Source \begin{gather*} \overrightarrow{r_{D}}=\overrightarrow{r_{A}}+\overrightarrow{u}-\overrightarrow{v} \tag{7}\\ \overrightarrow{r_{F}}=\overrightarrow{r_{A}}-\overrightarrow{v}= \overrightarrow{r_{u}}+\overrightarrow{u}.t-\overrightarrow{v} \tag{8} \end{gather*}

Note that the vectors \overrightarrow{AD} and \overrightarrow{AF} are in meters whereas \overrightarrow{v_{rel}} and -\overrightarrow{v} are in meters per second.

The cone, \mathcal{C}_{1} represents the collision cone. To avoid the collision, \overrightarrow{AD} should lie on or outside the collision cone. The center of the sphere \mathcal{S} lies at F , and since \overrightarrow{FD}=\overrightarrow{u} , the radius is equal to \vert \overrightarrow{u}\vert . The significance of the sphere, \mathcal{S} is that the vector joining the point, A to any point on the sphere \mathcal{S} , represents a possible relative velocity vector of the quadrotor keeping its speed constant. The cone, \mathcal{C}_{2} has its vertex fixed at F and FD as its axis. The semi-vertical angle of the cone, \mathcal{C}_{2} is equal to \varphi , and hence any vector joining the point, F to any point on the cone will make an angle, \varphi with \overrightarrow{u} . Since the vertex of the cone, \mathcal{C}_{2} intersects with the center of the sphere, \mathcal{S} , their intersection will be a circle. Hence, to reduce the system further, the circle can be interpreted as an intersection between the sphere, \mathcal{S} , and a plane, \mathcal{P} . Let the center of the circle be the point, C and its position vector, \overrightarrow{r_{C}} can be calculated as: \begin{equation*} \overrightarrow{r_{C}}=\overrightarrow{r_{F}}+(1-\cos\varphi)\overrightarrow{u} \tag{9} \end{equation*} View Source \begin{equation*} \overrightarrow{r_{C}}=\overrightarrow{r_{F}}+(1-\cos\varphi)\overrightarrow{u} \tag{9} \end{equation*}

For simplifying the notations, we define two nomenclatures here:

    v_{i}\equiv i^{th} component of any vector \overrightarrow{v}

    i_{P}\equiv i^{th} component of any position vector \overrightarrow{r_{P}}

The equations of the plane, \mathcal{P} , the sphere, \mathcal{S} and the cone, \mathcal{C}_{1} can be given as \begin{gather*} \mathcal{P}: u_{x}(x- x_{C})+ u_{y}(y- y_{C})+ u_{z}(z- z_{C})=0 \tag{10}\\ \mathcal{S}: (x- x_{F})^{2}+(y- y_{F})^{2}+(z- z_{F})^{2}-\vert \overrightarrow{u}\vert ^{2}=0 \tag{11}\\ \mathcal{C}_{1}:\ \ (\vert \overrightarrow{r_{AB}}\vert ^{2}- d_{min}^{2})[(x- x_{A})^{2}+(y- y_{A})^{2}+(z- z_{A})^{2}]\\ \qquad\ -[x_{AB}(x- x_{A})+y_{AB}(y- y_{A})+ z_{AB}(z- z_{A})]^{2}=0 \tag{12} \end{gather*} View Source \begin{gather*} \mathcal{P}: u_{x}(x- x_{C})+ u_{y}(y- y_{C})+ u_{z}(z- z_{C})=0 \tag{10}\\ \mathcal{S}: (x- x_{F})^{2}+(y- y_{F})^{2}+(z- z_{F})^{2}-\vert \overrightarrow{u}\vert ^{2}=0 \tag{11}\\ \mathcal{C}_{1}:\ \ (\vert \overrightarrow{r_{AB}}\vert ^{2}- d_{min}^{2})[(x- x_{A})^{2}+(y- y_{A})^{2}+(z- z_{A})^{2}]\\ \qquad\ -[x_{AB}(x- x_{A})+y_{AB}(y- y_{A})+ z_{AB}(z- z_{A})]^{2}=0 \tag{12} \end{gather*} where, \overrightarrow{r_{AB}}=\overrightarrow{r_{B}}-\overrightarrow{r_{A}} and x_{AB}, y_{AB}, z_{AB} are the x, y, z components of \overrightarrow{r_{AB}} respectively. Any point on the intersection of the sphere, \mathcal{S} , the cone, \mathcal{C}_{1} , and the plane, \mathcal{P} is a possible solution and let us consider one such point be Q(x, y, z) . Since we are finding an optimal solution, to minimize the change in velocity vector, the point Q should lie close to the point, D . Let the function, f represent the Euclidean distance between the points Q and D . \begin{equation*} f=\sqrt{(x-x_{D})^{2}+(y-y_{D})^{2}+(z-z_{D})^{2}} \tag{13} \end{equation*} View Source \begin{equation*} f=\sqrt{(x-x_{D})^{2}+(y-y_{D})^{2}+(z-z_{D})^{2}} \tag{13} \end{equation*}

The problem is now a constrained nonlinear multi-variable optimization problem, described as \begin{equation*} \min\limits_{x, y, z,\varphi}\ f\ \mathrm{s}.\mathrm{t}.\ \mathcal{S}=0,\ \mathcal{C}_{1}=0,\ \mathcal{P}=0,\ \text{and}\ \varphi > 0. \end{equation*} View Source \begin{equation*} \min\limits_{x, y, z,\varphi}\ f\ \mathrm{s}.\mathrm{t}.\ \mathcal{S}=0,\ \mathcal{C}_{1}=0,\ \mathcal{P}=0,\ \text{and}\ \varphi > 0. \end{equation*}

This problem can be solved numerically using the fmincon function or MultiStart function (for multiple local minimum solutions) in MATLAB. Once the solution is found, we can calculate t_{0} from (3) and \overrightarrow{u_{new}} can be calculated as \begin{equation*} \overrightarrow{u_{new}}=\left[x-x_{F}\quad y-y_{F}\quad z-z_{F}\right]^{T} \tag{14} \end{equation*} View Source \begin{equation*} \overrightarrow{u_{new}}=\left[x-x_{F}\quad y-y_{F}\quad z-z_{F}\right]^{T} \tag{14} \end{equation*} where, x_{F}, y_{F}, z_{F} can be calculated from (4) and (8) . The equation of the plane, \pi can be calculated as \begin{equation*} Plane\ \pi: n_{x}(x- x_{u})+ n_{y}(y- y_{u})+ n_{z}(z- z_{u})=0\tag{15} \end{equation*} View Source \begin{equation*} Plane\ \pi: n_{x}(x- x_{u})+ n_{y}(y- y_{u})+ n_{z}(z- z_{u})=0\tag{15} \end{equation*} where, n_{x}, n_{y}, n_{z} are the x, y, z components of \overrightarrow{n}=\overrightarrow{u}\times \overrightarrow{u_{new}} . The collision avoidance trajectory will be given by the circular path in the plane, \pi for t_{0} second, and then a straight path. The maneuver will end when the quadrotor reaches the point of the closest approach with the intruder (see Fig. 5 ) as the distance between them increases after this moment.

A solution cannot be found if the sphere, \mathcal{S} lies entirely inside the cone, \mathcal{C}_{1} and so, the proposed approach can be used if and only if the following condition holds: \begin{equation*} \exists(x, y, z)\in \mathcal{C}_{1}:(x- x_{F})^{2}+(y- y_{F})^{2}+(z- z_{F})^{2}\leq\vert \overrightarrow{u}\vert \end{equation*} View Source \begin{equation*} \exists(x, y, z)\in \mathcal{C}_{1}:(x- x_{F})^{2}+(y- y_{F})^{2}+(z- z_{F})^{2}\leq\vert \overrightarrow{u}\vert \end{equation*}
Fig. 5.

Quadrotor at point of closest approach (PCA)

Show All

In rare cases where the condition does not hold, a solution is possible if an intersection exists between the cone and the sphere, which is possible only with an increase in the speed of the quadrotor, which is beyond the scope of the present work. The method for this particular case was presented in [10] to provide a solution for heading, elevation, and speed change, but the change of velocity vector was instantaneous and hence impractical.
C. Path Replanning

Fig. 6.

(a) Global frame (b) Relative frame

Show All

The replanning maneuver includes two circular turns with a straight path connecting those two turns. Let the position of the quadrotor and the intruder at the point of the closest approach be C and B , respectively. Consider a point, T(x_{T}, y_{T}, z_{T}) , where the quadrotor will rejoin its initial trajectory, and the desired velocity of the quadrotor at T be \overrightarrow{u} . Let the time taken for the collision avoidance maneuver be t_{C} seconds. The replanned maneuver is given by the path CPQET in the plane \pi , which is the same plane described in the collision avoidance trajectory (see Fig. 6(a) ). PQ and ET are circular arcs of radius, \rho and subtend angles, \gamma_{1} , and \gamma_{2} , with their centers, O and O^{\prime} , respectively. The point, D is the intersection of the extended portions of the line segments, CP , and QE .

Let the time taken to reach P and Q be t_{1} and t_{2} , respectively. The position vectors for points, P, Q and D can be calculated as \begin{gather*} \quad\overrightarrow{r_{P}}=\overrightarrow{r_{H}}+\overrightarrow{u_{new}}. (t_{1}- t_{C}) \tag{16}\\ \overrightarrow{r_{D}}=\overrightarrow{r_{P}}+\frac{\rho\tan(\gamma_{1}/2)}{\vert \overrightarrow{u_{new}}\vert}\overrightarrow{u_{new}} \tag{17}\\ \overrightarrow{r_{Q}}= \overrightarrow{r_{D}}+\frac{\rho\tan(\gamma_{1}/2)}{\vert \overrightarrow{u_{turn}}\vert} \overrightarrow{u_{turn}} \tag{18} \end{gather*} View Source \begin{gather*} \quad\overrightarrow{r_{P}}=\overrightarrow{r_{H}}+\overrightarrow{u_{new}}. (t_{1}- t_{C}) \tag{16}\\ \overrightarrow{r_{D}}=\overrightarrow{r_{P}}+\frac{\rho\tan(\gamma_{1}/2)}{\vert \overrightarrow{u_{new}}\vert}\overrightarrow{u_{new}} \tag{17}\\ \overrightarrow{r_{Q}}= \overrightarrow{r_{D}}+\frac{\rho\tan(\gamma_{1}/2)}{\vert \overrightarrow{u_{turn}}\vert} \overrightarrow{u_{turn}} \tag{18} \end{gather*} where \overrightarrow{u_{new}} is the velocity of the quadrotor after collision avoidance, \overrightarrow{u_{turn}} is the velocity of the quadrotor after the first circular turn. \overrightarrow{u_{turn}} is calculated as \begin{equation*} \overrightarrow{u_{turn}} =\vert \overrightarrow{u_{new}}\vert \frac{\overrightarrow{r_{E}}-\overrightarrow{r_{D}}}{\vert \overrightarrow{r_{E}}-\overrightarrow{r_{D}}\vert} \tag{19} \end{equation*} View Source \begin{equation*} \overrightarrow{u_{turn}} =\vert \overrightarrow{u_{new}}\vert \frac{\overrightarrow{r_{E}}-\overrightarrow{r_{D}}}{\vert \overrightarrow{r_{E}}-\overrightarrow{r_{D}}\vert} \tag{19} \end{equation*}

Let the point of the intersection between the extended portions of the line segment, QE , and the initial trajectory be S . We assume that the initial trajectory is straight in the vicinity of point, T , i.e., \overrightarrow{ST} has the same direction as \overrightarrow{u} . The position vectors of points, E , and S are calculated as \begin{gather*} \overrightarrow{r_{S}}=\overrightarrow{r_{T}}-\frac{\rho\tan(\gamma_{2}/2)}{\vert \overrightarrow{u}\vert}\overrightarrow{u} \tag{20}\\ \overrightarrow{r_{E}}=\overrightarrow{r_{S}}-\frac{\rho\tan(\gamma_{2}/2)}{\vert \overrightarrow{u_{turn}}\vert} \overrightarrow{u_{turn}} \tag{21} \end{gather*} View Source \begin{gather*} \overrightarrow{r_{S}}=\overrightarrow{r_{T}}-\frac{\rho\tan(\gamma_{2}/2)}{\vert \overrightarrow{u}\vert}\overrightarrow{u} \tag{20}\\ \overrightarrow{r_{E}}=\overrightarrow{r_{S}}-\frac{\rho\tan(\gamma_{2}/2)}{\vert \overrightarrow{u_{turn}}\vert} \overrightarrow{u_{turn}} \tag{21} \end{gather*}

The angles, \gamma_{1} , and \gamma_{2} are given by \begin{gather*} \gamma_{1}=\cos^{-1}\left(\frac{\overrightarrow{u_{new}}. \overrightarrow{u_{turn}}}{\vert \overrightarrow{u_{new}}\vert\vert\overrightarrow{u_{turn}}\vert}\right) \tag{22}\\ \ \ \gamma_{2}=\cos^{-1}\left(\frac{\overrightarrow{u}.\overrightarrow{u_{turn}}}{\vert \overrightarrow{u}\vert\vert\overrightarrow{u_{turn}}\vert}\right) \tag{23} \end{gather*} View Source \begin{gather*} \gamma_{1}=\cos^{-1}\left(\frac{\overrightarrow{u_{new}}. \overrightarrow{u_{turn}}}{\vert \overrightarrow{u_{new}}\vert\vert\overrightarrow{u_{turn}}\vert}\right) \tag{22}\\ \ \ \gamma_{2}=\cos^{-1}\left(\frac{\overrightarrow{u}.\overrightarrow{u_{turn}}}{\vert \overrightarrow{u}\vert\vert\overrightarrow{u_{turn}}\vert}\right) \tag{23} \end{gather*}

To simplify further, let us consider the point, E , to be the local goal of the quadrotor. The path is given by C^{\prime}P^{\prime}Q^{\prime}E^{\prime} transforming it to the relative frame of the intruder. In this frame of reference, the circular path PQ will be transformed into a trochoid, P^{\prime}Q^{\prime} (see Fig. 6b )). The position vectors of the points Q^{\prime} and G^{\prime} can be calculated as \begin{align*} \overrightarrow{r_{Q^{\prime}}} &=\overrightarrow{r_{Q}}-\overrightarrow{v}. t_{2} \tag{24}\\ \overrightarrow{r_{E^{\prime}}} &=\overrightarrow{r_{E}}-\overrightarrow{v}. t_{f} \tag{25} \end{align*} View Source \begin{align*} \overrightarrow{r_{Q^{\prime}}} &=\overrightarrow{r_{Q}}-\overrightarrow{v}. t_{2} \tag{24}\\ \overrightarrow{r_{E^{\prime}}} &=\overrightarrow{r_{E}}-\overrightarrow{v}. t_{f} \tag{25} \end{align*}

Let the total time taken to reach the goal be t_{f} . The relations between t_{1}, t_{2} and t_{f} are given as \begin{gather*} t_{2}= t_{1}+\frac{\rho \gamma_{1}}{\vert \overrightarrow{u_{new}}\vert} \tag{26}\\ t_{f}= t_{2}+ \frac{\overrightarrow{r_{E}}-\overrightarrow{r_{Q}}}{\vert \overrightarrow{u_{turn}}\vert} \tag{27} \end{gather*} View Source \begin{gather*} t_{2}= t_{1}+\frac{\rho \gamma_{1}}{\vert \overrightarrow{u_{new}}\vert} \tag{26}\\ t_{f}= t_{2}+ \frac{\overrightarrow{r_{E}}-\overrightarrow{r_{Q}}}{\vert \overrightarrow{u_{turn}}\vert} \tag{27} \end{gather*}

For an optimal maneuver, a path is considered such that Q^{\prime}E^{\prime} is tangential to the avoidance sphere at the point, R^{\prime} . Hence, using trigonometry in \Delta BR^{\prime}E^{\prime} , the following equation should hold: \begin{equation*} \vert \overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}\vert \sin \left(\cos^{-1}\left(\frac{(\overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}).(\overrightarrow{r_{Q^{\prime}}}-\overrightarrow{r_{E^{\prime}}})}{\vert \overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}\vert\ \vert \overrightarrow{r_{Q^{\prime}}}-\overrightarrow{r_{E^{\prime}}}\vert}\right)\right)=d_{min}\tag{28} \end{equation*} View Source \begin{equation*} \vert \overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}\vert \sin \left(\cos^{-1}\left(\frac{(\overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}).(\overrightarrow{r_{Q^{\prime}}}-\overrightarrow{r_{E^{\prime}}})}{\vert \overrightarrow{r_{B}}-\overrightarrow{r_{E^{\prime}}}\vert\ \vert \overrightarrow{r_{Q^{\prime}}}-\overrightarrow{r_{E^{\prime}}}\vert}\right)\right)=d_{min}\tag{28} \end{equation*}

Consider a function, f_{r} that represents the distance traveled by the quadrotor for the replanned maneuver, given as \begin{equation*} f_{r}=\rho\gamma_{1}+\vert \overrightarrow{r_{E}}-\overrightarrow{r_{Q}}\vert +\rho\gamma_{2} \tag{29} \end{equation*} View Source \begin{equation*} f_{r}=\rho\gamma_{1}+\vert \overrightarrow{r_{E}}-\overrightarrow{r_{Q}}\vert +\rho\gamma_{2} \tag{29} \end{equation*}

For optimal solution, we minimize the function f_{r} , i.e., \begin{gather*} \min\limits_{x_{T}, y_{T}, z_{T}}\ \ f_{r} \\ s.t.\ (20) -(28),\ \text{and}\ \gamma_{1}, \gamma_{2} > 0.\tag{30} \end{gather*} View Source \begin{gather*} \min\limits_{x_{T}, y_{T}, z_{T}}\ \ f_{r} \\ s.t.\ (20) -(28),\ \text{and}\ \gamma_{1}, \gamma_{2} > 0.\tag{30} \end{gather*}

This optimization problem can be solved numerically using the fmincon function or MultiStart function (for multiple local minimum solutions) in MATLAB. Once the solution is found, we can get the points in the path CPQET .

It is possible for the optimization problem to have no solution, and hence, we also propose an alternative approach. For this method, the constraint that line segment Q^{\prime}E^{\prime} should be tangential to the avoidance sphere is removed. However, there is a possibility for a previously evaded intruder to appear in this replanned maneuver. To tackle this issue, a parameter, safe replanning radius ( d_{safe} ), is proposed for the quadrotor, which is defined as the minimum distance between the quadrotor and the intruder after which the quadrotor starts the circular turn, as shown in Fig. 7 .
Fig. 7.

Replanning maneuver - approach II (relative frame)

Show All

With this parameter, the position vector of the point, P can be calculated as \begin{equation*} \overrightarrow{r_{P}}=\overrightarrow{r_{C}}+\frac{\sqrt{d_{safe}^{2}-d_{min}^{2}}} {\vert \overrightarrow{u_{relnew}}\vert}\overrightarrow{u_{new}} \tag{31} \end{equation*} View Source \begin{equation*} \overrightarrow{r_{P}}=\overrightarrow{r_{C}}+\frac{\sqrt{d_{safe}^{2}-d_{min}^{2}}} {\vert \overrightarrow{u_{relnew}}\vert}\overrightarrow{u_{new}} \tag{31} \end{equation*}

Once \overrightarrow{r_{P}} is calculated, the other variables of the problem (30) can be solved to get the replanned path. Even in this approach, there are very few cases where an intruder, previously evaded, may appear on the way. This issue can be prevented either by turning along the path with a radius of curvature more than the minimum turning radius of the quadrotor or increasing the value of the safe replanning radius .

The combination of the collision avoidance and the replanning algorithms will provide the desired smooth path starting from and ending to the initial trajectory optimally. The generated path for the quadrotor will be a collection of circle-straight-circle (CSC) paths. The path tracking algorithm is discussed in the next section.
SECTION IV.
Trajectory Tracking

This section aims at designing a controller that ensures the convergence of the quadrotor with the desired path generated by the path planning algorithm. The problem is described as follows,

    The distance between the center of mass of the quadrotor and the desired position on the generated path should be zero.

    The angle between the velocity vector of the quadrotor and the vector tangent to the desired trajectory should be zero.

A. Dynamic Modeling of Quadrotor

In order to understand the position and attitude of the quadrotor in space, following coordinate systems are defined:

    Body-fixed frame, F^{B}(X_{B}, Y_{B}, Z_{B}) that is fixed to the quadrotor

    Earth-fixed frame, F^{E}(X_{E}, Y_{E}, Z_{E}) that is fixed to the earth

To transform the linear velocities and the angular velocities from the Body-fixed Frame to the Earth-fixed frame, the relationship is as follows: \begin{equation*} \dot{\epsilon}= \begin{bmatrix}R & 0_{3\times 3}\\ 0_{3\times 3} & T\end{bmatrix} \begin{bmatrix}\mathcal{V}^{B}\\ \omega^{B}\end{bmatrix} \tag{32} \end{equation*} View Source \begin{equation*} \dot{\epsilon}= \begin{bmatrix}R & 0_{3\times 3}\\ 0_{3\times 3} & T\end{bmatrix} \begin{bmatrix}\mathcal{V}^{B}\\ \omega^{B}\end{bmatrix} \tag{32} \end{equation*} where, \epsilon gives the quadrotor position (\varepsilon =\left[x\quad y\quad z\right]) and attitude (\eta=\left[\phi\quad \theta\quad \psi\right]) , i.e., \begin{equation*} \epsilon=\left[x\quad y\quad z\quad \phi\quad \theta\quad \psi\right] \tag{33} \end{equation*} View Source \begin{equation*} \epsilon=\left[x\quad y\quad z\quad \phi\quad \theta\quad \psi\right] \tag{33} \end{equation*}

The linear velocity, \mathcal{V}^{B} and angular velocity, \omega^{B} , in the body frame is given as \begin{gather*} \mathcal{V}^{B}=\left[u\quad v\quad w\right]\\ \omega^{B}=\left[p\quad q\quad r\right] \tag{34} \end{gather*} View Source \begin{gather*} \mathcal{V}^{B}=\left[u\quad v\quad w\right]\\ \omega^{B}=\left[p\quad q\quad r\right] \tag{34} \end{gather*}

The rotation matrix R is, \begin{equation*} R= \begin{bmatrix}c_{\psi}c_{\theta} & c_{\psi}s_{\theta}s_{\phi}-s_{\psi}c_{\phi} & c_{\psi} s_{\theta}s_{\phi}+s_{\psi}s_{\phi}\\ s_{\psi}c_{\theta} & s_{\psi}s_{\theta}s_{\phi}+c_{\psi}c_{\phi} & s_{\psi}s_{\theta}c_{\phi}-c_{\psi}c_{\phi}\\ -s_{\theta} & c_{\theta}s_{\phi} & c_{\theta} c_{\phi}\end{bmatrix} \tag{35} \end{equation*} View Source \begin{equation*} R= \begin{bmatrix}c_{\psi}c_{\theta} & c_{\psi}s_{\theta}s_{\phi}-s_{\psi}c_{\phi} & c_{\psi} s_{\theta}s_{\phi}+s_{\psi}s_{\phi}\\ s_{\psi}c_{\theta} & s_{\psi}s_{\theta}s_{\phi}+c_{\psi}c_{\phi} & s_{\psi}s_{\theta}c_{\phi}-c_{\psi}c_{\phi}\\ -s_{\theta} & c_{\theta}s_{\phi} & c_{\theta} c_{\phi}\end{bmatrix} \tag{35} \end{equation*} where c_{x}\equiv\cos x and s_{x}\equiv\sin x .

The transformation matrix is given as, \begin{equation*} T= \begin{bmatrix}1 & \sin\phi\tan\theta & \cos\phi \tan\theta\\ 0 & \cos\phi & -\sin \phi\\ 0 & \sin\phi/\cos\theta & \cos\phi/\cos\theta \end{bmatrix} \tag{36} \end{equation*} View Source \begin{equation*} T= \begin{bmatrix}1 & \sin\phi\tan\theta & \cos\phi \tan\theta\\ 0 & \cos\phi & -\sin \phi\\ 0 & \sin\phi/\cos\theta & \cos\phi/\cos\theta \end{bmatrix} \tag{36} \end{equation*}

The quadrotor is a nonlinear, under-actuated system as six states are controlled by four input variables. The control of the states is accomplished by having an outer loop and an inner loop. The outer loop stabilizes the translational states and computes the desired roll and pitch angles which are to be fed to the inner loop to stabilize the attitude. The dynamic equations of the quadrotor are derived using the Newton-Euler method with the assumptions that the quadrotor is rigid and the structure is symmetric, aerodynamic effects are neglected at low speeds. Also the center of mass of the quadrotor is assumed to coincide with the origin of the body-fixed frame.

The Inertial matrix, I is given as \begin{equation*} I=\begin{bmatrix}I_{xx} & 0 & 0 \\ 0 & I_{yy} & 0\\ 0 & 0 & I_{zz}\end{bmatrix} \tag{37} \end{equation*} View Source \begin{equation*} I=\begin{bmatrix}I_{xx} & 0 & 0 \\ 0 & I_{yy} & 0\\ 0 & 0 & I_{zz}\end{bmatrix} \tag{37} \end{equation*}

The dynamical equations using Newton-Euler's method can be written as [27] , [28] , \begin{align*} \begin{bmatrix} mI_{3\times 3} & 0_{3\times 3}\\ 0_{3\times 3} & I \end{bmatrix}&\begin{bmatrix} \dot{\mathcal{V}^{B}}\\ \dot{\omega^{B}} \end{bmatrix}+\begin{bmatrix} \mathcal{V}^{B} \times(m\mathcal{V}^{B})\\ \omega^{B} \times(I\omega^{B}) \end{bmatrix}\\ &\quad=\begin{bmatrix} f^{B}\\ \tau^{B} \end{bmatrix}=\begin{bmatrix} f_{rotor}^{B}- f_{gravity}^{B}\\ \tau_{rotor}^{B}\end{bmatrix} \tag{38} \end{align*} View Source \begin{align*} \begin{bmatrix} mI_{3\times 3} & 0_{3\times 3}\\ 0_{3\times 3} & I \end{bmatrix}&\begin{bmatrix} \dot{\mathcal{V}^{B}}\\ \dot{\omega^{B}} \end{bmatrix}+\begin{bmatrix} \mathcal{V}^{B} \times(m\mathcal{V}^{B})\\ \omega^{B} \times(I\omega^{B}) \end{bmatrix}\\ &\quad=\begin{bmatrix} f^{B}\\ \tau^{B} \end{bmatrix}=\begin{bmatrix} f_{rotor}^{B}- f_{gravity}^{B}\\ \tau_{rotor}^{B}\end{bmatrix} \tag{38} \end{align*} where f_{B} and \tau_{B} are the forces and the moments acting on the quadrotor. The forces include the rotor forces ( f_{rotor}^{B} ) and gravitational force ( f_{gravity}^{B} ). The moments include the rotor moments ( \tau_{rotor}^{B} ).

The gravitational forces, rotor forces, and rotor moments are given by \begin{gather*} \quad f_{gravity}=[0\quad 0\quad -mg]^{T}\\ f_{rotor}=R[f_{rotor_{x}}\quad f_{rotor_{y}}\quad f_{rotor_{z}}]^{T}\\ \ \tau_{rotor}^{B}=[\tau_{\phi}\quad \tau_{\theta}\quad \tau_{\psi}] \end{gather*} View Source \begin{gather*} \quad f_{gravity}=[0\quad 0\quad -mg]^{T}\\ f_{rotor}=R[f_{rotor_{x}}\quad f_{rotor_{y}}\quad f_{rotor_{z}}]^{T}\\ \ \tau_{rotor}^{B}=[\tau_{\phi}\quad \tau_{\theta}\quad \tau_{\psi}] \end{gather*}

The dynamic equations of the quadrotor will become \begin{gather*} \ddot{x}=(\cos\phi\cos\psi\sin\theta+\sin\theta\sin\psi)\frac{1}{m}b(\Sigma \omega_{i}^{2})\\ \ddot{y}=(\cos\phi\sin\psi\sin\theta-\sin\theta\cos\psi)\frac{1}{m}b(\Sigma \omega_{i}^{2})\\ \ddot{z}=\cos\theta\cos\phi\frac{1}{m}b(\omega_{i}^{2})-g\\ \ddot{\phi}=\frac{l}{I_{x}}b(\omega_{4}^{2}- \omega_{2}^{2})+\dot{\theta}\dot{\psi}\frac{I_{y}- I_{z}}{I_{x}}-\frac{J_{r}}{I_{x}}\dot{\theta} \omega_{r}\\ \ddot{\theta}=\frac{l}{I_{y}}b(\omega_{3}^{2}- \omega_{1}^{2})+\dot{\phi}\dot{\psi}\frac{I_{z}- I_{x}}{I_{y}}-\frac{J_{r}}{I_{y}}\dot{\phi} \omega_{r}\\ \ddot{\psi}=\frac{1}{I_{z}}b(\omega_{1}^{2}+ \omega_{3}^{2}- \omega_{2}^{2}- \omega_{4}^{2})+\dot{\phi}\dot{\theta}\frac{I_{x}- I_{y}}{I_{z}}\qquad \tag{39} \end{gather*} View Source \begin{gather*} \ddot{x}=(\cos\phi\cos\psi\sin\theta+\sin\theta\sin\psi)\frac{1}{m}b(\Sigma \omega_{i}^{2})\\ \ddot{y}=(\cos\phi\sin\psi\sin\theta-\sin\theta\cos\psi)\frac{1}{m}b(\Sigma \omega_{i}^{2})\\ \ddot{z}=\cos\theta\cos\phi\frac{1}{m}b(\omega_{i}^{2})-g\\ \ddot{\phi}=\frac{l}{I_{x}}b(\omega_{4}^{2}- \omega_{2}^{2})+\dot{\theta}\dot{\psi}\frac{I_{y}- I_{z}}{I_{x}}-\frac{J_{r}}{I_{x}}\dot{\theta} \omega_{r}\\ \ddot{\theta}=\frac{l}{I_{y}}b(\omega_{3}^{2}- \omega_{1}^{2})+\dot{\phi}\dot{\psi}\frac{I_{z}- I_{x}}{I_{y}}-\frac{J_{r}}{I_{y}}\dot{\phi} \omega_{r}\\ \ddot{\psi}=\frac{1}{I_{z}}b(\omega_{1}^{2}+ \omega_{3}^{2}- \omega_{2}^{2}- \omega_{4}^{2})+\dot{\phi}\dot{\theta}\frac{I_{x}- I_{y}}{I_{z}}\qquad \tag{39} \end{gather*} where, \omega_{r}=\omega_{2}+\omega_{4}-\omega_{1}-\omega_{3} . The control inputs to the quadrotor are given as, \begin{equation*} U= \begin{bmatrix}U_{1}\\ U_{2}\\ U_{3}\\ U_{4}\end{bmatrix}= \begin{bmatrix}b(\omega_{1}^{2}+\omega_{2}^{2}+\omega_{3}^{2}+\omega_{4}^{2})\\ b(\omega_{4}^{2}-\omega_{2}^{2})\\ b(\omega_{3}^{2}-\omega_{1}^{2})\\ d(\omega_{1}^{2}-\omega_{2}^{2}+\omega_{3}^{2}-\omega_{4}^{2})\end{bmatrix} \tag{40} \end{equation*} View Source \begin{equation*} U= \begin{bmatrix}U_{1}\\ U_{2}\\ U_{3}\\ U_{4}\end{bmatrix}= \begin{bmatrix}b(\omega_{1}^{2}+\omega_{2}^{2}+\omega_{3}^{2}+\omega_{4}^{2})\\ b(\omega_{4}^{2}-\omega_{2}^{2})\\ b(\omega_{3}^{2}-\omega_{1}^{2})\\ d(\omega_{1}^{2}-\omega_{2}^{2}+\omega_{3}^{2}-\omega_{4}^{2})\end{bmatrix} \tag{40} \end{equation*}

The external disturbances can be added to the dynamical equations, which can be rewritten in the following form [29] . \begin{equation*} \ddot{X}=f(X)+g(X)U+\delta \tag{41} \end{equation*} View Source \begin{equation*} \ddot{X}=f(X)+g(X)U+\delta \tag{41} \end{equation*} where \begin{gather*} X=\left[z\quad \phi\quad \theta\quad \psi\quad x\quad y\right]^{T}\ \,\qquad\\ f(X)=\begin{bmatrix}-g\\ \frac{I_{y}- I_{z}}{I_{x}}\dot{\theta}\dot{\psi}+-\frac{J_{r}}{I_{x}} \omega_{r}\dot{\theta}\\ \frac{I_{z}-Ix}{I_{y}}\dot{\phi}\dot{\psi}+ \frac{J_{r}}{I_{y}} \omega_{r}\dot{\phi}\\ \frac{I_{x}- I_{y}}{I_{z}}\dot{\phi}\dot{\theta}\\ 0 \\ 0 \end{bmatrix}\ \ \text{and}\\ g(X)=\begin{bmatrix}(1/m)\cos \theta \cos \phi & 0 & 0 & 0\\ 0 & \frac{l}{I_{x}} & 0 & 0\\ 0 & 0 &\frac{l}{I_{y}} & 0\\ 0 & 0 & 0 & \frac{1}{I_{z}}\\ (1/m) u_{x} & 0 & 0 & 0\\ (1/m) u_{y} & 0 & 0 & 0 \end{bmatrix}\ {.} \\ \delta=\left[\delta_{1}\quad \delta_{2}\quad \delta_{3}\quad \delta_{4}\quad \delta_{5}\quad \delta_{6}\right]^{T}\quad \end{gather*} View Source \begin{gather*} X=\left[z\quad \phi\quad \theta\quad \psi\quad x\quad y\right]^{T}\ \,\qquad\\ f(X)=\begin{bmatrix}-g\\ \frac{I_{y}- I_{z}}{I_{x}}\dot{\theta}\dot{\psi}+-\frac{J_{r}}{I_{x}} \omega_{r}\dot{\theta}\\ \frac{I_{z}-Ix}{I_{y}}\dot{\phi}\dot{\psi}+ \frac{J_{r}}{I_{y}} \omega_{r}\dot{\phi}\\ \frac{I_{x}- I_{y}}{I_{z}}\dot{\phi}\dot{\theta}\\ 0 \\ 0 \end{bmatrix}\ \ \text{and}\\ g(X)=\begin{bmatrix}(1/m)\cos \theta \cos \phi & 0 & 0 & 0\\ 0 & \frac{l}{I_{x}} & 0 & 0\\ 0 & 0 &\frac{l}{I_{y}} & 0\\ 0 & 0 & 0 & \frac{1}{I_{z}}\\ (1/m) u_{x} & 0 & 0 & 0\\ (1/m) u_{y} & 0 & 0 & 0 \end{bmatrix}\ {.} \\ \delta=\left[\delta_{1}\quad \delta_{2}\quad \delta_{3}\quad \delta_{4}\quad \delta_{5}\quad \delta_{6}\right]^{T}\quad \end{gather*} where u_{x} and u_{y} are the virtual control inputs and \delta is the bounded external disturbance vector (\vert \delta_{i}\vert \leq\beta, \beta is a positive constant). The virtual control inputs are given by \begin{equation*}\begin{split} u_{x} &=\cos\phi\cos\psi\sin\theta+\sin\phi\sin\psi\\ u_{y} &=\cos\phi\sin\theta\sin\psi-\cos\psi\sin\phi \end{split}\tag{42}\end{equation*} View Source \begin{equation*}\begin{split} u_{x} &=\cos\phi\cos\psi\sin\theta+\sin\phi\sin\psi\\ u_{y} &=\cos\phi\sin\theta\sin\psi-\cos\psi\sin\phi \end{split}\tag{42}\end{equation*}
B. Controller Design

Backstepping control ensures global asymptotic stability for the given choice of Lyapunov function. The classical backstepping technique is not robust to model uncertainties and external disturbances. Hence, an integral action, which eliminates the steady-state error due to the modeling and system uncertainties [30] , and a saturation function are added to the control law. The error terms, and the control inputs, for the following system dynamics [29] \begin{equation*} \ddot{X}=f(X)+g(X)U+\delta \tag{43} \end{equation*} View Source \begin{equation*} \ddot{X}=f(X)+g(X)U+\delta \tag{43} \end{equation*} are defined as follows [26] :

The first tracking error is defined as \begin{equation*} e_{1}=x_{1d}-x_{1} \tag{44} \end{equation*} View Source \begin{equation*} e_{1}=x_{1d}-x_{1} \tag{44} \end{equation*}

The integral of the error term is, \begin{equation*} p_{1}= \int\nolimits_{0}^{\tau}e_{1}(\tau)d\tau \tag{45} \end{equation*} View Source \begin{equation*} p_{1}= \int\nolimits_{0}^{\tau}e_{1}(\tau)d\tau \tag{45} \end{equation*}

A stabilizing function is defined for the purpose to stabilize the second error term, which is given as \begin{equation*} \alpha_{1}=\dot{x}_{1d}+k_{1}e_{1}+\lambda_{1}p_{1} \tag{46} \end{equation*} View Source \begin{equation*} \alpha_{1}=\dot{x}_{1d}+k_{1}e_{1}+\lambda_{1}p_{1} \tag{46} \end{equation*} where, k_{1} is a positive constant and \lambda_{1} is the integral term parameter. Now, the second error term is, \begin{equation*} e_{2}=\alpha_{1}-\dot{x}_{1}=\dot{x}_{1d}-\dot{x}_{1}+\lambda_{1}p_{1}+k_{1}e_{1} \tag{47} \end{equation*} View Source \begin{equation*} e_{2}=\alpha_{1}-\dot{x}_{1}=\dot{x}_{1d}-\dot{x}_{1}+\lambda_{1}p_{1}+k_{1}e_{1} \tag{47} \end{equation*}

The Lyapunov function for the first and the second error terms can be defined as, \begin{gather*} V_{1}(p_{1}, e_{1})=\frac{1}{2} \lambda_{1} p_{1}^{2}+\frac{1}{2} e_{1}^{2} \tag{48}\\ V_{2}(p_{1}, e_{1}, e_{2})=\frac{1}{2} \lambda_{1} p_{1}^{2}+\frac{1}{2} e_{1}^{2}+\frac{1}{2} e_{2}^{2} \tag{49} \end{gather*} View Source \begin{gather*} V_{1}(p_{1}, e_{1})=\frac{1}{2} \lambda_{1} p_{1}^{2}+\frac{1}{2} e_{1}^{2} \tag{48}\\ V_{2}(p_{1}, e_{1}, e_{2})=\frac{1}{2} \lambda_{1} p_{1}^{2}+\frac{1}{2} e_{1}^{2}+\frac{1}{2} e_{2}^{2} \tag{49} \end{gather*}

The derivatives for the Lyapunov functions are given as, \begin{gather*} \dot{V}_{1}(p_{1}, e_{1})= e_{1}(\dot{x_{1d}}-\dot{x_{1}}+ \lambda_{1} p_{1})=- k_{1} e_{1}^{2}+ e_{1} e_{2} \tag{50}\\ \dot{V}_{2}(p_{1}, e_{1}, e_{2})=\dot{V}_{1}(p_{1}, e_{1})+ e_{2} \dot{e_{2}}\\ \qquad\qquad\qquad\quad=- k_{1} e_{1}^{2}+ e_{2}(e_{1}+\ddot{x}_{1d} \tag{51}\\ \qquad\qquad\qquad\qquad\ \ -(\ddot{x}_{1}+ k_{1} \dot{e_{1}}+\lambda\dot{p_{1}})) \end{gather*} View Source \begin{gather*} \dot{V}_{1}(p_{1}, e_{1})= e_{1}(\dot{x_{1d}}-\dot{x_{1}}+ \lambda_{1} p_{1})=- k_{1} e_{1}^{2}+ e_{1} e_{2} \tag{50}\\ \dot{V}_{2}(p_{1}, e_{1}, e_{2})=\dot{V}_{1}(p_{1}, e_{1})+ e_{2} \dot{e_{2}}\\ \qquad\qquad\qquad\quad=- k_{1} e_{1}^{2}+ e_{2}(e_{1}+\ddot{x}_{1d} \tag{51}\\ \qquad\qquad\qquad\qquad\ \ -(\ddot{x}_{1}+ k_{1} \dot{e_{1}}+\lambda\dot{p_{1}})) \end{gather*}

From the quadrotor dynamic equations, we get \begin{equation*}\begin{split} \dot{V}_{2}=&- k_{1} e_{1}^{2}+ e_{2}((1+ \lambda_{1}- k_{1}^{2}) e_{1}+ k_{1} e_{2}- k_{1} \lambda_{1} p_{1}\\ &+\ddot{x}_{1d}-f(x_{1})-g(x_{11}) U_{1}- \delta_{1}) \end{split}\tag{52}\end{equation*} View Source \begin{equation*}\begin{split} \dot{V}_{2}=&- k_{1} e_{1}^{2}+ e_{2}((1+ \lambda_{1}- k_{1}^{2}) e_{1}+ k_{1} e_{2}- k_{1} \lambda_{1} p_{1}\\ &+\ddot{x}_{1d}-f(x_{1})-g(x_{11}) U_{1}- \delta_{1}) \end{split}\tag{52}\end{equation*}

The control law to stabilize the error terms is, \begin{equation*}\begin{split} U_{1}=& \frac{1}{g(x_{11})}[(1+ \lambda_{1}- k_{1}^{2}) e_{1}+(k_{1}+ k_{2}) e_{2}\\ &- k_{1} \lambda_{1} p_{1}- \epsilon_{1} sat \left(\frac{e_{2}}{\mu_{1}}\right)+ \ddot{x_{1d}}-f(x_{1})] \end{split}\tag{53}\end{equation*} View Source \begin{equation*}\begin{split} U_{1}=& \frac{1}{g(x_{11})}[(1+ \lambda_{1}- k_{1}^{2}) e_{1}+(k_{1}+ k_{2}) e_{2}\\ &- k_{1} \lambda_{1} p_{1}- \epsilon_{1} sat \left(\frac{e_{2}}{\mu_{1}}\right)+ \ddot{x_{1d}}-f(x_{1})] \end{split}\tag{53}\end{equation*}

The derivative of the second Lyapunov function ( \dot{V}_{2} ) can be proved to be negative definite using the non-vanishing perturbation theorem [26] , [31] . Hence, according to Lyapunov stability theory, the controller ensures the asymptotic stability of the states.

The virtual position control inputs u_{x} and u_{y} and the attitude control inputs can be derived in the same way as U_{1} . The desired pitch angle, \phi_{d} , can be derived using (42) .
SECTION V.
Simulation Results

Table I Simulation parameters

For the simulation, the quadrotor is considered moving on a straight-line path initially with a constant speed of 15 m/s. The quadrotor detects a dynamic intruder at t=3\ \mathrm{s} and hence calculates the collision avoidance and replanning trajectory. At t=35.8\ \mathrm{s} , the quadrotor attempts to rejoin with the initial trajectory after successfully avoiding the dynamic obstacle. But, at t=41.4\ \mathrm{s} , the quadrotor detects a static obstacle and hence starts the collision avoidance maneuver once again. Finally, at t=67.7\ \mathrm{s} , the quadrotor starts its course to join with the initial trajectory and successfully joins at t=84.5 \mathrm{s} . The parameters for the simulation are tabulated in Table I . The external periodic disturbances are given as forces and moments, as 0.5sin(t)\ \mathrm{N} and 0.1sin(t) Nm, respectively.
Table II Quadrotor parameters

The path tracking algorithm using a 6-degree-of-freedom model of a quadrotor is demonstrated to track the path. The parameters of the quadrotor are tabulated in Table II , and the control parameters used in the simulation are given as [26] \begin{gather*} \ \ k_{1-12}= \left[5\quad 5\quad 2\quad 2\quad 2\quad 2\quad 10\quad 10\quad 12\quad 12\quad 12\quad 5 \right]\\ \lambda_{1-6}= \left[5\quad 3\quad 3\quad 6\quad 6\quad 5 \right]\\ \mu_{1-6}= \left[1\quad 1\quad 0.4\quad 0.3\quad 0.3\quad 0.3 \right]\\ \varepsilon_{1-6}= \left[4\quad 6\quad 5\quad 1\quad 1\quad 3 \right] \end{gather*} View Source \begin{gather*} \ \ k_{1-12}= \left[5\quad 5\quad 2\quad 2\quad 2\quad 2\quad 10\quad 10\quad 12\quad 12\quad 12\quad 5 \right]\\ \lambda_{1-6}= \left[5\quad 3\quad 3\quad 6\quad 6\quad 5 \right]\\ \mu_{1-6}= \left[1\quad 1\quad 0.4\quad 0.3\quad 0.3\quad 0.3 \right]\\ \varepsilon_{1-6}= \left[4\quad 6\quad 5\quad 1\quad 1\quad 3 \right] \end{gather*}

The simulation is performed using MATLAB 2019b on an Intel Core i5-7200U processor and 8 GB RAM system.

Fig. 8 shows the desired trajectory and the actual trajectory of the quadrotor tracked by the controller. The Saturation Integral Backstepping control (SIBC) is compared with the Classical Backstepping Control (CBC) approach in the presence of external periodic disturbances. It can be seen that the SIBC approach is robust to the external disturbances compared to the CBC approach, as discussed in IV. The plots of the control inputs and errors are shown in Fig. 9 and 10 respectively. It can be seen that the path planning algorithm has provided an optimal path avoiding obstacles, and the backstepping controller has tracked the path with an acceptable error.
SECTION VI.
Conclusion

In this paper, a 3-dimensional geometric path planning algorithm that successfully avoids collision with static as well as dynamic obstacles and facilitates the quadrotor to come back to its initial trajectory has been proposed. The algorithms provide an optimal solution by changing the heading angle and the pitch angle of the quadrotor simultaneously while keeping the speed constant. The novelty of the presented approach is that the change in the velocity for collision avoidance is made smooth, making it flyable. A Lyapunov-based backstepping controller has also been designed using a six-degree-of-freedom model of a Quadrotor for tracking the path. The controller is proved to be stable even in the presence of external disturbances such as periodic disturbances in this work. This demonstrates that the proposed approach could be implemented in quadrotors to fly in real-world scenarios.
Fig. 8.

Comparison of desired path and actual path of the quadrotor under periodic disturbances

Show All
Fig. 9.

Control inputs for the quadrotor under periodic disturbances

Show All
Fig. 10.

Tracking errors from the replanned path under periodic disturbances

Show All

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Prescribed performance function based control for trajectory tracking of nonholonomic mobile robots with collision avoidance

2017 IEEE Conference on Control Technology and Applications (CCTA)

Published: 2017
Adaptive Control Design Based on Adaptive Optimization Principles

IEEE Transactions on Automatic Control

Published: 2008
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
