Autonomous Robots (2018) 42:1369–1387 https://doi.org/10.1007/s10514-018-9741-6

Going with the ﬂow: a graph based approach to optimal path planning in general ﬂows
Dhanushka Kularatne1 · Subhrajit Bhattacharya2 · M. Ani Hsieh1
Received: 15 February 2017 / Accepted: 2 April 2018 / Published online: 21 April 2018 © Springer Science+Business Media, LLC, part of Springer Nature 2018
Abstract Autonomous surface and underwater vehicles (ASVs and AUVs) used for ocean monitoring are typically deployed for long periods of time and must operate with limited energy budgets. Coupled with the increased accessibility to ocean ﬂow data, there has been a signiﬁcant interest in developing energy efﬁcient motion plans for these vehicles that leverage the dynamics of the surrounding ﬂow. In this paper, we present a graph search based method to plan time and energy optimal paths in static and time-varying ﬂow ﬁelds. We also use tools from topological path planning to generate optimal paths in different homotopy classes to facilitate simultaneous exploration of the environment by multi-robot teams. The proposed strategy is validated using analytical ﬂow models, actual ocean data, and in experiments using an indoor laboratory testbed capable of creating ﬂows with ocean-like features. We also present an alternative approach using a Riemannian metric based approximation for the cost functions in the static ﬂow case for computing time and energy optimal paths. The Riemannian approximation results in smoother trajectories in contrast to the graph based strategy while requiring less computational time.
Keywords Path planning · Marine robotics · Time-varying ﬂows

1 Introduction
Scientiﬁc activities in aquatic environments that were traditionally performed manually are increasingly being automated with autonomous marine vehicles (AMVs) that include surface and/or underwater vehicles. Examples include characterizing the dynamics of plankton assemblages (Caron et al. 2008), measurement of temperature proﬁles (Fiorelli
This is one of several papers published in Autonomous Robots comprising the “Special Issue on Robotics Science and Systems”.
This work was supported by the National Science Foundation (NSF) Grants IIS-1253917 and CMMI-1462825.
B Dhanushka Kularatne
dkul@seas.upenn.edu Subhrajit Bhattacharya sub216@lehigh.edu M. Ani Hsieh m.hsieh@seas.upenn.edu
1 Mechanical Engineering and Applied Mechanics, University of Pennsylvania, Philadelphia, USA
2 Department of Mechanical Engineering and Mechanics, Lehigh University, Bethlehem, PA, USA

et al. 2006), and monitoring of harmful algae blooms (Smith et al. 2010). In these and similar environmental monitoring applications in the ocean, AMVs are often deployed over long periods while operating with limited energy budgets. As such, researchers have to design motion strategies that are energy efﬁcient to maximize the use of the capabilities of these autonomous platforms.
While the high inertia environment of the ocean couples the environmental dynamics to the marine vehicle dynamics, it presents a unique opportunity for vehicles to exploit the surrounding ﬂows for more efﬁcient navigation. As such, there is a substantial amount of recent work on determining optimal paths in ﬂow ﬁelds. Examples include the work by Garau et al. (2005) where the authors use a graph search method to plan time optimal paths in static ﬂows. Graph search methods have also been proposed for computing energy optimal paths in static ﬂow ﬁelds in Koay and Chitre (2013), Rao and Williams (2009), Kularatne et al. (2016). In Chakrabarty and Langelaan (2013), authors present a tree based method to compute optimal paths in a time-varying wind ﬁeld, however, this tree like structure results in an expansion of a large number of nodes which can require signiﬁcant computation resources. Eichorn (2015) and Otte et al. (2016) have also presented graph based methods that

123

1370

Autonomous Robots (2018) 42:1369–1387

are only capable of computing time optimal paths in timevarying ﬂows.
Alternatives to graph search techniques include (Kruger et al. 2007; Witt and Dunbabin 2008) for computing energy optimal paths in time-varying ﬂows. Since these methods are based on iterative minimization techniques, they run the risk of producing paths that are only locally optimal. Lolla et al. (2012, 2014)) presented a level set expansion method to ﬁnd time optimal paths in time-varying ﬂows. This was then extended by Subramani et al. (2016) to determine the energy optimal paths from the set of time optimal paths obtained from the level set method. Similar to many existing approaches, level set approaches require full knowledge of the ﬂow ﬁeld and require signiﬁcant computational resources for the various level set expansions at each iteration. Thus these strategies are mostly applicable for pre-deployment planning purposes and not amenable for realtime planning purposes.
In this work, we present a graph-based path planning approach for computing time and energy optimal paths for vehicles operating in a general ﬂows. Similar to Lolla et al. (2012, 2015), Garau et al. (2005), Kruger et al. (2007), Koay and Chitre (2013), Huynh et al. (2015), the strategy leverages the surrounding ﬂow ﬁeld in the synthesis of optimal trajectories. Different from these existing strategies, we employ graph search-based methods coupled with more accurate cost functions in computing the optimal trajectories in both static and time-varying cases. In particular, the primary contributions of our work are:
(a) The ability to design arbitrary cost functions with a focus on obtaining both time and energy optimal trajectories.
(b) The ability to plan optimal paths in both static and timevarying ﬂows. As such, in contrast to existing work, our strategy is not limited in the cost functions allowed nor in the type of ﬂows that could be considered.
(c) The inclusion of a Riemannian approximation to the cost functions presented in static ﬂows. The ability to model cost as Riemannian metrics enables the formulation of the optimization problem as one of solving the geodesic equation on a Riemannian manifold which provides additional insights into the planning problem.
(d) The ability to impose kinematic constraints such as maximum still-water speed of the vehicle which is useful for planning optimal paths for small resource constrained vehicles.
(e) The correctness of the computed paths are veriﬁed experimentally using autonomous surface vehicles on

Fig. 1 Snapshot (August 2005) of visualization of ocean surface currents for June 2005 through December 2007 generated using NASA/JPLs Estimating the Circulation and Climate of the Ocean, Phase II (ECCO2) ocean model
actual ﬂows. In addition, the results are compared against several existing methods and to “ground truth” optimal paths obtained from an optimal control formulation. (f) Lastly, large scale ocean circulation often exhibit signiﬁcant eddy and jet structures (see Fig. 1), which gives rise to the presence of ﬁxed points and invariant manifolds in the ﬂow ﬁeld. Coupled with the presence of obstacles, e.g., islands and archipelagos, the result is multiple topological classes of trajectories. Recent work showed the importance of reasoning about such topological classes in marine operations in the presence of obstacles (Bhattacharya et al. 2015). As such, a fundamental advantage of the proposed graph-based strategy over existing ones (Garau et al. 2005; Kruger et al. 2007; Koay and Chitre 2013; Huynh et al. 2015; Chakrabarty and Langelaan 2013) is the ability to use computational tools from topological path planning in the computation of time/energy optimal paths in different homotopy classes of the environment.
The rest of the paper is organized as follows: Sect. 2 presents the modeling preliminaries and the problem formulation. Sections 3 and 4 present the methods used to solve the problem in static and time varying ﬂows respectively. Section 5 shows how the method is used to compute paths in different topological classes. Sections 6 and 7 describe the simulation and experimental results respectively. The paper concludes with a discussion of our ﬁndings and directions for future work in Sect. 8.
2 Problem formulation
In this section we provide a description of the environment and our assumptions, and then describe the development of our time and energy cost functions. We also provide a formal statement of our problem and outline our graph based solution approach.

123

Autonomous Robots (2018) 42:1369–1387

1371

Fig. 3 The net velocity of the vehicle is the vector sum of the ﬂow velocity and the vehicle’s still-water velocity

Fig. 2 The ﬂow vector, Vf at a point, x, and the ﬂow-parallel coordinate system

2.1 Flow model

In this work, we consider a 2-D aquatic environment W ⊆

R2, subject to a time-varying ﬂow ﬁeld Vf : WT → R2, where WT = W × [ts t f ] and [ts t f ] ⊂ R≥0 denotes the time interval under consideration. As such, for x ∈ W and

t ∈ ts t f ,

x˙ = Vf (x, t)

(1)

denotes the ﬂow velocity at the point x. The speed of the ﬂow is given by V f (x, t) = Vf (x, t) and the maximum ﬂow speed encountered in the domain is given by

Vfm

= max
x∈W, t∈[ts

t

f

V
]

f

(x,

t

).

It is assumed that the ﬂow description is known a priori or a

reliable forecast is available. For ocean environments, such a

forecast could be obtained from, for example, the Coastal

Observing Research and Development Center (CORDC)

(CORDC).

We employ a ﬂow-parallel coordinate representation of

the vector ﬁeld given by (1), such that for every point x ∈ W,

its axes are aligned along the unit vectors vˆx =

Vf (x,t) Vf (x,t)

(the

“x” axis) and vˆx⊥ (the “y” axis, orthogonal to the x axis –

see Fig. 2). We note that this coordinate system is not “co-

moving” with the ﬂow.

Thus, in the ﬂow-parallel coordinate system, the ﬂow vec-

tor at x can simply be written as Vf = V f vˆ. With a little

abuse of notation, we will also write the coordinate rep-

resentation of Vf in the ﬂow-parallel coordinate system as Vf = [V f , 0]T .

2.2 Vehicle model

The vehicles considered in this work are assumed to have a holonomic kinematic motion model. This is a reasonable assumption when the dimensions of the vehicle are small

when compared with the dimensions of the ﬂow structures (Garau et al. 2005). It is assumed that the lower level controllers of the vehicle are capable of following a trajectory computed using this simpliﬁed model. Using this model, the net velocity of the vehicle with respect to the inertial frame is given by

Vnet(x, t) = Vf (x, t) + Vstill(x, t),

(2)

where Vstill is the velocity of the vehicle with respect to the

ﬂow, i.e., Vstill is the “thrust” vector of the vehicle. The net

velocity of a vehicle which travels inﬁnitesimal distances,

d x and d y, along vˆx and vˆx⊥ respectively in time dt, can be written as Vnet = [d x, d y]T /dt (expressed in the compo-

nents of the ﬂow-parallel coordinates). Then, from (2), the

ﬂow-parallel coordinate representation of the vehicle thrust

is

Vs t i l l

=

[

dx dt

− Vf,

dy dt

]T

(see

Fig.

3).

Thus

the

speed

of

the vehicle in still water is given by

dx

2 dy 2

Vstill = Vstill =

dt − Vf

+ dt

.

(3)

It is further assumed that the actuation capability of the vehicle is limited and that its maximum speed is lower than the speed of the surrounding ﬂow i.e., Vstill (x, t) ≤ Vmax < V f m.

2.3 Cost functions
We will assign (inﬁnitesimal) costs to inﬁnitesimal displacements of the vehicle. In general, it is a function of differentials, d x, dy and dt (where x and y are the ﬂow-parallel coordinates), and is of the form dc3 = f (d x, dy, dt). However, for static ﬂows (i.e., Vf (x, t) = Vf (x)), dt can be shown to be a function of d x and dy, and as a results, the differential cost has the form dc2 = f (d x, dy).

123

1372

Autonomous Robots (2018) 42:1369–1387

2.3.1 Time minimizing cost

In general, the time cost of a differential element will simply be,

dc3,time = dt .

(4)

For optimal time paths in static ﬂows, it can be shown that dt can be expressed as a function of d x and dy (see Sect. 3.1.1), i.e., dc3,time = dc2,time for static ﬂows. This same expression for dt can also be used in time-varying ﬂows, if the vehicle thrust Vstill is able to overcome the ﬂow velocity V f at all times. However, since we are considering vehicles that have actuation limitations, we use the general time cost given above in time varying ﬂows as well.
2.3.2 Energy minimizing cost

Fig. 4 The connectivity of a vertex with other neighboring vertices in the graph G

The differential cost in this case is the energy expended in achieving a differential displacement, [d x, dy]T in time dt. It is assumed that this energy expenditure can be solely attributed to the action of overcoming the drag force experienced by the vehicle. The drag force experienced by the vehicle is given by

Fd(x,

t)

=

−κ Vsαti−ll1(x,

t

)

Vstill Vs t i l l

(5)

where κ is the drag coefﬁcient which depends on the geometry of the vehicle and α ∈ {2, 3, . . .} deﬁnes the drag model considered. For example, if α = 2 the drag model is linear and if α = 3 it is quadratic. Thus, considering the differential displacement of the vehicle with respect to the ﬂow dxstill = Vstilldt, the differential energy cost is given by

dc3,energy = Fd · dxstill = κ Vsαtill dt

α

dx

2

dy 2 2

=κ

dt − Vf

+ dt

dt

α

=κ

dx2 + dy2 dt2

− 2V f

dx dt

+

V

2 f

2
dt

(6)

2.4 Problem statement

Given the above time and energy cost functions, the objective is to ﬁnd a path Γ : [ts, tg] → W that minimizes the total cost. Thus the problem addressed in this paper is ﬁnding a solution to the following optimization problem,

Γ ∗ = min
Γ

d cγ ,β
Γ

subject to

Γ (ts ) = xs ,

Γ (tg) = xg,

Vstill (Γ (t ), t ) ≤ Vmax

(7)

where xs and xg are the desired start and goal positions, γ denotes the dimension of the workspace and β denotes either time or energy. When γ = 2, the inﬁnitesimal element belongs to W and when γ = 3 it belongs to WT .

2.5 Solution approach

We use a graph based approach to ﬁnd a solution to this problem. We use a discrete graph, G = (V , E), to represent the workspace. The workspace can either be the spatial environment W, or the extended space–time environment WT . The workspace that the graph represents is dependent on the type of ﬂow considered (static vs time-varying). Vertices in this graph are centroids of cells in a uniform square/cubic discretization (in the global coordinates). As such, if the workspace is W, a vertex vi is identiﬁed by its global spatial coordinate xi, and if the workspace is WT , a vertex is identiﬁed by the pair (xi, ti ). Edges are established between immediate neighbors as well as some n-hop neighbors (Fig. 4).
Each edge in the graph can now be approximately considered as an inﬁnitesimal segment with projections d x and dy along vˆx and vˆx⊥ respectively, where x is the position of the vertex at the base of the edge. If the the graph is deﬁned over WT , each edge will have a dt component as well. This lets us assign a cost to the edge using formula (4) (time optimal search) or (6) (energy optimal search). The implicit assumption is that the ﬂow velocity remains constant along an edge.
In this approach, the optimal path would be a sequence of vertices {v0, v1, . . . , vk} where v0 represents the start ver-

123

Autonomous Robots (2018) 42:1369–1387

1373

tex and vk represents the goal vertex. If the workspace is W, sometimes we use the spatial locations of the vertices

{x0, x1, . . . , xk} to represent the path, since in this case the

vertices are identiﬁed using their position coordinates alone.

Furthermore, we use the notation, xixj to refer to a sub path of the optimal path, i.e., xixj = {xi, xi+1, . . . , xj}

Given a start and a goal vertex in the graph, we can thus

use Dijkstra’s optimal search algorithm (Cormen et al. 2001)

to ﬁnd the shortest path in the graph connecting the vertices.

Whenever possible, we can also design admissible heuristic

functions, h : V → R≥0, in order to run more efﬁcient

search algorithms such as A* (Cormen et al. 2001). For time

minimizing search, if [Xg, Yg]T is the coordinate of the goal vertex vg in a global Euclidean coordinate system, and [Xi , Yi ]T is the global coordinate of a vertex vi ∈ V then, a lower bound for the minimum time required to reach vg from vi is

(Xg − Xi )2 + (Yg − Yi )2

htime(vi ) =

, Vmax + V f m

where V f m is the maximum speed of the ﬂow over all points in W. However for the energy minimizing search, one cannot write a reasonable heuristic function other than the trivial h(vi ) = 0, in which case the A* search becomes equivalent to Dijkstra’s.

3 Optimal paths in static ﬂow ﬁelds

In this section the graph based approach is used to ﬁnd optimal paths when the ﬂow ﬁeld is static, i.e., when Vf (x, t) = Vf (x). In such a scenario, the ﬂow at a particular point x ∈ W does not depend on the time of arrival at x. As such, the cost of any path segment that starts from x also does not depend on the time of arrival at x. Thus, in static ﬂows, the propagation of time along a path need not be considered in the compu-
tation of the path costs. Therefore, the graph constructed for
optimal path computation in static ﬂows only has to consider the 2D environment W. In this case each vertex vi ∈ V will be identiﬁed by its position xi ∈ W. Furthermore, the optimal path will be composed of edges (path segments) which have optimal costs individually. Thus, the general costs dc3,time and dc3,energy given in (4) and (6) respectively, can now be reduced to dc2,time and dc2,energy by optimizing these costs over dt.

3.1 Cost functions for static flows
3.1.1 Time minimizing cost for static ﬂows
In order to minimize the time cost of travel, the vehicle has to travel at its maximum speed along each edge. Thus, using Vstill = Vmax , we can solve for dt using (3) as follows,

dx dt

−

Vf

2
+

dy dt

2

= Vm2ax

⇒

dx2

−

2V f

dxdt

+

(V

2 f

−

Vm2ax )dt 2

+

dy2

=

0

⇒

dt

=

V

2 f

V −

f
Vm2ax

d

x

−

Vm2ax

(d

x

2

+

d

y2)

−

V

2 f

d

y2

V

2 f

−

Vm2ax

.

(8)

Note that we discard the solution with the positive root since when d y = 0, we should have dt = d x/(V f + Vmax ). Thus, the time-minimizing cost for a differential element in a static ﬂow is

d c2,t i m e

=

V

2 f

V −

f
Vm2ax

d

x

−

Vm2ax (d x 2

+

dy2)

−

V

2 f

d

y2

V

2 f

−

Vm2ax

.

(9)

3.1.2 Energy minimizing cost for static ﬂows

For a given d x and dy, the differential time dt that minimizes

the energy cost dc3,energy given in (6), can be computed by

solving

∂ d c3,ener g y ∂dt

= 0. Essentially, we are letting the vehicle

choose a Vstill that minimizes dc3,energy. It can easily be ver-

iﬁed that this local energy cost minimization is accomplished

when,

(2 − α)d x + α2d x2 + 4(α − 1)d y2

dt =

(10)

2V f

where α ∈ {2, 3, ..} depends on the drag model considered. Thus the energy cost of a differential element in W is

α

dc2,energy = κ

dx2 + dy2 dt2

− 2V f

dx dt

+

V

2 f

2
dt

(11)

where dt is the function of d x and dy given in (10).

3.2 An alternative approximate model for fast computation of smooth trajectories

The optimal trajectories obtained using the graph searchbased approach, being constrained to the graph, are piecewise linear, and in general not smooth. In order to be able to solve the problem efﬁciently, we need to employ an approximation at some level, which in case of the graph search-based method is the discrete representation of the free space. In this section we present an alternative approximate model, derived from the cost functions described in Sect. 3.1, to represent the optimal trajectory in static ﬂows in the form of a solution to an ordinary differential equation. Thus the solutions obtained using this method can be made arbitrarily smooth. Moreover

123

1374

Autonomous Robots (2018) 42:1369–1387

integration of a differential equation is in general faster to

compute than running a graph search algorithm. In particu-

lar, we construct a Riemannian metric (Petersen 2006) that

approximates the cost functions. This method is particularly

useful for two reasons: (i) trajectories obtained as a solu-

tion to the geodesic differential equation are smooth, unlike

paths in a graph that are restricted to the discrete graph, and

(ii) computing solutions to the geodesic equation is often less

computationally intensive than a full-blown graph search.

The Riemannian metric, g(x), for every x ∈ W is deﬁned

as a (symmetric, positive-deﬁnite) bilinear form over differ-

entials d x and dy such that the cost (equivalently the “length”

induced by the metric) of the differential element can be writ-

ten as

dc = [d x, dy] g(x) d x

(12)

dy

where g(x) is a 2 × 2 matrix, and is called the matrix representation of the Riemannian metric in the ﬂow parallel coordinate system. Using this framework, we propose the following approximate time and energy minimizing Riemannian metric modes for computing optimal paths in static ﬂows.
Riemannian Metric Model for Time Minimization: From equation (9) one has,

dc22,time = (Vm2ax + V f2)d x 2 +

Vm2ax

−

V

2 f

2

dy2

V

2 f

−

Vm2ax

2V f dx −

Vm2ax d x 2 +

Vm2ax

−

V

2 f

2

V

2 f

−

Vm2ax

dy2 .

In order to make the above quadratic in d x and dy, we use

the approximation that the velocity of the vehicle is almost

parallel to that of the ﬂow, i.e.,

dy dx

mation,

1. With this approxi-

Vm2ax d x 2 + (Vm2ax − V f2)d y2

Vmax d x

+

1 2

Vm2ax

−

V

2 f

Vmax

dy dx

dy.

Thus we get,

dt2

(v

+

1 Vmax

)2

d

x

2

+

1 Vmax (Vmax

+

dy2. v)

Thus, the matrix representation of the metric tensor in the 2-dimensional ﬂow-parallel coordinates can be written as,

g=

1 (v+Vmax )2
0

0

1

.

Vmax (Vmax +v)

(13)

123

Riemannian Metric Model for Energy Minimization: For the special case of α = 2, using (10) and (11), one can write,

dc2,energy = 2κ d x2 + d y2 − d x

As such,

⎛

⎞

dc22,energy = 4κ2v2 ⎝2d x2 + d y2 − 2d x2

1+

dy dx

2
⎠.

Using the approximation that the velocity of the vehicle is

almost parallel to that of the ﬂow, i.e.,

dy dx

1, we could

rewrite above as,

dc22,energy = 4κ2v2d y2.

(14)

However, the matrix representation of the metric tensor that arises from (14) is singular and cannot be used with the geodesic equation. As such, we use the following matrix representation of the metric tensor in ﬂow-parallel coordinates:

g=

v2
0

0 4κ 2 v2

(15)

where 1. From g, one can use a coordinate transformation, G =
RT g R, to compute the matrix representations of the metric
tensors in the global Euclidean coordinates.

R=

vˆ X vˆY

−vˆY vˆ X

is a suitable rotation matrix for this local-to-global coordinate transformation, where vˆX and vˆY are the components of the ﬂow-parallel unit vector vˆ expressed in the global frame. We can then solve the geodesic equation (Petersen 2006),

d2γ i dτ2

+

Γ

i jk

dγ dτ

j

dγ k dτ

=0

which is a second order ODE describing the shortest path,

γ , parameterized by τ , the cumulative cost of the trajectory.

Note that summation over repeated indices is assumed by

Einstein

notation.

The

quantities

Γ

i jk

are

called

the

Christof-

fel symbols, and are given by

Γ

i jk

=

1 Gim 2

dGkm dX j

+

dG jm dXi

−

dG jk dXm

with G = G−1. One consequence of the Riemannian approximation is
the fact that the metric is indifferent to the direction of the ﬂow, and the vector ﬁeld in effect gets converted to a line

Autonomous Robots (2018) 42:1369–1387

1375

ﬁeld. Geodesics computed using the approximate Riemannian metric can thus be both in the direction of the ﬂow and against it. However, the Riemannian model does not involve any discretization of the free space and can perform better than the graph search-based approach with a coarse discretization. This is illustrated in the example of Fig. 11, where a coarse discretization gives a path in the graph that is signiﬁcantly different and of higher cost than the geodesic computed using the Riemannian metric. However, making the discretization ﬁner (increasing connectivity of the graph) gives a path in the ﬁner graph that matches the geodesic more closely. Other than this particular example, however, all the simulation and experimental results presented in this paper use the graph search-based method and the exact cost functions described in Sect. 3.1.

Fig. 5 The spatial distribution of neighbors considered at each node. The red square includes the spatial neighbors considered when Nshops = 1, and the blue square includes the spatial neighbors considered when Nshops = 2 (Color ﬁgure online)

4 Optimal paths in time varying ﬂow ﬁelds
In this section we extend the graph based optimal path planning approach to time-varying ﬂow ﬁelds. In the static ﬂows considered in Sect. 3, the traversal cost of a path segment starting at x is independent of the time of arrival at x. As such, every sub path xixj of an optimal path {x0, x1, . . . , xk} has optimal cost. In time-varying ﬂows however, the cost of a path segment depends explicitly on the time of arrival at the base of that path segment, as the costs are inherently tied to the ﬂow speed. As such, in contrast to static ﬂows, it is now possible to travel to an intermediate node in a sub-optimal manner in order to encounter a favorable current towards the destination later on that results in minimizing the overall cost of the path. Hence, greedy strategies that may be suitable for static ﬂows are no longer valid. As such, the search space needs to take the time dimension into account explicitly, when computing optimal paths in time-varying ﬂow ﬁelds.
An exception to this discussion can be observed when the objective function is time, if the vehicle thrust Vstill is able to overcome the ﬂow speed V f at all times. In this case, it is generally possible to use the same method and cost function (given in (9)) used for static ﬂows, without having to expand the graph along the time dimension, i.e., the graph search method used for static ﬂows can be used for this time-varying scenario as well. However, since we are considering a more general case, we use the time-extended graph to compute optimal time paths as well.
4.1 Multi time-step (MTS) search method
In this section, we present the Multi Time-Step Search (MTS) method to ﬁnd optimal paths in time-varying ﬂows. In essence, we expand the graph along the time dimension so that we could search through different Vstill values along

each path segment, that will give a minimum overall cost. In this method, the 3-D spatio-temporal workspace WT is discretized uniformly with increments Δx, Δy and Δt in the x, y and t directions respectively. As before, the centroid of each cube in the discretized space is represented by a vertex vi ∈ V , and each vertex vi is identiﬁed by the pair (xi, ti ). Each vi also has a set of tentative neighbors N (vi ), where each v j ∈ N (vi ) satisﬁes max(|x j − xi |/Δx, |y j − yi |/Δy) ≤ Ns Hops and 0 < (t j − ti )/Δt ≤ Nt Hops . Ns Hops deﬁnes the number of spatial hops considered as neighbors,
and its value is typically set to a small integer in MTS in
order to keep the average degree of the vertices in the graph low. If Ns Hops = 1, only the immediate spatial neighbors are considered and if Ns Hops = 2 then 2-hop spatial neighbors are also considered (see Fig. 5). Each edge of the graph is
assigned a cost computed using the cost functions given in
(4) (optimal time) and (6) (optimal energy). For a given vi , with associated ﬂow speed V fi =
V f (xi, ti ), the required still-water speed and the associated traversal cost to go to any v j ∈ N (vi ) with a given spatial coordinate x depend primarily on dti j = t j − ti . In the case of optimal energy paths, the cost to reach x will decrease as
dti j increases (see Fig. 6). The main idea behind the MTS method is to search through all of these path segments to ﬁnd
the least cost path from start to goal. Naturally, low cost paths
can be obtained by setting Nt Hops to a large value, because it allows transitions between two adjacent spatial locations, xi and xj, over a long period of time (dti j = Nt Hops × Δt). However, such a transition breaks the implicit assumption
that the ﬂow velocity Vfi remains constant between two vertices, vi and v j , since in practice ﬂow conditions are likely to change over the large the transition time dti j . Thus, Nt Hops should be selected such that the underlying ﬂow remains relatively constant during Nt Hops × Δt. In this work, Nt Hops is set such that Nt Hops × Δt < Ts, where Ts is the sampling period of the available ﬂow velocity data.

123

1376

Autonomous Robots (2018) 42:1369–1387

Fig. 6 The construction of the MTS graph for Nhops = 1. Only a portion of the neighbor set is shown. For each spatial neighbor xj, multiple neighbors are considered along the time axis. In the case of optimal energy paths, for each xj, the cost of the segment xixj will decrease as dti j = t j − ti is increased, since the Vstill required for the traversal is reduced with increasing dti j
The pseudo code for the MTS method is given in Algorithm 1. Initially, the start vertex is added to the heap Q with zero cost. The getHeuristic() method computes the value of the heuristic if one is available. The heap Q is sorted using the (heuristic+cost) of the vertices (A* method). Only neighbors with Vstill ≤ Vmax are added to the graph to satisfy the actuation constraint. The main highlights of this method are:
– given a node vi = (xi, ti ), for every location xj who is a neighbor of vi in the spatial domain, multiple nodes with t j = [ti +Δt, ti +2Δt, ..., ti + Nt Hops Δt] are considered as neighbors in the 3-D graph (see Fig. 6).
– while it is possible to consider a large number of nodes with the same spatial coordinate x with different time coordinates as neighbors of a node, only a Nthops number of time hops are considered, to avoid getting incorrect results.
4.2 Extensions of the optimal path planning problem

Algorithm 1: Multi Timestep Search (MTS) to compute optimal

paths in time-varying ﬂows

Input : Vertex set V , Start vertex vs = (xs , ts ), Goal xg Output: Optimal cost path Γ

1 foreach vi ∈ V do 2 vi . f = ∞, vi .cost = ∞, vi . par ent = ∅ 3 vi .heuri sti c = getHeuristic(vi , xg) 4 vi .ex panded = f alse

5 end

6 Q = ∅, G = ∅
7 vs . f = 0, vs .cost = 0 8 Q.i nser t(vs ), G .add N ode(vs ) 9 while (Q! = ∅) do

10 vi = Q.extr act Mi n()

11 vi .ex panded = tr ue

12 [V fi , θ ] = getFlow(vi ) // get velocity at vi

13 if (xi == xg) then

// goal is reached

14

while vi ! = ∅ do

// retrieve path

15

Γ . push(vi )

16

vi = vi . par ent

17

end

18

break;

19 end

20 foreach v j ∈ N (vi ) do

// for each neighbor

21

Vstill = computeVstill(vi , v j )

22

if (Vstill < Vmax ) then

23

continue;

24

end

25

cost = computeCost(vi , v j ) // cost of vi v j

26

if v j ∈ G then

27

if (!v j .ex panded & v j .cost > vi .cost + cost) then

28

v j .cost = qi .cost + cost

29

v j . par ent = vi

30

v j . f = v j .cost + v j .heuristic

31

Q.update(v j )

32

end

33

else

34

v j .cost = qi .cost + cost

35

v j . par ent = vi

36

v j . f = v j .cost + v j .heuristic

37

Q.i nser t(v j ), G .add N ode(v j )

38

end

39 end

40 end

41 return Γ

The objective of the problem speciﬁed in (7) is to ﬁnd an optimal path to the goal, with a speciﬁc start time ts, which satisfy the actuation constraint. The termination time at the goal tg is free. However, in practical applications, several variations of the problem are encountered. In this section, two such variations are considered and the modiﬁcations required in the MTS method to handle such variations are introduced. Constrained time problem: In this problem, a speciﬁc time tg or a time window TG = [t g, t g] to arrive at the goal is speciﬁed. The objective is to ﬁnd an optimal path from the start to the goal that terminates at the goal xg exactly at tg (or within TG if a time window is speciﬁed). Such problems are applicable in data gathering scenarios where an AMV is required to reach a data gathering buoy at a speciﬁed time. To solve this

problem, the graph search is carried out backwards in time, starting from the goal vertex vg = (xg, tg). If a time window TG is speciﬁed, multiple goal vertices vgi = (xg, tgi ) are considered, where tgi ∈ TG are discretized time coordinates within the speciﬁed time window. To carry out a backward
time search, all ﬂow velocity directions are reversed, and only vertices with t j < ti , are considered in the neighbor set N (vi ) of vertex vi . Bounded velocity problem: In this problem, a maximum net
speed Vnetmax is speciﬁed. Thus, an additional constraint Vnet ≤ Vnetmax is added to the problem in (7). Such problems are applicable in data sampling scenarios where the AMV
has to travel with a bounded speed for effective data gath-

123

Autonomous Robots (2018) 42:1369–1387

1377

ering. Such constraints can be easily handled with the MTS

method by pruning the neighbor set N (vi ) so that edges with fast traversal speeds are ignored, i.e., if xj − xi /|t j − ti | > Vnetmax for any v j ∈ N (vi ), that neighbor is removed from the neighbor set.

Remark 1 The MTS method presented above is transparent

to the cost function used for the optimization. It is general

enough to accommodate any path dependent time-varying

cost function. Thus, it is possible to use a combined time-

energy cost function, that considers the hotel load (energy

required to run the sensing and computing systems of the

vehicle), in addition to the energy required to overcome drag.

Such a cost function would have the form dc3,energy =

α

(κh + κ

d x2+d y2 dt2

− 2V f

dx dt

+

V

2 f

2 dt), where κh is the

hotel power draw. This cost function will penalize time spent

and result in shorter duration paths.

5 Planning optimal trajectories in diﬀerent topological classes

Fig. 7 Homotopy-aware path planning: Simultaneous exploration/sampling around a set of islands by a set of ASVs. Homotopy aware planning allows the generation of optimal paths in different classes of trajectories simultaneously

In multi-robot applications such as exploration or data collection in the ocean, it is vital that the team of surface vehicles can be distributed effectively across the region of interest. This task is made particularly challenging in the presence of obstacles or ﬂuidic structures. An effective approach to this problem is topological exploration (Kim et al. 2013), where robots are assigned different topological classes of trajectories to disperse into and explore (see Fig. 7). Reasoning about topological classes of trajectories is also vital to automated surface cleaning operations using surface vehicles (Bhattacharya et al. 2015). In this section we demonstrate, how the graph based approaches presented in Sects. 3 and 4 can be modiﬁed to perform such topological path planning.
Presence of obstacles in W give rise to multiple topological classes of trajectories, each of which belong to a unique homotopy class. Since we plan trajectories in a graph, our method lends itself quite naturally to homotopy-aware path planning, where we can compute optimal trajectories restricted to different homotopy classes. The basic algorithm for doing this is outlined in Bhattacharya et al. (2012), Kim et al. (2014). The fundamental idea is to use certain homotopy invariants (called h-signature) (Bhattacharya and Ghrist 2015) to construct a homotopy-augmented graph, Gh = (Vh, Eh), in which every vertex is a pair of the form (vm, w) ∈ Vh, with vm ∈ V and w is a “word” made up of letters associated with non-intersecting rays emanating from connected components of obstacles (see Fig. 8). The edge set, Eh is described incrementally as follows: If (vm, w) ∈ Vh, then for every [vm, vn] ∈ E (where vm, vn ∈ V ), there exists an edge [(vm , w), (vn, w◦h(vmvn))] ∈ Eh (where w◦h(mn) indicate concatenation of the words w and the h-signature of

Fig. 8 Non-intersecting rays emanate from every connected component of obstacles. The homotopy invariant (h-signature) of a path, γ , is constructed by tracing the curve and constructing a word, in which we insert a letter or its inverse everytime we cross a ray from right-to-left or leftto-right respectively. Thus, in the ﬁgure, h(γ ) = “r1−1r4 r2−1r4−1r6−1”
the directed segment vmvn). The cost of an edge in Gh is taken to be same as the cost of the corresponding projected edges in G . Executing a graph search in the h-augmented graph, Gh, can give us optimal trajectories constrained to different homotopy classes connecting given vertices vs, ve ∈ V .
6 Simulations
In this section we present simulation results for planning time and energy optimal paths in a ﬂow ﬁeld using the graph search methods described in the preceding sections. In these simulations we use ﬂow velocity information obtained from an analytical model as well as from ocean current forecasts. We use the wind-driven double gyre model as our analytical model because it is often used to describe large scale recircu-

123

1378

Autonomous Robots (2018) 42:1369–1387

lation regions in the ocean (Veronis 1966). Furthermore, the ﬂows in our experimental setup are also patterned according to this model. In this model, the ﬂow velocity components in the global coordinate system are given by,

X˙ = −π A sin π X cos π Y ,

s

s

Y˙ = π A cos π X sin π Y ,

s

s

(16a) (16b)

where A determines the amplitude of the ﬂow velocity vector and s scales the dimensions of the gyres. In our simulations, we set A = 0.02 and s = 1 so that the ﬂow ﬁeld approximately matches the ﬂow ﬁeld generated in the experimental setup with an average ﬂow velocity of 0.025 m/s. The maximum ﬂow speed obtained with these parameters is V f m = 0.063 m/s, and as such, we selected Vmax = 0.05 m/s. Note that the ﬂow ﬁeld generated with (16) is static and as such it is only used for simulations relating to Sect. 3.
We also employ ﬂow data generated by the Regional Ocean Model System (ROMS) for the Santa Barbara Bay area off the coast of southern California in these simulations. The Southern California Coastal Ocean Observing System (SCCOOS) generates these hourly ocean current forecasts on a 3 km grid everyday and each forecast is for 72 hours (SCCOOS). The the data generated on July 7 2016 was used for the simulations. The maximum ﬂow speed observed was V f m = 0.73 m/s and as such Vmax was selected to be 0.5 m/s. When ocean data is used for simulations involving static ﬂows, one time slice of the available data is used.
The accuracy of the computed paths was evaluated by comparing them against paths obtained by solving the corresponding optimal control problem. The optimal control problem involves minimizing the path cost given in (7), subject to the kinematic model in (2), and the constraint Vstill ≤ Vmax . This minimization was done using the Pontryagin’s minimization principle, which resulted in a two point boundary value problem which was solved using the indirect shooting method. This approach solves the governing differential equations for a succession of initial directions until the goal position is reached. The result from the shooting method was reﬁned using MATLAB’s BVP solver. Let Γ ∗ : [ts, tg] → W be the reference path obtained from the optimal control formulation of the problem, and let Γ : [ts, tg] → W be the path computed by the proposed method. The mean error (m E) between Γ ∗ and Γ , deﬁned by

tg Γ ∗(t) − Γ (t)

mE =
ts

dt tg − ts

(17)

is used to evaluate the relative accuracy of a given path. To further validate the results, the cost of the path computed by the proposed method was also compared against the cost of

Fig. 9 Planned optimal time paths for two start-goal combinations for Vmax = 0.05 m/s. In red: paths computed using the described method, in black: paths computed using the optimal control formulation. Performance parameter are given in Table 1 as a Path 1 and b Path 2 (Color ﬁgure online)
Fig. 10 Planned optimal energy paths for two start-goal combinations for Vmax = 0.05 m/s. In red: paths computed using the described method, in black: paths computed using the optimal control formulation. Performance parameter are given in Table 2 as a Path 1 and b Path 2 (Color ﬁgure online)
the feasible minimum distance path between the same start and goal locations. To compute the straight line path, it was assumed that the vehicle operates at its maximum allowable speed Vmax . In all of the proceeding simulations involving optimal energy paths, the parameters values α = 2 and κ = 1 are used.
6.1 Optimal paths in static flow fields
Figures 9 and 10 respectively show the optimal time and energy paths planned on a static ﬂow given by (16). In these simulations, both x and y directions were discretized with a resolution of 0.01 m. In both ﬁgures, the traces in red are the paths computed using our method and the traces in black represent the ‘reference’ path computed using the optimal control formulation. Tables 1 and 2 provide the performance parameters for the optimal time and optimal energy paths respectively. It can be seen that paths costs are in good agreement with the reference path and that the mean error is low (approximately 0.02 m for all four paths). In addition, the computed paths have much better costs when compared with

123

Autonomous Robots (2018) 42:1369–1387

1379

Table 1 Performance parameters for the optimal time paths shown in Fig. 9

Cost (s) Graph Reference

Min. Dist

mErr (m)

Path 1 (9(a)) Path 2 (9(b))

32.92 30.17

32.87 30.11

248.5 88.71

0.019 0.019

Table 2 Performance parameters for the optimal energy paths shown in Fig. 10

Cost (J) Graph

Reference

Min. Dist

mErr (m)

Path 1 (10(a)) Path 2 (10(b))

9.44e−4 2.05e−3

9.05e−4 1.61e−3

6.21e−1 3.78e−1

0.019 0.02

Fig. 11 Comparison of optimal energy paths generated by the graph search method (blue) with the path generated by integrating the geodesic equation (red). a Coarse graph constructed by connecting each vertex with 16 neighbors: Paths not in agreement and the cost of the path in graph is signiﬁcantly worse, b Finer graph constructed by connecting each vertex with 48 neighbors: Paths in agreement and produces a lower cost path (Color ﬁgure online)

a straight line paths between the corresponding start and goal coordinates.

6.1.1 Approximate Riemannian metric model for path planning

The time and energy minimizing Riemannian metric tensors developed in Sect. 3.2 were also used to generate time and energy optimal paths in static ﬂows. Finding a path from the start position to the goal position translates to solving the two point boundary value problem posed by the geodesic equation. This was achieved by the shooting method: integrating the geodesic equation from the start position for a succession of initial directions until the goal position was reached, i.e., the problem was solved as a series of initial value problems.
Figure 11 shows the comparison between the graph search method and the geodesic integration method, for Vmax = 0.01 m/s. Figure 11a shows an instance where the graph search method considers 16 neighbors for each node in the graph. Clearly the geodesic and the graph search generated paths do not agree. The cost of the path generated by the graph search is 1.96. In Fig. 11b, where the results of the two methods are in agreement, the graph search method considers 48 neighbors for each node in the graph, and the resulting path cost is only 1.53 (which is less than the previous case). However, in this instance, the graph search method takes around 50 s to compute the path while the geodesic method takes less than 2 s. This example clearly highlights three important advantages of the geodesic integration method: (i) it produces smooth trajectories (see Fig. 11a), (ii) in contrast to graph search methods, the accuracy of the generated path is not limited by the resolution of the underlying workspace, and (iii) the geodesic integration method is much faster.
However, it was observed that for some instances, the geodesic integration method gave undesirable results. Fig-

Fig. 12 Comparison of exact optimal cost paths (blue) with the paths generated by integrating the geodesic equations obtained from the approximate Riemannian metric model (red). In this instance the Riemannian metric model fails to generate a feasible path (Color ﬁgure online)
ure 12 shows the optimal time path obtained from geodesic integration for Vmax = 0.05 m/s. The generated path is not necessarily a time-optimal path since parts of it fall along ﬂow opposing directions. This occurs due to the symmetry of the Riemannian metric, where the cost heading against the ﬂow is equal to the cost heading along the ﬂow (see discussion in Sect. 3.2). However, a method can be developed to construct a piecewise geodesic path from the start to the goal which ignores ﬂow opposing directions. This is a direction for future work.
6.1.2 Performance comparison with existing methods
We compared the proposed method with (i) a level set method for planning optimal time paths (Lolla et al. 2014), (ii) a

123

1380

Autonomous Robots (2018) 42:1369–1387

Table 3 Comparison of path costs against the level set method for time optimal paths. The path costs obtained from the two methods are comparable

Level Set

Graph(48-con.)

Graph(16-con.)

Path 1 Path 2

30.39 22.47

30.53 22.76

31.07 23.07

Fig. 13 Comparison of time optimal paths obtained from the level set method (red) with paths from the graph search method with 48neighbors (black). The costs for a path 1 and b path 2 are given in Table 3, and are comparable (Color ﬁgure online)

graph search based method for planning optimal energy paths (Koay and Chitre 2013).
Level set method for optimal time paths: In this method introduced by Lolla et al., a virtual front (a zero level set of a distance function), that is initialiazed around the start point, is advected by the ﬂow as well as by a velocity component perpendicular to the front, until it reaches the goal position. The point on the front that reached the goal position is then integrated backwards in time to ﬁnd the optimal time path. We implemented a ﬁrst order integration to compute time optimal path using the level-set method. To compute the path costs, we use the minimum-time cost function in (9), on the discretized level set path. As seen in Fig. 13 and Table 3, the paths and the corresponding path costs obtained from the two methods are almost identical.
It can be seen that the proposed method produces comparable results to those obtained from the level set method. However, for a workspace containing n grid points, the computational cost of the level set method is O(n3) (Lolla et al. 2014) while for graph search method with E connected neighbors, the computational cost is only O(n E log(n)) in the worst case. Furthermore, the level set method periodically performs a re-initialization step, which has a computational cost of O(n3). In addition to lower computational cost, a further advantage of our method is the ability to incorporate different cost functions, whereas the level set method can only generate time optimal paths.
Comparison with a graph search method for optimal energy paths: We compared the optimal energy paths generated from our method with another graph search based method presented by Koay et al. (2013) (henceforth referred to as the Koay method). Even though the approach is similar, the cost function proposed in the Koay method is approximate. In their method, the authors minimize vstill for each path segment in the graph and use this minimized value to compute the energy cost for that path segment. In effect, the cost of each path segment is computed to be

Fig. 14 Comparison of optimal energy paths generated using the proposed method and the Koay method. Path costs: our method (red path): 1802 (2097) J, Koay method (blue path): 1864 (1942) J. The values outside parenthesis are the energy values computed using the exact energy cost (11), while in parenthesis are the path costs calculated using the approximate cost metric used in the Koay method (Color ﬁgure online)
κ min(vstill ) 2dt whereas the actual energy cost should be min κ vstill 2dt. Figure 14 shows the “optimal" energy paths computed using the two methods near the Santa Cruz island. The cost of the path generated from the Koay method, when evaluated using the cost function given in (11), is 3% higher than the actual optimal path, and it lies on the opposite side of the island. Furthermore, the cost of the actual optimal energy path (generated using the proposed method), is 16% higher when evaluated using the cost metric used in the Koay method.
6.2 Optimal paths in time-varying flow fields
In this section we present simulation results for computing optimal paths in time varying ﬂows using the MTS method described in Sect. 4. Figure 15 shows the time evolution of an optimal time path computed using the MTS method (in red), along with the reference path Γ ∗(t) computed using the optimal control formulation (in black). In this case, since the objective is to minimize the traversal time, the path takes a direct route towards the destination, while trying to align with the ﬂow wherever possible to get an additional ‘push’. Figure 16 shows the time evolution of an optimal energy

123

Autonomous Robots (2018) 42:1369–1387

1381

Fig. 15 Comparison of an optimal time path computed by the MTS method (red trace) against the optimal time path computed using the optimal control formulation (black trace). Paths take a more direct route

towards the goal. Refer Table 4 for performance parameters of the path. a t = 1.67 h. b t = 4.17 h. c t = 6.67 h. d t = 9.44 h (Color ﬁgure online)

path computed using the MTS method (in red), along with the corresponding reference path computed using the optimal control formulation (in black). In this case, the objective is to reduce the energy spent while traversing. As such, the path tries to reduce the drag force experienced by the vehicle, by aligning the vehicle’s motion along the ﬂow as much as possible. This results in loop structures (in space) as can be seen in the ﬁgure. The costs and the mean errors of these paths are given in Table 4.
Flow reversal is a common occurrence in marine environments. This is particularly true in channels between islands and in estuarine environments. Figure 17 shows an example of the MTS method being used to plan optimal energy paths in such a ﬂow reversing environment. It can be seen that the ﬂow between the two islands (Santa Rosa island and Santa Cruz island) is initially opposing the vehicle’s intended travel direction. Thus the vehicle slows down and waits until it encounters a more favorable current toward the destination. This waiting can be clearly seen in the 3D time extended plot in Fig. 17f.

In Sect. 4.2, two extensions of the path planning problem in time-varying ﬂows, the constrained time problem and the bounded velocity problem, were introduced. The solution methods proposed in that section were used to compute optimal energy paths between the same start and goal locations as before, i.e., from xs = [20, 50] km to xg = [50, 40] km. For the constrained time problem, a time window TG = [43.61, 46.94] h was considered, and the resulting optimal path is shown in Fig. 18. The computed path had a start time of 8.89 h and the time at goal was 46.94 h. Furthermore, it can be seen that this path better utilizes the ﬂow to get a path cost of 1816 J, which is much less than the cost of the path starting at ts = 0 h. For the bounded velocity problem, the maximum allowable speed Vnetmax was set to 0.4 m/s and the modiﬁed MTS method was used to compute an optimal energy path. The computed path had cost of 3914 J which is higher than the cost of the optimal energy path with no velocity bounds (see Table 4). This is expected because the velocity bound prevents the vehicle from approaching areas with faster currents, which are are more conducive to energy efﬁcient navigation. Furthermore the maximum net velocity

123

1382

Autonomous Robots (2018) 42:1369–1387

Fig. 16 Comparison of an optimal energy path computed by the MTS (red trace) method against the optimal energy path computed using the optimal control formulation (black trace). Paths try to follow the ﬂow

at all times in order to reduce energy consumption. Refer Table 4 for performance parameters of the path. a t = 5.28 h. b t = 20.28 h. c t = 33.61 h. d t = 49.17 h (Color ﬁgure online)

Table 4 Performance parameters for the optimal time paths shown in Figs. 15 and 16

Cost

mErr (m)

Graph Reference Min. Dist.

Opt. Time (15) 9.44 h 8.66 h Opt. Energy (16) 3858 J 3795 J

9.48 h

893

16218 J

394

along the computed path was 0.36 m/s which is within the speciﬁed bound.
In the method described in Sect. 3 as well as in other graph based methods used to compute optimal paths in static ﬂows (Koay and Chitre 2013; Garau et al. 2005), in which only the spatial coordinates are discretized, the accuracy of the computed paths increases as the resolution of the discretization is increased. However, it was observed that this is not generally true for time-varying ﬂows. Table 5 shows the variation of the accuracy values for an optimal energy path computed using the MTS method, as the resolution used to

discretize the 3D space is varied. The start and goal locations for these paths are the same as the ones considered in Fig. 16. Each path in the table refers to a result from the MTS method for different discretization levels and different number of neighbors in the neighbor set. Going from Path1 to Path2 and from Path3 to Path5, where Δt is held constant, the accuracy is increased (m E is reduced) as Δx is reduced. However, for Path4 and Path5, the accuracy decreases (m E is almost doubled) as Δx is reduced (as the discretization is made ﬁner). Thus, the relationship between the accuracy and the discretization resolution for time varying ﬂows is not as straight forward as it is for static ﬂows. In Path5 - Path7, both discretization resolutions are held constant while reducing Nt Hops. It can be seen that the error is the same for Paths 5 and 7, while the error increases in Path6 when Nt Hops = 5. These observations indicate that the discretization resolution needs be adapted according to the spatio-temporal scales of the underlying ﬂow at each expansion of the graph. This is a research direction that is currently being investigated.

123

Autonomous Robots (2018) 42:1369–1387

1383

Fig. 17 Path planning in a ﬂow reversal scenario. Initially, the ﬂow is opposing the intended travel direction (a)–(c). The vehicle waits for until the ﬂow is more favorable to proceed (d, e). The waiting can be seen clearly in the time extended plot (f)

6.3 Planning in multiple homotopy classes
A described in Sect. 5, the proposed path planning framework can be used to plan optimal trajectories in different homotopy classes. This approach can be used for simultaneous navigation in regions riddled with obstacles, e.g., the Philippine archipelago. Furthermore, as mentioned in Sect. 5, this approach is particularly attractive for energy efﬁcient exploration/sampling of ocean phenomena around a set of islands using a team of ASVs. This approach generates optimal paths along each coastal segment off an island. Figure 19a shows optimal energy paths generated around the Santa Cruz island and Fig. 19b shows optimal energy paths generated around the Anacapa island, both off the coast of California. In both cases, the blue path shows the globally cost optimal path between the start and goal locations, and the red path shows a cost optimal path that is in a different homotopy class (i.e., on the opposite side of the island). For this simulation, the ﬂow was assumed to be static (a single time slice of the available ﬂow data was used in the computations), and the environment was discretized with a resolution of 125 m.
7 Experimental veriﬁcation
We further validate the paths computed by our proposed graph search method through experiments. The experiments were conducted using the multirobot Coherent Structure

Testbed (mCoSTe) which consists of a micro Autonomous Surface Vehicle (mASV) and the 3 × 3 × 1 m3 Multi Robot ﬂow tank (MR tank). The mASV is a differential drive vehicle with a maximum forward speed of approximately 0.2 m/s. Localization for the vehicle is provided by an external motion capture system. Multi-gyre ﬂows were created in the MR tank using four ﬂow driving cylinders rotating at approximately 100 rpm. Figure 20 shows the components of the experimental setup.
The ﬂow ﬁeld generated in the tank using the ﬂow driving cylinders, closely resembles the ﬂow given by the doublegyre model given in (16). In fact, the parameters of the model were selected such that average ﬂow speed of the model matches the average ﬂow speed observed in the tank (0.25 m/s). The average ﬂow speed in the tank was computed by logging the uncontrolled mASV speed in the ﬂow and averaging those values. According to the model, the selected parameters result in a maximum ﬂow speed of 0.063 m/s. Note while there are subtle disturbances to the ﬂow, it is assumed that the ﬂow generated in the tank is a static ﬂow. As such we used the methodology in Sect. 3 to compute optimal paths between the start location [0.6, 0.6]T and goal location [2.3, 1.3]T . The paths were computed on a graph discretized at with a resolution of 0.01 m. For the experiments, we considered three paths between the start and goal locations: the time-optimal path, the energy-optimal path and the minimum-distance path. The minimum-distance path was considered in order to provide a baseline to compare the

123

1384

Autonomous Robots (2018) 42:1369–1387

Fig. 18 Optimal energy path computed between xs = [20, 50] km and xg = [50, 40] km with a constrained time window TG = [43.6146.94] h at the goal. The time at goal is 46.94 h and the start time from the start location is 8.89 h. a t = 15.56 h. b t = 21.11 h. c t = 33.06 h. d t = 46.94 h

Table 5 The variation of the path accuracy with discretization resolution for the MTS method, for an optimal energy path computed from xs = [20, 50]km, to xg = [50, 40]km
Path1 Path2 Path3 Path4 Path5 Path6 Path7

Δt (s) 1000 1000 500 500 500 500 500

Δx (m) 200 150 200 100 150 150 150

Nt Hops

3

36

6

6

5

3

Ns Hops

3

33

3

3

3

3

mE

801 660 410 747 394 521 394

results of the time-optimal and energy-optimal paths. During the experiments, the paths computed by the graph based planner was used as a reference paths for the ASV to follow. The path following was achieved using a waypoint navigation scheme. Seven runs were carried out for each case and results were recorded. The energy expended by the mASV was computed as,

E=

VL2motor + VR2motor dt

≈

Vi2n 2552

Δt

i

L

2 cm

di

+

Rc2mdi

where VLmotor and VRmotor are the voltages applied to the left and right motors respectively, Vin is the battery voltage, Lcmdi and Rcmdi are the PWM signal commands sent out to the mASV during the ith command cycle, and Δt is the duration of each command cycle.
Table 6 shows the average time taken and the average energy expended by the mASV to complete each path. As expected, the mASV completes the time-optimal path the quickest and expends the least amount of energy while completing the energy-optimal path. On average the time-optimal path is 19% faster than the minimum-distance path and the energy-optimal path expends 51% less energy than the minimum-distance path. Figure 21 shows the paths taken

123

Autonomous Robots (2018) 42:1369–1387

1385

Fig. 19 a Optimal Energy paths around Santa Cruz island. Path costs, blue: 1607 J, red: 2871 J. b Optimal Energy paths around Anacapa island. Path costs, blue: 396 J, red: 1390 J. In both cases, the blue path is the globally optimal path while the red path is optimal on the opposing side of the island. The blue cross gives the start location and the red cross gives the goal location (Color ﬁgure online)

Fig. 22 Path taken by the ASV in the tank while following the optimal energy path. The dotted white line is the reference path, the solid white line shows the path taken by the ASV and the solid triangle represents the ASV. The ﬂow in the tank is assumed to be static. a t = 20 s. b t = 40 s. c t = 60 s. d t = 80 s (Color ﬁgure online)

Fig. 20 Experimental setup, right: four ﬂow driving cylinders creating a double gyre like ﬂow in the MR tank, left: mASVs used for the experiments

Table 6 Path costs for the three paths averaged over seven trials. The standard deviations of the computed values are shown within brackets
Time optimal Energy optimal Min distance

Time (s) Energy (J)

44.8 (1.92) 250.3 (33.2)

92.7 (4.64) 222.3 (12.7)

55.4 (8.31) 449.3 (42.1)

Fig. 21 Paths taken by the mASV in the MR tank (in red) and the paths planned by the graph search algorithm (in blue). a time-optimal path. b Energy-optimal path (Color ﬁgure online)
by the mASV against the path planned by the graph search method and Fig. 22 shows the path taken by the mASV overlaid on an image of the tank.
8 Conclusions and discussion
In this work we presented graph search based methods to plan optimal time and optimal energy trajectories in both static

and time varying ﬂow ﬁelds. We used tools from topological path planning to extend these graphs in order to compute optimal paths in different homotopy classes of the environment. We were able to verify the correctness of the computed paths in simulations, by comparing them with paths computed using an optimal control framework. Furthermore, we compared our results of our method with other methods in literature. The level-set method, although being computationally expensive and being able to compute time-optimal paths only, gave comparable time-optimal path costs; and the Koay method for energy optimal paths gave more expensive paths than ours. We also veriﬁed the efﬁcacy of the planned paths through experiments conducted in an indoor laboratory testbed, where, despite having partial/noisy ﬂow information, our method was successful in planning optimal trajectories.
We also presented a Riemannian approximations to the cost functions used for the graph search method in static ﬂows. We showed how these Riemannian metrics could be used with the geodesic equation to generate approximations to time and energy optimal paths. Even though some drawbacks were observed in this method, we believe that this approach to path planning in a ﬂow not only provides better insights into the problem but also opens up new possibilities for path planning in a ﬂow ﬁeld, and as a results warrants further investigation.
When planning optimal paths in time varying ﬂows, it was found that the accuracy of the computed paths were dependent on the discretization used for the conﬁguration space in a disproportionate manner. In contrast to searches in spatial corrdinates alone (such as the ones used in static ﬂow sce-

123

1386

Autonomous Robots (2018) 42:1369–1387

narios), increasing the discretization resolution sometimes resulted in reduced accuracy. To obtain the best accuracy, the discretization has to match the spatio-temporal scales of the underlying ﬂow ﬁeld. Finding this “sweet spot” remains a challenge and is a direction for future work.
Similar to existing work on path planning in ﬂows in literature, the presented method assumes that accurate ﬂow velocity forecasts are available for the computation of optimal paths. However, the ocean current forecasts provided by the CORDC databases, the regional ocean model systems (ROMS), and/or other numerical models are often uncertain (Huynh et al. 2015). Thus, in order for these graph search methods to be used with such uncertain forecasts, the effect of noise on the computed optimal paths need to be investigated.
Funding This study was funded by the National Science Foundation (Grant Numbers IIS-1253917 and CMMI-1462825).
Compliance with ethical standards
Conﬂict of interest The authors declare that they have no conﬂict of interest.
References
Bhattacharya, S., & Ghrist, R. (2015). Path homotopy invariants and their application to optimal trajectory planning. In Proceedings of IMA conference on mathematics of robotics (IMAMR), St Anne’s College, University of Oxford, September 9–11, 2015.
Bhattacharya, S., Likhachev, M., & Kumar, V. (2012). Topological constraints in search-based robot path planning. Autonomous Robots, 33(3), 273–290. https://doi.org/10.1007/s10514-0129304-1. ISSN 0929-5593.
Bhattacharya, S., Kim, S., Heidarsson, H., Sukhatme, G., & Kumar, V. (2015). A topological approach to using cables to separate and manipulate sets of objects. International Journal of Robotics Research, 34(6), 799–815. https://doi.org/10.1177/ 0278364914562236.
Caron, D., Stauffer, B., Moorthi, S., Singh, A., Batalin, M., Graham, E., et al. (2008). Macro- to ﬁne-scale spatial and temporal distributions and dynamics of phytoplankton and their environmental driving forces in a small subalpine lake in southern california, usa. Journal of. Limnology and Oceanography, 53(5), 2333–2349.
Chakrabarty, A., & Langelaan, J. (June 2013). Uav ﬂight path planning in time varying complex wind-ﬁelds. In 2013 American control conference, pp. 2568–2574. https://doi.org/10.1109/ACC.2013. 6580221.
CORDC. Naitonal HF RADAR network—surface currents. URL http:// cordc.ucsd.edu/projects/mapping/maps/.
Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2001). Introduction to algorithms (2nd ed.). Cambridge: MIT Press.
Eichhorn, M. (2015). Optimal routing strategies for autonomous underwater vehicles in time-varying environment. Robotics and Autonomous Systems, 67, 33–43.
Fiorelli, E., Leonard, N. E., Bhatta, P., Paley, D. A., Bachmayer, R., & Fratantoni, D. M. (2006). Multi-AUV control and adaptive sampling in monterey bay. IEEE Journal of Oceanic Engineering,

31(4), 935–948. https://doi.org/10.1109/JOE.2006.880429. ISSN 0364-9059. Garau, B., Alvarez, A., & Oliver, G. (2005, April). Path planning of autonomous underwater vehicles in current ﬁelds with complex spatial variability: an a* approach. In Proceedings of the 2005 IEEE international conference on robotics and automation, 2005. ICRA 2005, pp. 194–198. https://doi.org/10.1109/ROBOT.2005. 1570118. Huynh, V., Dunbabin, M., & Smith, R. (2015). Predictive motion planning for auvs subject to strong time-varying currents and forecasting uncertainties. In 2015 IEEE international conference on robotics and automation (ICRA), pp. 1144–1151. https://doi.org/ 10.1109/ICRA.2015.7139335. Kim, S., Bhattacharya, S., Ghrist, R., & Kumar, V. (2013). Topological exploration of unknown and partially known environments. In Proceedings of the IEEE/RSJ international conference on intelligent robots and systems (IROS), Tokyo, Japan, November 3–7, 2013. Kim, S., Bhattacharya, S., & Kumar, V. (2014). Path planning for a tethered mobile robot. In Proceedings of IEEE international conference on robotics and automation (ICRA), Hong Kong, China, May 31–June 7 2014. Koay, T.-B., Chitre, M. (2013). Energy-efﬁcient path planning for fully propelled auvs in congested coastal waters. In OCEANS-Bergen, 2013 MTS/IEEE, pp. 1–9. https://doi.org/10.1109/OCEANSBergen.2013.6608168. Kruger, D., Stolkin, R., Blum, A., & Briganti, J. (April 2007). Optimal auv path planning for extended missions in complex, fast-ﬂowing estuarine environments. In 2007 IEEE international conference on robotics and automation, pp. 4265–4270. https://doi.org/10.1109/ ROBOT.2007.364135. Kularatne, D., Bhattacharya, S., & Hsieh, M. A. (2016, June). Time and energy optimal path planning in general ﬂows. In Proceedings of robotics: Science and systems, AnnArbor, Michigan. https://doi. org/10.15607/RSS.2016.XII.047. Lolla, T., Ueckermann, M. P., Haley, P., & Lermusiaux, P. F. J. (2012, May). Path planning in time dependent ﬂow ﬁelds using level set methods. In Proceedings of the IEEE international conference on robotics and automation, Minneapolis, MN, USA. Lolla, T., Jr H, P., & Lermusiaux, P. (2015). Path planning in multiscale ocean ﬂows: Coordination and dynamic obstacles. Ocean Modelling, 94, 46–66. https://doi.org/10.1016/j.ocemod.2015.07. 013. ISSN 1463-5003. Lolla, T., Lermusiaux, P. F. J., Ueckermann, M. P., & Haley, P. J. (2014). Time-optimal path planning in dynamic ﬂows using level set equations: theory and schemes. Ocean Dynamics, 64(10), 1373–1397. ISSN 1616-7228. Otte, M., Silva, W., & Frew, E. (2016, May). Any-time path-planning: Time-varying wind ﬁeld + moving obstacles. In 2016 IEEE international conference on robotics and automation (ICRA), pp. 2575–2582. https://doi.org/10.1109/ICRA.2016.7487414. Petersen, P. (2006). Riemannian Geometry. Graduate Texts in Mathematics. Springer, ISBN 9780387294032. Rao, D., & Williams, S. B. (2009). Large-scale path planning for underwater gliders in ocean currents. In Australasian conference on robotics and automation (ACRA), Sydney. SCCOOS. Regional ocean model system (roms) model output. URL http://www.sccoos.org/data/roms-3km/. Smith, R. N., Das, J., Heidarsson, H., Pereira, A., Cetinic´, I., Darjany, L., et al. (2010). USC CINAPS builds bridges: Observing and monitoring the Southern California Bight. IEEE Robotics and Automation Magazine, Special Issue on Marine Robotics Systems, 17(1), 20– 30. Subramani, D. N., & Lermusiaux, P. F. (2016). Energy-optimal path planning by stochastic dynamically orthogonal level-set optimization. Ocean Modelling, 100, 57–77.

123

Autonomous Robots (2018) 42:1369–1387

1387

Veronis, G. (1966). Wind-driven ocean circulation, part i and part ii. Deep-Sea Research, 13(31), 17–29.
Witt, J., & Dunbabin, M. (2008). Go with the ﬂow: Optimal auv path planning in coastal environments. In Australasian conference on robotics and automation (ACRA).
Publisher’s Note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional afﬁliations.
Dhanushka Kularatne received his B.S. degree in Electrical Engineering from University of Peradeniya, Sri Lanka in 2009 and his M.Sc. degree in Mechanical Engineering from the University of Central Florida in 2013. He completed his Ph.D in Mechanical Engineering at Drexel University in 2017, where he focused his research on optimal path planning for marine vehicles. Dhanushka’s research interests are centered around developing optimal motion control strategies for autonomous marine vehicles. Currently he is working on leveraging system noise for efﬁcient navigation, which has applications in monitoring of dynamic and uncertain environments by teams of robots.

M. Ani Hsieh is a Research Associate Professor in the Department of Mechanical Engineering & Applied Mechanics, University of Pennsylvania. She received a B.S. in Engineering and B.A. in Economics from Swarthmore College in 1999 and a Ph.D. in Mechanical Engineering from the University of Pennsylvania in 2007. She has over ﬁfty publications spanning her areas of research interest including networked robotics, robot swarms, distributed control, task allocation, distributed assembly, geophysical ﬂuid dynamics, and nonlinear dynamics & control. Her current work focuses on developing a general control and coordination framework for distributed sensing and monitoring of dynamic and uncertain environments by mobile robot teams. Dr. Hsieh is a member of IEEE and serves on editorial boards for journals including Swarm Intelligence (Springer), Frontiers in Robotics and AI, and the IEEE Transactions on Automation Science and Engineering.

Subhrajit Bhattacharya is an assistant professor in the Department of Mechanical Engineering and Mechanics of Lehigh University. He completed Ph.D. in Mechanical Engineering and Applied Mechanics, and was a postdoctoral researcher in the Department of Mathematics at the University of Pennsylvania before he joined Lehigh. Subhrajit’s research interests are centered around motion planning and control of autonomous, intelligent systems. More speciﬁcally, he is interested in applications of topological and geometric methods (algebraic/ differential topology, differential/discrete geometry) to the design and analysis of algorithms in robot motion planning, coverage, sensor networks, swarms, distributed systems and control.

123

