IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2021 IEEE XXVIII Internationa...
Minimum-time optimal control for a quadcopter trajectory through gates with arbitrary pose
Publisher: IEEE
Cite This
PDF
Oscar E. Ramos
All Authors
53
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Model of the Quadcopter
    III.
    Trajectory Generation for the Quadcopter
    IV.
    Experimental Setup
    V.
    Conclusion

Authors
Figures
References
Keywords
Metrics
Abstract:
Drone racing has become popular in recent years, both in the manned and unmanned versions. However, currently manned races show more level of acrobatic behaviors through more challenging scenarios. Autonomous quadcopters are still limited to technological proprioceptive and exteroceptive challenges, as well as algorithmic limitations. This paper proposes an approach for unmanned quadcopters to maneuver through gates with arbitrary poses solving a minimum-time optimal control problem. The results show, in a dynamic simulator, that the quad copter is able to successfully circumvent the nuances of the environment passing through the gates in minimum time satisfying the motion constraints and planning the motion ahead.
Published in: 2021 IEEE XXVIII International Conference on Electronics, Electrical Engineering and Computing (INTERCON)
Date of Conference: 5-7 Aug. 2021
Date Added to IEEE Xplore : 21 September 2021
ISBN Information:
INSPEC Accession Number: 21230160
DOI: 10.1109/INTERCON52678.2021.9532694
Publisher: IEEE
Conference Location: Lima, Peru
SECTION I.
Introduction

The industry of quadcopters has greatly increased in recent years, and nowadays it is common to see drone applications at the industrial, service and personal levels [1] . However, most of the currently used quadcopters are teleoperated, limiting their ability to perform complex trajectories in the air. Moreover, to be able to truly deploy this technology in cohabitation with humans, teleoperation problems should be avoided and a higher level of autonomy is needed [2] .

In spite of this development, aggressive and fast trajectories requiring rapid and well planed motions are still a challenging problem. Drone racing competitions have also recently become popular, being the manned versions the ones with more challenging environments but requiring experience of the remote pilot [3] . Unmanned races require autonomy to generate the fastest possible trajectory through a series of waypoints in the track, but is currently hard to achieve. The more autonomy, the fastest and more aggressive the motions. Eventually, an autonomous optimal trajectory in minimum time would be able to beat their manned counterpart [4] .

In this paper, a framework for solving the problem of a quadcopter racing through several gates with arbitrary pose is proposed. The main contribution of the paper consists in formulating a minimum-time optimal control approach as an alternative solution to this problem. This paper is organized as follows. Section II develops the background related to the dynamics of the quadcopter that will be used in this work. Section III presents the proposed approach to optimal control as a solution to the minimum-time problem, and Section IV shows the experimental results in a dynamic simulation, as well as their discussion.
SECTION II.
Model of the Quadcopter

This section summarizes the nonlinear dynamics of the quadcopter, as well as some additional constraints that will be used throughout this paper.
A. Rigid Body Representation of a Quadcopter

Let the Cartesian position of the center of mass of a quad-copter be represented as x p = ( x ,   y ,   z ) ∈ R 3 , with respect to an inertial frame, and its orientation as x o . Using this notation, the pose of the robot will be given by x p o = ( x p ,   x o ) . The orientation can be, in general, represented using any parameterization, but the roll, pitch, yaw angles will be used here, such that x o = ( ϕ r ,   ϕ p ,   ϕ y ) ∈ S O ( 3 ) . Let the twist of the robot be represented as ξ = ( v ,   ω ) , where v = ( v x ,   v y ,   v z ) is its linear velocity, and ω = ( ω x ,   ω y ,   ω z ) its angular velocity, both in its local frame, also referred to as the body frame. The relation between the rate of change of the orientation and the angular velocity will be given by ω = E ( x o ) x ˙ o , where E ( x o ) ∈ R 3 × 3 can be derived analyzing the successive rotations that generate the parameterization. Using this expression, the relation between the body frame accelerations and both the angular velocity and angular acceleration of the robot is x ¨ o = E ˙ ( x o ) − 1 ω + E ( x o ) − 1 ω ˙ .
B. Geometric and Dynamic Parameters

For simplicity, this work will assume that the structure of the aerial robot is both rigid and symmetric, and that its center of mass is located at the geometric center of the robot, where the local robot frame is located. The mass of the robot will be considered to be m . Moreover, it will be assumed that the arms of the robot are aligned with the x and y axes of the local frame. Under this conditions, the inertia matrix I will be a diagonal matrix with its elements given by I x x , I y y and I z z . Furthermore, due to symmetry, the inertia in x and y will be the same I x x = I y v . Another assumption will be that the propellers are rigid, so that the deformation of the propeller blades generated by the material and the high velocities that the rotors generate is negligible.

The rotors will be modeled considering that the lift f j , generated by the rotation of the j t h rotor, is proportional to the square of the respective angular speed ω j and is given by f j = k ω 2 j , where k is a constant that depends on the rotor structure and is usually experimentally obtained. Thus, the magnitude of the total thrust will be f z = k ∑ 4 j = 1 ω 2 j , assuming that the four rotors have the same constant k . Its direction will be parallel to the z axis of the local frame located on the robot body, and pointing upwards. Also, the relation between the torque of the rotor τ j and the angular components (velocity and acceleration) will be given by I r ω ˙ j = τ j − b ω 2 j , where I r is the rotor moment of inertia, and b is a constant that considers the drag effect. Provided that ω ˙ j is considered small, its effect can be neglected and the torque due to drag will be equal to the torque about the z axis.
C. Dynamic Model of a Quadcopter

Setting the aforementioned parameters and assumptions, considering that the orientation of the robot with respect to the inertial frame is represented by the rotation matrix I R B ∈ S O ( 3 ) , the translational dynamics of the robot in the inertial frame is
x ¨ p = ⎡ ⎣ ⎢ 0 0 − g ⎤ ⎦ ⎥ + 1 m I R B ⎡ ⎣ ⎢ 0 0 f 1 + f 2 + f 3 + f 4 ⎤ ⎦ ⎥ + 1 m δ , (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\ddot{x}_{p}=\begin{bmatrix} 0\\ 0\\ -g\end{bmatrix}+\frac{1}{m}IR_{B}\begin{bmatrix} 0\\ 0\\ f_{1}+f_{2}+f_{3}+f_{4}\end{bmatrix}+\frac{1}{m}\delta,\tag{1}\end{equation*} where g represents the magnitude of the gravitational acceleration, and δ accomplishes for other aerodynamic effects such as the drag force that will be further discussed in section II-D . The relation between the rotation matrix I R B and the roll, pitch, yaw angles used to represent the orientation of the robot can be directly obtained, since the latter one is a well-known parameterization of the former one.

The dynamics of the rotational motion of the quadcopter can be described in the body frame as I ω ˙ + ω × I ω + τ g = τ , where τ g represents the gyroscopic forces, and τ represents the effect of the net external force. The gyroscopic forces are τ g = I r ω × ω r , where ω r = ( ω 1 − ω 2 + ω 3 − ω 4 ) e z = ω r e z represents the contribution of the angular velocities ω j created by each rotor. Each w j is parallel to the local z direction of the robot, and e z represents the unit vector in this direction. U sing the previous expressions, we get
ω ˙ = I − 1 ( − ω × I ω − I r ω × ω r + τ ) , (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\dot{\omega}=\mathcal{I}^{-1}(-\omega\times \mathcal{I}\omega-\mathcal{I}_{r}\omega\times\omega_{r}+\tau),\tag{2}\end{equation*}

which represents the second order dynamics related to the rotational motion of the aerial robot. Further details of this derivation can be found in [5] . Both (1) and (2) fully describe the dynamics of the quadcopter.
D. Other Aerodynamic Effects

The so-called aerodynamic effects originate due to the motion of the robot in the air and are usually difficult to model. When the quadcopter is flying, there exists a drag force that is generated by the air resistance. To model these effects, a diagonal matrix can be used to show the effect that the linear velocities have on the generated force as
δ = diag ( D x ,   D y ,   D z ) x ˙ p , (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\delta= \text{diag} (D_{x},\ D_{y},\ D_{z})\dot{x}_{p},\tag{3}\end{equation*}

where D i are the drag force coefficients corresponding to the x , y and z axis. Other effects can be included, such as the effect that the angle of attack, the blade flapping, or the airflow disruptions have on the thrust. A study of these effects, among others can be found in [5] , [6] . However, these latter effects will not be considered in the model used in this work.
E. State-Space Model

Let the control vector be u = ( f t ,   τ r ,   τ p ,   τ y ) ∈ R 4 , where f t = f 1 + f 2 + f 3 + f 4 is the resulting thrust of all the rotors and τ i is the difference of thrust between the rotors on the axis associated with i . That is, τ r considers the x axis, τ p considers the y axis, and τ y the vertical z axis. More concretely, the relation between this input vector and the angular velocity generated by each of the rotors is
f t = k ( ω 1 + ω 2 + ω 3 + ω 4 ) τ r = l k ( ω 2 4 − ω 2 2 ) τ p = l k ( ω 2 3 − ω 2 1 ) τ y = b ( ω 2 1 − ω 2 9 + ω 2 3 − ω 2 4 ) , (4) (5) (6) (7)
View Source Right-click on figure for MathML and additional features. \begin{align*} &f_{t}=k(\omega_{1}+\omega_{2}+\omega_{3}+\omega_{4})\tag{4}\\ &\tau_{r}=lk(\omega_{4}^{2}-\omega_{2}^{2})\tag{5}\\ &\tau_{p}=lk(\omega_{3}^{2}-\omega_{1}^{2})\tag{6}\\ &\tau_{y}=b(\omega_{1}^{2}-\omega_{9}^{2}+\omega_{3}^{2}-\omega_{4}^{2}),\tag{7}\end{align*} where l is the distance from the center of the robot to each of the rotors, since symmetry of the quadcopter has been assumed ( section II-B ). Let the state vector of the robot be x = ( x p , x ˙ p ,   x o , x ˙ o ) ∈ R 12 , such that the nonlinear dynamics can be represented as
x ˙ = f ( x ,   u ) . (8)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\boldsymbol{\dot{x}}=\boldsymbol{f(x,\ u)}.\tag{8}\end{equation*}

It is possible that (8) depends on t , but since the dynamics of the aerial robot does not have a direct dependency on t , this variable is not considered. Expanding the terms shown in (1) and (2), it can be shown that the terms in (8) are
x ¨ y ¨ z ¨ ϕ ˙ r ϕ ˙ p ϕ ˙ y ϕ ¨ r ϕ ¨ p ϕ ¨ y = f t m ( s 1 s 3 + c 1 c 3 s 2 ) − D x m x ˙ = f t m ( c 1 s 3 s 2 − c 3 s 1 ) − D y m y ˙ = − g + f t m c 1 c 2 − D z m z ˙ = ϕ ˙ r + ϕ ˙ y c 1 t 2 + ϕ ˙ p s 1 t 2 = ϕ ˙ p c 1 − ϕ ˙ y s 1 = ϕ ˙ y c 1 c 2 + ϕ ˙ p s 1 c 2 = I y y − I z z I x x ϕ ˙ y ϕ ˙ p − I r I x x ϕ ˙ p w r + τ r I x x = I z z − I x x I y y ϕ ˙ r ϕ ˙ y + I r I y y ϕ ˙ r w r + τ p I y y = I x x − I y y I z z ϕ ˙ r ϕ ˙ p + τ y I z z
View Source Right-click on figure for MathML and additional features. \begin{align*}\ddot{x} &=\frac{f_{t}}{m}\left(s_{1} s_{3}+c_{1} c_{3} s_{2}\right)-\frac{D_{x}}{m} \dot{x} \\\ddot{y} &=\frac{f_{t}}{m}\left(c_{1} s_{3} s_{2}-c_{3} s_{1}\right)-\frac{D_{y}}{m} \dot{y} \\\ddot{z} &=-g+\frac{f_{t}}{m} c_{1} c_{2}-\frac{D_{z}}{m} \dot{z} \\\dot{\phi}_{r} &=\dot{\phi}_{r}+\dot{\phi}_{y} c_{1} t_{2}+\dot{\phi}_{p} s_{1} t_{2} \\\dot{\phi}_{p} &=\dot{\phi}_{p} c_{1}-\dot{\phi}_{y} s_{1}\\\dot{\phi}_{y}&=\dot{\phi}_{y} \frac{c_{1}}{c_{2}}+\dot{\phi}_{p} \frac{s_{1}}{c_{2}} \\\ddot{\phi}_{r}&=\frac{I_{y y}-I_{z z}}{I_{x x}} \dot{\phi}_{y} \dot{\phi}_{p}-\frac{I_{r}}{I_{x x}} \dot{\phi}_{p} w_{r}+\frac{\tau_{r}}{I_{x x}} \\\ddot{\phi}_{p}&=\frac{I_{z z}-I_{x x}}{I_{y y}} \dot{\phi}_{r} \dot{\phi}_{y}+\frac{I_{r}}{I_{y y}} \dot{\phi}_{r} w_{r}+\frac{\tau_{p}}{I_{y y}} \\\ddot{\phi}_{y}&=\frac{I_{x x}-I_{y y}}{I_{z z}} \dot{\phi}_{r} \dot{\phi}_{p}+\frac{\tau_{y}}{I_{z z}}\end{align*} where c i = cos ( ϕ i ) , s i = sin ( ϕ i ) , t i = tan ( ϕ i ) , i = 1 refers to ϕ r , i = 2 refers to ϕ p , and i = 3 refers to ϕ y .

SECTION III.
Trajectory Generation for the Quadcopter

The problem that needs to be solved consists in allowing the robot to pass through different waypoints in minimum time. Each waypoint is a ‘gate’ that resembles an ellipse with additional geometric constraints, which impose bounds in the robot position and orientation. Each of the trajectories between a waypoint will be called a ‘phase’ of the motion and, thus, the motion will be decomposed into P phases.
A. Minimum Time Optimal Control Problem

A multiple-phase optimal control problem will be formulated to generate the motion of the quadcopter. Since the system is composed of P phases, let each phase be represented as p ∈ { 1 ,   ⋯ ,   P } . For a given p phase, the problem consists in finding the state x ( p ) ( t ) , control, u ( p ) ( t ) , initial time, t ( p ) 0 , and final time t ( p ) f . Provided that the goal of the robot motion consists in allowing the robot to pass through different waypoints in a given order as fast as possible, the nominal optimal control problem will be formulated as
  min ∑ p = 1 P ∫ t ( p ) f t ( p ) 0 d t s.t. x ˙ ( p ) = f ( p ) ( x ( p ) , u ( p ) ) , p = 1 , … , P (9)
View Source Right-click on figure for MathML and additional features. \begin{align*} &\quad\qquad\quad\qquad\ \min \sum_{p=1}^{P} \int_{t_{0}^{(p)}}^{t_{f}^{(p)}} d t\\ &\text{s.t.}\tag{9}\\ &\dot{\boldsymbol{x}}^{(p)}=\boldsymbol{f}^{(p)}\left(\boldsymbol{x}^{(p)}, \boldsymbol{u}^{(p)}\right), \quad p=1, \ldots, P\end{align*} where f ( p ) represents the nonlinear dynamic constraints (8) that the robot imposes in each phase. Expanding the sum and the integral of the cost function, it can be shown that they simplify to the final time t f ; that is, the problem has a fixed initial time but the final time t f is free. If energy was also to be minimized, an approach similar to [7] could be used.

B. Constraints on the Control and the States

The system in (9) needs to be bounded to withstand the control and state limits of the quadcopter, and to generate feasible motion. The bounds for the control can be stated as
u – – i ≤ u i ≤ u ¯ ¯ ¯ i , (10)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\underline{u}_{i}\leq u_{i}\leq\overline{u}_{i},\tag{10}\end{equation*} where u – – i and u ¯ ¯ ¯ i are the lower and upper bounds of the i t h component of the control vector, respectively. The lower bound on u 1 = f t in (4), which is the thrust, is zero, provided that we consider the robot to have fixed rotors and propellers. Its upper bound is approximated as 4 k ω 2 m a x , considering that ω m a x is the maximum speed that each rotor can generate under normal circumstances. The upper and lower bounds for u 2 = τ r and u 3 = τ p , in (5) and (6) respectively, are ± 4 k l ω 2 m a x . The last control input u 4 = τ y , given by (7), is lower and upper bounded using ± 2 b ω 2 m a x .

The bounds on the states are mathematically formulated in a similar way, leading to
x – – i ≤ x i ≤ x ¯ ¯ ¯ x , (11)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\underline{x}_{i}\leq x_{i}\leq\overline{x}_{x},\tag{11}\end{equation*} where x – – i and x ¯ ¯ ¯ i are the lower and upper bounds of the i t h component of the state, respectively. These bounds are experimentally obtained and may vary according to the intended motion for the robot. The initial conditions for the aerial robot force the robot to be at rest at the very beginning of the first phase; that is, there will be no linear or angular velocities, and the robot will lie at the start point of the first gate. The rest of the phases consider that the position of the quadcopter starts at the center of the respective gate, with a small tolerance of ε m , and that its orientation is set to comply with the geometric constraints of the respective gate. There are no constraints on the linear or angular velocities, so that the optimizer is free to set them according to the needs.

C. Conic Velocity Constraints at the Gates

The optimal control problem shown in (9), considering the constraints imposed by (10) and (11), allows the robot to reach each gate with a given pose in minimum time. However, this problem does not impose any restriction that forces the robot to actually pass through the gate. That is, once the robot reaches the desired pose at the gate, it might detour from it, if that motion locally minimizes time.
Fig. 1. - Environment of the robot showing the gates that it should traverse in a given direction. The simulated robot is shown at the bottom.
Fig. 1.

Environment of the robot showing the gates that it should traverse in a given direction. The simulated robot is shown at the bottom.

Show All

To enforce the robot pass through the gate, a velocity cone is imposed on the motion once it reaches the desired pose at the respective gate. This cone is generated using c i = v ^ i ⋅ n i , where v ^ i is the normalized velocity that the robot has when reaching gate i , and n i is the normal to the gate pointing in the desired direction of motion. Then, the resulting c i is bounded to some limits to generate the cone that will enforce the velocity to lie within this limits, allowing the robot to locally have the desired direction. This constraint is imposed only when the robot arrives to the gate.
SECTION IV.
Experimental Setup

For the experiments, the nonlinear dynamics of the quad-copter have been used within an environment created in Python. In this environment, all the gates lie at approximately the same distance, but their orientations are arbitrary, as shown in Fig. 1 . The robot has to then pass through all the gates, without collisions, and in minimum time, since the environment simulates the so-called drone races. The desired position of the quadcopter is assumed to be at the center of each gate, and the initial control input allows the robot to hover. The constraints that are imposed on the control inputs depend on the chosen parameters for the model and in this case they are u 1 ∈ [ 0 , 45 ] , u 2 = u 3 ∈ [ − 6 , 6 ] and u 4 ∈ [ − 2.5 , 2.5 ] . The states are bounded so that each element in x p and x ˙ p is in the interval [-15, 15]. The roll and pitch angles are bounded by ± 90 ∘ , the yaw angle by ± 180 ∘ , and the angular rate x ˙ o is bounded by ± 0.9 ∘ / s .

The minimum-time optimal control problem formulated in (9), considering the constraints given by (10) and (11), was solved using a numeric approach in CasADi [8] within Python. Additional constraints were imposed on the velocities of the robot when it reached the desired gate, as stated in section III-C , using 0.9 as an experimental threshold for the cone. The optimization problem was solved in around three minutes considering the 6 gates shown in Fig. 1 , each of which adds a geometric constraint to the robot motion as a new target position and orientation. Due to the computational complexity, this planner cannot be used in real time; the whole trajectory of the robot to be planned ahead.

The generated motion obtained using the proposed approach is depicted in Fig. 2 , which shows the positions x p of the robot as well as the linear velocities xp for four seconds, which is the duration of the motion. Each color shows a phase of the motion and the point where the color change occurs depicts the presence of a gate. As shown, the position changes are smooth, as well as the linear velocity in x and y . There are some fast changes in z , which could be further constrained in the formulation of the optimal control problem. However, all the velocities lie within the restricted limits.
Fig. 2. - Generated cartesian positions (in meters) and linear velocities (in m/s) of the quadcopter. The horizontal axis shows the time in seconds.
Fig. 2.

Generated cartesian positions (in meters) and linear velocities (in m/s) of the quadcopter. The horizontal axis shows the time in seconds.

Show All

Fig. 3 shows the generated control inputs, as specified by (4), (5), (6), (7). Some of the components have abrupt changes due to the fast velocity and acceleration profile that is needed to allow for the maneuvers of the quadcopter satisfying the dynamics of the robot. The color of the segment indicates the phase of the motion. Fig. 4 shows the generated motion as well as the velocity constraining cones at the gates. The robot passes through the gates minimizing the total time.
SECTION V.
Conclusion

This paper has presented a solution to the trajectory generation problem of a quadcopter moving through arbitrary gates using a minimum-time optimal control approach. The optimization takes into account the limits of the quadcopter so as to generate feasible motion. In order to enforce the robot motion through the constraining gates, the proposed approach introduces cones that limit the velocity vector as inequality constraints. The results show that the quadcopter has been able to properly move through the constrained environment. Future work involves reducing the computation time as well as adding other constraints to the motion.
Fig. 3. - Control outputs applied to the quadcopter. The horizontal axis shows the time in seconds
Fig. 3.

Control outputs applied to the quadcopter. The horizontal axis shows the time in seconds

Show All
Fig. 4. - Generated trajectory for the quadcopter. The velocity constraining cones are shown for each of the gates.
Fig. 4.

Generated trajectory for the quadcopter. The velocity constraining cones are shown for each of the gates.

Show All

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Design and experimental verification of a Constrained Finite Time Optimal control scheme for the attitude control of a Quadrotor Helicopter subject to wind gusts

2010 IEEE International Conference on Robotics and Automation

Published: 2010
Hybrid control for aggressive maneuvering of autonomous aerial vehicles

19th DASC. 19th Digital Avionics Systems Conference. Proceedings (Cat. No.00CH37126)

Published: 2000
Show More
References
1. J. Shahmoradi, E. Talebi, P. Roghanchi and M. Hassanalian, "A comprehensive review of applications of drone technology in the mining industry", Drones , vol. 4, no. 3, pp. 34, 2020.
Show in Context CrossRef Google Scholar
2. S. Watkins, J. Burry, A. Mohamed, M. Marino, S. Prudden, A. Fisher, et al., "Ten questions concerning the use of drones in urban environments", Building and Environment , 2020.
Show in Context CrossRef Google Scholar
3. A. Loquercio, E. Kaufmann, R. Ranftl, A. Dosovitskiy, V. Koltun and D. Scaramuzza, "Deep drone racing: From simulation to reality with domain randomization", IEEE Transactions on Robotics , pp. 1-14, 2019.
Show in Context Google Scholar
4. J. Delmerico, T. Cieslewski, H. Rebecq, M. Faessler and D. Scaramuzza, "Are we ready for autonomous drone racing? the uzh-fpv drone racing dataset", 2019 Int. Conf. on Robotics and Automation , 2019.
Show in Context View Article Full Text: PDF (1812) Google Scholar
5. G. Hoffmann, H. Huang, S. Waslander and C. Tomlin, "Quadrotor helicopter flight dynamics and control: Theory and experiment", AIAA guidance navigation and control conference and exhibit , pp. 6461, 2007.
Show in Context CrossRef Google Scholar
6. H. Huang, G. M. Hoffmann, S. L. Waslander and C. J. Tomlin, "Aero-dynamics and control of autonomous quadrotor helicopters in aggressive maneuvering", IEEE Int. Conf. on Robotics and Automation , 2009.
Show in Context Google Scholar
7. O. E. Ramos, "Optimal control for time and energy minimization in the trajectory generation of a mobile robot", 2019 IEEE XXVI Int. Conf. on Electronics Electrical Engineering and Computing , 2019.
Show in Context View Article Full Text: PDF (214) Google Scholar
8. J. A. E. Andersson, J. Gillis, G. Horn, J. B. Rawlings and M. Diehl, "CasADi - A software framework for nonlinear optimization and optimal control", Mathematical Programming Computation , vol. 11, no. 1, 2019.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
