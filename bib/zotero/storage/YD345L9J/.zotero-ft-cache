IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Processing math: 100%

Skip to Main Content
Scheduled Maintenance: On Tuesday, April 19, IEEE Xplore will undergo scheduled maintenance from 1:00-5:00pm ET. During this time, there may be intermittent impact on performance. We apologize for any inconvenience.

    IEEE.org
    IEEE Xplore
    IEEE-SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2011 IEEE International Confe...
Minimum snap trajectory generation and control for quadrotors
Publisher: IEEE
Cite This
PDF
  << Results    |   < Previous    |    Next >  
Daniel Mellinger ; Vijay Kumar
All Authors
View Document
938
Paper
Citations
11
Patent
Citations
20036
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Model
    III.
    Differential Flatness
    IV.
    Control
    V.
    Trajectory Generation

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Media
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: We address the controller design and the trajectory generation for a quadrotor maneuvering in three dimensions in a tightly constrained setting typical of indoor environm... View more
Metadata
Abstract:
We address the controller design and the trajectory generation for a quadrotor maneuvering in three dimensions in a tightly constrained setting typical of indoor environments. In such settings, it is necessary to allow for significant excursions of the attitude from the hover state and small angle approximations cannot be justified for the roll and pitch. We develop an algorithm that enables the real-time generation of optimal trajectories through a sequence of 3-D positions and yaw angles, while ensuring safe passage through specified corridors and satisfying constraints on velocities, accelerations and inputs. A nonlinear controller ensures the faithful tracking of these trajectories. Experimental results illustrate the application of the method to fast motion (5-10 body lengths/second) in three-dimensional slalom courses.
Published in: 2011 IEEE International Conference on Robotics and Automation
Date of Conference: 9-13 May 2011
Date Added to IEEE Xplore : 15 August 2011
ISBN Information:
ISSN Information:
INSPEC Accession Number: 12315807
DOI: 10.1109/ICRA.2011.5980409
Publisher: IEEE
Conference Location: Shanghai, China
Contents
SECTION I.
Introduction

The last decade has seen many exciting developments in the area of micro Unmanned Aerial Vehicles that are between 0.1–0.5 meters in length and 0.1–0.5 kilograms in mass [1] . In particular, there has been extensive work on multi-rotor aircrafts, with many recent advances in the design [2] , control [3] and planning [4] for quadrotors, rotorcrafts with four rotors. Our focus in this paper is on the modeling, controller design, and trajectory generation for quadrotors.

Most of the work in this area uses controllers that are derived from linearization of the model around hover conditions and are stable only under reasonably small roll and pitch angles [5] . Exploring the full state space using reachability algorithms [6] , incremental search techniques [7] or LQR-tree-based searches [8] is impractical for a dynamic system with six degrees of freedom. Some work in this area has addressed aerobatic maneuvers [3] , [6] , [9] , [10] . However, there are no stability and convergence guarantees when the attitude of the rotor craft deviates substantially from level hover conditions. While machine learning techniques have been successful in learning models using data from human pilots [9] and in improving performance using reinforcement learning [3] , these approaches do not appear to lend themselves to motion planning or trajectory generation in environments with obstacles. Similar problems have been addressed using model predictive control (MPC) [11] , [12] . With these approaches, guarantees of convergence are only available when the linearized model is fully controllable [12] or if a control Lyapunov function can be synthesized [13] . As such it appears to be difficult to directly apply such techniques to the trajectory generation of a quadrotor.

In this paper, we address the controller design and the trajectory generation for a quadrotor maneuvering in three-dimensions in a tightly constrained setting typical of indoor environments. In such settings, it is necessary to develop flight plans that leverage the dynamics of the system instead of simply viewing the dynamics as a constraint on the system. It is necessary to relax small angle assumptions and allow for significant excursions from the hover state. We develop an algorithm that enables the generation of optimal trajectories through a series of keyframes or waypoints in the set of positions and orientations, while ensuring safe passage through specified corridors and satisfying constraints on achievable velocities, accelerations and inputs.
Fig. 1: - The flat outputs and the reference frames
Fig. 1: The flat outputs and the reference frames

Show All

SECTION II.
Model

The coordinate systems including the world frame, {\cal W} , and body frame, {\cal B} , as well as the propeller numbering convention for the quadrotor are shown in Fig. 1 . Because we want to control attitudes that represent large deviations from hover, to avoid singularities we use rotation matrices to represent frame orientations. We also use Z-X-Y Euler angles to define the roll, pitch, and yaw angles (\phi, \theta) , and \psi) as a local coordinate system. The rotation matrix from {\cal B} to {\cal W} is given by W_{R_{B}}={W}_{R_{C}}C_{R_{B}} where WR_{C} represents the yaw rotation to the intermediate frame {\cal C} and C_{R_{B}} represents the effect of roll and pitch. The angular velocity of the robot is denoted by \omega_{{\cal B}{\cal W}} , denoting the angular velocity of frame {\cal B} in the frame {\cal W} , with components p, q , and r in the body frame: \omega_{B{\cal W}}=p{\rm x}_{B}+q{\rm y}_{B}+r{\rm z}_{B}. \eqno{\hbox{(1)}}
View Source Right-click on figure for MathML and additional features. \omega_{B{\cal W}}=p{\rm x}_{B}+q{\rm y}_{B}+r{\rm z}_{B}. \eqno{\hbox{(1)}}

These values can be directly related to the derivatives of the roll, pitch, and yaw angles.

Each rotor has an angular speed \omega_{i} and produces a force, F_{i} , and moment, M_{i} , according to F_{i}=k_{P}\omega_{i}^{2}, M_{i}=k_{M}\omega_{i}^{2}
View Source Right-click on figure for MathML and additional features. F_{i}=k_{P}\omega_{i}^{2}, M_{i}=k_{M}\omega_{i}^{2} .

In practice, the motor dynamics are relatively fast compared to the rigid body dynamics and the aerodynamics so for the controller development in this work we assume they can be instantaneously achieved. Therefore the control input to the system can be written as {u} where u_{1} is the net body force u_{2}, u_{3}, u_{4} are the body moments which can be expressed according to the rotor speeds as {\rm u}={\left[\matrix{k_{F} & k_{F} & k_{F} & k_{F} \cr 0& k_{F}L & 0 & - k_{F}L\cr -k_{F}L & 0 & k_{F}L & 0\cr k_{M} & -k_{M} & k_{M} & -k_{M}}\right]}{\left[\matrix{\omega_{1}^{2} \cr \omega^{2}_{2} \cr \omega_{3}^{2} \cr \omega_{4}^{2}}\right]}, \eqno{\hbox{(2)}}
View Source Right-click on figure for MathML and additional features. {\rm u}={\left[\matrix{k_{F} & k_{F} & k_{F} & k_{F} \cr 0& k_{F}L & 0 & - k_{F}L\cr -k_{F}L & 0 & k_{F}L & 0\cr k_{M} & -k_{M} & k_{M} & -k_{M}}\right]}{\left[\matrix{\omega_{1}^{2} \cr \omega^{2}_{2} \cr \omega_{3}^{2} \cr \omega_{4}^{2}}\right]}, \eqno{\hbox{(2)}} , where L is the distance from the axis of rotation of the rotors to the center of the quadrotor.

The position vector of the center of mass in the world frame is denoted by {r} . The forces on the system are gravity, in the -z_{W} direction, and the sum of the forces from each of the rotors, u_{1} , in the z_{B} direction. Newton's equations of motion governing the acceleration of the center of mass are m\ddot{\rm r}=-mg{\rm z}_{W}+u_{1^{\rm Z}B}.\eqno{\hbox{(3)}}
View Source Right-click on figure for MathML and additional features. m\ddot{\rm r}=-mg{\rm z}_{W}+u_{1^{\rm Z}B}.\eqno{\hbox{(3)}}

The angular acceleration determined by the Euler equations is \eqalignno{\dot{\omega}_{{\cal B}{\cal W}}={\cal I}^{-1}{\left[-\omega_{{\cal B}{\cal W}}\times {\cal I}\omega_{{\cal B}{\cal W}}+\left[\matrix{u_{2}\cr u_{3}\cr u_{4}}\right]\right]} &\hbox{(4)}}
View Source Right-click on figure for MathML and additional features. \eqalignno{\dot{\omega}_{{\cal B}{\cal W}}={\cal I}^{-1}{\left[-\omega_{{\cal B}{\cal W}}\times {\cal I}\omega_{{\cal B}{\cal W}}+\left[\matrix{u_{2}\cr u_{3}\cr u_{4}}\right]\right]} &\hbox{(4)}} where {\cal I} is the moment of inertia matrix referenced to the center of mass along the x_{B}-y_{B}-z_{B} axes. The state of the system is given by the position and velocity of the center of mass and the orientation (locally parameterized by Euler angles) and the angular velocity: {\rm x}=[x, y, z, \phi, \theta, \psi,\dot{x},\dot{y},\dot{z},p, q, r]^{T}
View Source Right-click on figure for MathML and additional features. {\rm x}=[x, y, z, \phi, \theta, \psi,\dot{x},\dot{y},\dot{z},p, q, r]^{T} , or without the parameterization by the the position and velocity of the center of mass and the rotation matrix WR_{B} and the angular velocity \omega_{{\cal B}{\cal W}} .

SECTION III.
Differential Flatness

In this section we show that the quadrotor dynamics with the four inputs is differentially flat [14] . In other words, the states and the inputs can be written as algebraic functions of four carefully selected flat outputs and their derivatives. This facilitates the automated generation of trajectories since any smooth trajectory (with reasonably bounded derivatives) in the space of flat outputs can be followed by the underactuated quadrotor. Our choice of flat outputs is given by \sigma=[x, y, z, \psi]^{T}
View Source Right-click on figure for MathML and additional features. \sigma=[x, y, z, \psi]^{T} , where {\rm r}=[x, y, z]^{T} are the coordinates of the center of mass in the world coordinate system and \psi is the yaw angle. We will define a trajectory, \sigma(t) , as a smooth curve in the space of flat outputs: \sigma(t): [t_{0}, t_{m}]\rightarrow {\BBR}^{3}\times SO(2). \eqno{\hbox{(5)}}
View Source Right-click on figure for MathML and additional features. \sigma(t): [t_{0}, t_{m}]\rightarrow {\BBR}^{3}\times SO(2). \eqno{\hbox{(5)}}

We will now show that the state of the system and the control inputs can be written in terms of \sigma and its derivatives.

The position, velocity and acceleration of the center of mass are simply the first three terms of \sigma,\dot{\sigma} , and \ddot{\sigma} , respectively. To see that W_{R_{B}} is a function of the flat outputs and their derivatives, consider the equation of motion (3) . From (3) . {\rm z}_{B}={{{\rm t}}\over{\Vert {\rm t}\Vert}}, {\rm t}=[\ddot{\sigma}_{1},\ddot{\sigma}_{2},\ddot{\sigma}_{3}+g]^{T}, \eqno{\hbox{(6)}}
View Source Right-click on figure for MathML and additional features. {\rm z}_{B}={{{\rm t}}\over{\Vert {\rm t}\Vert}}, {\rm t}=[\ddot{\sigma}_{1},\ddot{\sigma}_{2},\ddot{\sigma}_{3}+g]^{T}, \eqno{\hbox{(6)}} which defines the body frame z axis of the quadrotor. Given the yaw angle, \sigma_{4}=\psi , we can write the unit vector {\rm x}_{C}=[\cos\sigma_{4}, \sin\sigma_{4},0]^{T}
View Source Right-click on figure for MathML and additional features. {\rm x}_{C}=[\cos\sigma_{4}, \sin\sigma_{4},0]^{T} , as shown in Figure 1 . We can determine {\rm x}_{B} and {\rm y}_{B} as follows: {\rm y}_{B}={{{\bf Z}_{B}\times {\bf X}_{C}}\over{\Vert {\bf Z}_{B}\times {\bf X}_{C}\Vert}}, {\bf X}_{B}={\bf Y}_{B}\times {\bf Z}_{B}
View Source Right-click on figure for MathML and additional features. {\rm y}_{B}={{{\bf Z}_{B}\times {\bf X}_{C}}\over{\Vert {\bf Z}_{B}\times {\bf X}_{C}\Vert}}, {\bf X}_{B}={\bf Y}_{B}\times {\bf Z}_{B} , provided {\rm x}_{C}\times {\rm z}_{B}\neq 0 . In other words, we can uniquely determine W_{R_{B}}=[{\rm x}_{B}\ {\rm y}_{B} \ {\rm z}_{B}]
View Source Right-click on figure for MathML and additional features. W_{R_{B}}=[{\rm x}_{B}\ {\rm y}_{B} \ {\rm z}_{B}] provided we never encounter the singularity where {\rm z}_{B} is parallel 1 to {\rm x}_{C} .

To show the angular velocity is a function of the flat outputs and their derivatives, take the first derivative of (3) : m\dot{{\rm a}}=\dot{u}_{1}{\rm z}_{B}+\omega_{{\cal B}{\cal W}}\times u_{1}{\rm z}_{B}. \eqno{\hbox{(7)}}
View Source Right-click on figure for MathML and additional features. m\dot{{\rm a}}=\dot{u}_{1}{\rm z}_{B}+\omega_{{\cal B}{\cal W}}\times u_{1}{\rm z}_{B}. \eqno{\hbox{(7)}}

Projecting this expression along z_{B} , and using the fact that \dot{u}_{1}={\rm z}_{B}\cdot m\dot{{\rm a}} , we can substitute \dot{u}_{1} into (7) to define the vector {\rm h}_{\omega} as {\rm h}_{\omega}=\omega_{{\cal B}{\cal W}}\times {\rm z}_{B}={m\over u_{1}}(\dot{{\rm a}}-({\rm z}_{B}\cdot\dot{{\rm a}}){\rm z}_{B})
View Source Right-click on figure for MathML and additional features. {\rm h}_{\omega}=\omega_{{\cal B}{\cal W}}\times {\rm z}_{B}={m\over u_{1}}(\dot{{\rm a}}-({\rm z}_{B}\cdot\dot{{\rm a}}){\rm z}_{B}) .

{\rm h}_{\omega} is the projection of {m\over u_{1}} \dot{a} onto the x_{B}-y_{B} plane. If we write the body frame components of angular velocity as in (1) the components p and q are found as p=-{\rm h}_{\omega}\cdot {\rm y}_{B}, q={\rm h}_{\omega}\cdot {\rm x}_{B}
View Source Right-click on figure for MathML and additional features. p=-{\rm h}_{\omega}\cdot {\rm y}_{B}, q={\rm h}_{\omega}\cdot {\rm x}_{B} .

The third component r is found by simply writing \omega_{BW}=\omega_{BC}+\omega_{CW} and observing that \omega_{BC} has no z_{B} component: r=\omega_{CW}\cdot {\rm z}_{B}=\dot{\psi}{\rm z}_{W}\cdot {\rm z}_{B}
View Source Right-click on figure for MathML and additional features. r=\omega_{CW}\cdot {\rm z}_{B}=\dot{\psi}{\rm z}_{W}\cdot {\rm z}_{B} .

The components of the angular acceleration \alpha_{{\cal B}{\cal W}} along x_{B} and y_{B} are found by computing the second of derivative of (3) and following the same procedure as above. To find the z_{B} component of \alpha_{{\cal B}{\cal W}} we use the fact that \alpha_{{\cal B}{\cal W}}=\alpha_{BC}+\omega_{CW}\times\omega_{BC}+\alpha_{CW}
View Source Right-click on figure for MathML and additional features. \alpha_{{\cal B}{\cal W}}=\alpha_{BC}+\omega_{CW}\times\omega_{BC}+\alpha_{CW} , and note \alpha_{BC}\cdot {\rm z}_{B}=0 and {\rm z}_{B}\cdot\omega_{CW}\times\omega_{BC}=0 . The z_{B} components of \alpha_{{\cal B}{\cal W}} is \alpha_{B{\cal W}}\cdot {\rm z}_{B}=\alpha_{CW}\cdot {\rm z}_{B}=\ddot{\psi}{\rm z}_{W}\cdot {\rm z}_{B}
View Source Right-click on figure for MathML and additional features. \alpha_{B{\cal W}}\cdot {\rm z}_{B}=\alpha_{CW}\cdot {\rm z}_{B}=\ddot{\psi}{\rm z}_{W}\cdot {\rm z}_{B} .

The net thrust from the quadrotor propellers is seen to be a direct function of the flat outputs and their derivatives from (3) , (6) , u_{1}=m\Vert {\rm t}\vert . Given that the angular velocity and acceleration are functions of the flat outputs and their derivatives we use the Euler equations (4) to compute the inputs u_{2}, u_{3} , and u_{4} .
SECTION IV.
Control

We now present a controller to follow specified trajec-tories, \sigma_{T}(t)=[{\rm r}_{T}(t)^{T}, \psi_{T}(t)]^{{T}} . This controller is similar to the one in our previous work [15] with some exceptions that will be pointed out later. First we define the errors on position and velocity as {\rm e}_{p}={\rm r}-{\rm r}_{T}, {\rm e}_{v}=\dot{{\rm r}}-\dot{{\rm r}}_{T}
View Source Right-click on figure for MathML and additional features. {\rm e}_{p}={\rm r}-{\rm r}_{T}, {\rm e}_{v}=\dot{{\rm r}}-\dot{{\rm r}}_{T} .

Next we compute the desired force vector for the controller and the desired body frame z axis: {\rm F}_{des}=-K_{p}{\rm e}_{p}-K_{v}{\rm e}_{v}+mgx_{W}+m\ddot{{\rm r}}_{T}
View Source Right-click on figure for MathML and additional features. {\rm F}_{des}=-K_{p}{\rm e}_{p}-K_{v}{\rm e}_{v}+mgx_{W}+m\ddot{{\rm r}}_{T} , where K_{p} and K_{v} are positive definite gain matrices. Note that here we assume \Vert {\rm F}_{des}\Vert\neq 0 . Next we project the desired force vector onto the actual body frame z axis in order to compute the desired force for the quadrotor and the first input: u_{1}={\rm F}_{des}\cdot {\rm z}_{B}
View Source Right-click on figure for MathML and additional features. u_{1}={\rm F}_{des}\cdot {\rm z}_{B} .

To determine the other three inputs, we must consider the rotation errors. First, we observe that the desired z_{B} direction is along the desired thrust vector: {\rm z}_{B, {des}} ={{\rm F}_{des}\over {\Vert {\rm F}_{des}\vert}}
View Source Right-click on figure for MathML and additional features. {\rm z}_{B, {des}} ={{\rm F}_{des}\over {\Vert {\rm F}_{des}\vert}} .

Thus if e3 =[0,0,1]^{T} , the desired rotation W_{R_{B}} denoted by R_{des} for brevity is given by: R_{des}{\rm e}_{3}={\rm z}_{B,des}
View Source Right-click on figure for MathML and additional features. R_{des}{\rm e}_{3}={\rm z}_{B,des} .

Knowing the specified yaw angle along the trajectory, \psi_{T}(t) , we compute {\rm x}_{B}, {des} and {\rm y}_{B,des} as in the previous section: {\rm x}_{C}, {des} =[\cos\psi\tau, \sin\psi\tau, 0]^{T}
View Source Right-click on figure for MathML and additional features. {\rm x}_{C}, {des} =[\cos\psi\tau, \sin\psi\tau, 0]^{T} , and {\rm y}_{B, des}={{{\bf Z}_{B,des}\times {\bf X}_{C,des}}\over{\Vert {\bf Z}_{B,des}\times {\bf X}_{C,des}\Vert}}, {\bf X}_{B, des}={\bf y}_{B, {des}} \times {\bf Z}_{B, {des}} provided {\rm x}_{C}, {des} \times {\rm Z}_{B, {des}} \neq 0 . This defines the desired rotation matrix R_{des} . While mathematically this singularity is a single point in so (3) , this computation results in large changes in the unit vectors in the neighborhood of the singularity. To fix this problem, we observe that -{\rm x}_{B}, {des} and -{\rm y}_{B,des} are also consistent with the desired yaw angle and body frame z axis. In practice we simply check which one of the solutions is closer to the actual orientation of the quadrotor in order to calculate the desired orientation, R_{d{\rm e}s} .

Next we define the error on orientation: {\rm e}_{R}={1\over 2}(R_{des}^{T}W_{R_{B}}-{W}_{R_{B}^{T}R_{des}})^{\vee}
View Source Right-click on figure for MathML and additional features. {\rm e}_{R}={1\over 2}(R_{des}^{T}W_{R_{B}}-{W}_{R_{B}^{T}R_{des}})^{\vee} where \vee represents the vee map which takes elements of so (3) to {\BBR}^{3} . This is the major departure from [15] where the angular errors were computed using the small angle assumption.

The angular velocity error is simply the difference between the actual and desired angular velocity in body frame coordinates: {\rm e}_{\omega}=B[\omega_{{\cal B}{\cal W}}]-B[\omega_{{\cal B}{\cal W},T}]
View Source Right-click on figure for MathML and additional features. {\rm e}_{\omega}=B[\omega_{{\cal B}{\cal W}}]-B[\omega_{{\cal B}{\cal W},T}] .

Now the desired moments and the three remaining inputs are computed as follows: [u_{2}, u_{3},u_{4}]^{T}=-K_{R}{\rm e}_{R}-K_{\omega}{\rm e}_{\omega}, \eqno{\hbox{(8)}}
View Source Right-click on figure for MathML and additional features. [u_{2}, u_{3},u_{4}]^{T}=-K_{R}{\rm e}_{R}-K_{\omega}{\rm e}_{\omega}, \eqno{\hbox{(8)}} where K_{R} and K_{\omega} are diagonal gain matrices. This allows unique gains to be used for roll, pitch, and yaw angle tracking. Finally we compute the desired rotor speeds to achieve the desired {u} . In practice, this is done by inverting the linearization of (2) about \omega_{i}=\sqrt{{u_1\over 4k_{F}}} .

Note that the linearization about the hover point for this controller is the same as the controller presented in our previous work [15] . This nonlinear controller presented here adds two new important features. First, the orientation error is not based on the Euler angles which contain singularities. Second, the desired force is projected onto the actual z body axis. Proofs of stability and convergence are presented for a similar controller in [16] but with (a) the addition of feedforward terms including the angular acceleration; (b) the inclusion of feedback terms cancelling the \omega\times {\cal I}\omega in (8) ; (c) the assumption that all gain matrices are scalar multiples of the identity (e.g., K_{R}=k_{R}I) ; (d) the assumption that motor dynamics are insignificant; and (e) perfect knowledge of m and {\cal I} , Under these conditions the dynamics are exponentially stable provided the initial conditions satisfy two conditions: \eqalignno{&tr[I-R_{des}^{T}(0)^{W}R_{B}(0)]<2,\cr &\Vert {\rm e}_{\omega}(0)\Vert^{2}<{2\over \lambda_{\min}({\cal I})}k_{R}(1-{1\over 2}tr[I-R_{des}^{T}(0)^{W}R_{B}(0)]),}
View Source Right-click on figure for MathML and additional features. \eqalignno{&tr[I-R_{des}^{T}(0)^{W}R_{B}(0)]<2,\cr &\Vert {\rm e}_{\omega}(0)\Vert^{2}<{2\over \lambda_{\min}({\cal I})}k_{R}(1-{1\over 2}tr[I-R_{des}^{T}(0)^{W}R_{B}(0)]),} and almost globally exponential attractiveness of the complete dynamics with less restrictive conditions. Our realization of the controller is different and does not quite satisfy all the assumptions listed above. However, as we will see in Section VI , the controller yields good tracking performance even with very large roll and pitch angles.

SECTION V.
Trajectory Generation

We define a keyframe as a position in space along with a yaw angle. Consider the problem of navigating through m keyframes at specified times. In between each keyframe there is a safe corridor that the quadrotor must stay within. A trivial trajectory that satisfies these constraints is one that interpolates between keyframes using straight lines. However this trajectory is inefficient because it has infinite curvature at the keyframes which requires the quadrotor to come to a stop at each keyframe.

Our method generates an optimal trajectory that smoothly transitions through the keyframes at the given times while staying within safe corridors. Building on the results of Section III , we consider trajectories in the fiat output space of the form of (5) . It is convenient to write them as piecewise polynomial functions of order n over m time intervals as: \sigma_{T}(t)=\cases{\sum\nolimits_{i=0}^{n}\sigma_{Ti1}t^{i} &$ t_{0}\leq t<t_{1}$\cr \sum\nolimits_{i=0}^{n}\sigma_{Ti2}t^{i} &$ t_{1}\leq t<t_{2}$\cr \vdots \cr \sum\nolimits_{i=0}^{n}\sigma_{Tim}t^{i} &$ t_{m-1}\leq t\leq t_{m}$} \eqno{\hbox{(9)}}
View Source Right-click on figure for MathML and additional features. \sigma_{T}(t)=\cases{\sum\nolimits_{i=0}^{n}\sigma_{Ti1}t^{i} &$ t_{0}\leq t<t_{1}$\cr \sum\nolimits_{i=0}^{n}\sigma_{Ti2}t^{i} &$ t_{1}\leq t<t_{2}$\cr \vdots \cr \sum\nolimits_{i=0}^{n}\sigma_{Tim}t^{i} &$ t_{m-1}\leq t\leq t_{m}$} \eqno{\hbox{(9)}}

The reason for the choice of this basis is simple. We are interested in finding trajectories that minimize functionals which can be written using these basis functions. The optimization program to solve this problem while minimizing the integral of the k_{r}{\rm th} derivative of position squared and the k_{\psi}{\rm ht} derivative of yaw angle squared (without corridor constraints) is shown below. \min\int_{t_{0}}^{t_{m}}\mu_{r}\Vert{d^k_{r}{\rm r}_{T}\over dt^{k_{r}}}\Vert^{2}+\mu\psi{{d^{k_{\psi}}\psi_{{\rm T}}}\over{dt^{k_{\psi}}}}dt \eqno{\hbox{(10)}}
View Source Right-click on figure for MathML and additional features. \min\int_{t_{0}}^{t_{m}}\mu_{r}\Vert{d^k_{r}{\rm r}_{T}\over dt^{k_{r}}}\Vert^{2}+\mu\psi{{d^{k_{\psi}}\psi_{{\rm T}}}\over{dt^{k_{\psi}}}}dt \eqno{\hbox{(10)}}

\eqalignno{{\rm s}.{\rm t}.&\sigma_{T}(t_{i})=\sigma_{i},\quad i=0, \ldots, m \cr &{{d^{p}x_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free},\quad j=0, m;p=1, \ldots, k_{r} \cr &{{d^{p}y_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, \quad j=0, m;p=1, \ldots, k_{r}\cr &{{d^{p}z_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, \quad j=0, m;p=1, \ldots, k_{r}\cr &{d^{p}\psi_{T}\over dt^{p}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free},\quad j=0, m;p=1, \ldots, k_{\psi} }
View Source Right-click on figure for MathML and additional features. \eqalignno{{\rm s}.{\rm t}.&\sigma_{T}(t_{i})=\sigma_{i},\quad i=0, \ldots, m \cr &{{d^{p}x_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free},\quad j=0, m;p=1, \ldots, k_{r} \cr &{{d^{p}y_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, \quad j=0, m;p=1, \ldots, k_{r}\cr &{{d^{p}z_{T}}\over{dt^{p}}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, \quad j=0, m;p=1, \ldots, k_{r}\cr &{d^{p}\psi_{T}\over dt^{p}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free},\quad j=0, m;p=1, \ldots, k_{\psi} } where \mu_{r} and \mu\psi are constants that make the integrand nondimensional. Here \sigma_{T}=[x_{T}, y_{T}, z_{T}, \psi_{T}]^{T} and \alpha_{i}=[x_{i}, y_{i}, z_{i}, \psi_{i}]^{T} . We enforce continuity of the first k_{r} derivatives of \Gamma_{T} and first k_{\psi} derivatives of \psi_{T} at t_{1},\ldots, t_{m-1} .

The cost function in (10) is similar to that used by Flash and Hogan [17] who showed human reaching trajectories appear to minimize the integral of the square of the norm of the jerk (the derivative of acceleration, k_{r}=3 ). In our system, since the inputs u_{2} and u_{3} appear as functions of the fourth derivatives of the positions, we generate trajectories that minimize the integral of the square of the norm of the snap (the second derivative of acceleration, k_{r}=4 ). Since the input u_{4} appears in the second derivative of the yaw angle we use k_{\psi}=2 . The basis (9) allows us to go to higher order polynomials which can potentially allow us to satisfy different constraints on the states and the inputs.

We can formulate the problem as a quadratic program (or QP) by writing the constants \sigma_{Tij}=[x_{Tij}, y_{Tij}, z_{Tij}, \psi_{Tij}]^{T} as a 4nm\times 1 vector c with decision variables [x_{Tij}, y_{Tij}, z_{T{\rm i}j}, \psi_{Tij}\} : \eqalignno{& \min\ c^{T}Hc+f^{T}c &\hbox{(11)}\cr &{\rm s}.{\rm t}. Ac\leq b}
View Source Right-click on figure for MathML and additional features. \eqalignno{& \min\ c^{T}Hc+f^{T}c &\hbox{(11)}\cr &{\rm s}.{\rm t}. Ac\leq b}

Here the objective function incorporates the minimization of the functional while the constraints can be used to satisfy constraints on the flat outputs and their derivatives and thus constraints on the states and the inputs. A specification of an initial condition, final condition, or intermediate condition on any derivative of the trajectory (e.g., {{d^{k}x_{T}}\over{dt^{k}}}\vert _{t=t_{i}}) can be written as an equality constraint in (11) . If conditions do not need to be specified exactly then they can be represented with an inequality constraint in (11) . After computing the trajectory, the methods described in Section III can be used to calculate the angular velocities, angular accelerations, total thrust, and moments required over the entire trajectory.
A. Nondimensionalization

We note that in (10) the quantities x_{T}, y_{T}, z_{T} , and \psi_{T} are decoupled in both the cost function and the constraints so this problem can be separated into four optimization problems. We now consider a general form of the optimization problem for a nondimensional variable \tilde{w}(\tau) where \tau represents nondimensionalized time: \eqalignno{&\min \int_{0}^{1}{{d^{k}\tilde{w}(\tau)^{2}}\over{d\tau^{k}}}d\tau &\hbox{(12)}\cr &{\rm s}.{\rm t}.\ \tilde{w}(\tau_{i})=\tilde{w}_{i},\ i=0, \ldots, m\cr &{{d^{p}\tilde{w}(\tau)}\over{d\tau^{p}}}\vert _{\tau=\tau_{j}}=0\ {\rm or}\ {\rm free}, \tau_{j}=0,1;p=1, \ldots, k}
View Source Right-click on figure for MathML and additional features. \eqalignno{&\min \int_{0}^{1}{{d^{k}\tilde{w}(\tau)^{2}}\over{d\tau^{k}}}d\tau &\hbox{(12)}\cr &{\rm s}.{\rm t}.\ \tilde{w}(\tau_{i})=\tilde{w}_{i},\ i=0, \ldots, m\cr &{{d^{p}\tilde{w}(\tau)}\over{d\tau^{p}}}\vert _{\tau=\tau_{j}}=0\ {\rm or}\ {\rm free}, \tau_{j}=0,1;p=1, \ldots, k}

Next we introduce the dimensional time, t=\alpha\tau , (assuming t_{0}=0 without loss of generality) and the dimensional variable, w defined as w(t)=w(\alpha\tau)=\beta_{1}+\beta_{2}\tilde{w}(\tau)
View Source Right-click on figure for MathML and additional features. w(t)=w(\alpha\tau)=\beta_{1}+\beta_{2}\tilde{w}(\tau) .

Next we rewrite (12) using w and t : \eqalignno{&\min {\alpha^{2k-1}\over \beta_{2}}\int_{0}^{\alpha}{d^{k}w(t)\over dt^{k}}dt &\hbox{(13)}\cr &{\rm s}.{\rm t}. w(t_{i})=\beta_{1}+\beta_{2}\tilde{w}_{i},\quad i=1, \ldots, m\cr &{d^{p}w(t)\over dt^{p}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, t_{j}=0, \alpha;p=1, \ldots, k}
View Source Right-click on figure for MathML and additional features. \eqalignno{&\min {\alpha^{2k-1}\over \beta_{2}}\int_{0}^{\alpha}{d^{k}w(t)\over dt^{k}}dt &\hbox{(13)}\cr &{\rm s}.{\rm t}. w(t_{i})=\beta_{1}+\beta_{2}\tilde{w}_{i},\quad i=1, \ldots, m\cr &{d^{p}w(t)\over dt^{p}}\vert _{t=t_{j}}=0\ {\rm or}\ {\rm free}, t_{j}=0, \alpha;p=1, \ldots, k}

Note that in this problem the boundary conditions are spatially shifted by \beta_{1} and scaled by \beta_{2} and time is scaled by \alpha . Letting the optimal solution to the nondimensional problem be \tilde{w}^{\ast } the solution to the new problem is w^{\ast }(t)=\beta_{1}+\beta_{2}\tilde{w}^{\ast }(t/\alpha)
View Source Right-click on figure for MathML and additional features. w^{\ast }(t)=\beta_{1}+\beta_{2}\tilde{w}^{\ast }(t/\alpha) .

Now let's consider the nondimensional form of (10) where {\rm r}, \psi , and t are replaced by the nondimensional variables \tilde{{\rm r}},\tilde{\psi} , and \tau . One can solve four nondimensional problems by letting \tilde{{\rm r}}_{T}=[\tilde{w}_{1},\tilde{w}_{2},\bar{w} _{3}]^{T} and \tilde{\psi}_{T}=\tilde{w}_{4} . Then the optimal nondimensional solutions, \tilde{w}_{i}^{\ast }(t) , can be mapped to the optimal solutions for x_{T}, y_{T}, z_{T} , and \psi_{T} in the original problem (10) . The time scale, \alpha , is the same for each variable but the spatial transformation, \beta_{1} and \beta_{2} , can be different.
1) Temporal Scaling

If we change the time to navigate the keyframes by a factor of \alpha so that the new times to reach the keyframes are t_{i}=\alpha\tau_{i} the solution to the true problem is simply a time-scaled version of the nondimensional solution: {\rm r}_{T}^{\ast }(t)=\tilde{{\rm r}}_{T}^{\ast }(t/\alpha), \psi_{T}^{\ast }(t)=\tilde{\psi}_{T}^{\ast }(t/\alpha)
View Source Right-click on figure for MathML and additional features. {\rm r}_{T}^{\ast }(t)=\tilde{{\rm r}}_{T}^{\ast }(t/\alpha), \psi_{T}^{\ast }(t)=\tilde{\psi}_{T}^{\ast }(t/\alpha) .

As \alpha is increased the plan takes longer to execute and becomes safer . As \alpha goes to infinity all the derivatives of position and yaw angle as well as the angular velocity go to zero which leads to {\rm u}(t)\rightarrow[mg, 0,0,0]^{T}
View Source Right-click on figure for MathML and additional features. {\rm u}(t)\rightarrow[mg, 0,0,0]^{T} .

We can therefore satisfy any safety constraint by making \alpha large enough. Conversely, as \alpha is decreased the trajectory takes less time to execute, the derivatives of position increase, and the trajectory becomes more aggressive.
2) Spatial scaling

Here we describe how the spatial scaling property can be exploited for trajectories with only two keyframes. We consider a single case of the nondimensional form of (10) where \tilde{{\rm r}}_{T}(0)=0 and \tilde{{\rm r}}_{T}(1)=1 and the final velocities are specified in the same way as in the true problem. The optimal solution to the actual problem is then x_{T}^{\ast }(t)=x_{0}+(x_{1}-x_{0})\tilde{x}_{T}^{\ast }(t/t_{1})
View Source Right-click on figure for MathML and additional features. x_{T}^{\ast }(t)=x_{0}+(x_{1}-x_{0})\tilde{x}_{T}^{\ast }(t/t_{1}) , and likewise for y_{T}^{\ast }(t) and z_{T}^{\ast }(t) . This is convenient because it is faster to analytically modify a solution than to solve a QP. For this reason, this approach is useful for quickly reacting to dynamic obstacles or targets. Note that spatial scaling also applies to the problem with multiple keyframes but the property is less useful as the positions of all keyframes must be scaled by the same factor.

B. Adding corridor constraints

We will now add corridor constraints to (10) . First we define {\rm t}_{i} as the unit vector along the segment from {\rm r}_{i} to {\rm r}_{i+1} . The perpendicular distance vector, {\rm d}_{{i}}(t) , from segment i is defined as {\rm d}_{i}(t)=({\rm r}_{T}(t)-{\rm r}_{i})-(({\rm r}_{T}(t)-{\rm r}_{i})\cdot {\rm t}_{i}){\rm t}_{i}
View Source Right-click on figure for MathML and additional features. {\rm d}_{i}(t)=({\rm r}_{T}(t)-{\rm r}_{i})-(({\rm r}_{T}(t)-{\rm r}_{i})\cdot {\rm t}_{i}){\rm t}_{i} .

A corridor width on the infinity norm, \delta_{i} , is defined for each corridor: \Vert {\rm d}_{i}(t)\Vert_{\infty}\leq\delta_{i}\ {\rm while}\ t_{i}\leq t\leq t_{i+1}
View Source Right-click on figure for MathML and additional features. \Vert {\rm d}_{i}(t)\Vert_{\infty}\leq\delta_{i}\ {\rm while}\ t_{i}\leq t\leq t_{i+1} .

This constraint can be incorporated into the QP by introducing n_{c} intermediate points as \vert {{\rm x}}_{W}\cdot {\rm d}_{i}{\left(t_{i}+{j\over 1+n_{c}}(t_{i+1}-t_{i})\right)}\vert \leq\delta_{{i}}\ {\rm for}\ j=1, \ldots, n_{c}
View Source Right-click on figure for MathML and additional features. \vert {{\rm x}}_{W}\cdot {\rm d}_{i}{\left(t_{i}+{j\over 1+n_{c}}(t_{i+1}-t_{i})\right)}\vert \leq\delta_{{i}}\ {\rm for}\ j=1, \ldots, n_{c} and equivalently for {\rm y}_{W} and {\rm z}_{W} . Note that each absolute value constraint can be written as two linear constraints. The use of corridor constraints is shown in Fig. 2 . In the left figure the optimization problem is solved without any corridor constraints and in the right figure a corridor constraint is added for the 2nd segment (\delta_{2}=0.05 and n_{c}=8) . The trajectory stays within the dotted lines that illustrate the corridor.

Fig. 2: - Optimal trajectories (red) passing through 4 keyframes (black). Left: no corridor constraints. Right: corridor constraint between keyframes 2 and 3 forces changes from the unconstrained trajectory on the left
Fig. 2: Optimal trajectories (red) passing through 4 keyframes (black). Left: no corridor constraints. Right: corridor constraint between keyframes 2 and 3 forces changes from the unconstrained trajectory on the left

Show All

C. Optimal segment times

In some cases the arrival times at different keyframes is important and may be specified. However, in other cases these arrival times may not matter and we can try to find a better solution by allowing more time for some segments while taking the same amount of time away from the others. Here we describe a method for finding the optimal relative segment times for a given set of keyframes. For this part it is more convenient to think of the time allowed for segment i, T_{i} , rather than the arrival time for keyframe i, t_{i} , where T_{i}=t_{i}-t_{i-1} . We then solve the minimization problem: \eqalignno{& \min f({\rm T}) &\hbox{(14)}\cr &{\rm s}.{\rm t}. \sum T_{i}=t_{m}\cr &\qquad T_{i}\geq 0}
View Source Right-click on figure for MathML and additional features. \eqalignno{& \min f({\rm T}) &\hbox{(14)}\cr &{\rm s}.{\rm t}. \sum T_{i}=t_{m}\cr &\qquad T_{i}\geq 0} where f({\rm T}) is the solution the optimization problem (10) for segment times {\rm T}=[T_{1}, T_{2}, \ldots, T_{m}] . We solve (14) via a constrained gradient descent method. We do this by numerically computing the directional derivative for m vectors denoted by g_{i} : \nabla_{g_{i}}f={{f({\rm T}+h{\rm g}_{i})-f({\rm T})}\over{h}}
View Source Right-click on figure for MathML and additional features. \nabla_{g_{i}}f={{f({\rm T}+h{\rm g}_{i})-f({\rm T})}\over{h}} , where h is some small number. The vectors {\rm g}_{i} are constructed so that the i th element has a value of 1 and all other elements have the value {-1\over m-2} . This is done so that \sum {\rm g}_{i}=0 and {\rm g}_{i} can be added or subtracted from {T} and the final time does not change. Given the estimates of the directional derivatives we perform gradient descent using backtracking line search.

An illustration of this method for a trajectory in the x-y plane where the keyframes are points on the plane is shown in Fig. 3 . The first choice of segment times was chosen by assuming the quadrotor travels in straight line paths from keyframe to keyframe at a uniform velocity. This initial choice allocates too much time for the 2nd segment and the trajectory for this segment deviates significantly from the keyframes. The algorithm converges to an optimal solution after 7 iterations as shown in Fig. 3 . The final trajectory appears to be a very natural trajectory for passing through all keyframes which qualitatively validates the choice of the cost function.
Fig. 3: - Illustration of relative time scaling. Left: Trajectory for different iterations. Right: Cost function vs. iteration
Fig. 3: Illustration of relative time scaling. Left: Trajectory for different iterations. Right: Cost function vs. iteration

Show All
Fig. 4: - Performance data for a trajectory for flying through a thrown hoop
Fig. 4: Performance data for a trajectory for flying through a thrown hoop

Show All

SECTION VI.
Experiments

All experiments in this paper are conducted with the Ascending Technologies Hummingbird quadrotor [18] . We use a Vicon motion capture system [19] to estimate the position, orientation, and velocity of the quadrotor and the onboard gyros to estimate the angular velocities. The software infrastructure is described in [15] .
A. Spatially Scaled Trajectories

This experiment demonstrates how the spatially scaled trajectory is used to fly through a thrown circular hoop. After detecting that the hoop has been thrown the future position of the hoop is predicted with a quadratic air drag model. The predicted future time and x and y position of descent through a chosen z plane is found. The chosen z-plane is 0.6 meters below the quadrotor. The allowed region for hoop interception is x\in[1.2,1.6] meters and y\in[-0.4,0.4] meters, where x is towards the hoop. The time allowed for all trajectories, t_{1} , is 0.9 seconds. The x and z velocity are allowed to be free so the quadrotor can fly forward and down through the hoop while the y velocity is constrained to be zero as it is assumed the hoop falls approximately straight down. The worst case performance is for the position the farthest away ( x=1.6 meters and y=0.4 meters) for which data is shown in Fig. 4 .

Even in this worst-case scenario the position error is always less than 8 cm in any direction. Note that this is a highly aggressive trajectory as the quadrotor quickly reaches a velocity of 3.6 m/s and at one point hits a pitch angle of 60°. A series of images showing the full experiment are shown in Fig. 5 .
B. Temporal Scaling, Corridor Constraints, and Optimal Segment Times

This experiment demonstrates the ability to fly through environments with several narrow gaps. We design a seenario with three fixed circular hoops the quadrotor must continuously fly through. Six keyframes with the identical yaw angles are selected at 0.25 meters on either side of the gaps with a small corridor constraint, 1 cm added for the segments passing through the gaps. The corridor widths for the other segments are allowed to be 1 meter so the quadrotor may take a less direct and lower cost path where there is no position constraint. Since arrival time at the keyframes is not important for this problem the segment times are determined by solving (14) . The final trajectory generated is shown in Fig. 6 .
Fig. 5: - Composite image of a single quadrotor flying through a thrown circular hoop. See attached video or http://tinyurl.com/pennquad
Fig. 5: Composite image of a single quadrotor flying through a thrown circular hoop. See attached video or http://tinyurl.com/pennquad

Show All
Fig. 6: - Trajectory generated to fly through three gaps (left) and performance data for two traversal speeds (right)
Fig. 6: Trajectory generated to fly through three gaps (left) and performance data for two traversal speeds (right)

Show All

This generated trajectory can be tracked at different speeds. The right side of the Fig. 6 shows 24 seconds of performance data for tracking this trajectory in 8 seconds (top) and 4 seconds (bottom). The data shows that we can tradeoff speed for accuracy. The faster trajectory has velocities as large as 2.6 m/s and roll and pitch angles of up to 40°. Images from the faster experiment are shown in Fig. 7 . The tracking performance of a particular trajectory is very repeatable as can be seen by the periodicity in the errors in Fig. 6 .
Fig. 7: - Composite image of a single quadrotor quickly flying through three static circular hoops. See attached video or http://tinyurl.com/pennquad
Fig. 7: Composite image of a single quadrotor quickly flying through three static circular hoops. See attached video or http://tinyurl.com/pennquad

Show All

SECTION VII.
Conclusion

We presented a quadrotor control algorithm for following aggressive trajectories requiring large accelerations and an automated approach to synthesizing three-dimensional trajectories for quadrotors that can satisfy constraints on positions, velocities, accelerations and inputs. The trajectories are optimal in the sense that they minimize cost functionals that are derived from the square of the norm of the snap (the fourth derivative of position). These cost functionals are meaningful since the input variables are algebraically related to the snap. The time scaling property of this approach allows trajectories to be slowed down to be made safer .

Authors
Figures
References
Citations
Keywords
Metrics
Media
Footnotes
  < Previous    |    Back to Results    |    Next >  
More Like This
Lyapunov-Based Switching Control for a Remotely Operated Vehicle

2006 9th International Conference on Control, Automation, Robotics and Vision

Published: 2006
An Actuator Failure Tolerant Control Scheme for an Underwater Remotely Operated Vehicle

IEEE Transactions on Control Systems Technology

Published: 2011
Show More
References
1. D. Pines and F. Bohorquez, "Challenges facing future micro air vehicle development," AIAA Journal of Aircraft, Vol. 43, no. 2, pp. 290-305, 2006.
Show in Context CrossRef Google Scholar
2. D. Gurdan, J. Stumpf, M. Achtelik, K. Doth, G. Hirzinger, and D. Rus, "Energy-efficient autonomous four-rotor flying robot controlled at 1 khz," in Proc. of the IEEE Int. Conf. on Robotics and Automation, Roma, Italy, Apr. 2007.
Show in Context View Article Full Text: PDF (1100KB) Google Scholar
3. S. Lupashin, A. Schollig, M. Sherback, and R. D'Andrea, "A simple learning strategy for high-speed quadrocopter multi-flips," in Proc. of the IEEE Int. Conf. on Robotics and Automation, Anchorage, AK, May 2010, pp. 1642-1648.
Show in Context View Article Full Text: PDF (1106KB) Google Scholar
4. R. He, A. Bachrach, M. Achtelik, A. Geramifard, D. Gurdan, S. Prentice, J. Stumpf, and N. Roy, "On the design and use of a micro air vehicle to track and avoid adversaries," The Int. Journal of Robotics Research, Vol. 29, pp. 529-546, 2010.
Show in Context Google Scholar
5. G. Hoffmann, S. Waslander, and C. Tomlin, "Quadrotor helicopter trajectory tracking control," in AIAA Guidance, Navigation and Control Conference and Exhibit, Honolulu, Hawaii, Apr. 2008.
Show in Context CrossRef Google Scholar
6. J. H. Gillula, H. Huang, M. P. Vitus, and C. J. Tomlin, "Design of guaranteed safe maneuvers using reachable sets: Autonomous quadrotor aerobatics in theory and practice," in Proc. of the IEEE Int. Conf. on Robotics and Automation, Anchorage, AK, May 2010, pp. 1649-1654.
Show in Context View Article Full Text: PDF (1972KB) Google Scholar
7. M. Likhachev, G. Gordon, and S. Thrun, "ARA*: Anytime A* with provable bounds on sub-optimality," Advances in Neural Information Processing Systems, Vol. 16, 2003.
Show in Context Google Scholar
8. R. Tedrake, "LQR-Trees: Feedback motion planning on sparse randomized trees," in Proc. of Robotics: Science and Systems, Seattle, WA, June 2009.
Show in Context Google Scholar
9. P. Abbeel, "Apprenticeship learning and reinforcement learning with application to robotic control," Ph.D. dissertation, Stanford University, Stanford, CA, Aug. 2008.
Show in Context Google Scholar
10. D. Mellinger, N. Mchael, and V. Kumar, "Trajectory generation and control for precise aggressive maneuvers," in Int. Symposium on Experimental Robotics, Dec. 2010.
Show in Context Google Scholar
11. H. Kim, D. Shim, and S. Sastry, "Nonlinear model predictive tracking control for rotorcraft-based unmanned aerial vehicles," Vol. 5, 2002, pp. 3576-3581.
Show in Context Google Scholar
12. J. Yu, A. Jadbabaie, J. Primbs, and Y. Huang, "Comparison of nonlinear control design techniques on a model of the caltech ducted fan," in IFAC World Congress, IFAC-2c-112, 1999, pp. 53-58.
Show in Context Google Scholar
13. A. Jadbabaie and J. Häuser, "On the stability of receding horizon control with a general terminal cost," Automatic Control, IEEE Transactions on, Vol. 50, no. 5, pp. 674-678, may. 2005.
Show in Context View Article Full Text: PDF (199KB) Google Scholar
14. M. J. Van Nieuwstadtand R. M. Murray, "Real-time trajectory generation for differentially flat systems," International Journal of Robust and Nonlinear Control, Vol. 8, pp. 995-1020, 1998.
Show in Context CrossRef Google Scholar
15. N. Michael, D. Mellinger, Q. Lindsey, and V Kumar, "The grasp multiple micro uav testbed," IEEE Robotics and Automation Magazine, Sept. 2010.
Show in Context View Article Full Text: PDF (3000KB) Google Scholar
16. T. Lee, M. Leok, and N. McClamroch, "Geometric tracking control of a quadrotor uav on SE(3)," in Proc. of the IEEE Conf. on Decision and Control, 2010.
Show in Context View Article Full Text: PDF (1179KB) Google Scholar
17. T. Flash and N. Hogan, "The coordination of arm movements: An experimentally confirmed mathematical model," The Journal of Neuroscience, Vol. 5, pp. 1688-1703, 1985.
Show in Context Google Scholar
18. "Ascending Technologies, GmbH," http://www.asctec.de.
Show in Context Google Scholar
19. "Vicon Motion Systems, Inc.," http://www.vicon.com.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
