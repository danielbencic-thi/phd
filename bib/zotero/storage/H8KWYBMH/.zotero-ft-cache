IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 60%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
Autonomous flight through cluttered outdoor environments using a memoryless planner
Publisher: IEEE
Cite This
PDF
  << Results   
Junseok Lee ; Xiangyu Wu ; Seung Jae Lee ; Mark W. Mueller
All Authors
View Document
63
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Rappids Motion Planning Framework
    III.
    Algorithms for Outdoor Flight
    IV.
    Experimental Results
    V.
    Conclusions

Authors
Figures
References
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper introduces a collision avoidance system for navigating a multicopter in cluttered outdoor environments based on the recent memory-less motion planner, rectangu... View more
Metadata
Abstract:
This paper introduces a collision avoidance system for navigating a multicopter in cluttered outdoor environments based on the recent memory-less motion planner, rectangular pyramid partitioning using integrated depth sensors (RAP-PIDS). The RAPPIDS motion planner generates collision-free flight trajectories at high speed with low computational cost using only the latest depth image. In this work we extend it to improve the performance of the planner by taking the following issues into account. (a) Changes in the dynamic characteristics of the multicopter that occur during flight, such as changes in motor input/output characteristics due to battery voltage drop. (b) The noise of the flight sensor, which can cause unwanted control input components. (c) Planner utility function which may not be suitable for the cluttered environment. Therefore, in this paper we introduce solutions to each of the above problems and propose a system for the successful operation of the RAPPIDS planner in an outdoor cluttered flight environment. At the end of the paper, we validate the proposed method's effectiveness by presenting the flight experiment results in a forest environment. A video can be found at www.youtube.com/watch?v=3av5xEuKg2w&ab_channel=HiPeRLab
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20902040
DOI: 10.1109/ICUAS51884.2021.9476874
Publisher: IEEE
Conference Location: Athens, Greece
Funding Agency:
Contents
SECTION I.
Introduction

Motion planning algorithms for multicopter unmanned aerial vehicles to fly autonomously to their destination in cluttered environments are in general grouped into two categories. One is to separately run a path planning algorithm to generate collision-free path as a purely geometrical problem without considering dynamics [1] , and use a path follower to follow the collision-free path. Since it does not consider dynamics constraints, collision avoidance can not be guaranteed at high speed since dynamics constraints, such as motor thrust limit, are not considered at the time of planning. The other approach considers dynamics constraints and directly generates control commands by including obstacle avoidance as a constraint inside an optimization problem rather than separating path planning and tracking, for example, based on the rapidly-exploring random tree star (RRT*) [2] , the nonlinear optimization [3] , and the mixed-integer programming (MIP) [4] .

We focus on the latter category which considers dynamics in planning as well as collision avoidance. The collision-free trajectories are often further constrained by minimizing a cost function depending on applications, for example, the minimum time, the minimum energy, and the shortest distance. Trajectory generation algorithms may be divided into two major types: map-based algorithms and memoryless algorithms [5] .
Fig. 1.

The vehicle flies autonomously using visual-inertial odometry and the collision-avoidance planner through a forest, avoiding trees.

Show All

Map-based algorithms are global planning methods of creating collision-free optimal trajectories after a single large map is constructed or while creating a map by fusing all spatial sensor information obtained during flights. For instance, in [6] , a local map of the environment is used and a nonconvex, nonlinear optimization problem is solved to get collision-free smooth trajectories. In [7] – [8] [9] the free-space in the map is represented as multiple convex regions, and an optimization problem is then solved to find a series of trajectories through the free-space. In [10] , the convex hull property of B-spline trajectories is used to solve for safe and fast trajectories, and the success rate and optimality is improved in the subsequent work of [11] . Map-based algorithms have the advantage of optimal trajectory generation because it presupposes that map information is already known when planning. However, they usually have high computational cost and due to fusing sensor data into the map.

On the other hand, memory-less algorithms use only the most recent sensor information to avoid obstacles, such as using the k-d-tree [12] , [13] , and a trajectory library precomputed offline to reduce a significant amount of online computation [14] . Therefore, memory-less algorithms are classified as local planning methods and are advantageous for obstacle avoidance in a dynamic obstacle environment due to low computational cost and high update frequency. However, there is a disadvantage that it is challenging to find a globally optimal trajectory since global spatial information is not available at the time of planning.

For trajectory generation of a small-size multicopter that requires high-speed maneuver but has a limited payload capacity, memory-less algorithms have great utility due to the following reasons. First, memory-less algorithms are easy to be implemented in real-time on miniature on-board computers with limited computational resources. Second, due to the fast trajectory update speed thanks to the low computational cost, memory-less algorithms can cope with rapidly changing surroundings during high-speed flight. Lastly, the algorithm is less prone to accumulated odometry errors during flights in a cluttered environment because it utilizes only the latest sensor information for the planning.

Recently, a memory-less planner is proposed using rectangular pyramid partitioning using integrated depth sensors (RAPPIDS) motion planner, which has high computational efficiency for high-speed collision avoidance flights [15] . Using the RAPPIDS motion planner, the authors were able to achieve high collision avoidance flight performance in cluttered indoor flight environment, using only stand-alone depth images and visual-inertial odometry information processed by an on-board computer mounted on the vehicle.

In this paper, we extend the RAPPIDS planner to operate in a cluttered outdoor off-road environment. We describe the system's development process and flight results. In the experiment, the system was able to fly 30 meters in a forest environment, as shown in Fig. 1 , with a maximum speed of 2.7 m/s. The remaining parts of the paper are organized as follows: in Section II , we outline the principles of the RAPPIDS planner. Section III introduces modifications to the algorithm to ensure successful outdoor flights. Finally, in Section IV , the system's performance is demonstrated by introducing the experiment results of obstacle avoidance flights in a forest environment.
SECTION II.
Rappids Motion Planning Framework

In this section, we repeat some details from [15] , and add a velocity limiting check for stable visual-inertial odometry. Motion primitives are sampled and then go through a series of checks to find a trajectory that is minimum-cost, input-feasible, velocity-admissible, and collision-free, as shown in Algorithm 1 . Since the planner has a low computational cost, we plan in a receding horizon fashion every time a new depth image arrives. This keeps a collision-free trajectory being updated with the latest depth view, and allows avoiding obstacles that are not included in the previous camera view.
A. Candidate Trajectory Sampling

We sample candidate trajectories first by sampling an endpoint and constructing a polynomial trajectory connecting the current position to the endpoint. Specifically, we first uniformly sample a 2D point in the pixel coordinates of a depth camera. We also draw a sampled depth from a uniform distribution, and then back-project the 2D point using the sampled depth to obtain a sampled endpoint s T ∈ R 3 .
Algorithm 1 Trajectory Constraint Checks

Require : A sampled candidate trajectory

procedure C onstraints C heck

if lower cost than known then

if input feasibility then

if velocity admissibility then ▷ Subsection II-B

if collision-free then ▷ Subsection II-C

trajectory_status ← collision_free

else

trajectory_status ← in_collision

end if

else

trajectory_status ← velocity_inadmissible

end if

else

trajectory_status ← input_infeasible

end if

else

trajectory_status ← higher_cost

end if

end procedure

Denote s ( t ) ,   s ˙ ( t ) , and s ¨ ( t ) ∈ R 3 to be the position, velocity and acceleration of the vehicle in the inertial frame. The candidate motion primitives are described as below.
s ( t ) = α 120 t 5 + β 24 t 4 + γ 6 t 3 + s ¨ ( 0 ) 2 t 2 + s ˙ ( 0 ) t + s ( 0 ) ,   t ∈ [ 0   T ] , (1)
View Source \begin{equation*} \mathbf{s}(t)=\frac{\alpha}{120}t^{5}+\frac{\beta}{24}t^{4}+\frac{\gamma}{6}t^{3}+\frac{\ddot{\mathbf{s}}(0)}{2}t^{2}+\dot{\mathbf{s}}(0)t+\mathbf{s}(0),\ t\in[0\ T],\tag{1} \end{equation*} where T is the trajectory duration, s ( 0 ) ,   s ˙ ( 0 ) , and s ¨ ( 0 ) are the initial position, velocity, and acceleration of the vehicle at the time when the trajectory starts, and α ,   β and γ are coefficients such that s ( T ) = s T , and s ˙ ( T ) = s ¨ ( T ) = 0 . This terminal condition is selected to be at rest to guarantee safety in every depth frame. Specifically speaking, even if the planner fails to find a new collision-free trajectory in the following frames, the vehicle can keep tracking the current trajectory, which is collision-free in a static environment. This 5th order polynomial corresponds to the minimum-jerk trajectory, which minimizes the average Euclidean norm of jerk over the trajectory duration T . The trajectory is smooth and can be checked for collisions efficiently, as shown in [16] .

B. Velocity Constraints for Stable Visual-Inertial Odometry

We impose velocity constraints to prevent the visual-inertial odometry from losing track in high-speed flights. The sampled trajectories are filtered out if their maximum velocity exceeds a predefined threshold, v max . For the sake of computational tractability, the constraints are checked for each per-axis velocity using analytical solution for third-order polynomials. It should be noted that checking the magnitude requires solving higher-order polynomials numerically, because analytical solutions do not exist. The following equation can be derived by taking the derivative of (1) ,
s ˙ ( t ) = α 24 t 4 + β 6 t 3 + γ 2 t 2 + s ¨ ( 0 ) t + s ˙ ( 0 ) (2)
View Source \begin{equation*} \dot{\mathbf{s}}(t)=\frac{\alpha}{24}t^{4}+\frac{\beta}{6}t^{3}+\frac{\gamma}{2}t^{2}+\ddot{\mathbf{s}}(0)t+\dot{\mathbf{s}}(0) \tag{2} \end{equation*}

Fig. 2.

The planner uses a collection of pyramids to represent the free space, which allows simple and fast collision check of a sampled trajectory. The figure is sourced from [15] .

Show All

To find its extrema, we compute its derivative and find the zeros as below.
s ¨ ( t ) = α 6 t 3 + β 2 t 3 + γ t + s ¨ ( 0 ) = 0 (3)
View Source \begin{equation*} \ddot{\mathbf{s}}(t)=\frac{\alpha}{6}t^{3}+\frac{\beta}{2}t^{3}+\gamma t+\ddot{\mathbf{s}}(0)=0 \tag{3} \end{equation*}

The third-order polynomial can be efficiently solved, and the magnitude of (2) is evaluated at the roots as well as the boundary, 0 and T . The procedure is repeated for every axis, and we discard the motion primitive candidate if the speed on any axis exceeds the per-axis velocity limit v max .
C. Collision Check: Pyramid Method

The RAPPIDS planner determines whether the candidate trajectory intrudes the obstacle by pyramid inflation. Fig. 2 shows the process in which the depth camera on the flying vehicle searches for area P that guarantees a non-collision path. First, we define free space F and occupied space O based on the depth camera image. We also treat all spaces outside the field of view that are l distance from the vehicle as occupied spaces to avoid collisions with unrecognized obstacles outside the camera's field of view. Next, we select the final position s ( T ) through random sampling and then search for the nearest depth pixel p from s ( T ) . Then, starting at pixel p and reading the surrounding depth pixels in a spiral sequence, we get the largest possible rectangular space P e x p that does not intrude the occupied space O . Finally, pyramid P distanced with vehicle radius r is created by shrinking the expanded pyramid P e x p . By checking whether the s ( t ) candidate trajectory remaining inside P , we can conclude that the trajectory is collision-free from the detected obstacles.

The algorithm can guarantee zero collision trajectory, because the trajectory generated by the algorithm inherently avoids not only the obstacles recognized by the depth sensor but also the obstacles located in an unobserved ( U ) or unknown area ( O ) obscured by the detected obstacles. A detailed description of this algorithm can be found at [15] .
SECTION III.
Algorithms for Outdoor Flight

In this section, we describe modifications to the motion planner other than the velocity check described in section lI-B for collision-free flights outdoors to autonomously reach a target waypoint. (a) We sample trajectories with final positions around the center of the view of the depth camera to improve the efficiency of sampling trajectories. (b) We proposed a new utility function that behaves similarly to the utility function of maximizing the average velocity, but also considers making the vehicle stay around the target. (c) The vehicle is always yawed towards the goal to dynamically change the view during the flight that can potentially increase the chance of finding a collision-free trajectory compare to the view with a fixed yaw. (d) The initial acceleration used for sampling trajectories is approximated by the total thrust command divided by the mass instead of using noisy IMU measurements, since the noise in acceleration hampers the planner from finding proper trajectories. (e) We compensate the thrust change because of battery voltage drop during the flight.
Fig. 3.

Efficient trajectory sampling in the field of view (FOV) of the depth camera. An occluded space O at the center makes the planner construct pyramids around the FOV. A sampled trajectory (blue) with an endpoint close to the FOV is likely to have a part that resides outside the field of view (highlighted by yellow), which is classified by the planner as in-collision as space outside of the FOV is considered as occupied. To increase the sampling efficiency, we sample points only between 10% and 90% of horizontal and vertical FOV.

Show All

A. Sampling Efficiency

As collision checking at the last step of the planner is computationally expensive, it is beneficial to increase the probability of finding a collision-free trajectory from candidate trajectories. We improve the sampling efficiency by excluding candidate trajectories with high chances of being classified as in collision. One of the most common cases is when a sampled candidate trajectory has an endpoint around the field of view (FOV), as shown in Fig. 3 . If the endpoint is close to the edges of the FOV, it is likely that some parts of the sampled trajectory fall outside of the FOV, and it is classified by the planner as in-collision because regions outside of the FOV are considered occupied by the planner, as described in section II-C . To improve the trajectory sampling efficiency by avoiding those cases, the final trajectory position is sampled between 10% and 90% of the field-of-view.
B. Utility Function

We propose a utility function, which is equivalent to a negative cost function, as below to generate trajectories that not only consider maximizing the average velocity to the goal, but also keep the trajectories' end points around the target.
U ( P , t ) = ∥ d s t G ∥ − ∥ d P G ∥ t , (4)
View Source \begin{equation*} U(P, t)=\frac{\Vert \mathbf{d}_{s_{t}G}\Vert-\Vert \mathbf{d}_{PG}\Vert}{t}, \tag{4} \end{equation*} where ∥ d s t G ∥ ,   ∥ d P G ∥ , and t are the distances between the current position and the goal, the distance between the endpoint of the motion primitives and the goal, and the primitive execution time, respectively. As shown in Fig. 4 , when the vehicle is far from the waypoint, the term ∥ d P G ∥ does not vary much, and hence the utility function is to maximize the average velocity to the waypoint. Around the waypoint, however, the term ∥ d P G ∥ plays a role to encourage the planner to choose a trajectory whose final position falls around the goal.

Fig. 4.

A new cost function to maximize average velocity and handle the behavior around the goal point G is proposed. Every time a new depth image arrives, the planner attempts to find a new collision-free trajectory using the current estimates s t , and if found, the tracking controller discards the previous trajectory (gray-dashed parts), and starts tracking the new trajectory (brown). When far from the goal point, for example point A , the utility function is roughly the average velocity measured in direction to the goal (depicted by the green arrow), which still allows lateral motion. However, around the goal, such as point B , the utility function encourages the planner to generate a new collision-free trajectory with the endpoint around the goal, not beyond the goal.

Show All

C. Desired Yaw Angle

The yaw angle can be arbitrarily chosen while tracking a collision-free trajectory. We yaw the vehicle always towards the goal, because it is more likely to find a trajectory to the goal when facing towards it.
ψ c = arctan 2 ( [ 0   1   0 ] ( s G − s ) ,   [ 1   0   0 ] ( s G − s ) ) ∈ [ − π , π ] , (5)
View Source \begin{align*} \psi_{c}&= \arctan 2 ([0\ 1\ 0](\mathbf{s}_{G}-\mathbf{s}),\ [1\ 0\ 0](\mathbf{s}_{G}-\mathbf{s}))\tag{5}\\ &\in[-\pi, \pi], \end{align*} where arctan 2 ( y , x ) measures the signed angle between the point ( x , y ) and the positive x-axis, and ψ c ,   s G and s are the commanded yaw angle, the positions of the goal and the vehicle in the inertial frame, respectively. It should be noted that the yaw control can be replaced with a more intelligent control from a high-level planner.

D. Acceleration Estimation

Our planner checks collision of a trajectory that is sampled given the current position, velocity, and acceleration ( section II-A ). Using acceleration measurements from IMU for the current acceleration results in inaccurate sampled trajectories due to the noise in IMU acceleration measurements. We instead estimate acceleration using the last commanded thrust as below
s ¨ ( 0 ) = c m z B − g , (6)
View Source \begin{equation*} \ddot{\mathbf{s}}(0)=\frac{c}{m}\mathbf{z}_{B}-\mathbf{g}, \tag{6} \end{equation*} where c,\ \mathbf{z}_{B},\ m , and \mathbf{g} are the last collective thrust command, body z-axis, mass, and gravitational acceleration.

Fig. 5.

Thrust force at different thrust commands (solid lines) and second-order fitting results (dotted lines). The command-thrust relationship changes depending on the voltage applied to the propulsion system.

Show All

E. Thrust Adaptation

Once the collision-free trajectory is selected, the cascaded flight controller generates motor speed commands to maneuver the vehicle, as shown in Fig. 9 . The commands are then sent to the electric speed controllers (ESCs), which control each motor's rotation speed based on the predefined protocol in their firmware.

Commonly used ESCs, including those used in this project, run in ‘open-loop’ mode, meaning that the rotor angular velocity produced is not fixed for a fixed command, but varies with e.g. battery voltage. The relationship between the thrust command, battery voltage, and thrust force produced is shown in Fig. 5 for the experimental vehicle. This section describes the mitigation strategy used in this work to achieve reliable thrust commands with such open-loop ESCs, with specifically an offline calibration for the major variations, followed by an online adaptive loop to compensate for remaining model error.
1) Offline Calibration

At a constant battery voltage, a quadratic fit matches the data shown in Fig. 5 well: \begin{equation*} \overline{f}_{i}(u_{i})=k_{v}(V_{\text{batt}})(c_{0}(u_{i}+c_{1})^{2}+c_{2}), \tag{7} \end{equation*}
View Source \begin{equation*} \overline{f}_{i}(u_{i})=k_{v}(V_{\text{batt}})(c_{0}(u_{i}+c_{1})^{2}+c_{2}), \tag{7} \end{equation*} with \overline{f}_{i} the thrust produced by motor i at command u_{i}, k_{v}(\cdot) a term dependent on the battery voltage V_{\text{batt}} , and c_{\{0,1,2\}} voltage-independent fixed parameters. The function k_{v}(\cdot) , and parameters c_{i} are common to all motors, and are estimated using a least-squares approach.

The voltage-dependent function k_{v}(\cdot) is estimated from a long-term hover, where the vehicle maintained a constant position as the battery voltage varied from fully charged to almost depleted. The result is shown in Fig 6 , and a simple first-order fit for the voltage dependence is used: \begin{equation*} k_{v}(V_{\text{batt}})=k_{v_{1}}+k_{v_{2}}V_{\text{batt}} \tag{8} \end{equation*}
View Source \begin{equation*} k_{v}(V_{\text{batt}})=k_{v_{1}}+k_{v_{2}}V_{\text{batt}} \tag{8} \end{equation*} with V_{\text{batt}} the battery voltage, and k_{v_{\{1,2\}}} parameters estimated via least squares.

Fig. 6.

Change in throttle command required at hover as the vehicle's battery is depleted from fully charged (approx. 15.8V) to nearly depleted (approx. 14.4V).

Show All

2) Online Adaptation

To compensate for remaining errors, we compare the thrust estimated from the accelerometer data to the desired thrust. We model the actual thrust produced by the propellers, f_{i} in relation to the offline model \overline{f}_{i} with the adaptation coefficient k_{a} , common to all propellers: \begin{equation*} f_{i}=k_{a}\overline{f}_{i} \tag{9} \end{equation*}
View Source \begin{equation*} f_{i}=k_{a}\overline{f}_{i} \tag{9} \end{equation*}

The estimate of the actual thrust is computed as follows, noting that the translational dynamics of a multicopter are given by \begin{equation*} m\ddot{\mathbf{s}}=\mathbf{Re}_{\mathbf{z}}\Sigma f_{i}+m\mathbf{g}, \tag{10} \end{equation*}
View Source \begin{equation*} m\ddot{\mathbf{s}}=\mathbf{Re}_{\mathbf{z}}\Sigma f_{i}+m\mathbf{g}, \tag{10} \end{equation*} where \mathbf{R} is the vehicle's attitude expressed as a rotation matrix, and \mathbf{e}_{\mathbf{z}}=[0\ 0\ 1]^{T} . Note that this assumes that there are no other forces acting on the vehicle, such as aerodynamic disturbances, drag forces, etc. Noting that the vehicle's accelerometer measures the vehicle's proper acceleration, i.e. acceleration relative to free fall, we have that the output \alpha of an ideal, noise-free accelerometer located at the vehicle centre of mass given by \begin{equation*} \mathbf{R}\alpha+\mathbf{g}=\ddot{\mathbf{s}}, \tag{11} \end{equation*}
View Source \begin{equation*} \mathbf{R}\alpha+\mathbf{g}=\ddot{\mathbf{s}}, \tag{11} \end{equation*}

Comparing (10) and (11) , we can bring the following result \begin{equation*} m\alpha_{z}=\Sigma f_{i}, \tag{12} \end{equation*}
View Source \begin{equation*} m\alpha_{z}=\Sigma f_{i}, \tag{12} \end{equation*} where \alpha_{z} is the component of the accelerometer measurement parallel to the thrust vector. I.e. we can estimate the actual thrust force generated from the vehicle with z-directional IMU acceleration measurements. The coefficient k_{a} is then computed as follows: \begin{equation*} k_{a}= \text{LPF} \left(\frac{m\alpha_{z}}{\Sigma \overline{f}_{i}}\right) \tag{13} \end{equation*}
View Source \begin{equation*} k_{a}= \text{LPF} \left(\frac{m\alpha_{z}}{\Sigma \overline{f}_{i}}\right) \tag{13} \end{equation*} with LPF(·) a suitable low pass filter, necessary to average out the noisy data.

Fig. 7.

The custom built quadcopter. 1 - Pixracer flight controller; 2 - RGB camera (not used in feedback); 3 - D435i depth camera; 4 - infra-red camera (not used in feedback); 5 - T265 tracking camera; 6 - GPS (not used in feedback); 7 - Jetson AGX Xavier

Show All
Fig. 8.

Satellite image of the small forest at the Richmond Field Station where the experiment was conducted. Image is from www.usgs.gov .

Show All

Given a desired thrust value (e.g. from the controller), an ESC command is generated by computing the corresponding calibrated thrust \overline{f}_{i} from (9) , and then solving the quadratic in (7) to compute the desired low-level ESC command u_{i} .
SECTION IV.
Experimental Results

We have shown in outdoor experiments that the system is able to navigate in a complex forest experiment with a maximum speed of 2.7 m/s. The experiment was repeated several times and we got similar performance. In this section we give detailed explanation of one of these experiments.
A. System Setup

A custom-built quadcopter, as shown in Fig. 7 , was used through the experiments. It weighs 2.4 kg and the distance between two diagonal motors is 382 mm. The diameter of each propeller is 229 mm. On the vehicle, an Intel D435i depth camera is installed for collision avoidance and an Intel T265 camera is installed for state estimation. The depth camera is forward-looking to detect obstacles in forward flights, and the T265 camera has a 37-degree angle with the horizontal ground, to track features on the ground for state estimation and to avoid view occlusion from other parts of the vehicle. The GPS and two other cameras (one is a RGB camera and the other one is an infra-red camera) on the vehicle are not used for the vehicle's motion planning. The relationship between the components of the system, is shown in Fig. 9 . The RAPPIDS motion planner, the position and attitude controllers, and the thrust adapter runs on an on-board computer (Jetson AGX Xavier), at a frequency of 100Hz. The pixracer runs the standard PX4 firmware [17] . It takes in the desired angular velocity and thrust from the Xavier and sends the motor speed commands to the ESCs, which control the motors' rotation speed.
Fig. 9.

A block diagram of the system, showing the relationship between components. The yellow shaded area contains components running on the AGX Xavier on-board computer, while the red shaded area contains components running on the Pixracer flight controller.

Show All

B. Obstacle Avoidance Experiment

The experiments were conducted at a small forest at the Richmond Field Station (37.915535 N, −122.335059 E), as shown in Fig. 8 . The vehicle's radius r (shown in Fig. 2 ) was set to 0.6m for the planner during the experiment, leaving a minimum safety margin of about 0.3 m between the vehicle and the nearest obstacles. The velocity constraint v_{max} in section II-B was set to 3 m/s because of the limit of the T265 tracking camera (a speed of above 3 m/s could make the state estimation of T265 unreliable), and trajectories exceeding this speed limit will be rejected.

The vehicle was first controlled to take off manually to about 1 m above the ground and then switched to autonomous hovering at its current position, which was used as the starting point. The target point was set to be 30 meters forward with respect to the starting point of the vehicle, to fly the vehicle to the other side of the forest. When the vehicle was close to the target point (less than 1 m in this case), the motion planner in Fig. 9 stopped generating new trajectories, and the vehicle tracked the last reference trajectory to reach the target point. After the vehicle reached the target point, it hovered there and waited for the pilot to send other commands, e.g. landing. In the experiment the vehicle was able to reach the target point while generating and tracking collision-free trajectories. The path of the vehicle is visualized in Fig. 10 and its position is shown in Fig. 11 . The manual take-off and landing part are omitted and only the autonomous collision avoidance flight part is plotted for clarity. With the velocity check in section II-B on the sampled trajectories, the velocity on none of the three axis exceeds the velocity limit of 3.0 m/s, shown in Fig. 12 .
Fig. 10.

Path of the vehicle (red line) during the autonomous collision avoidance flight from the start point (marked with a blue dot) to the end point (marked with a green dot). The trees detected by the depth camera were visualized using octomap [18] . The distance between the start point and the end point is 30 meters.

Show All
Fig. 11.

The estimated position of the vehicle during the autonomous collision avoidance flight, with respect to the starting point of the autonomous flight. The target point of the vehicle was at \mathrm{x}=30\ \mathrm{m},\ \mathrm{y}=0\ \mathrm{m},\ \mathrm{z}=0\ \mathrm{m} .

Show All
Fig. 12.

The estimated velocity for each axis of the vehicle, as well as the euclidean norm (magnitude) of the velocity during the autonomous collision avoidance flight. With the velocity check in section II-B , the velocity on none of the three axis exceeds the velocity limit of 3.0 m/s (marked as magenta dashed lines).

Show All

The number of sampled trajectories and better-than-current trajectories (i.e. trajectories that pass all the checks in Algorithm 1 and have a lower cost than the current reference trajectory) throughout the experiment is shown in Fig. 13 . Thanks to the computational efficiency of the algorithm, a large number of sampled trajectories could be processed on-board in real-time. The current reference trajectory was updated when a better-than-current trajectory was found, which happened most of the time during the flight. When no better trajectory was found (e.g. when the view of the depth camera was occluded by the obstacles), the vehicle would track the current trajectory. After 14.7 s, the vehicle was within 1 m to the target point, and the trajectory generator stopped generating new trajectories and followed the last reference trajectory to reach the target point.
SECTION V.
Conclusions

In this paper, we presented various considerations of the RAPPIDS motion planner for outdoor flights. We consider a planner under the assumption of static environment, in which recursive feasibility is guaranteed by the way how collision-free trajectories are constructed. Specifically speaking, the terminal conditions of sampled trajectories are selected to be at rest, and that guarantees safety in that executing a primitive should always lead to the vehicle advancing to the objective and coming to rest without collision. Continuous re-sampling of trajectories, in a receding horizon fashion, allows the vehicle to progress towards the objective. In the event that no samples result in feasible trajectories, the system simply continues the previous trajectory, thereby guaranteeing recursive feasibility.
Fig. 13.

A large number of trajectories were sampled during the autonomous flight of the vehicle, as shown in the first row. The sampled trajectories then went through the checks in algorithm 1 , and the number of trajectories that are better than the current trajectory is shown in the second row.

Show All

We also introduced the velocity constraint of the planner to satisfy the speed limit of the visual-inertial odometry camera, increased the trajectory sampling efficiency based on the prior that sampling close to the edge of field of view of the depth camera is prone to result in in-collision trajectories, and used estimated acceleration instead of noisy IMU acceleration measurements. In addition, a new utility function was proposed to consider not only maximizing the average velocity toward the goal but also keeping the vehicle around the goal. A thrust adaptation method is introduced to compensate decrease in motor thrusts due to voltage drop during flights. Lastly, the experimental results in a challenging outdoor environment were presented, which validated the ability of this system to autonomously navigate through complex obstacles outdoors.
ACKNOWLEDGEMENT

Research was sponsored by the Army Research Laboratory and was accomplished under Cooperative Agreement Number W911NF-20-2-0105. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation herein. The experimental testbed at the HiPeRLab is the result of contributions of many people, a full list of which can be found at hiperlab.berkeley.edu/members/ .

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Extending Collision Avoidance Methods to Consider the Vehicle Shape, Kinematics, and Dynamics of a Mobile Robot

IEEE Transactions on Robotics

Published: 2009
Dynamic Collision Avoidance Path Planning for Mobile Robot Based on Multi-sensor Data Fusion by Support Vector Machine

2007 International Conference on Mechatronics and Automation

Published: 2007
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
