Identification and Representation of Homotopy Classes of Trajectories for Search-Based Path
Planning in 3D

Subhrajit Bhattacharya Department of Mechanical Engineering
and Applied Mechanics University of Pennsylvania
Philadelphia, PA 1 9104 Email: subhrabh@seas.upenn.edu

Maxim Likhachev Department of Computer and Information Science University of Pennsylvania Philadelphia, PA 1 9104 Email: maximl@seas.upenn.edu

Vijay Kumar Department of Mechanical Engineering
and Applied Mechanics University of Pennsylvania
Philadelphia, PA 19104 Email: kumar@seas.upenn.edu

Abstract- There are many applications in motion planning where it is important to consider and distinguish between different homotopy classes of trajectories. Two trajectories are homotopic if one trajectory can be continuously deformed into another without passing through an obstacle, and a homotopy class is a collection of homotopic trajectories. In this paper we consider the problem of robot exploration and planning in three-dimensional configuration spaces to (a) identify and classify different homotopy classes; and (b) plan trajectories constrained to certain homotopy classes or avoiding specified homotopy classes. In previous work [1] we have solved this problem for two-dimensional, static environments using the Cauchy Integral Theorem in concert with graph search techniques. The robot workspace is mapped to the complex plane and obstacles are poles in this plane. The Residue Theorem allows the use of integration along the path to distinguish between trajectories in different homotopy classes. However, this idea is fundamentally limited to two dimensions. In this work we develop new techniques to solve the same problem, but in three dimensions, using theorems from electromagnetism. The Biot-Savart law lets us design an appropriate vector field, the line integral of which, using the integral form of Ampere's Law, encodes information about homotopy classes in three dimensions. Skeletons of obstacles in the robot world are extracted and are modeled by current­ carrying conductors. We describe the development of a practical graph-search based planning tool with theoretical guarantees by combining integration theory with search techniques, and illustrate it with examples in three-dimensional spaces such as two-dimensional, dynamic environments and three-dimensional static environments. 1
I. INTRODUCTION Homotopy classes of trajectories arise due to presence of obstacles in an environment. Two trajectories connecting the same start and goal coordinates are in the same homotopy class if they can be smoothly deformed into one another without intersecting any obstacle in the environment, otherwise they are in different homotopy classes. In many applications, it is important to distinguish between trajectories of different homotopy classes, as well as identify the different homotopy classes in an environment (e.g. , trajectories that go left around
1 We gratefully acknowledge support from the ONR Antidote MURI project, grant no. NOOOI4-09-1-1031; ONR Grants NOOOI4-08-1-0696 and NOOOI409-1-1052; and NSF Grant IIP-0742304.

a circle in two dimensions versus right). For example, in order to deploy a group of agents to explore an environment [5], an efficient strategy ought to be able to identify the multiple homotopy classes and deploy at least one agent in each homotopy class. One may also wish to determine the least cost path for each agent constrained to or avoiding specified homotopy classes. In many problems the notion of visibility is linked intrinsically with homotopy classes. In tracking of uncertain agents in an environment with dynamic obstacles, the ability to deal with occlusions during a certain time frame is important [18]. A knowledge of the possible homotopy classes of trajectories that the agent can take in the environment during the period of occlusion can help more efficient belief propagation.
Classification of homotopy classes in two-dimensional workspaces has been studied in robotics literature using geo­ metric methods [8, 11], probabilistic road-map construction [1 6] techniques and triangulation-based path planning [6]. However, efficient planning for least cost trajectories with homotopy class constraints is not feasible using such represen­ tations. In our recent work [1] we have used complex analysis and graph search-based path planning techniques for address­ ing the problem of optimal path planning with homotopy class constraints. It gave us a compact way of representing homotopy classes of trajectories which is independent of the geometry, discretization of the environment, cost function or search algorithm used to find trajectories in the environment. The method is also robust to noise in the environment created by sensor data. However, this method is only applicable to two dimensional configuration spaces.
In this paper we propose a novel way of classifying and rep­ resenting homotopy classes in a 3-dimensional configuration space using theorems from electromagnetism. We use Biot­ Savart's Law and Ampere's Law to define a differential 1form [17], the integration of which along trajectories allow us to distinguish between different classes of trajectories.
Before proceeding further, we define homologous trajec­ tories and explain the difference between homology and

9

homotopy. We say that tow trajectories 71 and 72 connecting the same end points are homologous if and only if the closed loop formed by them, 71 U -72 is null-homologous. This is equivalent to saying that 71 U -72 is the boundary of a surface in the configuration space that is free of intersections with any obstacle.
Because we use I-forms and their integrals along closed curves to classify trajectories, we naturally obtain invariants for homologous trajectories [10, 1 5, 4]. However, we note that in most practical robotics problems the notion of homology and homotopy of trajectories can be equated. A detailed discussion on this is provided in Section VI.
The novelty of the work and the advantage of the integration-based representation we propose lies in the fact that not only it allows us to identify/distinguish trajectories in different homotopy classes, but also lets us compute least-cost paths in 3-dimensional configuration spaces with homotopic constraints using graph search-based planning algorithms. The representation we propose is designed to be independent of the type of the environment, the discretization scheme or cost function. Using such a representation we show that homotopy class constraints can be seamlessly integrated with graph search techniques for determining optimal paths constrained to specified homotopy classes or forbidden from others. We also discuss how one can explore multiple homotopy classes in an environment using a single graph search.
II. BACKGROUND
A. Homotopy Classes in Three-Dimensional Spaces
While in the two-dimensional case, theoretically any finite obstacle on the plane can induce multiple homotopy classes for trajectories joining two points, the notion of homotopy classes in three dimensions can only be induced by obstacles with genus one or more, or with obstacles stretching to infinity in two directions (The genus of an obstacle refers to the number of holes or handles [1 4]. See Figure 1). For example, a torus­ shaped obstacle in a three-dimensional environment creates two primary homotopy classes: i. The trajectories passing through the "hole" of the torus, and ii. the trajectories passing outside the "hole" of the torus. Figure 1 shows some examples of obstacles that can or cannot induce homotopy classes for trajectories. A sphere or a solid cube, for example, cannot induce multiple homotopy classes in an environment.
Definition 1 (Simple Homotopy-Inducing Obstacle): A Simple Homotopy-inducing Obstacle (SHIO) is a bounded obstacle of genus 1, for example a torus (Figure I(a), I(b)) or a knot (Figure I(e)).
B. Skeleton of a SHIO
In [1], each obstacle in a 2-dimensional plane that induces the notion of multiple homotopy classes is assigned a rep­ resentative point. Analogously, for the 3-dimensional case, we need to define a skeleton for every SHIO. Intuitively, a skeleton of a 3-dimensional obstacle is a I-dimensional curve that is completely contained inside the obstacle such that the surface of the obstacle can be "shrunk" onto the skeleton in a

(/:J ......

()

� () I

\

(a) An unbounded obstacle and its skeleton can be closed at a large distance to create a closed loop.

(b) An obstacle with genus 2, 0, can
be decomposed into 2 obstacles, each
with genus one, 01 and 02.

Fig. 2. Illustration of Constructions 1 and 2.

continuous fashion without altering the topology of the surface

of the obstacle. Formally, we define the skeleton of an obstacle

in terms of homotopy equivalence.

Definition 2 (Skeleton): A I-dimensional manifold, S, is called a skeleton of a SHIO, 0, iff S is homeomorphic to §1 (a

circle), S is completely contained inside 0, and if S and 0 are

homotopy equivalent (i. e. , if the obstacle 0 is replaced by an

equivalent obstacle S, then the homotopy equivalence between

two arbitrary trajectories, 71 and 72, connecting every pair of

fixed points in the environment, will remain unchanged.)

In the literature, algorithms for constructing skeletons of

solid objects is a well-studied [3, 1 2]. However in the present

context we have a much relaxed notion of skeleton. While we

can adopt any of the different existing algorithms for auto­

mated construction of skeleton from a 3-dimensional obstacles,

this discussion is out of the scope of the present work. Figure

I(a) demonstrates how a skeleton can be constructed for a

generic genus 1 obstacle. There is definitely no unique way of

constructing such a skeleton. For the results in this paper with

the

X

Y -

-

Z

domain,

we

either

hand-picked

key-points

inside

obstacles to construct skeletons, or created obstacles around

a skeleton to begin with. For the X - Y - Time domain

we used similar notion as representative points [1] inside

moving obstacles, that automatically creates a skeleton for that

obstacles in X - Y - Time domain because of extrusion along

the time axis.

C. Conversion of Generic Obstacles into SHIOs

Given a set of obstacles in a three-dimensional environment, we perform the following two constructions/reduction on the obstacles so that the only kind of obstacle we have in the environment are Simple Homotopy-Inducing Obstacles. The Construction 1 is mostly trivial in the sense that it can be easily automated for arbitrary obstacles. Construction 2 on the other hand is linked with the construction of skeleton of the obstacles (Definition 2) and is discussed later.
Construction 1 (Closing infinite, unbounded obstacles):
In most of the problems that we are concerned with, the domain in which the trajectories of the robots lie is finite and bounded. This gives us the freedom of altering/modifying the obstacles or parts of obstacles lying outside that domain without altering the problem. One consequence of this freedom is that we can close infinite and unbounded obstacles (e. g. Figure I(d)) at a large distance from the domain of interest (Figure 2(a)).
Construction 2 (Decomposing obstacles with genus> 1): After closing all infinite, unbounded obstacles in an

10

(a) Skeleton of a generic genus 1 obstacle is modeled as a
current-carrying conductor.

(b) A torus-shaped (c) A genus 2 obstacle. (d) An infinite tube is a (e) A knot-shaped ob- (I) A sphere does

genus 1 obstacle.

genus 1 obstacle.

stacle with genus 1. not induce homotopy

Fig. 1. Obstacles that do and do not induce homotopy classes in a 3-dimensional space.

classes and has genus O.

as-' 8,
d'
�
B

(a) Magnetic field due to current in S, (b) 2 trajectories, 71 & 72, connecting
& its integration along closed loop Ci. the same points form a closed loop.
Fig. 3.
environment according to Construction I, if there is an obstacle with genus k (e.g. Figure I(c)), we can decomposed/split it into k obstacles, possibly overlapping and touching each other, but each with genus 1 (Figure 2(b)).
This does not change the obstacles or the problem in any
way. This construction just changes the way we identify obstacles. For example in Figure 2(b) the original obstacle 0 with genus 2 is realized as two obstacles 01 and O2, each with genus 1 and overlapping each other. The decomposition of obstacles into SHIOs allows us define k skeletons for each obstacle of genus k and simplify computations of h-signatures of trajectories.

D. Biot-Savart Law

Consider a single hypothetical current-carrying curve (a

current conducting wire) embedded in a 3-dimensional space

carrying a steady current of unit magnitude (Figure 3(a)). It

is to be noted that such a steady current is possible iff the

curve is closed (or open, but extending to infinity, where we

close the curve using a loop at infinity. See Figure 2(a) and

Construction I). We denote the curve by S. Then, according to the Biot-Savart Law [7], the magnetic field B at any arbitrary

point r in the space, due to the current flow in S, is given by,

B(r) =

r 110 47r Js

(x- r) x dx Ilx- rl13

(1 )

where, x, the integration variable, represents the coordinate of

a point on S, and dx is an infinitesimal element on S along

the direction of the current flow.

E. Ampere's Law
While Biot-Savart law gives a recipe for computing the magnetic field from a given current configuration, Ampere's Law [7], in a sense, gives the inverse of it. Given the magnetic field B at every point in the space, and a closed loop C (Figure 3(a)), the line integral of B along C gives the current enclosed by the loop C. That is,

fc 2(C) := B(l). dl = 110Iencl

(2)

where, 1, the integration variable, represents the coordinate of a point on C, and dl is an infinitesimal element on C.
In Biot-Savart Law and Ampere's Law one can conveniently
choose the constant 110 to be equal to 1 by proper choice of
units. Moreover, by choice, the value of the current flowing in the conductor is unity. Thus, for any closed loop C, the value of 2(C) is zero iff C does not enclose the conductor, otherwise it is ±1 (the sign depends on the direction of integration performed on C). Thus in Figure 3(a), 2(C1) = 1 and 2(C2) = o.

III. ApPLICATION OF THEORY OF ELECTROMAGNETISM IN

IDENTIFYING HOMOTOPY CLASSES

A. Skeleton of SHIOs as Current Carrying Manifolds

Construction 3: (Modeling skeleton of a smo as a

current carrying manifold) This is the key construction:

Given m obstacles in an environment, 01, O2,... , Om, with

genus k1' k2,... , km respectively, we can construct M =

k1 + k2 + ... + km skeletons from M SHIOs (obtained using

Constructions I and 2), namely S1, S2,... , SM. Each Si is a

closed, connected, boundary-less I-dimensional manifold. We

model each of them as a current-carrying conductor carrying

current of unit magnitude (Figures I(a), 2(a)). The direction

of the currents is not of importance, but by convention, each

is of unit magnitude.

Definition 3 (Virtual Magnetic Field due to a Skeleton):

Given Si, the skeletons of a Simple Homotopy-Inducing

Obstacle, we define a Virtual Magnetic Field vector at a point

r in the space due to the current in Si using Ampere's Law

as follows,

B,. (r)-_

� 47r

r (x-r) x dx Jsi Ilx-rl13

( 3)

where, x, the integration variable, represents the coordinates

of a point on Si, and dx is an infinitesimal element on Si

along the chosen direction of the current flow in Si.

B. h-Signature

Definition 4 (h-Signature): Given an arbitrary trajectory,

T, in the 3-dimensional environment with M skeletons, we

define the h-signature of T to be the following M-vector,

H(T) = [h1(T), h2(T), ... , hM(T)]T

(4)

where,

1 hi(T) = Bi(l). dl

(5)

is defined in an analogous manner as the integral in Ampere's Law. In defining hi, Bi is the Virtual Magnetic Field vector due to the unit current through skeleton Si, 1 is the integration

11

variable that represents the coordinate of a point on 7, and dl is an infinitesimal element on 7.

Lemma 1: If two trajectories 71 and 72 connecting the

same pair of fixed end points belong to the same homotopy

class, then their h-signatures are the same.

Sketch of Proof Since 71 and 72 connect the same points,

71 U -72, i. e. 71 and -72 together (where -7 indicates the

same curve as 7, but with the opposite orientation) form a

closed loop in the 3-dimensional environment (Figure 3(b)).

We replace the obstacles 01, O2,... , Om in the environments with the skeletons Sl, S2,"" SM.

Consider the presence of just the skeleton Si. By the direct

consequence of Ampere's Law and our construction in which

a unit current flows through Si, the value of
1 hi(71 U -72) = TIU-T2Bi(l). dl

is non-zero if the closed loop formed by 71 U -72 encloses

the current carrying conductor Si' Otherwise it is zero. For

example, in Figure 3(b), hp(71U-72) = 1 and hq(71U-72) =

O. A direct consequence of this fact is that hi(71 U -72) = 0

if 71 can be smoothly deformed into 72 without intersecting

Si. Now, by the definition of line integration we have the

following identity,

hi(71 U -72) = IT1u_T}3i(I). dl

(6)

= IT1 Bi(l). dl- IT2 Bi(l). dl

hi(71)- hi(72)

Thus, hi(7I) = hi(72) if 71 can be smoothly deformed into

72 without intersecting Si (i.e homotopic).

Now in presence of skeletons Sl, S2,... , SM the same

argument extends for each skeleton individually. Thus 71 and

72 being homotopic will imply that their h-signatures are the

same.

•

Assumption 1: The converse statement of Lemma I holds true in most practical robotics problems and applications.
Reasoning: The converse statement of Lemma I would read "Two trajectories 71 and 72 connecting the same pair of
fixed end points belong to the same homotopy class if their
h-signatures are the same.". While this statement at the first glance appears quite intuitive using the same logic as before, it in fact does not hold true in an universal sense.
The reason, as discussed earlier, is that the h-signature we formulate is in fact a homology invariant rather than a homotopy invariant of trajectories. Thus, if in the above state­ ment, we replace "homotopy" with "homology", the statement becomes a lemma. As we will discuss in greater details in Section VI, the notion of homology, though more abstract than homotopy, was developed as a part of algebraic topology because of the fact that homotopy is difficult computationally. While homology serves as a fair analog for homotopy in many respects, there are subtle differences between two.
However, in robotics applications, for most practical sce­ narios, this separation is little. For example, homotopy and homology classes of trajectories are one and the same for trajectories in 3-dimensional configuration spaces with un­ bounded obstacles (e. g. X- Y- Time configuration space).

(a) Trajectory that loops around a (b) In the most general case, it is

skeleton & one that doesn't. In difficult to precisely identify a non­

this figure hi(T1 ) > 1 and 0 < looping homotopy class.

hi(T2) = hi(T2) < 1.

Fig. 4.

In such environments Assumption I becomes a lemma. More­ over, out of the two types of problems we will consider, the one in which we explore/find least cost trajectories in different homotopy classes in an environment, we are guaranteed to find trajectories in distict homotopy classes without even the need of Assumption I being true. This is because homotopic trajectories are always guaranteed to be homologous [10].

In Section VI we discuss this in greater details and its

implications in robot planning problems.

•

C. Some Notes on the Value of h-Signature
"Looping" of a trajectory around an obstacle (Figure 4(a))
is similar in essence to non-Jordan curves on two-dimensional planes. However in three dimensions their precise and univer­
sal definition is more difficult. One way of identifying one of
the homotopy classes of trajectories (joining a given start and an end coordinate) that do not loop around a skeleton Si is by joining the start and the end coordinates using a straight line
segment (call it 1'). Then the trajectories that are homotopic to
l' form a particular homotopy class of non-looping trajectories W.r.t. Si (for example, in Figure 4(a), the homotopy class to which 1'2, and hence 72, belong are non-looping). However, for more complex obstacles (like knots), the notion of a non­
looping trajectory being a straight line segment breaks down
(See Figure 4(b)). In fact the notions of looping and non­
looping is imprecise in such cases. In [2] we show that for the special simple case when Si is an infinitely long line, the component of the h-signature hi (1') for a line segment l' lies between -1 and 1. We hence propose the following
mathematical definition of a non-looping trajectory, Definition 5 (Non-looping trajectory w.r.t. Si): A trajec­
tory 7 is said to be non-looping w.r.t. Si if hi(7) E (-1,1). The value is in [0,1) if the trajectory goes around Si in accordance with the right-hand rule with thumb pointing along the direction of the current in Si. If the direction is opposite, the value lies in (-1,0].
This definition, in many cases, conform to our general intuition of non-looping trajectories. If another trajectory, 7', connecting the same start and end points as a non-looping trajectory 7, goes on the "other side of the obstacle" without looping around it, then 7 U -7' forms a closed loop that encloses Si. Then, hi(7U-7') = ±1 = sign(hi(7U-7')). But since, 7 and 7 U -7' goes around Si in the same orientation, we have sign(hi(7 U -7')) = sign(hi(7)). Again by property of line integration, hi(7 U -7') = hi(7) - hi(7'). Thus,

12

hi(r') = hi(r) - sign (hi(r)). Thus we have the following definition.
Definition 6 (Complementary Homotopy Class): Given a trajectory r that is non-looping w.r.t. all the skeletons in the environment (i. e. hi(r) E (-1,1) \j i = 1,2 ,...,M), we define the Complementary Homotopy Class of the homotopy class of r to be the one for which the h-signature is H (r) - sign (H (r)), where sign(·) gives the vector of signs of the elements of its input vector.
IV. SEARCH-BASED PLANNING IN THREE DIMENSIONS
W ITH HOMOTOPY CLASS CONSTRAINTS
We now investigate the problem of search-based path plan­ ning for trajectories in 3-dimensional configuration spaces. Pri­ marily we investigate two types of problems: (i.) Exploration of the different homotopy classes of trajectories connecting a given start and goal coordinates in the environment, and (ii.) Planning for trajectories with specified homotopy class constraints (where we are required to find trajectories restricted to specified homotopy classes, and/or avoiding other specified homotopy classes). We perform these tasks in two kinds of environments: a) two-dimensional dynamic environment, and b) three-dimensional static environment.
In the discussion that follows, we represent a point in the 3-dimensional configuration space using the coordinates v = (x, Y, z) , with the understanding that z can represent time in the time-varying 2-dimensional environment.
The approach, as in [I], is to discretize the configuration space, construct a directed graph out of it, and perform a graph search in it. The discretization can be quite general. Approximate or exact cell decompositions can be used to generate a roadmap. The roadmap can be probabilistic or deterministic. Or a uniform grid representation can be used to generate a graph, which is the representation used here. The discretized space is represented by the graph 9 = (V, E), in which each node v = (x, Y, z) E V represents the coordinate of a discretized cell. Depending on the type of configuration space, the nodes are connected to their relevant neighboring nodes by weighted edges, where the weights are equal to the cost of traversing the edge. A directed edge connecting node VI to V2 is represented by {VI -+ V2}. Inaccessible coordinates (lying inside obstacles or outside a specified workspace) do not constitute nodes of the graph. A path in this graph represents a trajectory of the robot in the 3-dimensional configuration space. Moreover, small obstacles (e. g. created by sensor noise), or obstacles that we don't desire to contribute towards the homotopy class of trajectories, can be chosen not to have a skeleton, thus preventing them from claiming a component in the h-signature vector.
We will discuss the connectivity of the graph, g, and the cost function in greater details for each of the two types of configuration space we present in Section V.
A. Computation of h-Signature for an Edge of 9
For all practical applications we assume that a skeleton of an obstacle, Si, is made up of finite number (ni) of line segments:

s"

1 f (a) A skeleton of an obstacle can be (b) Magnetic field at r due to the
constructed/approximated so that it current in a line segment s s . is made up of n line segments.
Fig. 5.

Si - - {sn i si' s� i Si' ..., sini-l Sin�' s:i:ns,i::1} (F'Igure 5(a». Thus,

the integration of equation (3) can be split into summation of

ni integrations,

where

j'

==

B 1

i (r)

=

�
47f

+ (j mod

�
J� =1
ni)

}.rs-�-s-- r-+
'

(x-r)x dx Ilx- rl13

(7)

One advantage of this representation of skeletons is that

for

the

straight

line

segments,

{ f, ---t
ss

the

integration

can

be

computed analytically. Specifically, using a result from [7]

(also, see Figure 5(b»,

(x- r)x dx Ilx- rl13

1 Ildll

(sin(o/)

-

sin(a))

n

( ) 1

d X p' d x p

IIdl12 liP'JI - lPf (8)

where, d, p and p' are functions of s{,s{ and r (Figure 5(b»,

and can be expressed as,

p=sj,-r, p'=sj"'-r d=(S{ -IlsS{{ )-xs{(p112x p')

(9)

We define and write if>(s{,s{ ,r) for the RHS of Equation (8) for notational convenience. Thus we have,

where,

j'

==

1

Bi + (j

(r) = mod

1 - 47f
ni

ni
)j'� .="'l

. .,
if>(si,si ,r)

(10)

Given an edge e E £, we can now compute the h-signature, H(e) = [hi (e), h2(e), ... , hM(e)jT, where,

� 1 f hi(e) = 4

if>(s{,s{,I). dl
e j=l

(11)

can be computed numerically.

B. h-Signature Augmented Graph

Let Vs = , ( Y ) xs, s zs be the start coordinate in the config­

uration space, and Vg = (Xg,Yg,Zg) be the goal coordinate.

By Lemma 1 and Assumption 1, any two trajectories from

Vs to V that belong to the same homotopy class will have

the same h-signature. The h-signature can assume different,

but discrete values corresponding on the homotopy class of

) the trajectory. We also write P(vs, v to denote the ) trajectories from vs to v, and vsv E P(vs, v to

set of all denote a

particular trajectory in that set.

13

1) Allowed and Blocked Homotopy Classes: Suppose it
is required that we restrict all our search for trajectories
connecting vs and v9 to certain homotopy classes, or not allow certain homotopy classes. We denote the set of allowed
h-signatures of trajectories leading up to v9 by the set A, and the set of blocked h-signatures as B. A and B are essentially complement of each other (A u B = U, where the universal set, U, is the set of the h-signatures of all the homotopy classes of trajectories joining vs and vg), and B can be an empty set when all homotopy classes are allowed. Following
the discussion in Section III-C, it is also possible to restrict
search to non-looping trajectories by putting all h-signatures that have at least one element outside (-1,1) into the set B.
2) h-Signature Augmented Graph: Once we have the means of computing h-signature for each edge, we introduce the
concept of h-signature augmented graph. We define the h­ signature augmented graph of Q as the graph QH (9) = {VH,CH}, such that each node in this new graph has the h-signature of a trajectory leading up to the coordinate of
the node from vs appended to it. That is, each node in this augmented graph is given by {v,1l(vsv)}, for some vsvE P(vs,v). Thus, corresponding to a given vE V, since there are discrete homotopy classes of trajectories from vs to v, there are a discrete number of the augmented states, {v,h}E VH, where h is a M-vector and assumes the values of the h-signatures corresponding to the discrete homotopy
classes. Thus, we define the h-signature augmented graph of
Q as follows,

f1 where, 1. VH �

{v,h}

) vE V, and,
h = 1l(vsv) for some trajectory VsVE P(vs,v), and,
hE A (equivalently, h rt B) when v = Vg

2. An edge {{v,h} -+ {v',h'}} is in CH for {v,h}E VH and {v',h'}E VH, iff
i. The edge {v -+ v'}E C, and, ii. h' = h + 1l(v -+ v'), where, 1l(v -+ v') is the h­
signature of the edge {v -+ v'}E c.
3. The cost/weight associated with an edge {{v,h} -+ {v',h'}} is same as that associated with edge {v -+ v'}E c.
The consequence of point 3 in the above definition is that an admissible heuristics for search in Q will remain admissible in QH. That is, if f(v,vg) was the heuristic function in Q, we define fH({V,h},{Vg,h'}) = f(v,vg) as the heuristic function in QH for any h'E A.
The consequence of augmenting each node of Q with a h-signature is that now nodes are distinguished not only by
their coordinates, but also the h-signature of the trajectory
followed to reach it. Typically we use graph search algorithms
like A* (or variants like D* or D*-lite) where nodes in the graph QH are expanded starting from the node {zs,O} (where by 0 we mean a M-dimensional vector of zeros).
For exploration of homotopy classes, whenever we expand a state {Zg,Ii} E VH, for some Ii tJ. B, we store the path

up to that node, and continue expanding more states until the desired number of homotopy classes are explored. That way we explore homotopy classes in order of their path costs. For searches with homotopy class constraint, we stop upon expansion of a goal coordinate {Zg,Ii} for some Ii tJ. B (or equivalently, IiE A).

C. Theoretical Analysis

Theorem 1: If PH = {{vl,h1},{V2,h2},··· ,{vp,hp}}

is an optimal path in QH, then the path P* = {Vl,V2,··· ,vp}

is an optimal path in the graph Q satisfying the h-signature

constraints specified by A and B

Proof: By construction of QH, the path {Vl,V2,··· ,vp}

satisfies the given h-signature constraints. Moreover by defi­

nition, PH is a minimum cost path in QH. Since the cost

function in QH is the same as the one in Q and does not

involve hj, it follows that the projection of PH on Q given

by P* = {Vb V2,··· ,vp} is an optimal path in the graph Q

satisfying the constraints defined in QH.

•

V. RESULTS
We implemented the graph structure, QH, and A* search algorithm [9] to search in the graph using C++ programing language. For the numerical integration in Equation (11) we used the GNU Scientific Library. For the graphic visualization we used OpenCV and OpenGL libraries.

A. Planning in Three-Dimensional Space with Static Obsta­

cles

The first domain in which we implement the planning
algorithm is the space of 3 spatial dimensions, X, Y and Z. For a particular problem, the domain of interest is bounded

by upper and lower limits of the 3 coordinates. The domain is

then uniformly discretized into cubic cells and a node of Q is placed at the center of each cell. Connectivity is established

between a node and its 26 neighbors (all cells that share at least

one corner, edge or face with it). Each edge is bi-directional

and its cost is the Euclidean length.

1) Simple Environments with Bounded Obstacles: Fig­

ure 6(a) demonstrates a simple environment, 20 x 20 x 18 discretized, with two torus-shaped obstacles. The skeleton of

each obstacle is made up of line segments passing through

the central axis of the cylindrical segments. Here we restrict

search to non-looping {h = [h1,h2V Ilhll>

trajectories. 1 or Ih21>

IT}h.aWt eiss, eawrech

set for

B = 4 ho­

motopy classes of trajectories connecting a given start and goal

coordinate. As shown in Figure 6(a), the algorithm finds four

such trajectories: (i) going through hoops 1 and 2; (ii) going

through hoop 1 but not through hoop 2; (iii) going through

hoop 2 but not through hoop 1; and (iv) not going through

either hoops. According to Theorem 1 each path is the least

cost one in the graph and in its respective homotopy class.

Figure 6(b) shows the exploration of 4 homotopy classes in

and around a room with windows on each wall. The skeletons

for this obstacle are defined as loops around each window

according to Construction 2. The trivial shortest path from the

given start to goal configuration goes outside the room (the

14

50

(a) Two hoops.

(b) A room with windows.

Fig. 6. Exploring homotopy classes in X - Y - Z space.

-- nodes expanded (104) -- time taken (s)

2

4

6

8

10

Number of homotopy classes explored

Fig. 8. Cumulative time taken and number of states expanded while searching YH for 10 homotopy classes in the problem of Figure 7(a).

(a) Exploring 10 distinct homotopy (b) Plan in the complementary homo-

classes.

topy class of the least cost path.

Fig. 7. An environment with 7 unbounded pipes.

dark violet trajectory). Trajectories in other homotopy classes pass through the room.

2) Environment with Unbounded Pipes: Figure 7(a) shows a more complex environment consisting of 7 pipes stretching to infinity. The workspace of choice is 44 x 44 x 44 discretized, with the start and goal coordinates at two opposite corners of the discretized space. In Figure 7(a) we find the least cost paths in 10 different homotopy classes.
3) Planning with Homotopy Class Constraint: Figure 7(b) demonstrates a planning problem with homotopy class con­ straint. The darker trajectory is the global least cost path found from a search in Q for the given start and goal coordinates. The h-signature for that trajectory was computed, and hence we computed the signature of the complementary homotopy class (Definition 6), and put it in A. The lighter trajectory is the one planned with that A as the set of allowed h-signature. This trajectory goes on the opposite side of each and every pipe in the environment as compared to the darker trajectory.

4) Search Speed and Efficiency: We now present the run­ ning time for the case in Figure 7(a). The environment, as described earlier, is 44 x 44 x 44 discretized, and hence Q contains 85184 nodes. Due to each node being connected to
26 of its neighbors, there are almost 13 times as many edges in Q. The program was run on a Intel Core 2 Duo processor with 2.1 GHz clock-speed and 3GB RAM. We first compute the values of 1i(e) for all edges e E [ and store them in a cache, which takes about 22738. Then we perform the A* search in QH, using the values from the cache whenever required. By doing so we eliminate the requirement of re-computing the h­ signatures of the edges every time we perform a search, even with changed start and goal coordinates. The search for the 10 homotopy classes in Figure 7(a) took about 308 and expansion of 521692 nodes in QH. Figure 8 shows the cumulative time required and the number of nodes in QH expanded.

Fig. 10. An example where the trajectories are homologous, but not homotopic
B. Planning in Two-Dimensional Plane with Moving Obsta­ cles
The next 3-dimensional domain that we experiment with is that of the two-dimensional plane, but with dynamic entities. Thus the variables of interest are X, Y and time. The node set was formed by uniform discretization of the domain of interest. The connectivity of the graph is such that the time variable can increase only in the positive direction (each node connected to 9 neighboring nodes in next time step, including the same x & y). The cost of an edge, e, with differences in
athsecc(eo)or= dinvait�esxo2f+its�eyn2d+pof.i�ntts2,�wxh,e�reyf.ainsda�smt iasllcvoamlupeutfeodr
avoiding zero cost edges in QH. The skeleton of the moving obstacles are the curves traced by their centers (yellow dots in Figure 9) in the X - Y - Time space. The skeletons are closed outside and far from the discretized domain (Construction I). Note that in doing so, segments of the skeleton may point along negative time. However that does not effect the planning since the X - Y - Time space itself can be treated no differently from IR3.
Figure 9 shows the screen-shots from exploration of 4 homotopy classes in X - Y - Time domain. The environment is 40 x 40 discretized in X and Y directions, and have 100 discretization cells in time. There are two dynamic rectangular obstacles, 01 and O2, that undergo a known oscillatory motion inside a narrow passage between other static obstacles. The 4 different trajectories in the different homotopy classes are marked by different colors as well as different numbers at their current locations. The trajectories in the non-trivial homotopy classes go behind the obstacles, a region that would otherwise not be visited by the least cost path without any homotopy class consideration.
VI. HOMOLOGY AS AN ApPROXIMATION OF HOMOTOPY
As discussed earlier, the Assumption 1 may not always hold true. Strictly speaking, the h-signature is a homology invariant rather than homotopy invariant. The study of homology theory as a part of algebraic topology emerged in the fist place because homotopy is difficult to deal with computationally [10]. Although there is much similarity between homotopy and homology, the later is more abstract in nature. However

15

(a) t = 0.48

(b) t = 8.68

(c) t = 23.78

(d) t = 29.68

(e) t = 37.08

(I) t = 43.18

Fig. 9. Screen-shots from an example with two moving obstacles (01 and 02) showing the exploration of 4 homotopy classes in a dynamic environment. The trajectory '3' passes above both 01 and 02. The trajectory '2' passes above 02, but not 01 . The trajectory '1' passes above 01 , but not 02. The
trajectory '0' is the trivial shortest path.

homology is computationally favorable. Thus, very often ho­ mology is used as a modest substitute of homotopy. 2
The integrand in Ampere's law that we used in defining the h-signatures can be shown to be elements from De-Raham cohomology groups [1 3, 1 5], which forms a dual to homology groups of I-dimensional manifolds (robot trajectories in our case). Thus the h-signatures can be shown to be homology invariants of the trajectories.
Without going into an in-depth discussion on homology the­ ory, we would like to emphasize a few important similarities between homology and homotopy, especially in relation to the application discussed in this paper:
(i) Two sub-manifolds are homotopic implies that they are homologous [10, 1 5]. Thus, two trajectories that are homo­ topic will be in the same homology class, and hence their h-signatures will be the same. Thus, in the problems where we find least cost trajectories in different homotopy classes in a configuration space using the proposed algorithm, we are always guaranteed to obtain trajectories in distinct homotopy classes even if we use h-signatures to find these trajectories.
(ii) The inverse of statement i. (i. e. homologous implies ho­ motopic) for robot trajectories is true for many practical path planning problems as evident from the results in Section V and the results in [I].
In our previous work [1], we have assumed an equivalence between homotopy and homology for convenience (due to Lemma 2 of the paper) since we were considering simple examples. However, as we just discussed, the inverse of state­ ment (i) above is not necessarily true. To see this, consider the example in Figure VI. One can observe that the two trajectories are not homotopic when we consider both obstacles, but they are homotopic with respect to individual obstacles. Hence their h-signatures are the same (i. e. they are homologous). Thus, if we were exploring different homotopy classes in this environment using the described method, we would be finding one trajectory for these two homotopy classes.
VII. CONCLUSION In this paper we have proposed a novel and efficient way of representing homotopy classes in 3-dimensional configuration spaces by exploiting laws from theory of electromagnetism. We have shown that this representation is well suited for use with graph search techniques for finding least cost paths respecting given homotopy class constraints as well as for
2We would like to thank Prof. Robert Ghrist and Dr. David Lipsky, University of Pennsylvania, for providing valuable insights on homology theory.

exploring different homotopy classes in an environment. The method is independent of the discretization scheme or the cost function. We have demonstrated the efficiency, applicability and versatility of the method in our results. Although, in strict mathematical sense the equivalence relation under considera­ tion is homology, we argued that it is very close to homotopy in many practical robotic applications.

REFERENCES

[I] S. Bhattacharya, V. Kumar, and M. Likhachev. Search-based path

planning with homotopy class constraints. In Proceedings of the Twenty­

Fourth AAIA Conference on Artificial Intelligence, luly II 2010.

[2] S. Bhattacharya, M. Likhachev, and V. Kumar.

h-signature

of a non-looping trajectory with respect to an infinite straight

line skeleton. Technical report, The University of Pennsylva-

nia, May 2011. See https://fling.seas.upenn.eduJ�subhrabh/cgi-

binlwikilindex.php?SFile=RSSllsupp.

[3] Harry Blum. A Transformation for Extracting New Descriptors of Shape.

In Weiant W. Dunn, editor, Models for the Perception of Speech and

Visual Form, pages 362-380. MIT Press, Cambridge, 1967.

[4] R. Bott and L.W. Tu. Differential forms in algebraic topology. Graduate

texts in mathematics. Springer-Verlag, 1982.

[5] Frederic Bourgault, Alexei A. Makarenko, Stefan B. Williams, Ben Gro­

cholsky, and Hugh F. Durrant-Whyte. Information based adaptive robotic

exploration. In in Proceedings IEEEIRSJ International Conference on

Intelligent Robots and Systems (IROS, pages 540-545, 2002.

[6] Douglas Demyen and Michael Buro. Efficient triangulation-based

pathfinding. In AAAJ'06: Proceedings of the 21st national conference

on Artificial intelligence, pages 942-947. AAAI Press, 2006.

[7] David 1. Griffiths. Introduction to Electrodynamics (3rd Edition).

Benjamin Cummings, 1998.

[8] D. Grigoriev and A. Slissenko. Polytime algorithm for the shortest

path in a homotopy class amidst semi-algebraic obstacles in the plane.

In ISSAC '98: Proceedings of the 1998 international symposium on

Symbolic and algebraic computation, pages 17-24. ACM, 1998.

[9] P. E. Hart, N.1. Nilsson, and B. Raphael. A formal basis for the heuristic

determination of minimum cost paths. IEEE Transactions on Systems,

Science, and Cybernetics, SSC-4(2):100-107, 1968.

[10] Allen Hatcher. Algebraic Topology. Cambridge University Press, 2001.

[II] 1. Hershberger and1. Snoeyink. Computing minimum length paths of a

given homotopy class. Comput. Geom. Theory Appl, 4:331-342, 1991.

[12] Anil K. Jain. F undamentals of digital image processing. Prentice-Hall,

Inc., Upper Saddle River, Nl, USA, 1989.

[13] 1. lost. Riemannian Geometry and Geometric Analysis. Springer, 2008.

[14] lames Munkres. Topology. Prentice Hall, 1999.

[15] 1.1. Rotman. An Introduction to Algebraic Topology. Springer, 1988.

[16] E. Schmitzberger, 1.L. Bouchet, M. Dufaut, D. Wolf, and R. Husson.

Capture of homotopy classes with probabilistic road map. In Interna­

tional Conference on Intelligent Robots and Systems, volume 3, pages

2317-2322, 2002.

[17] Yves Talpaert. Differential Geometry with Applications to Mechanics

and Physics. CRC Press, 2000.

[18] Yan Zhou, Bo Hu, and lianqiu Zhang. Occlusion detection and tracking

method based on bayesian decision theory. In Advances in Image

and Video Technology, volume 4319, pages 474--482. Springer Berlin

/ Heidelberg, 2006.

16

