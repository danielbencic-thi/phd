Zotero automatically redirected your request to ieeexplore.ieee.org through the proxy at thi.idm.oclc.org. Don’t Proxy This Site Proxy Settings ✕
IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2020 16th International Confe...
Bidirectional Homotopy-Guided RRT for Path Planning
Publisher: IEEE
Cite This
PDF
Zhen Lin ; Yanjun Li ; Ji Xiang ; Gui Ling ; Feiyang Suo
All Authors
149
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Background
    III.
    Homotopy Bias
    IV.
    Bi-directional HOMOTOPY-GUIDED RRT
    V.
    Simulation Results

Show Full Outline
Authors
Figures
References
Keywords
Metrics
Abstract:
As a popular robot path planning algorithm, RRT (Rapid-exploring Random Tree) and various RRT-based extensions have achieved remarkable results. However, existing algorithms rely too much on randomness and often do not make use of known map information, this makes the growth of trees too blind. To this end, we introduce Bidirectional Homotopy-Guided RRT (BH-RRT) that combines Bidirectional RRT (Bi-RRT) with information obtained from obstacle contours. Compared with the previous methods, BH-RRT can reflect most of the map's information with a small number of feature points, and then form a set of points. This set can provide a better local goal point in each iteration, so that the tree can grow in a more favorable direction, rather than only being affected by the goal point. Experimental results show that BH-RRT outperforms RRT, HRRT and Bi-RRT in the success rate within a limited time.
Published in: 2020 16th International Conference on Control, Automation, Robotics and Vision (ICARCV)
Date of Conference: 13-15 December 2020
Date Added to IEEE Xplore : 08 January 2021
ISBN Information:
INSPEC Accession Number: 20307988
DOI: 10.1109/ICARCV50220.2020.9305400
Publisher: IEEE
Conference Location: Shenzhen, China
SECTION I.
Introduction

In the past two decades, considerable progress has been made in the field of mobile robot. Path planning, as one of the prolonged topic for mobile robot research and development, widely used in various industrial fields, such as transportation [1] , [2] , game design [3] , [4] , and industrial robots [5] – [6] [7] . The path planning algorithm of the robot is actually according to the constraints to find an optimal or suboptimal collision- free path in the reachable area from the starting point to the end point. The efficiency of path planning algorithm will significantly affect the performance of robots in completing tasks.

Path planning problems are commonly solved by grid-based searches or stochastic searches algorithms. Graph-based searches such as A * [8] and Dijkstra [9] has been studied for a long time, which can discretely find the best solution if a solution exists, otherwise returns failure. But these graph-based algorithms do not scale well to the problem of large state space, due to memory space and computation time grow exponentially. Stochastic searches, such as Rapid-exploring Random Tree (RRT) [10] , Probabilistic Roadmap (PRM) [11] , use sample-based methods to avoid discretization of state space and provide a weaker form of completeness.

Among these sampling-based path planning algorithms, the RRT algorithm is one of the most representative, and its variants [12] – [13] [14] [15] achieve efficient search and planning in various applications.

Utilizing the information of known obstacles to drive the growth of RRT has made some progress. Voronoi-graph based method is widely used [16] – [17] [18] [19] , which divides the obstacle space into many connected sub-regions. Given a starting point and an ending point, the subregion to which they belong can be determined and collision free paths can be quickly planned along the constructed edges. However, it needs a lot of extra time to generate and reprocess the Voronoi graph, and the generated paths sometimes introduce excessive additional costs due to its heavy reliance on obstacle information. In [20] , [21] , the topological constraints contained in homotopy information are used to limit the growth of the tree, and the reference frames that segment different homotopy classes are used to restrict the tree to belong to the same homotopy class as the pre-input path, thus reducing the sampling range and speeding up the search. However, these methods can only be carried out in the case of pre-input, too dependent on human participation.

In this paper, we present an efficient path planning method called Bidirectional Homotopy-Guided RRT (BH-RRT) that combines Bidirectional RRT (Bi-RRT) [22] – [23] [24] [25] [26] and information obtained from obstacle contours. BH-RRT uses homotopy information to determine an invalid triangle area, and the feature points on the obstacles are used to perform sampling bias. Different from some previous methods, BH-RRT introduces points on obstacles to guide the tree to avoid the nearest obstacle, instead of simply using the goal point to guide the growth of the tree. Such a design makes the node more likely to explore the local optimal path , thereby reducing the number of nodes.

The remainder of this paper is organized as follows. In section II , we introduce the specific contents of RRT algorithm and Bi-RRT algorithm, which are both the basis of the proposed BH-RRT algorithm. Section III introduce proposes a new method to improve search efficiency, and introduces the concept of feature points. Section IV introduces the algorithm of BH-RRT and some details. Section V conducts experiments on different complex environments, and compares the results of different algorithms. Finally, in Section VI , we summarize this paper and put forward the prospect of future path planning.
Fig. 1.

Node generation using generic rrt

Show All

SECTION II.
Background

We briefly review RRT algorithm and its bi-directional structure in this section.
A. Rrt Algorithm

Standard RRTs algorithm constructs a tree using random sampling in search space, the tree starts from the initial point x i n i t , and expands to find the collision-free path toward the goal point x g o a l , as shown in Fig. 1 . Algorithm1 presents its pseudo code. In the initialization, x i n i t is stored in the vertices set V , and the edges set E is set as empty, V and E together constitute tree T . Further detail of some major functions is described as the following:

    RandomSample: For a given space configuration X , randomly select a point x r a n d in the obstacle-free state space X f r e e .

    Nearest: Find the nearest node x n e a r e s t to x r a n d in the tree T according to a cost function.

    Steer: Return a control input in the direction from x n e a r e s t towards x r a n d at an increment distance Δ q .

    Collosion-f ree: Determine whether the given path from x n e a r e s t towards x r a n d passes through obstacle region X o b s or not.

    InsertN ode: Add the node x n e w to vertices set V and add the edge that connect it with its parent x m i n to edges set E , where V and E both in tree T .

Algorithm 1 Basic RRT ( x i n i t )

V ← { x i n i t } ; E ← ∅ ; T ← ( V ,   E )

for k = 0 to K do

x r a n d ← R α n d o m S a m p l e ( )

x n e a r e s t ← N e a r e s t ( x r a n d ,   T )

Xne w ← S t e e r ( x r a n d , x n e a r e s t )

if Co o l l i s i o n − f r e e ( x n e w ) then

T T ← I n s e r t N o d e ( x n e w ,   T )

if x n e w = = x g o a l then

break

return T

B. Bidirectional RRT

The Bidirectional RRT (Bi-RRT) algorithm starts by growing two RRTs, one from x i n i t and another from x g o a l , and this is depicted in Fig. 2 . The two trees T a and T b (starting from x i n i t and x g o a l respectively) are maintained at all times until they become connected and a solution is found.

Algorithm 2 depicts the algorithmic of the steps involved in Bi-RRT . In each iteration, we select a random point x r a n d , and the nearest neighbor from the T a to x r a n d is termed as X n e a r e s t . Then x n e w generated according to x r a n d and x n e a r e s t , and if collision check is false, added to T a . The nearest neighbor from the T b to x n e w is termed as x n e a r e s t 1 . After that X n e a r e s t 1 is going to keep expanding towards where x n e w is until connected or encounter obstacles. At the end of each iteration, the tree with more nodes becomes T b in the next iteration, and the other tree becomes T a .
Fig. 2.

Bidirectional rrt

Show All
Algorithm 2 Bidirectional RRT ( x i n i t )

V a ← { x i n i t } ; E a ← ∅ ; T a ← ( V a ,   E a )

V b ← { x g o a l } : E h ← ∅ : T h ← ( V b . E b )

for k = 0 to K do

x r a n d ← R a n d o m S a m p l e ( )

x n e a r e s t ← N e a r e s t ( x r a n d , T a )

x n e w ← S t e e r ( x r a n d , x n e a r e s t )

if C o l l i s i o n − f r e e ( x n e w ) then

T a ← I n s e r t N o d e ( x n e w ,   T a )

x n e a r e s t 1 ← N e a r e s t ( x r a n d ,   T b )

x n e w 1 ← S t e e r ( x n e w , x n e a r e s t 1 )

if C o l l i s i o n − f r e e ( x n e w 1 ) then

I nsertNode ( x n e w 1 ,   T b )

while not x n e w 1 = = x n e w do

x n e w 2 ← S t e e r ( x n e w ,   x n e w 1 )

x n e w 1 = x n e w 2

if C o l l i s i o n − f r e e ( x n e w 1 ) then

InsertNode ( x n e w 1 ,   T b )

else break

if x n e w 1 = = x n e w then

return T a

if l e n ( V a ) > l e n ( V b ) then

S w a p ( T a ,   T b )

SECTION III.
Homotopy Bias

This section mainly discusses how to use homotopy information for sampling range analysis, and only the two dimensional state space is taken into considered.
Fig. 3.

Show All

A. Single Obstacle

Fig. 3 describes a path planning problem with known positions of starting point x ′ i n i t , ending point x ′ g o a l , and the only one obstacle X o b s in the plane space. Then the coordinate system with the midpoint x ′ c t r of x ′ i n i t and x ′ g o a l as the origin is set up, where the direction pointing to x ′ g o a l is the positive direction of the x-axis. Let o b s 1 and o b s 2 be two points arbitrarily taken on an obstacle. If there is a solution, let P r ( ⋅ ) be the probability of getting the point on the optimal path in any homotopy class through random sampling in the plane space. Then we can get the following:
P r ( X f r e e − S ′ ) P r ( X f r e e ) = X f r e e X f r e e − S ′ ≥ 1 , (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*} \frac{Pr(X_{free}-S^{\prime})}{Pr(X_{free})}=\frac{X_{free}}{X_{free}-S^{\prime}}\geq 1, \tag{1} \end{equation*} where S ′ be the set of all points in the area X S ′ formed by x ′ i n i t , x ′ g o a l , o b s 1 and o b s 2 . Since the plane space is uniformly distributed, the size of point set S ′ is proportional to X S ′ . X S ′ can be calculated by
X S ′ = 1 2 d ( x ′ i n i t ,   x ′ g o a l ) | y ( o b s 1 ) − y ( o b s 2 ) | , (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{S^{\prime}}= \frac{1}{2}d(x_{init}^{\prime},\ x_{goal}^{\prime})\vert y(obs_{1})-y(obs_{2})\vert, \tag{2} \end{equation*} where y ( ⋅ ) is the value of the point in the y-axis direction of the coordinate system.

Since our goal is to maximize the effect shown in (1) , we need to maximize X S ′ . The optimal feature points on the obstacle that maximize and minimize y ( ⋅ ) can be found as o b s ∗ 1 and o b s ∗ 2 , then o b s 1 and o b s 2 are replaced by them respectively.
B. Multiple Obstacles

More general, we extend this method to the state space with multiple obstacles X o b s = { X 1 o b s , X 2 o b s , … , X n o b s } , as shown in Fig. 4 . First, randomly take two points o b s i 1 , o b s i 2 on each obstacle X i o b s ∈ X o b s . Then, the intersection I can be obtained by
I = { ∀ X i o b s ∈ X o b s ,   L ( o b s i 1 ,   o b s i 2 ) ∩ L ( x ′ i n i t ,   x ′ g o a l ) } . (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*} I=\{\forall X_{obs}^{i}\in X_{obs},\ L(obs_{1}^{i},\ obs_{2}^{i})\cap L(x_{init}^{\prime},\ x_{goal}^{\prime})\}. \tag{3} \end{equation*} where L ( ⋅ , ⋅ ) be the line segment between two points. There may be many elements in I , but in order to simplify subsequent calculations, we will select a point p j ∈ I closest to x ′ i n i t . The obstacle X j o b s which contain the points o b s j 1 , o b s j 2 is our direct obstacle, where p j ∈ L ( o b s j 1 ,   o b s j 2 ) . According to the symmetry, we can also select the direct obstacle X i o b s of x ′ g o a l . Therefore, X S ′ can be regarded as composed of X S ′ 1 and X S ′ 2 , where X S ′ 1 is a triangular area composed of x ′ i n i t , o b s j 1 and o b s j 2 , and X S ′ 2 is a triangular area composed of x ′ g o a l , o b s i 1 and o b s i 2 . Then we can find the optimal feature points o b s ∗ 1 , o b s ∗ 2 , o b s ∗ 3 and o b s ∗ 4 on the obstacles through the approach proposed in III-A.

Fig. 4.

Show All

SECTION IV.
Bi-directional HOMOTOPY-GUIDED RRT

For path planning based on the bidirectional tree, in each iteration, the starting point of local path x ′ i n i t and the target point of local path x ′ g o a l are different, and it requires a lot of calculation to constantly update the optimal feature points on each obstacle that maximize X S ′ given in (2) as the coordinate system is constantly changing. However, it can be seen from (1) that even if the two feature points are randomly selected, it can have a certain effect. Therefore, we only select the optimal feature points on each obstacle in the initial stage , as is shown in Fig. 5 .

More details here are shown about how to select a better local goal point x ′ ′ g o a 1 by Algorithm 3 . According to the method in III-B, we can get the obstacle X c o b s in the direction from the starting point to the target point, where { o b s c 1 , o b s c 2 } ∈ X c o b s (Obs Algorithm 3 ), and X c o b s is likely to be the obstacle closest to the starting point x ′ i n i t of the local path. How to use obstacle X c o b s to determine the more reasonable local goal point x ′ ′ g o a l is a key point, and in this paper we simply choose among o b s c 1 , o b s c 2 and x ′ g o a l . This idea is the core part of the method in this paper.
SECTION Algorithm 1:
New-Goal

Input ; x ′ i n i t , x ′ g o a l

Output : x ′ ′ i n i t , x ′ ′ g o a l

while O b s ( x ′ i n i t , x ′ g o a l ) ≠ ∅ do

o b s c 1 , o b s c 2 ← O b s ( x ′ i n i t ,   x ′ g o a l )

x ′ g o a l , c h ← B e s t ( o b s c 1 ,   o b s c 2 ,   x ′ g o a l )

if c h = = 1 and P 2 ( x ′ g o a l ) = = 2 then

x ′ g o a l ← N e a r e s t ( x ′ i n i t ,   T b )

x ′ ′ i n , − i t ← N e a r e s t ( x ′ g o a l ,   T a )

x ′ ′ g o a l ← x ′ g o a l
Fig. 5.

Feature points select and priority setting of BH-rrt. The feature points (yellow) are all selected in the initial stage according to the x i n i t and x g o a l , which may not be consistent with the optimal feature points when the starting and ending points of the local path are x i n i t and x 1 . Each black bracket contain the initial priority of the feature point for T a and T b respectively, while the red one show s the priority change caused by the T b 's growth and proximity to the feature point C .

Show All

As shown in Fig. 5 , we providing an initial priority for each feature point, and it is a critical step. For feature points that are not close to boundaries or other obstacles, set its priority to 0 to indicate the highest priority, otherwise, the priority of the feature points that will lead the tree to the narrow channel is set to 1 . Here we set the relative distance that can be considered close to the boundary and other obstacles to within 2 steps. If a feature point is approached by the node which lead by itself, i.e. the distance between the two is within a predetermined range, the priority of the feature point is reduced to 2 . While the lowest priority 3 is set for those feature points that are already on the boundary and do not have the possibility to guide the growth of Bidirectional tree.

Now we will explain how to choose a new goal point x ′ ′ g o a l for the local path planning. A heuristic cost function C ost ( ⋅ ) is introduced to calculate the heuristic cost of o b s c 1 and o b s c 2 :
C o s t ( p ) = d ( x n e w , p ) + d ( x n e a r e s t 1 , p ) (4)
View Source Right-click on figure for MathML and additional features. \begin{equation*} Cost(p)=d(x_{new},p)+d(x_{nearest1},p) \tag{4} \end{equation*}

The lower cost point is denoted as L and another point is denoted as H . Then x ′ g o a l is updated according to the following Table I :
Table I

If x ′ g o a l remains unchanged, c h = 0 , otherwise c h = 1 (Best Algorithm 3 ). And P 1 ( ⋅ ) be the priority of the feature point for the tree. It should be pointed out that for bidirectional trees, each side of the tree has its own priority.

In the bidirectional tree structure, in order to improve efficiency, x ′ i n i t and x ′ g o a l are usually the closest points on the two trees to each other. And we use the method proposed above to update x ′ o o a l , so this will also cause x ′ i n i t to update. We just update x ′ i n i t to the point closest to x ′ g o a l on the tree where it is located, and after the loop structure, the final x ′ i n i t is denoted as x ′ ′ i n i t .
SECTION Algorithm 4
Bi-directional Homotopy-GUIDED RRT(Xinit)

Input: R , x i n i t x g o a l . X o b s , m a x Ffffff

Output : T a , T b

V a ← { x i n i t } ; E a ← ∅ ; T a ← ( V a ,   E a )

V b ← { x g o a l } ; E b ← ∅ ; T b ← ( V b ,   E b )

for k = 0 to m a x do

x r a n d ← R α n d o m S a m p l e ( )

x n e a r e s t ← N e a r e s t ( x r a n d , T a )

x n e w ← S t e e r ( x r a n d , x n e a r e s t )

if Collision-f r e e ( x n e w ) then

T a ← I n s e r t N o d e ( x n e w ,   T a )

x n e a r e s t 1 ← N e a r e s t ( x n e w ,   T b )

x n e w , x n e a r e s t 1 ← N e w − G o a l ( x n e a r e s t 1 ,   x n e w )

X n e w 1 ← S t e e r ( x n e w , x n e a r e s t 1 )

if C o l l i s i o n − f r e e ( x n e w 1 ) then

InsertN ode ( x n e w 1 , T b )

while not x n e w 1 = = x n e w do

x n e w 2 ← S t e e r ( x n e w ,   x n e w 1 )

x n e w 1 = x n e w 2

if C o l l i s i o n − f r e e ( x n e w 1 ) then

InsertNode ( x n e w 1 ,   T b )

else b r e a k

if x n e w 1 = = x n e w then

if x n e w in R then

P 2 ( x n e w ) = 2

else

return T a , T b

S w a p ( T a ,   T b )

The BH-RRT algorithm starts by growing two RRTs, looks like Bi-RRT in Section II-B , one from x i n i t and another from x g o a l . Two trees T a and T b (starting from x i n i t and x g o a l respectively) are maintained at all times until they become connected and a solution is found.

The BH-RRT has presented in Algorithm 4. HRRT is a single-tree version of BH-RRT , and the specific algorithm can be derived according to Algorithm 4 , it would not be discussed in detail here.
SECTION V.
Simulation Results

BH-RRT and HRRT were compared to RRT and Bi-RRT on a variety complex path planning problems Fig. 6 , and we show the performance of different algorithms in three scenarios, and from the top row to the bottom row are Scenario 1, Scenario 2, Scenario 3, respectively. And the results obtained by each algorithm are in a separate column, for the bidirectional tree algorithm, we use different colors to distinguish the trees.

In Table II , the details corresponding to the three scenarios considered are captured.

For each scenario, above algorithms are executed to determine the success rate within the time limit, and the trees generated by different algorithms. The size of scenarios is 1200×600. We set a maximum iteration limit of 50000 and the bias towards the goal was set to 0.5. The maximum time for a single run is 150 seconds. On this basis, the results of RRT, HRRT, Bi-RRT and BH-RRT algorithms are compared.
Fig. 6.

Planning results of different algorithms(the red box indicates that this is the algorithm we proposed). The black dots represent the starting and ending points, and for the bidirectional versions, we use red and blue to represent different trees. Most of these results are selected from the samples where the algorithms successfully implement the path planning, but due to time constraints, the RRT algorithm has a high probability of not being able to plan the results in these scenarios.

Show All
Fig. 7.

Show All
Table II Details of the test scenarios

In Fig. 6 , the results of Scenario 1 corresponding to above algorithms are presented. Note that, compared with RRT, HRRT makes use of feature points on obstacles to enable its tree to expand to most areas of the map faster, while Bi-RRT makes use of information interaction between the two trees to achieve efficient synchronous promotion of nodes. BH-RRT combines the advantages of these two, so that the generated tree will neither rely on random search or continuous approach along the wall when encountering large obstacles like Bi-RRT, nor generate a large number of nodes in unnecessary areas like HRRT. The results corresponding to Scenario 2 and Scenario 3 are presented in Fig. 6 , which are similar to the result of Scenario 1.

Fig. 7 depicts the relationship between the success rate of each algorithm and the running time in three scenarios. We notice that the results are different in each scenario, HRRT and Bi-RRT under different scenarios each have advantages, but BH-RRT and RRT were basically the best and the worst, respectively. In Scenario 3, as shown in Fig. 7(c) , when there are many obstacles but no narrow channels, the HRRT performance is even close to BH-RRT, because despite the introduction of feature points, HRRT still has a strong randomness, which is very important in this kind of environment. And the performance of Bi-RRT in Scenarios 2 is better, as shown in Fig. 7(b) , this is because in between the two trees don't have many large obstacles bidirectional search can greatly improve efficiency.
SECTION VI.
Conclude

In this paper, we proposed an efficient path planning method. The proposed method estimates a better local goal point from feature points generated from the contours of obstacles and original local goal point. Because of the property of RRT, the probability completeness of the planned path are guaranteed. Experimental results demonstrate that our method outperforms other methods and can have a high success rate in a short period of time. Extending our method into a higher dimensional space and taking semantic context of the environment into consideration are our future works.

Authors
Figures
References
Keywords
Metrics
More Like This
Dynamic Collision Avoidance Path Planning for Mobile Robot Based on Multi-sensor Data Fusion by Support Vector Machine

2007 International Conference on Mechatronics and Automation

Published: 2007
Multiple mobile robot path planning for rollover prevention and collision avoidance

2011 11th International Conference on Control, Automation and Systems

Published: 2011
Show More
References
1.
A. M. de Souza, R. S. Yokoyama, G. Maia, A. Loureiro and L. Villas, "Real-time path planning to prevent traffic jam through an intelligent transportation system", 2016 IEEE Symposium on Computers and Communication (ISCC) , pp. 726-731, 2016.
Show in Context View Article
Google Scholar
2.
Lee Hyeonbeom, Kim Hyoin and H. J. Kim, "Path planning and control of multiple aerial manipulators for a cooperative transportation", 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 2386-2391, 2015.
Show in Context View Article
Google Scholar
3.
G. Foderaro, A. Swingler and S. Ferrari, "A model-based cell decomposition approach to on-line pursuit-evasion path planning and the video game Ms. Pac-Man", 2012 IEEE Conference on Computational Intelligence and Games (CIG) , pp. 281-287, 2012.
Show in Context View Article
Google Scholar
4.
Qingchun Meng et al., "Game strategy based on fuzzy logic for soccer robots", Smc 2000 conference proceedings. 2000 ieee international conference on systems man and cybernetics. ‘cybernetics evolving to systems humans organizations and their complex interactions' , vol. 5, pp. 3758-3763, 2000.
Show in Context Google Scholar
5.
Z. Doulgeri and T. Matiakis, "A web telerobotic system to teach industrial robot path planning and control", IEEE Transactions on Education , vol. 49, no. 2, pp. 263-270, May 2006.
Show in Context View Article
Google Scholar
6.
Sören Larsson and J.A.P. Kjellander, "Path planning for laser scanning with an industrial robot", Robotics and Autonomous Systems , vol. 56, no. 7, pp. 615-624, 2008, ISSN 0921-8890.
Show in Context CrossRef Google Scholar
7.
Bing Fu, Lin Chen, Yuntao Zhou, Dong Zheng, Zhiqi Wei, Jun Dai, et al., "An improved A * algorithm for the industrial robot path planning with high success rate and short length", Robotics and Autonomous Systems , vol. 106, pp. 26-37, 2018, ISSN 0921-8890.
Show in Context CrossRef Google Scholar
8.
P. E. Hart, N. J. Nilsson and B. Raphael, "A formal basis for the heuristic determination of minimum cost paths", TSSC , vol. 4, no. 2, pp. 100-107, Jul. 1968.
Show in Context View Article
Google Scholar
9.
E. W. Dijkstra, "A note on two problems in connexion with graphs", Numerische Mathematik 1 , pp. 269-271, 1959.
Show in Context CrossRef Google Scholar
10.
S. Karaman and E. Frazzoli, "Sampling-based algorithms for optimal motion planning", The International Journal of Robotics Research , vol. 30, no. 7, 2011.
Show in Context CrossRef Google Scholar
11.
L. E. Kavraki, P. Svestka, J.-C. Latombe and M. H. Overmars, "Prob-abilistic roadmaps for path planning in high-dimensional configuration spaces", TRA , vol. 12, no. 4, pp. 566-580, 1996.
Show in Context Google Scholar
12.
J. J. Kuffner and S. M. LaValle, "RRT-connect: An efficient approach to single-query path planning", Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065) , vol. 2, pp. 995-1001, 2000.
Show in Context View Article
Google Scholar
13.
Y. Abou El Majd, H. E. Ghazi and T. Nahhal, "PaRRT: Parallel rapidly exploring random tree (RRT) based on MapReduce", 2017 International Conference on Electrical and Information Technologies (ICEIT) , pp. 1-5, 2017.
Show in Context View Article
Google Scholar
14.
C. Moon and W. Chung, "Kinodynamic Planner Dual-Tree RRT (DT-RRT) for Two-Wheeled Mobile Robots Using the Rapidly Exploring Random Tree", IEEE Transactions on Industrial Electronics , vol. 62, no. 2, pp. 1080-1090, Feb. 2015.
Show in Context View Article
Google Scholar
15.
L. Ma, J. Xue, K. Kawabata, J. Zhu, C. Ma and N. Zheng, "A fast RRT algorithm for motion planning of autonomous road vehicles", 17th International IEEE Conference on Intelligent Transportation Systems (ITSC) , pp. 1033-1038, 2014.
Show in Context View Article
Google Scholar
16.
S. Garrido, L. Moreno, M. Abderrahim and F. Martin, "Path Planning for Mobile Robot Navigation using Voronoi Diagram and Fast Marching", 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems , pp. 2376-2381, 2006.
Show in Context View Article
Google Scholar
17.
S. R. Lindemann and S. M. LaValle, "Incrementally reducing dispersion by increasing Voronoi bias in RRTs", IEEE International Conference on Robotics and Automation , 2004.
Show in Context View Article
Google Scholar
18.
A. Shkolnik and R. Tedrake, "Path planning in 1000+ dimensions using a task-space Voronoi bias", 2009 IEEE International Conference on Robotics and Automation , pp. 2061-2067, 2009.
Show in Context View Article
Google Scholar
19.
D. Kim, J. Lee and S. Yoon, "Cloud RRT*: Sampling Cloud based RRT*", 2014 IEEE International Conference on Robotics and Automation (ICRA) , pp. 2519-2526, 2014.
Show in Context View Article
Google Scholar
20.
V. Narayanan, P. Vernaza, M. Likhachev and S. M. LaValle, "Planning under topological constraints using beam-graphs", 2013 IEEE International Conference on Robotics and Automation (ICRA) , pp. 431-437, 2013.
Show in Context View Article
Google Scholar
21.
D. Yi, M. A. Goodrich and K. D. Seppi, "Homotopy-aware RRT*: Toward human-robot topological path-planning", 2016 11th ACM/IEEE International Conference on Human-Robot Interaction (HRI) , pp. 279-286, 2016.
Show in Context View Article
Google Scholar
22.
J. A. Starek, J. V. Gomez, E. Schmerling, L. Janson, L. Moreno and M. Pavone, "An asymptotically-optimal sampling-based algorithm for Bidirectional motion planning", 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 2072-2078, 2015.
Show in Context View Article
Google Scholar
23.
A. H. Qureshi et al., "Adaptive Potential guided directional-RRT", 2013 IEEE International Conference on Robotics and Biomimetics (ROBIO) , pp. 1887-1892, 2013.
Show in Context View Article
Google Scholar
24.
C. Moon and W. Chung, "Kinodynamic Planner Dual-Tree RRT (DT-RRT) for Two-Wheeled Mobile Robots Using the Rapidly Exploring Random Tree", IEEE Transactions on Industrial Electronics , vol. 62, no. 2, pp. 1080-1090, Feb. 2015.
Show in Context View Article
Google Scholar
25.
J. J. Kuffner and S. M. LaValle, "RRT-connect: An efficient approach to single-query path planning", Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065) , vol. 2, pp. 995-1001, 2000.
Show in Context View Article
Google Scholar
26.
D. Ghosh, G. Nandakumar, K. Narayanan, V. Honkote and S. Sharma, "Kinematic Constraints Based Bi-directional RRT (KB-RRT) with Parameterized Trajectories for Robot Path Planning in Cluttered Environment", 2019 International Conference on Robotics and Automation (ICRA) , pp. 8627-8633, 2019.
Show in Context View Article
Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
