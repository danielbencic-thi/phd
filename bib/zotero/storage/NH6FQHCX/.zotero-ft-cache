2009 IEEE International Conference on Robotics and Automation Kobe International Conference Center Kobe, Japan, May 12-17, 2009
Survivability: Measuring and Ensuring Path Diversity
Lawrence H. Erickson and Steven M. LaValle Department of Computer Science
University of Illinois at Urbana-Champaign Urbana, IL 61801 USA
{lericks4, lavalle}@uiuc.edu

Abstract— A novel criterion is introduced for assessing the diversity of a collection of paths or trajectories. The main idea is the notion of survivability, which measures the likelihood that numerous paths are obstructed by the same obstacle. This helps to improve robustness with respect to collision, which is an important challenge in the design of real-time planning algorithms. Efﬁcient algorithms are presented for computing the survivability criterion and for selecting a subset of paths that optimize survivability from a larger collection. The algorithms are implemented and solutions are illustrated for two different systems. Chi-square tests are used to show uniform coverage obtained by using the computed paths in a simple breadth-ﬁrst search. Random obstacle placement is used to show superior robustness of these primitives compared to uniform sampling of the control space.
I. INTRODUCTION
For over a decade, planning algorithms have been hampered by the challenging issue of designing effective motion primitives. This is particularly an issue with nonholonomic and kinodynamic planning, in which it becomes important to efﬁciently overcome differential constraints while simultaneously searching for a collision-free trajectory. A discussion of this issue in the context of rapidly exploring random trees appears in [8]. For particular systems, the careful construction of effective primitives dramatically improved performance in [2], [3]. In a much earlier work, an efﬁcient nonholonomic planner was made by using Dubins curves as primitives [5]. Given the recent technological advances in autonomous vehicles, there has been substantial interest in real-time planning in cluttered, unpredictable environments. This has prompted the development of methods that design motion primitives for outdoor vehicle navigation [9], [12].
All of these practical demonstrations show that ﬁnding the “right” primitives dramatically helps in planning algorithms. We wonder what criterion should be optimized in choosing the primitives. If this issue becomes well-understood, then it should be possible to automate the design of effective motion primitives as problems arise in new contexts.
The quest for a good collection of paths is related to basic sampling issues that have arisen in many contexts. For example, selecting points that optimize discrepancy is important for numerical integration [11]. Choosing samples in conﬁguration space that reduce dispersion (radius of the largest empty ball) is desirable in optimization [11], [14], motion planning [7], and was applied directly to the problem of selecting path sets in [4]. An interesting extension of

discrepancy to the space of paths, which is more closely related to the current paper, appears in [13].
Our paper is inspired by the recent works of Branicky, Knepper, and Kuffner, in which they introduce the notion of path diversity for designing a robust, efﬁcient collection of paths or trajectories [1]. They discretize the environment into square segments and then greedily choose paths that minimize the number of squares that the paths hold in common. This makes important progress toward designing better primitives and improving our understanding; however, some issues remain. One limitation is that the deﬁnition depends on an arbitrary discretization of the state space into boxes. If the discretization is much coarser than the obstacles, then the method may report that two well-separated paths are likely to be blocked by the same obstacle. On the other hand, if the discretization is much smaller than the typical obstacle size, then two paths that might in fact be very close to each other could be reported as being well-separated.
In this paper, we introduce a new criterion, called survivability, which tries to assess the likelihood that other paths survive when a path in the collection is blocked by an obstacle. The idea is to bombard each path by obstacles and characterize the collateral damage to other paths. Rather than ﬁxing a particular resolution for obstacles, our survivability deﬁnition averages over all resolutions, thereby avoiding the discretization sensitivity in the path diversity deﬁnition from [1].
Section II introduces the mathematical deﬁnition of survivability, which is expressed in terms of integrals over all paths and obstacle sizes. Section III introduces an algorithm that computes the survivability in time O(n2p lg p), in which n is the number of paths in the collection and p is the number of sample points chosen along each path to evaluate the integrals. Section IV then uses the algorithm to develop an O(N n2p lg p)-time algorithm that selects a set of n paths from a larger collection of N paths by optimizing the computed survivability. The algorithms are implemented, and Section V presents experiments on two systems: a hovercraft and a car pulling four trailers. The experiments show that primitives selected by optimizing survivability have better uniform exploration properties and robustness with respect to obstacles in comparison to primitives chosen by uniformly sampling the control space and primitives chosen at random.

978-1-4244-2789-5/09/$25.00 ©2009 IEEE

2068

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

τ xroot

r

τ (eτ )

T

Fig. 1. An illustration of the inner integral of Equation 1. An obstacle of constant radius is dragged along τ .

II. SURVIVABILITY

This section introduces a new measure, called survivability, for a collection of paths. Let X ⊂ Rn be a state space, which is assumed to be a typical manifold resulting from
the conﬁguration space of a robot, or possibly the phase
space, which includes conﬁguration and velocity variables. Let ρ : X × X → [0, ∞) denote the distance metric on X.
Let τ : [0, eτ ] → X denote a continuous, ﬁnite-length, path parameterized with constant speed, in which eτ > 0 is the endpoint of the path domain. Let T be any ﬁnite collection of such paths, with the assumption that there is some ﬁxed state xroot called the root, for which τ (0) = xroot for all τ ∈ T . The domain endpoint eτ may be different for each τ ∈ T . The path parameter s ∈ [0, eτ ] may or may not correspond to time.
The main idea will be to evaluate path sets based on whether they can “survive” an obstacle in X that blocks them. For an obstacle O ⊂ X, a path is said to be blocked if there exists some s ∈ [0, eτ ] for which τ (s) ∈ O. Let rsurvivability α(T, r, x) ∈ [0, 1] be the fraction of paths in T that are unblocked by a ball of radius r centered at x. Since the choices of r and x are arbitrary, consider averaging over all possibilities. This yields the survivability στ (T ) of a path τ in the collection T , which is deﬁned as

στ (T )

=

1 eτ

∞ eτ
α(T, r, τ (s))dsdr.
00

(1)

Note that the upper bound of ∞ on the outer integral may be replaced by ℓmax, the maximum length over all paths in T . All paths in T are blocked for radii larger then ℓmax and therefore nothing more contributes to στ (T ).
The survivability of a set T of paths is deﬁned by averaging (1) over all τ ∈ T to obtain:

σ(T )

=

1 |T |

στ (T − τ ).

(2)

τ ∈T

Note that because the limits of integration are independent
of each other the integration order can be swapped. Intuitively, σ(T ) attempts to measure the amount of collat-
eral damage a single path τ is likely to do to the other paths in T if it is blocked by some obstacle. A path τ that has many intersections with other paths is problematic because an obstacle that blocks τ is likely to block the paths that intersect τ . Paths that almost intersect are also dangerous for the same reason. A path τ for which most of its image is close to xroot is extremely dangerous because an obstacle

placed along it would likely block xroot and consequently all paths in T .

III. CALCULATING THE SURVIVABILITY
For very simple types of paths, such as straight lines originating from xroot, it is possible to compute σ(T ) analytically. However, as the dimension of the problem increases and the paths become more complicated, ﬁnding an exact value of σ(T ) becomes difﬁcult or impossible. In these situations, we represent each path as a sequence of uniformly-spaced points in X:

τ ≈ τˆ = (τ (s1), τ (s2), τ (s3), . . . , τ (sn)),

(3)

for which 0 ≤ s1 < · · · < sn ≤ eτ . Let Tˆ be the set in which each τ ∈ T is replaced by τˆ. The
building block of computing survivability is Algorithm 1. It uses a subroutine called NEAREST(x, τˆc) which returns the element in τˆc that is closest to x.

Algorithm 1 ORDERED PAIRWISE(τˆ, τˆ′)
a←0 n is the number of points in τˆ for i = 1 to n do
xc =NEAREST(τ (si), τˆ′) a ← a + ρ(τ (si), xc) end for Return a/n

Algorithm 1 approximately calculates (1) for στ (T ) with the condition that the only member of T is τ ′. Since στ (T ) simply evaluates the fraction of surviving paths for different obstruction sizes and different points, it can be approximately computed by simply running Algorithm 1 for every τˆ′ ∈ Tˆ and averaging over the results, giving Algorithm 2.
Algorithm 2 SINGLE PATH SURVIVABILITY(τˆ, Tˆ) a←0 n ← |Tˆ| for i = 1 to n do a ← a+ORDERED PAIRWISE(τˆ, Tˆi) end for Return a/n

Algorithm 3 calculates (2) by iterating Algorithm 2 over all τˆ ∈ Tˆ.
Algorithm 3 SURVIVABILITY(Tˆ) a←0 n ← |Tˆ| for i = 1 to n do a ← a+SINGLE PATH SURVIVABILITY(τˆi, Tˆ − τˆi) end for Return a/n

2069

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

Algorithm 3 executes quickly. If all of the paths are organized into kd-trees, which enable O(n lg2 n) construction time and O(lg n) lookup time (except for certain contrived pathological cases), then, assuming that all paths have fewer than p points, Algorithm 1 takes O(p lg p) time. There are two nested loops in Algorithms 2 and 3 that each run in O(n) time; hence, the entire calculation runs in time O(n2p lg p), in which n is the number of paths in T .
IV. SELECTING THE BEST PATHS
Suppose you are given a very large set of N paths Tall, and you want to select a small subset of n paths that maximize the survivability. Choosing the optimal set of n paths from a master set Tall of N paths would require checking every nsized subset of Tall. Unfortunately, that would be intractable. However, if a subset Tsub of n − 1 paths is provided, it is easier to ﬁnd the best path to add to the subset. Simply running Algorithm 3 on the (n − 1)-path subset augmented with every possible path would take O(N n2p lg p) time (assuming N is very large relative to n). Naively constructing an n-path subset step-by-step from one or two starting paths would therefore take O(N n3p lg p) time. However, adding a single path by completely recomputing Algorithm 3 for every possible added path ignores any previous computation that may have been done.
If Algorithm 3 has already been performed on Tsub, then the next best path to add can be found in linear time relative to n. Essentially, Algorithm 3 performs Algorithm 1 on every ordered pair of different paths in the input set. A set of size n has n2 − n ordered pairs of distinct elements. When a new path τnew is added to the set, Algorithm 1 does not have to be executed on pairs that do not involve τnew. If a new path τnew is added to a set of n paths, there are 2n invocations of Algorithm 1 that involve P , meaning that a new path can be found in O(n) time. Algorithm 4 calculates the value of SURVIVABILITY(Tˆsub + τˆnew), where Tˆsub is a pre-existing set of approximate paths, τˆnew is an approximate path to be added to the set, and x =SURVIVABILITY(Tˆsub).
Algorithm 4 CHECK SINGLE PATH(Tˆ, τˆnew, x) w0 ← |Tˆ|(|Tˆ| − 1) a ← w0x for i = 1 to |Tˆ| do a ← a+ORDERED PAIRWISE(Tˆi, τˆnew) a ← a+ORDERED PAIRWISE(τˆnew , Tˆi) end for wf ← (|Tˆ| + 1)|Tˆ| a ← a/wf Return a
Building an n path set from one or two starting paths using this method would take O(N n2p lg p) time, with an additional O(N p lg2 p) time to construct the original kdtrees. This begs the question of how to select some constant number of starting paths that can be used as a nucleus upon

which the rest of the set can be built. In [1], the authors simply choose the shortest path. This method is certainly quick, but it can be dangerous if the shortest path in Tall is some extremely suboptimal path, such as one that closely circles the root for its entire length. A better method is to iterate through the master set some constant number of times K (we use K = 3) and look for the path that is most different from the one selected in the previous iteration, as demonstrated in Algorithm 5, which takes a master set Tˆall as input and returns two reasonable paths to use as a nucleus, along with their survivability value. In practice, the algorithm usually entered a closed cycle of two paths within three iterations.
Algorithm 5 CHOOSE 2 START(Tˆall) a←1 n ← |Tˆ| for i = 1 to K do m ← −1 b ← −1 for j = 1 to n do x ←SURVIVABILITY({Tˆa, Tˆj}) if x > m then m←x b←j end if end for if i = K then a=b else Return Tˆa, Tˆb, and m end if end for
In most models that have some sort of angular control, this method will quickly choose two paths that steer in opposite directions with high magnitude. However, this method is imperfect, and ﬁnding a superior way to choose some initial constant set is a subject of current research.
For certain extremely simple systems, such as the case where all motion primitives are all straight lines in the pxpy plane emanating from xroot, this method will choose primitives that are as close as possible to uniform sampling. Notice the Van der Corput sequence-like behavior ([15]) of the algorithm as it selects more primitives in Figure 2.
V. EXPERIMENTS
Two different types of experiments were performed. In the ﬁrst set of experiments, a set of primitives was chosen to maximize survivability. These primitives were used to construct a tree in the workspace. The quality of these trees was gauged by a chi-square measure, which rewards a uniform distribution of nodes and wide exploration, and punishes clumping of the tree nodes (e.g., the hypothesis was a uniform distribution over the state space, and the test measured the difference from the hypothesis). A different

2070

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

Fig. 2. The results of incrementally choosing 3, 4, 5, 6, 12, and 24 paths from an initial set of 100,000 linear paths. Two initial paths were chosen with Algorithm 5, and the other paths were chosen incrementally by iterating through the master set of paths while repeatedly calling Algorithm 4 to determine the most survivability-preserving path that was not already present in the subset. Every added path goes in the middle of the largest gap left from the previous iteration, producing a result that would be identical to uniform sampling if the proper primitives had been available from the input set.
robotic model was used in each experiment. In the second set of experiments, random obstacles were placed in the workspace, and the amount of surviving paths was measured. The primitives chosen to maximize survivability were compared to primitives chosen at random from the master set and primitives created by uniform sampling of the control space.
A. Hovercraft
The hovercraft is a robot that can propel itself forward in the plane with the use of a large jet. However, since it hovers over the ground, it is not subject to friction, so the only way it can slow itself down is by rotating itself around and thrusting in a direction opposite to its movement. It is also equipped with two other jets that can be pointed in opposite directions to allow rotation.
The effectiveness of this method was tested by performing a chi-square test on the trees formed from primitives chosen with this algorithm, and comparing the results to both sets of randomly selected paths from the master set and sets of paths generated from uniformly sampled controls. The hovercraft model used in these tests has following state variables, x, y, vx, vy, and θ, denoting the x position, the y position, the x velocity, the y velocity, and the robot’s orientation. It has two controls, ua and uω. The state transition equation is

different length in the state space. A weighted L2 metric was used to calculate the distance between states x1 and x2 on the paths. Every set had 9 primitives in it. The environment was split into 95 buckets for the chi-square calculation (every dimension was split into nine segments) and the sets of primitives were built into trees of depth 4 (for a total of 7381 nodes). Since the starting orientation, position, and velocity were all zero, and the trees were 60 seconds deep, the minimum and maximum reachable values for every R component are as follows:

dimension minimum maximum

px

−1125

1800

py

−1666

1666

vx

−47.44

60

vy

−57.72 57.72

Of course, not all combinations of these minimum and

maximum values are actually reachable by the robot, but

this is not very important when simply comparing the per-

formance of primitive sets.

Two different uniform path sets were generated. The ﬁrst one resulted from actual uniform sampling, so ua = 0, ua = 1/2, or ua = 1. However, this creates a large number of points that simply sit at the origin, so a second uniform set was also generated where ua = 1/3, ua = 2/3, or ua = 1. In both uniform sets, uω = −.25, uω = 0, or uω = .25. One thousand randomly chosen sets of primitives were also tested, and their average result is shown. All results
are normalized so the result of the primitives calculated to maximize survivability is 1.000.

set

chi-square result

calculated

1.000

1000 random avg.

6.339

uniform 1

6.374

uniform 2

4.559

Figure 3 shows the results (in the pxpy plane) of building a depth 4 tree with three different primitive sets. The blue

points represent the tree nodes, and the red lines are the

edges. Note that the primitives chosen to maximize the

survivability have formed a tree that explores almost uni-

formly in every direction. The uniformly sampled primitives (speciﬁcally, the uniform 2 set) explores far in the +px direction, but little in the other directions.

p˙x = vx

p˙y = vy

v˙x = ua cos θ

(4)

v˙y = ua sin θ θ˙ = uω.

The value of ua can range from 0 to 1, and the value of θ˙ (in radians per second) can range from −.25 to .25.
A set of 3000, 15-second long primitives were calculated from a non-moving initial state pointed in the +x direction. Note that this means every path in the conﬁguration has a

B. Car Pulling Four Trailers
The car pulling four trailers has two inputs, uv, the current velocity, and uφ, the angle of the pulling car’s front wheels, and seven state variables. For these tests, −1 ≤ uv ≤ 1, and −π/3 ≤ uφ ≤ π/3. To construct the trees, 10 primitives were drawn from a pool of 3000, and trees of depth 3 were formed. There are also two constants, L, the front car length and d, the trailer hitch length, which were chosen to be 1/4 and 3/4 respectively. Our model is adapted from one presented in [10]. The state transition equation is

2071

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

Fig. 4. Car pulling trailers. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives.

Fig. 3. Hovercraft. [top left] The entire 3000 path master set. [top right] The primitives chosen to maximize survivability. [bottom left] The depth 4 tree made by the primitives chosen to maximize survivability. [bottom right] The depth 4 tree made by uniformly sampled primitives.

p˙x = uv cos θ0

p˙y = uv sin θ0

θ˙0

=

uv L

tan uφ

θ˙1

=

uv d

sin(θ1

− θ0)

θ˙2

=

uv d

cos(θ0

− θ1) sin(θ1

−

θ2)

θ˙3

=

uv d

cos(θ1

− θ2) cos(θ0

− θ1) sin(θ2

− θ3)

θ˙4

=

uv d

cos(θ2

− θ3) cos(θ1

− θ2) cos(θ0

− θ1) sin(θ3

− θ4).

(5)

The maximum and minimum reachable values for each R

component are listed in the table below. dimension minimum maximum

px

−45

45

py

−44.78 44.78

For the chi-square calculations, the state space was split

into 77 regions. The normalized results are in the table below.

set

chi-square result

calculated

1.000

1000 random avg.

1.532

uniform

1.635

Note that Figure 4 only shows the robot’s position in the

pxpy plane. The uniformly sampled primitives explore a wide area, but they have poor internal coverage, and many of the

nodes are clustered into a few small areas. The calculated

primitives have more uniformly distributed internal coverage.

Additionally, the uniformly sampled primitives explore

some of the other dimensions poorly. Figure 5 shows the

distribution of nodes in the θ0θ4 plane. From this view, it

is easy to see the poor coverage of the uniformly sampled

Fig. 5. Views from the θ0θ4 plane. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives.

primitives and the superior coverage of the primitives that maximize survivability.

C. Random obstacle placement

These experiments involved placing a circular obstacle,

with randomly chosen position and radius, into a workspace

containing a set of 50 Dubins car paths and calculating the

fraction of unblocked paths (Dubins car is deﬁned in [6]).

Seven different sets were tested, one with primitives chosen

to maximize survivability, one with primitives generated by

uniform sampling of the controls, and ﬁve sets consisting

of primitives chosen at random from the master set. Each

set was tested with 5000 different obstacles, though a test

was considered invalid unless at least one path in the set

was blocked. The results of the tests are shown in the table

below. set

average fraction of surviving paths

calculated

0.560

random 1

0.504

random 2

0.501

random 3

0.513

random 4

0.500

random 5

0.489

uniform

0.499

About 25 paths remained unblocked on average in the

random and uniform sets, compared to about 28 paths on

average remaining unblocked in the set designed to maximize

survivability, representing a 12% improvement.

VI. CONCLUSION
We have presented a new method of measuring path diversity and an algorithm that incrementally chooses the

2072

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

Fig. 6. [left] The Dubins car paths chosen to maximize survivability when the angular component is given a very low weight. [right] The Dubins car paths chosen to maximize survivability when the angular component is given a very high weight.
Fig. 7. The hovercraft path sets chosen for different starting velocities. The green arrows denote the initial direction of movement.
most diverse paths from a master set. However, there are still areas that require further exploration.
Most importantly, our deﬁnition of survivability is highly dependent on the distance metric used to deﬁne the ball in (1). Using different distance metrics will result in different optimal paths, as seen in Figure 6. It is highly probable that different metrics will be suited to different applications of the primitives. For example, if exploration of the pxpy plane is the primary goal, then a metric that gives higher weights to the differences between px and py may be preferable. However, if the problem involves a small pxpy space relative to the robot, but ensuring correct conﬁguration is difﬁcult (i.e. backing a truck with a trailer attached into a garage, where the workspace is the garage and a short driveway), then a metric that gives higher weights to the various S1 components may be more desirable. Finding the best metric for a given problem and robotic model is an open question.
The selected paths can also be inﬂuenced by the starting state of the system. Figure 7 shows the different hovercraft system paths selected under two different starting velocities (direction denoted by the arrow in the lower left corner). This suggests that, for planning purposes, dividing the state space into regions and calculating a different set of primitives for each one may be necessary.
Additionally, ﬁnding the correct number of primitives to choose given the differential constraints and the dimension of the state space is an important task. Choosing too few would unnecessarily restrict the robot’s movement, but choosing too many would reduce the speed advantage granted by restricting the robot to a small number of primitives. It is unclear whether the number of primitives chosen should be

based primarily on the dimension of the state space, control space, or some combination of the two.
A useful future experiment would be to use these primitives on a robot navigating through a previously mapped environment with additional unexpected obstacles. An example would be a robot attempting to drive through a valley. It may already have a path that it intends to follow, but perhaps some boulders are now obstructing parts of that path. It would have to quickly devise a plan to navigate around the boulders and get back on its intended path. Since a path set with high survivability minimizes the chance that an obstacle blocking one path would also block the other paths in the set, it seems unlikely that a robot equipped with primitives that maximize survivability would be left without options when it encounters obstacles.

ACKNOWLEDGMENT
The authors are supported in part by NSF CISE grant 0535007.

REFERENCES

[1] M. S. Branicky, R. A. Knepper, and J. J. Kuffner, “Path and trajec-

tory diversity: Theory and algorithms,” in Proc. IEEE International

Conference on Robotics and Automation, 2008, pp. 1359–1364.

[2] E. Frazzoli, M. A. Dahleh, and E. Feron, “Maneuver-based motion

planning for nonlinear systems with symmetries,” IEEE Transactions

on Robotics, vol. 21, no. 6, pp. 1077–1091, Dec. 2005.

[3] J. Go, T. Vu, and J. J. Kuffner, “Autonomous behaviors for interactive

vehicle animations,” in ACM SIGGRAPH Symposium on Computer

Animation, 2004.

[4] C. J. Green and A. Kelly, “Toward optimal sampling in the space of

paths,” in International Symposium of Robotics Research, 2007.

[5] J.-C. Latombe, “A fast path planner for a car-like indoor mobile robot,”

in Proceedings AAAI National Conference on Artiﬁcial Intelligence,

1991, pp. 659–665.

[6] S. M. LaValle, Planning Algorithms.

Cambridge, UK:

Cambridge University Press, 2006, also available at

http://msl.cs.uiuc.edu/planning/.

[7] S. M. LaValle, M. S. Branicky, and S. R. Lindemann, “On the

relationship between classical grid search and probabilistic roadmaps,”

International Journal of Robotics Research, vol. 23, no. 7/8, pp. 673–

692, July/August 2004.

[8] S. M. LaValle and J. J. Kuffner, “Rapidly-exploring random trees:

Progress and prospects,” in Algorithmic and Computational Robotics:

New Directions, B. R. Donald, K. M. Lynch, and D. Rus, Eds.

Wellesley, MA: A K Peters, 2001, pp. 293–308.

[9] D. Mateus, G. Avina, and M. Devy, “Robot visual navigation in

semi-structured outdoor environments,” in Proc. IEEE International

Conference on Robotics and Automation, Apr. 2005, pp. 4691–4696.

[10] R. M. Murray and S. Sastry, “Nonholonomic motion planning: Steer-

ing using sinusoids,” IEEE Transactions on Automatic Control, vol. 38,

no. 5, pp. 700–716, 1993.

[11] H. Niederreiter, Random Number Generation and Quasi-Monte-Carlo

Methods. Philadelphia: Society for Industrial and Applied Mathe-

matics, 1992.

[12] M. Pivtoraiko and A. Kelly, “Generating near minimal spanning con-

trol sets for constrained motion planning in discrete state spaces,” in

Proceedings IEEE/RSJ International Conference on Intelligent Robots

and Systems, 2005.

[13] S. Ramamoorthy, R. Rajagopal, Q. Ruan, and L. Wenzel, “Low-

discrepancy curves and efﬁcient coverage of space,” in Proc. Workshop

on the Algorithmic Foundations of Robotics, New York, July 2006.

[14] A. G. Sukharev, “Optimal strategies of the search for an extremum,”

U.S.S.R. Computational Mathematics and Mathematical Physics,

vol. 11, no. 4, 1971, translated from Russian, Zh. Vychisl. Mat. i Mat.

Fiz., 11, 4, 910-924, 1971.

[15] J. G. van der Corput, “Verteilungsfunktionen I,” Akademie van Weten-

schappen, vol. 38, pp. 813–821, 1935.

2073

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:59:09 UTC from IEEE Xplore. Restrictions apply.

