Zotero automatically redirected your request to ieeexplore.ieee.org through the proxy at thi.idm.oclc.org. Don’t Proxy This Site Proxy Settings ✕
IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2015 IEEE/RSJ International C...
Path planning for a tethered robot using Multi-Heuristic A with topology-based heuristics
Publisher: IEEE
Cite This
PDF
Soonkyum Kim ; Maxim Likhachev
All Authors
3
Paper
Citations
377
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Related Work
    III.
    The Preliminaries
    IV.
    Problem Formulation
    V.
    Topology-Based Multi-Heuristic a *

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Abstract:
In this paper, we solve the path planning problem for a tethered mobile robot, which is connected to a fixed base by a cable of length L. The reachable space of the robot is restricted by the length of the cable and obstacles. The reachable space of the tethered robot can be computed by considering the topology class of the cable. However, it is computationally too expensive to compute this space a-priori. Instead, in this paper, we show how we can plan using a recently-developed variant of A* search, called Multi-Heuristic A*. Normally, the Multi-Heuristic A* algorithm takes in a fixed set of heuristic functions. In our problem, however, the heuristics represent length of paths to the goal along different topology classes, and there can be too many of them and not all the topology classes are useful. To deal with this, we adapt Multi-Heuristic A* to work with a dynamically generated set of heuristic functions. It starts out as a normal weighted A*. Whenever the search gets trapped in a local minimum, we find the proper topology class of the path to escape from it and add the corresponding new heuristic function into the set of heuristic functions considered by the search. We present experimental analysis comparing our approach with weighted A* on planning for a tethered robot in simulation.
Published in: 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 28 September 2015 - 02 October 2015
Date Added to IEEE Xplore : 17 December 2015
ISBN Information:
INSPEC Accession Number: 15666910
DOI: 10.1109/IROS.2015.7354040
Publisher: IEEE
Conference Location: Hamburg, Germany
SECTION I.
Introduction

In extreme environments such as disaster areas, wireless signal may not be strong enough for an operator to communicate to a robot [16] , [19] . For example, this was the case when robots were deployed in the reactor building after the disaster of Fukushima due to the radioactive environment [8] . In such cases, using power and communication cables to tether the robot can effectively solve such problems [5] . Tethering also helps in deploying robot in environments with limited accessibility. For example, Nassiraei et al. designed a tethered sewer pipe inspection robot to work instead of a human operator to decrease the cost and to speed-up the inspection [17] . Also, tethered mobile robot can be used to maintain and construct highways [12] .

Tethering also used whenever size limits or actuation power make it impossible for a robot to carry its own power supply. For example, a number of prototypes of micro robots use external power source to actuate the motors or sensors as shown in Figure 1(a) [6] and Figure 1(b) . These robots are tethered.

While tethering solves communication and power problem for mobile robots, it also causes challenges in control and planning. In general, the cable is stiff and has finite length, which restricts the workspace of the mobile robot around the fixed base point. Also, due to obstacles, certain robot poses become reachable only under specific cable configurations (the topology class of the cable).
Fig. 1.

Examples of tethered robots

Show All

In this work, we consider the path planning problem for a tethered mobile robot. The work space of the tethered robot is restricted by the cable of maximum length L which connects the robot to a fixed base. This workspace can be calculated by considering the homotopy class of the cable [14] , which is computationally too expensive for online planning. Instead of relying on this preprocessing, we consider the topology class of the path and cable to guide a heuristic search in the form of heuristics. Recently-developed Multi-Heuristic A* allows to deal with numerous inadmissible heuristic functions while guaranteeing the suboptimality bound [2] . As there could be too many possible topology classes and corresponding heuristic functions and not all of them are useful during the search, we propose a Topology-based Multi-Heuristic A*, which starts as a normal weighted A* [18] but shifts to Multi-Heuristic A* by adding new heuristic functions to escape from local minima.
SECTION II.
Related Work

There has been active research on path planning for tethered mobile robots. Some early work has considered a tangle-free path planning of a group of tethered mobiles robots in obstacle-free environments [11] . In contrast, our approach can handle arbitrary obstacles.

Finding the shortest path for a tethered mobile robot was studied in [23] , [24] . The authors triangulated the environment by using all the edges of polygonal obstacles as edges of triangles. Then the authors built the visibility graph to find the shortest path. However, the suggested algorithm suffers from the computational complexity associated with the number of vertex of obstacles. In addition, our approach is not constrained to polygonal obstacles.

Homotopy class of the cable was considered in [13] to solve a similar problem. However, the authors did not use the homotopy invariant but considered the path length to the node to distinguish paths in different homotopy classes. This representation of homotopy class is based on the metric information of the path and can lose some important information about the paths. This loss of information can result in failure to distinguish paths in different homotopy classes and may lead to finding solutions that are infeasible. For example, they will not be able to differentiate between two paths of the same length even if one passes an obstacle on the right and the other one on the left. In our work, we do consider the homotopy invariant and build an augmented graph to handle the topology information of path and cable. As a result, the solutions found by our approach are guaranteed to be feasible.

Motion planning for a tethered axel rover on steep terrain was studied in [1] . They also consider the homotopy class of the path of round trip path to the goal to minimize the possibility of entanglement of the cable. This work was later extended to an online motion planning algorithm to deal with partially known environment [21] . Also, finding the coverage area is another form of planning problem. In [20] , the authors solved the planning problem for a tethered mobile robot to explore and cover the partially known environment and return to the base point, which also works as the starting point. In our work, we consider arbitrary starting position and cable configurations.

The shortest path of a tethered mobile robot can be generated by relying on pre-computation of the reachable space, which is computationally expensive [14] . We avoid this precomputation and propose a novel algorithm to consider the topology class of the cable and robot path to focus the search. This method results in fast computation of bounded suboptimal paths.
SECTION III.
The Preliminaries

In this section, we discuss the topology of curves, which could be paths or cables. Since the notion of topology was already introduced in various literature [7] , [9] , [10] , [22] , [3] , we will briefly discuss the topology required in our paper. Throughout this paper, we follow the same notations as [14] .

We consider the workspace or search space, W ⊂ R 2 as a simply connected and bounded region on plane. We have m arbitrary-shaped obstacles of O = { O 1 , O 2 , … , O m } . We consider a path or cable in the workspace as a curve on the plane. Two curves, connecting the same start and end points, are homotopic if and only if one can continuously deform to the other without intersecting any obstacles. We call the set of curves that are homotopic homotopy class . For example, the two curves, τ 1 and τ 2 in Figure 2(a) are homotopic and in the same homotopy class. However, τ 3 is not homotopic to these two curves as it cannot deform to τ 1 or τ 2 because of the obstacle, O 1 .

Homotopy invariant is a function of curves that will return the same value for all the curves in the same homotopy class and the different values for pairs of curves that lie in different homotopy classes. In general, it is not easy to find or design such a function. In a 2-dimensional plane, however, one can find a relatively simple and easy homotopy invariant. To do this, we choose reference points inside of each obstacle, ζ i = ( x r , i , y r , i ) ∈ O i . Then we set the reference ray, r i , for each obstacle to start from the corresponding reference point in the direction of [ 0 , 1 ] T . These reference rays serve to compute the homotopy invariant, word, of the given curve. We can then represent the homotopy class of the given curve, h ( ⋅ ) , by building a word to trace the curve while consecutively appending a letter corresponding to the reference ray that the curve crosses. For example, if the curve crosses the reference ray r i from left to right, we add “ r i .” When the curve crosses the reference ray from right to left, we add “ r − 1 i .” Figure 2(b) shows an example (borrowed from [14] ), the homotopy invariant of the curve γ is h ( γ ) = ′ ′ r 2 r 3 r 5 r − 1 6 .” Note that “ r 4 r − 1 4 ” gets evaluated to an empty word, “”.

Homology is a similar concept to homotopy but slightly different. Two curves, connecting the same start and end points, are homologous if and only if they form a boundary of a 2-dimensional region that does not contain or intersect any obstacles. If two curves are homotopic, they are homologous. However, the inverse is not necessarily true. Figure 2(c) shows an example that the two curves, τ 1 and τ 2 , are homologous but not homotopic. The homology invariant of the curves was defined as H-signature of the curve [3] . The H- signature is not unique and can be designed in several ways including Cauchy-Integration [3] , [4] . In this work, we use the H -signature introduced in [15] because this H -signature is designed to count the number of crossing with reference rays, + 1 for left-to-right and −1 for right-to-left, This function can be calculated from the homotopy invariant, word, defined above by counting the number of the corresponding letters appearing in the word. For example, the H -signature of the curve γ in Figure 2(b) is H ( γ ) = [ 0 , 1 , 1 , 0 , 1 , − 1 ] T , where i t h components correspond to obstacle O i .
SECTION IV.
Problem Formulation

In this paper, we solve the problem of planning a path for a tethered mobile robot from the given initial position and cable configuration to the goal while satisfying the cable length constraint. We set the maximum cable length as L . We represent the problem as searching for a path in a homotopy invariant augmented graph. The vertex of the augmented graph, ( q , w ) , includes the position of the robot and homotopy class of the cable, respectively. Also, to decrease the computation load, we add a variable, called cable length l , which is initialized as the length of initial cable configuration at the start vertex and is updated at every generated state based on its predecessor's l and the transition. Each vertex is feasible if the position of the robot is obstacle free and if this configuration is reachable [14] . In other words, the given position is reachable if there is at least one feasible cable configuration, satisfying cable length constraint and is obstacle free, under the given homotopy class, w . It is a sufficient condition of the reachability that the dependent variable l is less than the maximum cable length, l ≤ L . So, whenever l is longer than the cable length, we run the l = c u r v e S h o r t e n ( s , O ) , described below, which returns the length of the shorten path connecting the given state s and the fixed base from the given state s and a set of obstacles O . Then we update the value of l . If the updated value of l is smaller than the maximum cable length L , this vertex is feasible. Even when the updated value of l is greater than L , there can be a curve that is homotopic to the extracted path and its length is shorter than L . So this method is a conservative way to find or build a feasible and reachable space of the tethered mobile robot. The following is the brief algorithm for the Curve Shorten function that was also used in [14] . (Here, we keep track of which obstacles, O c , are blocking the visibility to remove unnecessary computation in the later part of the planner.)
Fig. 2.

We consider two topology classes of curves, homotopy class and homology class.

Show All
SECTION Algorithm 1:
Curveshorten

    curveShorten ( s , O = { O 1 , O 2 , … , O m } )

    P = [ v 0 = q b , v 1 , … , v n = s ] = e x t r a c t P a t h T o ( s ) ;

    l = 0 , O c = ∅ ;

    i = 0 , j = 0 ;

    while j ≤ n

    if j < n AND q i q j + 1 ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ∩ O = ∅

    j = j + 1 ;

    else

    l = l + ∥ q i q j ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ∥ ;

    i = j ;

    add ∀ k into O c S.t. q i q j + 1 ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ∩ O k ≠ ∅

    l = l + ∥ q i q j ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ | ;

    return ( l , O c )

In the above algorithm e x t r a c t P a t h T o ( s ) generates the sequence of vertices from the state to the initial configuration by backtracking the path from the given vertex, s , to the initial configuration of the robot and appending the initial cable configuration as a sequence of connected states. Then this sequence lies in the same homotopy class with the cable configuration of the given vertex s . To speed up and improve the performance of the curueShorte( ), we trace all the vertices on this sequence to find a pair of vertices that have the same x value and the same homotopy invariants. If the path segment connecting these vertices is not a straight vertical line and if such vertical straight line segment is feasible, we can replace the path segment with this vertical straight line because the process does not change the homotopy class of the path and the replaced segment is definitely shorter than the original segment. The green vertical line of the Figure 3(a) shows an example of such replacement. However, the red vertical line is obstacle free but cannot replace the original path as it will change the topology class of the path. By doing so, we run the curveShorten ( ) with slightly different and shorter initial path than the one in [14] . This additional procedure helps to avoid finding locally optimal solutions. The red curve in Figure 3(b) shows an example of the shortened path achieved by the above curveShorten ( ) from the given initial path of the blue curve.
SECTION V.
Topology-Based Multi-Heuristic a *
A. Heuristic Functions Considering Topology

To search the graph we use a heuristic search. As such, it relies heavily on having a good heuristic function that for any state s estimates the cost of reaching a goal state from s .

In this work, we minimize the travelling distance of the robot on a plane. The most common admissible heuristic in 2D search is the Euclidean distance to the goal. In this work, we choose the Euclidean distance as the admissible heuristic of the search. However, the search could be trapped in local minima, which are usually caused by obstacles that block the movement of the cable while exploring the search space guided by a heuristic function which does not consider the cable length constraint and obstacles. If there are some additional heuristic functions to help escaping from these local minima, they can decrease the computation. To this end, we consider the topology-based additional heuristic functions to calculate the length of the shortest path under specific homology classes . In the following section, we explain how these heuristic functions are being used.
Fig. 3.

Example of algorithm curveshorten.

Show All

The heuristic function we design calculates the length of the shortest path from the given position, q c , to the goal position, q g , while considering the change of the H -signature value corresponding to the given obstacle, O i . There are three different types of heuristic functions: not changing the value of H -signature, increasing the value of H -signature and decreasing the value of H -signature. However, it is not trivial to compute such functions as they also depend on the size and shape of the obstacles. We therefore designed a heuristic function which finds the under-estimated length of the path by considering the corresponding obstacle as a vertical line segment and ignoring other obstacles. For each obstacle, we define y m i n , i = m i n ( x , y ) ∈ O i y s. t. x = x r , i and y m a x , i = m a x ( x , y ) ∈ O i y s. t. x = x r , i . We then consider O i and a vertical line segment connecting ( x r , i , y m i n , i ) and ( x r , i , y m a x , i ) , which is the longest vertical line inside of O i containing ζ i . Then we can calculate the length of the path from given position to the goal to change or maintain the homology class corresponding to obstacle. The following algorithm shows how to calculate such distance by using symmetry of the problem.
Heuristic Function Considering Homoloey Class

    procedure distNotToChange ( q c = ( x c , y c ) , q g = ( x g , y g ) , O i )

    if x c > x g

    return distN otToChange ( q g , q c , O i )

    if x c < x i and x i < x g

    if ( y g − y c ) ( x i − x c ) > ( y m i n , i − y c ) ( x g − x c )

    return dist ( x c , y c , x i , y m i n , i ) + d i s t ( x i , y m i n , i , x g , y g )

    return dist ( x c , y c , x g , y g )

    procedure distIncrease ( q c = ( x c , y c ) , q g = ( x g , y g ) , O i )

    if x c > x g

    return distDecrease ( q g , q c , O i )

    if x i < x c

    return dist ( x c , y c , x i , y m i n , i ) + ( y m a x , i − y m i n , i ) + d i s t ( x x , y m a x , i , x g , y g )

    if x i < x g

    if ( y g − y c ) ( x i − x c ) > ( y m a x , i − y c ) ( x g − x c )

    return dist ( x c , y c , x g , y g )

    else

    return dist ( x c , y c , x i , y m a x , i ) + d i s t ( x i , y m a x , i , x g , y g )

    return dist ( x c , y c , x i , y m a x , i ) + ( y m a x , i − y m i n , i ) + d i s t ( x x , y m i n , i , x g , y g )

    procedure distDecrease ( q c = ( x c , y c ) , q g = ( x g , y g ) , O i )

    if x c > x g

    return distIncrease ( q g , q c , O i )

    if x i < x c

    return dist ( x c , y c , x i , y m a x , i ) + ( y m a x , i − y m i n , i ) + d i s t ( x i , y m i n , i , x g , y g )

    if x i < x g

    return dist ( x c , y c , x i , y m i n , i ) + 2 ( y m a x , i − y m i n , i ) + d i s t ( x i , y m a x , i , x g , y g )

    return dist ( x c , y c , x i , y m i n , i ) + ( y m a x , i − y m i n , i ) + d i s t ( x i , y m a x , i , x g , y g )

    procedure dist ( x 1 , y 1 , x 2 , y 2 )

    return ( x 1 − x 2 ) 2 + ( y 1 − y 2 ) 2 − − − − − − − − − − − − − − − − − − √

In our algorithm, we will be adding new heuristic functions whenever the search is trapped in the local minimum. As part of this process, we will be figuring out which heuristic function helps to escape from this local minimum. We start with the empty set of additional heuristic functions, H a d d = ∅ . Whenever we expand vertices in a local minimum, we find a critical obstacle by assuming that this local minimum is caused by the cable length constraint. The following description of the algorithm shown in incHeuristics(s ) shows how it works for a vertex s . First, we find the obstacles that block the visibility, which causes the cable to detour. Then, we find the most dominant obstacle by running and comparing the result of curue. Shorte ( ) with different sets of obstacles. Then we add the desired homology class of the path to pass the chosen obstacle in opposite direction.
Algorithm Add New Heuristic Function

    procedure incHeuristic ( s )

    ( l c , O c ) = c u r v e S h o r t e n ( s , O ¯ ¯ ¯ ¯ ) ;

    find O k minimizes l k = c u r v e S h o r t e n ( s , O ¯ ¯ ¯ ¯ ∖ { O k } )

    if l k < l c

    w = H k ( w , k ) ;

    Case based on w

    case w > 0

    w d = w − 1 ;

    case w < 0

    w d = w + 1 ;

    case w = 0

    if s is on left side of goal

    w d = 1 ;

    else

    w d = − 1 ;

    add ( O k , w d ) into H a d d

    procedure K k ( w , k )

    return # of r k in w − # of r − 1 k in w )

Here H k ( ) calculates the H -signature of the given vertex corresponding to the given obstacle and w d is the desired H -signature to avoid the local minimum due to the corresponding obstacle. By doing so, the corresponding heuristic function for each desired homology class is calculated for the given vertex. If there is a heuristic function corresponding to desired homology class of ( O k , w d ) and a given vertex s = ( q , w ) , the heuristic function to the goal, q g is

    h ( s ) = distNotToChange   ( q , q g , O k ) if w s = w d

    d i s t I n c r e a s e ( q , q g , O k ) if w s < w d

    distDecrease ( q , q g , O k ) if w s > w d

where w s = H k ( w , k ) is the value of H -signature of the given vertex, q, corresponding to the obstacle O k .

B. Algorithm

The Topology-based Multi-Heuristic A ∗ is a variation of Shared Multi-Heuristic A ∗ in [2] , which explores the search space guided by fixed number of heuristic b p ( s g o a l ) functions. The difference between the proposed Topology-based Multi-Heuristic A ∗ and Shared Multi-Heuristic A ∗ is that the former starts out by following the normal weighted A ∗ search with a single admissible heuristic function, which is the Euclidean distance to the goal in this work, and whenever the search is trapped in a local minimum, it adds additional heuristic functions, which are not required to be admissible, to escape from this local minimum. These additional heuristic functions are achieved by considering the topology class of the path to the goal and current cable configuration as described in the previous section. If we have more than one heuristic function, the search switches to Shared Multi-Heuristic A ∗ [2] . Given m obstacles, there are 3 m + 1 candidate heuristic functions, one for the admissible heuristic function and three heuristic functions per obstacle considering three different homology classes. However, it is not clear which functions are the best in guiding the search. Therefore, as described in the previous section, we only ( s , 0 ) O P E N n + i add necessary heuristic functions whenever we need them to solve the given path planning problem.

The following is the pseudo-code of the suggested Topology-based Multi-Heuristic A ∗ . This search algorithm is fundamentally the same as Shared Multi-Heuristic A ∗ . However, the search shifts from weighted A ∗ two Shared Multi-Heuristic A ∗ when it first adds additional heuristic function; when n becomes bigger than 0 (line 49). Whenever expanding the selected vertex, we check if it is a local minimum (line 42). This check basically compares if the priorities of all successor states are larger than the priority of state in question. Then we find and add a proper heuristic function by using incH euristic(s ) function as described in the previous section. By doing so, we add and consider only few heuristic functions during the search on as-needed basis.

Topology-based Multi-Heuristic A ∗ guarantees bounded optimality. If the algorithm terminates at line 10 while running as a weighted A ∗ , the solution will be the same as in weighted A ∗ and bounded by w 1 . If the algorithm shifted to Shared Multi-Heuristic A ∗ and the search terminates at line 17 or 22, then the optimality of the solution is bounded by w 1 w 2 same as in Shared Multi-Heuristic A ∗ .
Topology-Based Multi-Heuristic A ∗ Nat

    procedure tbmha *0

    g ( s g o a l ) = ∞ , b p ( s s t a r t ) = b p ( s g o a l ) =   null

    g ( s s t a r t ) = 0 ;

    O P E N 0 = ∅ ;

    O P E N 0 i n s e r t ( s s t a r t , k e y ( s g o a l , 0 ) ) ;

    n = 0

    while O P E N 0 not empty

    if n = 0

    if b p ( s g o a l )

    terminate and return path pointed by b p ( s g o a l ) ;

    s = O P E N 0 T o p ( ) ;

    expand ( s , 0 ) ;

    else

    for i = 1 to n

    if O P E N i M i n k e y ( ) ≤ w 2 O P E N 0 M i n k e y ( )

    if g ( s g o a l ) ≤ O P E N i M i n k e y ( )

    terminate and return path pointed by b p ( s g o a l ) ;

    s = O P E N i T o p ( ) ;

    expand ( s , i ) ;

    else

    if g ( s g o a l ) ≤ O P E N 0 M i n k e y ( )

    terminate and return path pointed by b p ( s g o a l ) ;

    s = O P E N 0 T o p ( ) ;

    expand ( s , 0 ) ;

    procedure key(s, i)

    return g ( s ) + w 1 h i ( s ) ;

    procedure expand(s, i)

    for i = 0 , …, n

    O P E N i . remove (s);

    if s is goal and g ( s ) < g ( s g o a l )

    s g o a l = s ;

    for each s ′ ∈ S u c c ( s )

    if s ' was never visited

    g ( s ′ ) = ∞ ; b f ( s ′ ) =   t e x t n u l l ;

    if g ( s ′ ) > g ( s ) + c ( s , s ′ )

    if s ' has not been expanded in the anchor search

    i n s e r t / u p d a t e s ′ i n O P E N 0 with key ( s ′ , 0 )

    if s ' has not been expanded in any inadmissible search

    for i = 1 to n

    if key ( s ′ , i ) ≤ w 2 k e y ( s ′ , 0 )

    i n s e r t / u p d a t e s ' in O P E N i with key ( s ′ , i )

    if key ( s , 0 ) ≥ k e y ( s ′ , 0 ) for each s ′ ∈ S u c c ( s )

    m = i n c h   e u r i s t i c ( s ) ;

    for i = 1 to m

    O P E N n + i = ∅ ;

    for each s ′ ∈ O P E N 0

    if key ( s ′ , n + i ) ≤ w 2 k e y ( s ′ , 0 )

    O P E N n + i . insert ( s ′ , k e y ( s ′ , n + i ) ) ;

    n = n + m ;

Fig. 4.

Example paths of the simulations. The blue curves are the initial cable configurations and the green curves are the paths. The fixed base point is the end of blue curve at the bottom center of the map.

Show All

SECTION VI.
Simulation Result

To demonstrate the performance of the suggested Topology-based Multi-Heuristic A ∗ (TbMHN ∗ ) for path planning for a tethered mobile robot, we performed various simulations and compared the performance with weighted A ∗ . (As the suggested TbMHA * guarantees bounded sub optimality, we choose weighted A ∗ , instead of A ∗ , to compare the performance, which also guarantees bounded sub optimality) Since the simulation result depends on the weighting parameters for both algorithms, we used the weighting value of w = 10 for the weighted A ∗ and we chose w 1 = 10 3 and w 2 = 3 for the Topology-based Multi-Heuristic A ∗ . Then, both algorithms had the optimality bound of w 1 w 2 = 10 . Both planning algorithm adapt travelling distance as cost, and weighted A ∗ uses Euclidean distance to the goal as heuristic function, h . TbMHA * adapts the heuristic function consid-erinz homology class described in the previous section.

We built two simple 100 × 100 grid maps with 12 and 11 obstacles ( Figure 4(a) and 4(b) respectively). And we choose the geometric center of each obstacle as its reference point. Using those, we ran several simulations with different cable length constraints and goal positions. The plots in Figure 4 show example paths generated by TbMHA*. We ran 18(three different cable lengths and three different goals for each two maps) simulations and compared the computation time and the number of expansions during the search. We compared evaluation parameters as the ratios of expansion and computation time of TbMHA * with respect to those of weighted A ∗ .
r e = # o f e x p a n s i o n s b y T b M H A ∗ # o f e x p a n s i o n s b y w e i g h t e d A ∗ r t = c o m p u t a t i o n t i m e o f T b M H A ∗ # c o m p u t a t i o n t i m e s o f w e i g h t e d A ∗
View Source Right-click on figure for MathML and additional features. \begin{equation*}\begin{split}&r_{e}=\frac{\#\mathrm{of}\,\mathrm{expansions}\,\mathrm{by}\,\mathrm{TbMHA}^{*}}{\#\,\mathrm{of}\,\mathrm{expansions}\,\mathrm{by}\,\mathrm{weighted}\,\mathrm{A}^{*}}\\ &r_{t}=\frac{\mathrm{computation}\,\mathrm{time}\,\mathrm{of}\,\mathrm{TbMHA}^{*}}{\#\,\mathrm{computation}\,\mathrm{times}\,\mathrm{of}\,\mathrm{weighted}\,\mathrm{A}^{*}}\end{split}\end{equation*}

We plot these evaluation parameters in Figure 5 . The x- axis represents the r e and y-axis represents r t . The × marks are the evaluation of each simulation and the circle is the mean of r e and r t for all 18 simulations. The inside of the dotted lines is the region where both parameters are less than 1, in other words, where the suggested Topology-based Multi - Heuristic A ∗ works faster than weighted A ∗ with less expansions. The plot in Figure 5(a) shows all 18 simulations. The mean values of the evaluation parameters are r ¯ ¯ e = 1.4 and r ¯ ¯ t = 0.76 . According to these results, TbMHA * can find the path faster but needs more expansions. However, there are only four simulations, lying outside of the dotted line, where the weighted A ∗ works better. All these simulations are the cases where we set the largest value of maximum cable length. So the cable is long enough that the cable constraint does not effect the resulting paths. All those four cases correspond to cases where the shortest path for the robot without the tether is the same as the path for tethered robot.

The Figure 5(b) is zoom-in on the lower left portion of Figure 5(a) . The cases shown in Figure 5(b) are the simulations where cable length constraint did make the problem harder. If we consider only these 14 cases in Figure 5(b) , the average evaluation parameters are r ¯ ¯ e = 0.3116 and r ¯ ¯ t = 0.2643 . According to this result, TbMHA * finds the paths faster with less expansions than weighted A ∗ .

To show the performance of TbMHA * on large problem, we considered an example of 300 × 300 grid map with 53 obstacles. (As the computational complexity increases exponentially with the number of obstacles, we increase the number of obstacles instead of increasing the size of the grid.) The Figure 6 shows the resulting path to the goal. Figure 7 shows the snapshots of the path. The blue curves are one of candidates of cable configurations at each instance which is achieved by curvciihortc ( ) with path history appending initial cable configuration. At each instant the length of the blue curve is less than the maximum cable length. So all the configurations on this path are feasible and reachable. To find a path of this example, the weighted A ∗ took 55240 s e s > 15 h r while expanding about five million vertices. However, the Topology-based Multi-Heuristic A ∗ solves the same problem in 3100 s e c < 52 m i n while expanding only 580,000 vertices. The evaluation parameter for this example was r t = 0.056 and r e = 0.117 .

The above simulation result shows that the proposed Topology-based Multi-Heuristic A ∗ works much more efficiently and faster than weighted A ∗ to find the path of a tethered mobile robot in large and more complex environments. Also, the suggested TbMHA * has more benefits in computation time compared to number of expansions. The reason is that the proportion of nodes that require a call to curvebhorten ( ) , which is by far the most expensive procedure, is much higher in weighted A ∗ than in TbMHA *. The reason for this is curueilhoricn ( ) runs when the value of l of the expanded node is greater than the cable length constraint L . This happens when nodes are around the local minima caused by cable length constraints. TbMHA * avoids or escapes these local minima by adapting proper heuristic function based on the topology class of cable and paths. So, the simulation results show that TbMHA * tends to expand less nodes around local minima or escapes from local minima faster than weighted A ∗ .

We can achieve this result by considering the topology class of the cable and path to add proper heuristic functions to guide the search in the right direction to the goal. There are some exceptional examples where TbMHA* does not work better than weighted A*. If the cable is long enough, the problem is a simple path planning problem that doesn't require reasoning over tether.
Fig. 5.

Comparing the computation load of the suggested topology-based multi-heuristic a* to weighted a*. The x-axis is the ratio of expanded vertices, and y-axis is the ratio of computation time. Each x represents the evaluation parameters of each simulation and the circle is the average.

Show All
Fig. 6.

Example path of the simulation in 300 × 300 grid map with 53 obstacles. The blue curves are the initial cable configuration and the green curve is the path. The fixed base point is the end of blue curve at the bottom center of the map.

Show All
Fig. 7.

Snapshots of the path in the example of Figure 6 from left to right, top to bottom. The blue curves are the expected cable configuration achieved by curveshorteno. At each instant, the length of the blue curve is shorter than the maximum cable length. The green curve is the path history of the robot.

Show All

SECTION VII.
Conclusion

In this paper we described the algorithm to solve the path planning problem for a tethered mobile robot, which is connected to the fixed base by a flexible fixed-length cable. We formulate this path planning as a graph-search and propose Topology-based Multi-Heuristic A* which is a variation of Multi-Heuristic A*. The algorithm guarantees the suboptimality bound on the solution while decreasing the computation time dramatically. In our approach, we considered the topology class of the path and cable to find proper heuristic functions that help the search escape local minima. We demonstrated the performance of the proposed algorithm in simulations. One of the future directions is to find other constraints that cause local minima in planning for a tethered robot and design proper heuristic functions.
ACKNOWLEDGMENT

This research was sponsored by the ONR DR-IRIS MURI grant N00014-09-1-1052 and ONR ANTIDOTE MURI grant N00014-09-1-1 031.

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
A New Global Path Planning Strategy for Mobile Robots Using Hierarchical Topology Map and Safety-Aware Navigation Speed

2019 IEEE/ASME International Conference on Advanced Intelligent Mechatronics (AIM)

Published: 2019
Mobile Robot Dynamic Path Planning Based on Self-Adaptive Harmony Search Algorithm and Morphin Algorithm

IEEE Access

Published: 2021
Show More
References
1.
P. Abad-Manterola, L A.D. Nesnas and J. W. Burdick, "Motion planning on steep terrain for the tethered axel rover", Robotics and Automation (ICRA) 2011 IEEE International Conference on , pp. 4188-4195, May 2011.
Show in Context View Article
Google Scholar
2.
Sandip Aine, Siddharth Swaminathan, Venkatraman Narayanan, Victor Hwang and Maxim Likhachev, "Multi-heuristic a*", Proceedings of Robotics: Science and Systems , July 2014.
Show in Context CrossRef Google Scholar
3.
Subhrajit Bhattacharya, Vijay Kumar and Maxim Likhachev, "Search-based path planning with homotopy class constraints", Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence , July 11 2010.
Show in Context Google Scholar
4.
Subhrajit Bhattacharya, Maxim Likhachev and Vijay Kumar, "Identification and representation of homotopy classes of trajectories for search-based path planning in 3d", Proceedings of Robotics: Science and Systems , pp. 27-30, June 2011.
Show in Context CrossRef Google Scholar
5.
Stephen Casso DARPA Unveils Atlas DRC Robot , Jul 2013, [online] Available: http://spectrum.ieee.org/automaton/robotics/humanoids/darpa-unveils-atlas-drc-robot.
Show in Context Google Scholar
6.
P. Chirarattananon, K. Y. Ma and R. J. Wood, "Adaptive control for takeoff hovering and landing of a robotic fly", Intelligent Robots and Systems (IROS) 2013 IEEEIRSJ International Conference on , pp. 3808-3815, Nov 2013.
Show in Context CrossRef Google Scholar
7.
D. Grigoriev and A. Slissenko, "Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane", ISSAC '98: Proceedings of the 1998 international symposium on Symbolic and algebraic computation , pp. 17-24, 1998.
Show in Context CrossRef Google Scholar
8.
Erico Guizzo, Fukushima Robot Operator Writes Tell-All Blog , Aug 2011, [online] Available: http://spectrum.ieee.org/automaton/robotics/industrial-robots/fukushima-robot-operator-diaries.
Show in Context Google Scholar
9.
"Allen Hatcher. Algebraic Topology" in , Cambridge Univ. Press, 2001.
Show in Context Google Scholar
10.
J. Hershberger and J. Snoeyink, "Computing minimum length paths of a given homotopy class", Comput. Geom. Theory Appl , vol. 4, pp. 331-342, 1991.
Show in Context CrossRef Google Scholar
11.
S. Hert and V. Lumelsky, "The ties that bind: motion planning for multiple tethered robots", Robotics and Automation 1994. Proceedings. 1994 IEEE International Conference on , vol. 4, pp. 2734-2741, 1994.
Show in Context View Article
Google Scholar
12.
Daehie Hong, Steven A. Velinsky and Kazuo Yamazaki, "Tethered mobile robot for automating highway maintenance operations", Robotics and Computer-Integrated Manufacturing , vol. 13, no. 4, pp. 297-307, 1997.
Show in Context CrossRef Google Scholar
13.
Takeo Igarashi, Mike Stilman, David Hsu, Volkan Isler, Jean-Claude Latombe and Ming C. Lin, "Homotopic path planning on manifolds for cabled mobile robots" in , Berlin Heidelberg:Springer, vol. 68, pp. 1-18, 2011.
Show in Context Google Scholar
14.
Kim Soonkyum, S. Bhattacharya and V. Kumar, "Path planning for a tethered mobile robot", Robotics and Automation (ICRA) 2014 IEEE International Conference on , pp. 1132-1139, May 2014.
Show in Context Google Scholar
15.
Soonkyum Kim, Subhrajit Bhattacharya, Hordur Heidarsson, Gaurav Sukhatme and Vijay Kumar, "A topological approach to using cables to separate and manipulate sets of objects", Proceedings of the Robotics: Science and System (RSS) , June 24-28 2013.
Show in Context CrossRef Google Scholar
16.
Nathan Michael, Shaojie Shen, Kartik Mohta, Yash Mulgaonkar, Vijay Kumar, Keiji Nagatani, et al., "Collaborative mapping of an earthquake-damaged building via ground and aerial robots", Journal of Field Robotics , vol. 29, no. 5, pp. 832-841, 2012.
Show in Context CrossRef Google Scholar
17.
A.A.F. Nassiraei, Y. Kawamura, A. Ahrary, Y. Mikuriya and K. Ishii, "Concept and design of a fully autonomous sewer pipe inspection mobile robot “kantaro", Robotics and Automation 2007 IEEE International Conference on , pp. 136-143, April 2007.
Show in Context View Article
Google Scholar
18.
Ira Pohl, "Heuristic search viewed as path finding in a graph", Artificial Intelligence , vol. 1, no. 34, pp. 193-204, 1970.
Show in Context CrossRef Google Scholar
19.
K. S. Pratt, R. R. Murphy, J. L. Burke, J. Craighead, C. Griffin and S. Stover, "Use of tethered small unmanned aerial system at berkman plaza ii collapse", Safety Security and Rescue Robotics 2008. SSRR 2008. IEEE International Workshop on , pp. 134-139, 2008.
Show in Context View Article
Google Scholar
20.
Iddo Shnaps and Elon Rimon, "Online coverage by a tethered autonomous mobile robot in planar unknown environments", Proceedings of Robotics: Science and Systems , June 2013.
Show in Context CrossRef Google Scholar
21.
M. M. Tanner, J. W. Burdick and L A.D. Nesnas, "Online motion planning for tethered robots in extreme terrain", Robotics and Automation (ICRA) 2013 IEEE International Conference on , pp. 5557-5564, May 2013.
Show in Context CrossRef Google Scholar
22.
Benjamn Tovar, Fred Cohen and Steven M. LaValle, "Sensor beams obstacles and possible paths", Workshop on the Algorithmic Foundations of Robotics , pp. 317-332, 2008.
Show in Context Google Scholar
23.
P. G. Xavier, "Shortest path planning for a tethered robot or an anchored cable", Robotics and Automation 1999. Proceedings. 1999 IEEE International Conference on , vol. 2, pp. 1011-1017, 1999.
Show in Context CrossRef Google Scholar
24.
Ning Xu, Peter Brass and Ivo Vigan, "An improved algorithm in shortest path planning for a tethered robot", Technical report .
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
