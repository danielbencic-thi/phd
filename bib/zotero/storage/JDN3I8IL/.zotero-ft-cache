Article
Topological trajectory classification with filtrations of simplicial complexes and persistent homology

The International Journal of Robotics Research 1–20 Ó The Author(s) 2015 Reprints and permissions: sagepub.co.uk/journalsPermissions.nav DOI: 10.1177/0278364915586713 ijr.sagepub.com

Florian T. Pokorny1, Majd Hawasly2 and Subramanian Ramamoorthy2

Abstract In this work, we present a sampling-based approach to trajectory classification which enables automated high-level reasoning about topological classes of trajectories. Our approach is applicable to general configuration spaces and relies only on the availability of collision free samples. Unlike previous sampling-based approaches in robotics which use graphs to capture information about the path-connectedness of a configuration space, we construct a multiscale approximation of neighborhoods of the collision free configurations based on filtrations of simplicial complexes. Our approach thereby extracts additional homological information which is essential for a topological trajectory classification. We propose a multiscale classification algorithm for trajectories in configuration spaces of arbitrary dimension and for sets of trajectories starting and ending in two fixed points. Using a cone construction, we then generalize this approach to classify sets of trajectories even when trajectory start and end points are allowed to vary in path-connected subsets. We furthermore show how an augmented filtration of simplicial complexes based on an arbitrary function on the configuration space, such as a costmap, can be defined to incorporate additional constraints. We present an evaluation of our approach in 2-, 3-, 4- and 6-dimensional configuration spaces in simulation and in real-world experiments using a Baxter robot and motion capture data.
Keywords Persistent homology, motion classification, topological robotics

1. Introduction
For robots to autonomously operate in a wide variety of environments, we require algorithms and data structures that enable such systems to reason rigorously about the collision-free subset Cf of their configuration space. Furthermore, it is desirable for such systems to be able to classify continuous trajectories in their configuration space in order to reason about the space of possible motions.
In the case where Cf is explicitly describable in a noisefree manner in terms of semi-algebraic functions, analytic methods (Canny, 1988; Latombe, 1991; Schwartz and Sharir, 1983) provide an elegant classical avenue to studying Cf . With the increase in computational resources and the availability of large data sets, the data-driven paradigm has more recently provided an alternative to analytical methods, resulting in a more powerful and usable solution in many scenarios where analytic models are either infeasible or computationally too expensive to obtain. An example of this approach is the use of Gaussian Mixture Models in the Programming by Demonstration framework (Billard et al., 2008), where trajectories are modelled as integral

curves of vector fields obtained from a trained Gaussian Mixture Model. Similarly, in motion planning, an explicit description of Cf & Rd is often not available and popular algorithms such as Rapidly-exploring Random Trees (RRT) and Probabilistic Roadmaps (PRM) (Kavraki et al., 1996; LaValle, 2006; LaValle and Kuffner, 2001), are based on the idea of utilizing a set of random samples X & Cf to construct a graph G with vertices in Cf and where edges correspond to local paths which can be determined by a local path planner. The graph G can then be used to efficiently carry out motion planning. When Cf is a tame space, G, for sufficiently large X, provides an
1Centre for Autonomous Systems, CAS/CVAP, KTH Royal Institute of Technology, Sweden 2IPAB, School of Informatics, University of Edinburgh, UK
Corresponding author: Florian T. Pokorny, Centre for Autonomous Systems, CAS/CVAP, KTH Royal Institute of Technology, Teknikringen 14, Stockholm 114 28, Sweden. Email: fpokorny@kth.se

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

2

The International Journal of Robotics Research

approximation of Cf which allows us to answer basic questions about the path-connectivity of Cf .
We observe that a large class of current probabilistic

approaches such as Gaussian Mixture Models and Gaussian

Processes (Deisenroth et al., 2013; Rasmussen and

Williams, 2006), as well as graph-based approaches in

motion planning, are currently not able to make use of

homological information about Cf . In particular, these methods are not able to detect whether trajectories are

homotopy inequivalent, where we recall that two trajec-

tories are called homotopy inequivalent if they cannot be

continuously deformed into each other. The reason for this

is that, besides approximating the path-connectedness of

Cf , unaugmented RRT and PRM graphs do not store information about higher order topological information con-

tained in higher homology and homotopy groups and,

similarly, probabilistic methods have so far not incorporated

such information.

In this paper, we use filtrations F = fF r : r ! 0g of simplicial complexes defined in terms of random samples

X & Cf as a key technique for representing configuration spaces in practical robotics applications. Such filtrations

are common in topological data analysis (Carlsson, 2009),

but have (to the best of our knowledge) not been utilized to

model multi-joint robot configuration spaces prior to our

work (Pokorny et al., 2014). In particular, we propose a

novel approach to trajectory classification based on filtra-

tions of simplicial complexes defined in terms of random

samples X & Cf . From such filtrations, we then extract higher-order topological information for the purpose of

understanding and classifying equivalence classes of trajec-

tories in Cf . Given a sufficiently good approximation of Cf by F r, our approach yields a finite set of equivalence classes of trajectories with the property that no trajectory

belonging to one equivalence class can be continuously

deformed to any trajectory in any of the other equivalence

classes. Note that there is a subtle difference to an exact

classification by homotopy classes in the statement above.

Our classification is coarser in the following precise sense:

we use the first homology group for classification, which

yields a weaker classification than a classification by the

first homotopy group. In particular, there exist cases where

two trajectories which are considered equivalent in homol-

ogy are not homotopy equivalent, but two trajectories in

different homology classes will always be homotopy

inequivalent. The main benefit of working with homology

is that homology groups are purely linear algebraic objects

that can be computed efficiently, while homotopy groups

are generally complicated noncommutative groups. Our filtration F is based on Delaunay–Cˇ ech complexes which

depend on a scale parameter r and which have recently

been proven by Bauer and Edelsbrunner (2014) to provide

a hoSmotopy-equivalent Xr = x2X Br(x), where

reconstruction of the space Br(x) = fy 2 Rd : kx À yk rg.

Our work utilizes persistent homology as described in

Carlsson (2009) and Edelsbrunner and Harer (2008, 2010)

which generalizes classical homology groups to a

multiscale setting, meaning that we are able to compute

topological information about the analogue F r of G for all scales r ! 0 simultaneously without having to choose a

particular scale upfront.

Additionally,

the

1-skeleton

F

1 r



Fr

is

a

graph

which

can be used for path-planning. To summarize, our main

contributions are the following:

1. We introduce and evaluate the use of filtrations of simplicial complexes as well as persistent homology for modelling robot configuration spaces and sampled trajectory data arising in robotics.
2. We propose an algorithm based on persistent homology to classify trajectories with fixed start and end points topologically. We then show how, using a cone construction, our approach can classify trajectories whose start and end points lie in connected sets S, T respectively.
3. We show how to use our approach when a general filtration function is considered and we provide an example of filtrations arising from a cost-function.
4. We provide an experimental evaluation of our approach in configuration spaces of dimension 2, 3, 4 and 6 using Delaunay–Cˇ ech complexes both in simulation, with motion capture data of a human-robot interaction and with trajectories recorded using a Baxter robot.

The paper is structured as follows: In section 2 we discuss the motivation of our approach and the differences and similarities with prior works. Section 3 reviews the theoretical background on persistent homology and filtrations. We discuss our approach to trajectory classification in section 4 and present an experimental evaluation in section 5. Finally, we conclude with section 6 and discuss future work.

2. Motivation and related work
For a robot to reason efficiently about trajectories within its own free configuration space Cf , or about the motions of other human or robot agents in its environment, a suitable partitioning of continuously varying families of trajectories into a discrete set of equivalence classes is desirable.
Clustering trajectories is difficult in general since trajectories can have varying length and are not immediately representable as vectors in a vector space of fixed dimension as required by commonly used algorithms such as support vector machines (Cristianini and Shawe-Taylor, 2000).
Several approaches to the classification of trajectories, as reviewed in Zheng and Zhou (2011), are based on various approaches to measuring the dissimilarity between trajectories, such as the Hausdorff distance, edit distances and dynamic time warping. For the purpose of activity analysis, the work of Morris and Trivedi (2009) reviews trajectory clustering approaches based on various clustering algorithms and distance measures. These methods for clustering

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

3

Fig. 1. We display a rectangular configuration space C of side-length 500 and with two obstacles (in black). Several trajectories are depicted in red and blue. The gray area displays an approximation of Cf by a Delaunay–Cˇ ech complex DCr(X) from 10,000 samples X & Cf and with filtration value r = 11.07 (left and middle figure) and r = 73.76 (right figure). All of our figures are best viewed in
color.

are related to other approaches for simplifying trajectories by taking into account topological attributes. For instance, Katsikouli et al. (2014) present an approach to eliminate spurious features in trajectories, such as GPS traces of human mobility data, in order to reduce the burden on further analysis.
In robotics, the knowledge of classes of trajectories is beneficial for example in the Programming by Demonstration framework (Billard et al., 2008) where movement primitives of a robot’s behavior are constructed from initial trajectory demonstrations provided by a human teacher. Equivalence classes of robot trajectories can furthermore be useful in order to reason about alternative trajectories when a subset of trajectories becomes invalid due to changing environment conditions. The recent work of Knepper et al. (2012) has demonstrated the usefulness of trajectory classes of local paths to improve the efficiency of a motion planning algorithm in particular. Another reason to adopt an approach such as ours is the need to reason about task level attributes of robot motion, abstracting over, e.g. the variability implicit in the many ways a robot could traverse between two regions in the configuration space. In Sisbot and Alami (2012), complex human-robot manipulation tasks are made tractable by reasoning at the level of object hand-over points and task segments, for example. Our experiments, in section 5, illustrate how our classification procedure can be used to extract such qualitative movement primitives.
Purely topological approaches to the analysis of trajectories in Cf focus on notions of equivalence which do not depend on a metric. There, two paths a, b : ½0, 1 ! Cf with a(0) = b(0), a(1) = b(1) are called homotopy equivalent if a can continuously be deformed to b in Cf while keeping the end points fixed. We use Figure 1 as a running example for illustration. Note that all figures in this paper are best viewed in color. For now, consider Cf as being approximated by the gray region, while the black regions correspond to obstacles. Several trajectories with identical start and end points are depicted in red and blue. The blue trajectory in the leftmost figure is homotopy equivalent to

the red trajectory, while the trajectories in the middle figure are not homotopy equivalent. Note that, while trajectories can have identical distance in R2 under e.g. the Hausdorff distance, they may or may not be homotopy equivalent. When the lower obstacle is removed in the right figure, the red and blue paths from the middle figure become homotopy equivalent, for example. While homotopies between selected trajectories can in some cases be constructed explicitly, for example using a curve shortening algorithm (Chou and Zhu, 2001), this approach can fail in several cases. Firstly, an explicit homotopy construction, can only establish the existence of a homotopy in some cases, but may fail, for example when there exist not just a single but multiple geodesics between two points. Furthermore, numerical stability and resolution pose challenging problems for such methods and the failure to construct a homotopy between two curves does not imply homotopy inequivalence. Our approach instead does allow us to prove the homotopy inequivalence of trajectories when the underlying configuration space is sufficiently well approximated by a simplicial complex.
Topological concepts such as retractions and cell decompositions have played a key role in classical approaches to motion planning (Latombe, 1991). There, Cf is typically assumed to have a known algebraic or semialgebraic structure. The visibility graph in 2D (LozanoPe´rez and Wesley, 1979) and retraction-based methods rely on constructing a graph using which motion planning is performed. The general roadmap method of Canny (1988) uses ideas closely related to Morse theory and projections to lower-dimensional spaces to obtain a complete motion planner for semi-algebraic sets. Similarly, the seminal work of Schwartz and Sharir (1983) proceeds by constructing an exact cell decomposition by means of a cylindrical algebraic decomposition of Cf . This is related to our approach since our simplicial complexes form a particular type of approximate cell decomposition. In Schwartz and Sharir (1983), homology groups of Cf are computed by an exact cell decomposition Z and the general path planning

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

4

The International Journal of Robotics Research

problem is solved using Z. However, these classical works (to the best of our knowledge) have not considered the use of the first homology group of Cf for trajectory classification and the focus has been on motion planning. An important difference in our work is that we only assume the knowledge of potentially noisy point-samples from Cf with which we build a simplicial complex filtration rather than assuming a known description of Cf as a (semi-)algebraic set. Furthermore, our approach allows us to study the homotopy equivalence of paths within the neighborhood Xr of a set of samples X & Cf more generally, e.g. when Xr does not yield a reconstruction of the full space Cf . In a more recent related work, Zhang et al. (2007) construct an approximate cell decomposition using a recursively refined decomposition of Cf into hypercubes to ensure a sufficiently fine reconstruction of Cf . However, only the pathconnectivity of this decomposition is then used for motion planning and homological properties are not further investigated.
Our work is also related to sampling-based algorithms constructing a graph G from X to answer questions about the path-connectivity of Cf . RRTs and PRMs (Kavraki et al., 1996; LaValle, 2006; LaValle and Kuffner, 2001), in particular, are examples of these which have attracted unabated interest since their invention (Karaman and Frazzoli, 2011; Lindemann and LaValle, 2005; Masehian and Sedighizadeh, 2007). The graph G can be thought of as an approximation of Cf from X. The filtrations of simplicial complexes used in our work extend the concept of a graph to a multiscale approach which can recover more detailed information about Cf . Such filtrations depending on a scale parameter r have been used in topological data analysis (TDA) (Carlsson, 2009; Edelsbrunner and Harer, 2008, 2010) to study the persistent homology groups which we use here and which capture information about the topology of data at all scales simultaneously. The origins of practical multiscale simplicial complex filtrations trace back to early work by Edelsbrunner (1992) and Edelsbrunner and Mu¨cke (1994) on alpha-shapes, and the introduction of persistence in Edelsbrunner et al. (2002). In the field of sensor networks, persistence has also been utilized to solve multisensor coverage problems (de Silva and Ghrist, 2006, 2007). In machine learning, persistent homology has been investigated as a tool for topology aware kernel density estimation, topological feature extraction and inference (Chazal et al., 2013; Fasy et al., 2014; Pokorny et al., 2012).
One of the advantages of the knowledge of homotopy classes is that a motion planning algorithm can utilize efficient replanning within each such class (Brock and Khatib, 2000). Since local variational or gradient based methods can continuously deform trajectories towards local optimality only within the homotopy class of an initial trajectory, it is advantageous to maintain a set of homotopy inequivalent trajectories each of which can then be optimized using these methods. Topological information about path classes hence allows us to incorporate nontrivial global information with these local methods.

Recent approaches which attempt to obtain equivalence classes of paths include the works of Jaillet and Sime´on (2008a, b) on path deformation roadmaps where a graphbased representation to plan in the space of paths up to a class of continuous deformations is proposed. Recently, researchers have in particular investigated homotopy classes of trajectories in explicitly described spaces. Using the residue theorem of complex analysis, Bhattacharya et al. (2010) studied an application of homology classes to motion planning in 2D in the case where the obstacles in C can be contracted into representative and explicitly defined points. In Bhattacharya et al. (2011), this was extended using electromagnetism theory and Ampe`re’s law in the case of 3D. There, obstacles were assumed to be contracted into skeletons and then modeled as current-carrying wires. Similarly to our work, the authors argue that homological information is useful and computationally favorable to more general homotopy invariants in robotics. In Bhattacharya et al. (2012), a generalization to arbitrary dimension is proposed and an integration of differential 1-forms over cycles is shown to be sufficient to determine topological classes using the language of de Rham cohomology theory. In Kim et al. (2012), motion planning in 2D with homology constraints is formulated as a mixed-integer quadratic program by endowing path segments with binary labels that identify their relation to the domain obstacles. A problem that the mentioned recent approaches suffer from is that they require an explicit description of the obstacles in the configuration space, e.g. in 2D as a union of shapes each of which is contractible to a geometrically specified point p 2 C À Cf . However, in many cases such information is not easily available for real robotic systems or too expensive to compute. We instead propose a data-driven, sampling-based approach to building a representation of Cf from which topological information about trajectories can be extracted.
Prior work such as Jaillet et al. (2010) addresses path planning under the consideration of a cost function defined over the configuration space. In such work, a user-given cost function is defined over the configuration space as an additional input to the standard path-planning problem. Cost functions can take into account many different aspects such as safety distances and visibility (Mainprice et al., 2011) in particular. We show how our trajectory classification method can be applied within this general costmapbased problem formulation, so as to obtain solution classes dependent both on the topology of the configuration space and the cost function defined over it. A related line of work involves characterizing environmental uncertainty probabilistically and posing sampling-based motion planning in terms of paths that exceed a specified probability threshold in terms of robustness, e.g. Aoude et al. (2013) and Luders et al. (2010). Our formulation of trajectory classification is also related to this approach since the sub- or super-level sets of a probability density function can be used with our approach.

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

5

3. Theoretical background

Our work builds on techniques from the field of algebraic topology (Hatcher, 2002; Munkres, 1984) which studies the properties of topological spaces by constructing algebraic objects, such as the homology groups which we will discuss shortly. Special cases of topological spaces are, for example, smooth manifolds, arbitrary subsets of a vector space, as well as arbitrary metric spaces. Crucially, topological properties are independent of metric information. In mathematics, algebraic topology has played a key role in the classification of smooth manifolds. Homology groups in particular are homotopy invariants, meaning that homology groups do not vary under continuous deformations, called homotopies, of the topological space under consideration. A popular example of two spaces that are homotopy equivalent are a torus and a tea-cup which, when imagined as consisting of a rubber-like material can be stretched and bent (without tearing) to deform into one another. The homology groups of these two spaces are identical and measure, in particular, the fact that there exists a single ‘hole/tunnel’ in both spaces, and that each space is connected.
In this work, we will not provide a full introduction to algebraic topology, since this is not within the scope of the current paper, but we will try to define and discuss some of the key concepts, focusing mainly on providing those readers with a robotics background that might be unfamiliar with algebraic topology with an intuition for these techniques, as well as providing sufficient detail for the readers to implement the methods proposed here. For general persistent homology, the works of Carlsson (2009) and Edelsbrunner and Harer (2008, 2010) provide an excellent introduction, while a comprehensive discussion of algebraic topology is provided in Hatcher (2002) and Munkres (1984).
3.1. Simplicial complexes
A key notion in computational algebraic topology is that of a simplicial complex which is used to model a large class of topological spaces of interest. We recall several basic definitions (see Edelsbrunner and Harer (2010)). k + 1 points v0, . . . , vk & Rd are called affinely independent if the vectors v1 2 v0,., vk 2 v0 are linearly independent. A k-simplex s & Rd is a convex hull of k + 1 affinely independent points v0, . . . , vk 2 Rd, s = Conv(v0,., vk) and we also denote s by [v0,., vk]. A face t of a simplex s = [v0,., vk] is a convex hull of a non-empty subset of {v0,., vk} and we denote this relationship by t s. Note that 2-simplices hence correspond to triangles, 1-simplices to finite line segments and 0-simplices to points in Rd. Using unions of such simplices, we can construct interesting topological spaces by means of a simplicial complex. A simplicial complex is a finite collection of simplices K such that s 2 K and t s implies t 2 K and s, s0 2 K implies s\s0 is either empty of a face of both s and s0. A subcomplex L & K of a simplicial complex K is a subset L of K such that L is itself a simplicial complex.

Fig. 2. We depict an example simplicial complex K in the top left figure. A 1-cycle c and c0 is shown in blue in the top right and bottom left figure, respectively. The two 1-cycles are equivalent in the first homology group H1(K) since their difference is given by the shaded 2-boundary displayed in the bottom right figure.
One of the aims of this work, besides our trajectory classification algorithm, is the development and use of simplicial complexes as a key data-structure in robotics, in particular as a powerful mechanism to accurately represent robot configuration spaces.
In the top left part of Figure 2, we illustrate an example of a very simple simplicial complex in R2 consisting of six 2-simplices (shaded triangles), fifteen 1-simplices (edges) and nine 0-simplices (the vertices). Note that simplicial complexes are natural generalizations of graphs (which only contain 0- and 1-simplices) as well as triangulations, both of which are popular geometric data structures in robotics. The union jKj of all simplices in a simplicial complex K is a subset of Rd which yields a topological space whose properties can be studied using the concept of homology which we discuss now.

3.2. Simplicial homology

We consider simplicial homology over a field F for a sim-

plicial complex K. In general, nonfield coefficients, such

as Z can be considered, but for the discussion of persistent

homology later, we shall require field coefficients. With

field coefficients, the homology groups which we shall

define shortly are simply F-vector spaces that carry topolo-

gical information. In our application, we will consider the

binary field F = Z2 = f0, 1g, in particular since Z2 coeffi-

cients can be A p-chain

most c is

aefffiocrimenatllysuimmplce=mePnteki d=

on a computer. 1 lisi of p-sim-

plices {s1,., sk} in K with li 2 F and Cp(K) denotes the

F-vector space of all p-chains. In the case of F = Z2, 1-

chains can simply be considered as finite sets of 1-sim-

plices (edges) and 2-chains are finite sets of 2-simplices

(triangles), in particular. For every p-simplex s = [v0,., vp] let ∂ps be the (p 2 1)-chain formed by the formal sum of all p 2 1 dimensional faces of s as follows

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

6

The International Journal of Robotics Research

Xp ∂ps = ( À 1)i½v0, . . . , viÀ1, ^vi, vi + 1, . . . , vp
i=0
where ^vi indicates that vi is omitted. In the case of F = Z2, 21 = 1 and the sign in the above sum can be ignored, and the boundary of a 1-simplex consists of the two end points, while the boundary of a 2-simplex consists of the three boundary edges. ∂p extends to a linear map ∂p : Cp(K) ! CpÀ1(K). A chain c 2 Cp(K) such that c = ∂p+1v for some v 2 Cp + 1(K) is called a p-boundary and we call c a p-cycle if ∂pc = 0. The set of p-boundaries and p-cycles is denoted by Bp(K) and Zp(K) respectively and Bp(K)  Zp(K) since ∂p∂p + 1 = 0. The quotient vector space Hp(K) = Zp(K)=Bp(K) is called the pth homology group of K. We denote the equivalence class of a p-cycle c in the quotient vector space Hp(K) by [c].
To illustrate these concepts, consider Figure 2. The top right figure displays a 1-cycle c over the field Z2 in blue. Closed loops correspond to 1-cycles because each vertex is included an even number of times in a set of edges in the cycle. The bottom left figure corresponds to another 1-cycle c0. Observe that, when we add c + c0 in the Z2 -vector space of 1-chains, we obtain the blue closed curve g surrounding the shaded area in the bottom right figure. This curve g is in fact a 1-boundary, since it arises as the boundary g = ∂2v of the shaded collection of triangles v which form a 2-chain. Note that it is easy to see why the interior edges of these triangles are not part of the boundary, they occur precisely twice each and are hence the zero modulo Z2. The boundary operator hence exactly assigns the geometric boundary to our 2-chain v. The same also holds more generally for 2chains over a general field F when the correct orientation is taken into account (Hatcher, 2002).
With this intuition at hand, we finally observe that c 2 c0 = g = ∂v, so that c and c0 differ only by a 1-boundary. Hence, in homology [c] = [c0], while [g] = 0 in homology since it arises as the boundary of the shaded triangles. We furthermore have [c] 6¼ 0 because there does not exist any 2-cycle n such that c = ∂2n. To summarize, two p-cycles represent the same homology class if they differ by a p-boundary, and a homology class ½c 2 Hp(K) is nontrivial precisely if c does not arise as the boundary of some (p + 1)-chain.
We denote bp(K) = dim(Hp(K)), which is called the pth Betti number of K. In the example just considered, the fact that there exists only a single enclosed tunnel/void in jKj is measured by b1(K) = 1. Similarly, b0(K) is equal to the number of connected components of K, so in our example b0(K) = 1 and the higher Betti numbers are zero. These Betti numbers capture crucial topological information about the space jKj which does not depend on the particular simplicial representation of jKj that was chosen. Furthermore it is a remarkable fact and one of the key theorems of algebraic topology that these homology groups capture topological information which remains invariant under continuous deformations of jKj called homotopies (Hatcher, 2002).

3.3. Delaunay–Cˇ ech complexes

In the preceding discussion, we assumed that a simplicial

complex K was provided to us. In this section we discuss a

particular family of simplicial complexes which can be constructed from point-cloud data in Rd.

Consider a set of uniformly sampled points X = {x1,.,

xXnr}=&SY ni =f1roBmr(xia),

subset where

Y  Rd. The r-neighborhood Br(xi) = fx 2 Rd : kx À xik rg

for r ! 0, forms an interesting topological space.

Unfortunately, Xr is not itself a simplicial complex, but we can compute the homology of Xr by representing Xr by any simplicial complex Kr which is homotopy equivalent to Xr. A well-known simplicial complex which has this property

is the Alpha complex Ar(X) of Edelsbrunner (1992) which can be defined in arbitrary dimension and is a sub-complex

of the Delaunay triangulation of X. In this work, we shall

instead use another recently studied simplicial complex, called the Delaunay–Cˇ ech complex (Bauer and

Edelsbrunner, 2014) which is also a sub-complex of the

Delaunay triangulation.

To proceed, let us first generalize the notion of a sim-

plex and simplicial complex to that of an abstract simplex

and abstract simplicial complex. An abstract k-simplex s is

just a set of k + 1 elements and we call k the dimension of

s. An abstract simplicial complex K is a finite nonempty

set of abstract simplices such that if s 2 K and

; 6¼ t  s 2 K, then t 2 K. If t  s 2 K, t is called a

face of s (Edelsbrunner and Harer, 2008). The Cˇ ech complex Cr with parameter r ! 0 is an exam-
ple of an abstract simplicial complex, defined by

Cr(X ) = fs  X : \x2sBr(x) 6¼ ;g. Note that Cr(X) has no direct representation as a subset of Rd and hence does not

directly form a geometric simplicial complex as previously

considered.

Given X, we can instead consider the complex

D(X) = {s4X: \x 2 s Vx6¼;} (the Delaunay triangulation of X) where Vx denotes the Voronoi cell containing x. We consider D(X) for points in X which are in a general posi-

tion, which occurs with probability one and which can also

be enforced by a small perturbation of X. Note here that

D(X), as defined above, is a simplicial complex containing 0-simplices up to d-simplices in Rd.
The Delaunay–Cˇ ech complex DCr(X), for r ! 0, is the subcomplex of D(X) defined by DCr(X ) = fs 2 D(X ) : \x2sBr(x) 6¼ ;g. The recent work of Bauer and Edelsbrunner (2014) establishes that DCr(X) is homo-
topy equivalent to Xr, so that topological information about
Xr can be extracted from DCr(X) directly. We define f : D(X ) ! R by f (s) = minfr : \x2sBr(x) 6¼ ;g, so that DCr(X) = f21 ((2N, r]) and DCr(X) changes only at finitely many r1 \ . \ rm which can be computed at all scales by determining f(s) for each simplex s 2 D(X).

Every k-simplex s = {v0,., vk} 2 DCr(X) corresponds to the geometric simplex given by the convex hull, Conv(s),

so that 0-simplices are points, 1-simplices are edges and 2-

simplices are triangles.

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

7

Fig. 3. We illustrate a point-cloud X & ½0, 12 & R2 (left figure) as well as the resulting Delaunay–Cˇ ech complex DCr(X) at filtration parameter r = 0, r = 0.05, r = 0.076, r = 0.2 (from left to right). For each filtration parameter value r ! 0, DCr(X) is topologically equivalent (homotopy equivalent) to the union of balls Xr of radius r around the samples, which is depicted in blue. Using DCr(X) we can hence compute the homology groups of Xr at all scales.

In Figure 3, we illustrate a point-cloud X & R2 as well as the associated DCr(X) for several parameters r ! 0. The previously discussed Figure 1 also displayed a Delaunay–Cˇ ech complex constructed from sampled points. Note that, instead of DCr(X), we could also have considered the Alpha complexes Ar(X) of Edelsbrunner (1995) since Ar(X) is also homotopy equivalent to Xr and furthermore Ar(X) 4DCr(X), and for a sufficiently large parameter R the complexes AR(X) and DCR(X) reach their maximal size with AR(X) = DCR(X) = D(X). Since DCr(X) does not change for r ! R, we shall use the notation DCR(X) = DCN(X). An advantage of using DCr(X) over Ar(X) in our application is that we can compute the filtration values for the 2-skeleton of DCr(X), denoted by DCr2(X ) and consisting only of simplices of DCr(X) up to dimension 2, directly without having to first compute the filtration values for the higher skeleta.
3.4. Filtrations
Consider a simplicial complex K and a function f : K ! R defined on the simplices of K. If f satisfies f(t) f(s) whenever t s, then we observe that Kr = f À1(( À ‘, r) is a simplicial complex and Kr  Kr0 whenever r r0, yielding a filtration of simplicial complexes with filtration parameter r. In the previous section, DCr(X), for r ! 0, provides an example of such a filtration. Considering Figure 3, we observe that as r is increased, the topology of the union of balls space Xr changes. Initially there exists one connected component per data-point. These components then merge as r increases and we can recover the fact that the point-cloud ‘looks like there exists a hole in the middle’ in the third and fourth figure, where the first homology group of DCr(X) is one-dimensional. Persistent homology (which we shall discuss now) allows us to rigorously make statements about which homological features exist at various filtration parameters.
3.5. Persistent homology
For a filtration of simplicial complexes, where f : K ! R, K is a finite simplicial complex and Kr = f À1(( À ‘, r),

we denote the finitely many filtration values at which Kr changes by r1 \ . \ rm. The inclusion aji : Kri ! Krj , for i j, induces a linear map hji : Hp(Kri ) ! Hp(Krj ).

We say that a homology class a 2 Hp(Kri ) is born at ri if

a at

62 rj

iimf h(hjiÀiiÀ1(1a).)

A 62

class a 2 im(hjiÀÀ11),

Hp(Kri ) born at ri is but hji(a) 2 im(hjiÀ1).

said The

to die differ-

ence rj 2 ri is called the persistence of a, and it measures

how long a homological feature survives in the filtration.

Classes born at ri which do not die are associated to (ri, N) and are called essential. The remaining classes are

called inessential. Similarly, if a cycle represents an

essential (inessential) class, we call the cycle essential

(inessential). For i j, the pth persistent homology

group is defined as Hpi, j = Zp(Kri )=(Bp(Krj ) \ Zp(Kri )). Non-trivial elements of Hpi, j correspond to equivalence classes of p-cycles born at or before ri and which persist, i.e. do not die in the filtration, for r 2 [ri, rj). For i = j,
this recovers the usual notion of homology

Hpi, i = Hp(Kri ) = Zp(Kri )= Bp(Kri ). A graphical representation is obtained by the pth persistence diagram which

associates (ri, rj) to classes born at ri and dying at rj, and
(ri, N) to essential classes born at ri (with multiplicity). The number of points in (2N, ri] × (rj, N] equals dim(Hpi, j) and the vertical distance of a point to the diagonal indicates how long the feature persists (see

Edelsbrunner and Harer (2008)).

In Figure 4, we display the zeroth and first persistence

diagram corresponding to the point-cloud shown in

Figure 3, allowing us to understand how the number of

connected components and holes in the point-cloud evolve

over all filtration values. The fact that a large hole exists in

the middle of this point-cloud is recovered by the existence

of the single large persistence interval in the first persis-

tence diagram. In Figure 5, we display the first persistence

diagram and DCr(X), for DCr(X) arising from collision free samples in a simple configuration space with two obstacles

shown in black. Observe that the two obstacles correspond

to the two red points in the diagram which are far from the

diagonal. The remaining points correspond to holes which

are due to noise and which do not persist for a large filtra-

tion interval.

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

8

The International Journal of Robotics Research

0.07 0.05 0.02

0.403 0.2

0

0.02

0.05

0 0.076 0.2

0.403

Fig. 4. The left figure displays the inessential intervals of the zeroth persistence diagram for the point-cloud displayed in the left part of Figure 3. Each point is of the form (0, ri) and corresponds to a connected component that merges with another component at filtration value ri. Besides the displayed points, there exists an additional essential point (0, N) corresponding to the connected component persisting for all filtration values. Note in particular that, for r . 0.07, only this essential component survives when the red persistence interval (0, 0.07) has died and DCr(X), for r . 0.07, has only a single connected component corresponding to (0, N). The right figure displays the first persistence diagram. Note how the fact that a single hole exists in the data corresponds to a single persistence interval (0.076, 0.403), with large persistence marked in red. Observe also how, in Figure 3, at r = 0.076, the hole is first enclosed by Xr and by simplices. Similarly, at 0.403 this hole is filled for the first time.

3.6. Computation via matrix reduction

To compute the persistence diagrams of a filtration

Kr1 & Kr2 & . . . & Krm , it is convenient to refine the filtration as follows: we pick an ordering s1,., sn of the simplices of Krm such that, for all i2{1,., n}, Ki = [il = 1 sl is a simplicial complex and there exist indices 1 i1 \ i2
\ . \ im = n such that Kij = Krj . Such a simplexwise filtration can be obtained by inserting simplices in Kri before simplices in Krj if i \ j and by inserting the faces t & s of any simplex s before inserting s itself (Edelsbrunner and

Harer, Let

2K00=8)S. ni =

1

si

be

such

a

simplexwise

filtration.

The

boundary operator ∂ : Èdp = 0Cp(K) ! Èdp = 0Cp(K) is a lin-

ear map which we express in the ordered basis s1,., sn

yielding an n × n matrix D with Z2 entries. For a matrix

M, we denote by Mj the jth column and by Mij the (i, j)entry. Note that D is upper triangular and Dij = 1 if si is a codimension 1-face of sj. We let low(Mj) = max{i: Mij6¼ 0} if Mj6¼ 0 and low(Mj) is undefined otherwise. A left-toright column addition Mj Mj + Mi, i \ j is called reducing if it decreases low(Mj) and M is called reduced if no reducing left-to-right column addition can be performed on

any of its columns. The standard persistence algorithm

(Edelsbrunner and Harer, 2010) applies left-to-right column

additions to D until D is reduced, yielding a reduced matrix

R. Note that this reduction approach is very similar to the

standard Gaussian elimination algorithm, although per-

formed over Z2 and not including all reduction steps. The algorithm can further be generalized to F-coefficients for

an arbitrary field F.

Fig. 5. A reconstruction of Cf with two obstacles in black and from 1000 collision free samples (red points) on a square of sidelength 500. DC25(X) is displayed in the top-left yielding a good approximation to Cf . The first persistence diagram for DCr(X) is shown in the top-right. The two marked red points p1 = (10.58, 74.0), p2 = (12.97, 90.38) with large persistence correspond to the birth and death filtration of the two holes in Cf . The bottom row displays DC10.58(X), DC12.97(X) and DC74.0(X) which correspond to the birth of the smaller and larger hole (the first time they are enclosed by edges), and finally to the death filtration value of the smaller hole (the hole is covered at r = 74.0).
We can keep track of the column additions by initializing the algorithm with R = D, V = In, so that R = DV. For each left-to-right column addition Rj Rj + Ri for i \ j, we perform the column addition Vj Vj + Vi. This algorithm terminates when R is reduced and we have R = DV, where V is the matrix relating R to its unreduced version D. One defines (Chen and Kerber, 2011) P = {(i, j): Rj 6¼ 0 and i = low(Rj)}, E = {i: Ri = 0 and low(Rj) 6¼i for all j2{1,., n}}. Returning to Kr = f À1(( À ‘, r), each (i, j) 2 P with dim(si) = p corresponds to (f(si), f(sj)) in the pth persistence diagram and is generated by the p-cycle Rj which dies with the introduction of the simplex sj. Similarly, each i 2 E with dim(si) = p corresponds to (f(si), N) and the pcycle Vi which is still alive in the final filtration Kn = Krm . Note that the cycles Vi, Rj do not correspond to canonical choices, but the persistence diagrams determine the ranks of all persistent homology groups.
3.7. H1(Y) and homotopy classes of trajectories
The final piece of background work we require is the connection between the first homology group and homotopy classes of paths in a topological space Y. The obvious case to keep in mind is Y = Cf & Rd. Recall that the first fundamental group p1(Y, x0) (Edelsbrunner and Harer, 2010) is a well-known group whose elements consist of equivalence classes of closed continuous curves through x0 2 Y and

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

9

lying entirely in Y. Two closed paths a, b: [0, 1] !Y through x0 lie in the same equivalence class if there exists a homotopy (i.e. a continuous deformation) between them which is constant at the base-point x0. When Y is path-connected, p1(Y, x0) is independent of the chosen base-point x0 and hence often denoted simply by p1(Y). Furthermore, if the spaces Y, Y0 are homotopy equivalent spaces, p1(Y) and p1(Y0) are isomorphic as groups. Two paths g1, g2 in Y with the same start point x and end point y can be deformed into each other via a homotopy if the closed curve g following g1 from x to y and then g2 from y to x is trivial in p1(Y). Hence, p1(Y) is a natural group to consider for the purpose of trajectory classification. Unfortunately, to the best of our knowledge, currently no sufficiently efficient method for general configuration spaces exists to compute the group structure of p1(Y) (e.g. for large scale simplicial complexes), since p1(Y) can be complicated and noncommutative. To extract topological information about homotopy classes, we can turn to the first singular homology group H1(Y) with binary Z2 = f0, 1g coefficients, yielding a vector space which can be explicitly computed via simplicial homology when Y is homotopy equivalent to a simplicial complex K. The closed curve g can be represented explicitly as a 1-cycle in a sufficiently fine subdivision of K when a deformation retraction from Y to K is computable, and g then corresponds to a vector [g] in H1(Y ) ﬃ H1(K). Finally, [g] 6¼ 0 implies that g1 and g2 are not homotopy equivalent, allowing us to discern homotopy classes of continuous paths. Note however that homology is a weaker concept than homotopy, so [g] = 0 2 H1(Y) does not imply that g1 and g2 are homotopy equivalent. To gain somewhat more granularity, one can further replace Z2 coefficients for example with Zp coefficients for a large prime p. In this work we choose Z2 coefficients due to their computational advantages for large simplicial complexes.
4. Methodology

estimates. If X was sampled uniformly and Cf is a smooth compact submanifold M & Rd, this intuition is in fact well-founded due to the reconstruction theorem of Niyogi et al. (2008) which guarantees that, for a sufficiently dense sample set, Xr deformation retracts to the manifold M for appropriately chosen r. Using the previously introduced Delaunay–Cˇ ech complex and the fact that DCr(X) is homotopy equivalent to Xr (Bauer and Edelsbrunner, 2014), we will then compute homological information about Xr from DCr(X). This approach is currently applicable mostly in lower dimensions, since the ‘curse of dimensionality’ phenomenon implies that an increasingly large sample set would be required in higher dimensions to faithfully reconstruct Cf . 2. X & T. Here, we assume only the availability of the trajectories T. We then discretize each trajectory gi as a piecewise linear curve and use the vertex positions of all the piecewise linear segments in T as our sample set X. We study the homotopy classes of these trajectories within the topological spaces Xr which constitute an approximation of the r-neighborhoods around T. This then allows us to classify trajectories within Xr. In this framework, holes can arise either due to obstacles in the configuration space (as in the dense case), or due to the distribution of the trajectories in Cf . We consider applications of this case in our experiments with a Baxter robot. Observe that this approach suffers to a lesser degree from the ‘curse of dimensionality’, especially when approximations of Xr, such as Vietoris– Rips or Witness complexes, which we shall discuss in the following section, are considered.
For a sample set X, let R be the minimal r . 0 such that gi & Xr for all i2{1,., k}. Our approach in both cases above will now be to study the homotopy classes of these paths in the topological spaces Xr ’ DCr(X), for r ! R.

We consider a configuration space C & Rd and the set Cf  C of collision-free configurations. We do not assume that we have an explicit description of Cf or C available and we would like to study homotopy classes of a set of trajectories T = fg1, . . . , gkg & Cf with a fixed starting point x 2 Cf and end point y 2 Cf . In order to classify the trajectories, we shall exploit the connection between homotopy classes and the first homology group which we just discussed. We now consider two multiscale settings:
1. X is a sufficiently dense sample. We assume that X = fx1, . . . , xng & Cf yields a sufficiently dense sample, for example sampled via rejection sampling from the uniform distribution on C, or via a randomized exploration of the configuration space. We can then ask about a likely approximation of Cf from X. Our woSrking hypothesis is that the family of spaces fXr = x2X Br(x) : r.0g contain good such

4.1. Trajectory discretization
In order to compute properties of a trajectory g : ½0, 1 ! Cf , we first need to represent g by a homotopy equivalent path of edges (i.e. 1-simplices) in the simplicial complex used to model Xr. Figure 6 illustrates this in an example. Starting with a collection of samples X formed by the centers of the indicated shaded gray balls, we consider the space XR, where R is the radius of the shaded balls. For an arbitrary continuous trajectory in XR such as the smooth trajectories in red and blue in the figure, we require a homotopy equivalent trajectory of 1-simplices in the simplicial complex DCR(X) homotopy equivalent to XR. In the figure, these are indicated by red and blue dashed trajectories respectively.
A fast heuristic to obtain a discretization of a trajectory g is to consider vi = g(i/N), for i 2 f0; 1; . . . ; N g and for some large N 2 N, to map vi to a closest 0-simplex vi0 2 DCR(X) and to then replace the path segment between

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

10

The International Journal of Robotics Research

samples X & Rd and with parameter r ! 0 is an abstract simplicial complex defined as follows

Fig. 6. We display two continuous trajectories in red and blue (solid lines) and their homotopy equivalent discretizations as sequences of 1-simplices (dashed lines).
vi and vi + 1 by a shortest edge-path between vi0 and v0i + 1 in the 1-skeleton of the simplicial complex. Alternatively, we can attempt to construct an explicit deformation retraction from XR to DCR(X) mapping g first to a path contained in DCR(X), and then approximating g by a homotopy equivalent sequence of 1-simplices on a sufficiently fine subdivision of DCR(X). The Alpha complexes Ar(X) of Edelsbrunner (1995) are subcomplexes of DCr(X) for all r . 0 which are also homotopy equivalent to Xr and onto which an explicit such deformation retraction from Xr has been described in Edelsbrunner (1995), for example. While the study of efficient and theoretically sound homotopy equivalent trajectory discretizations could be explored further, we will instead focus on the classification problem here, assuming that each trajectory has been discretized as a path of edges in DCR(X).
4.2. Computation of DCr(X) and alternative complexes
As previously outlined, our key motivation for using Delaunay–Cˇ ech complexes in this work is the fact that DCr(X) is homotopy equivalent to the natural union of rballs space Xr. However, a drawback of this approach is the fact that we rely on the computation of a Delaunay triangulation of X & Rd, which is computationally challenging as the dimension d increases. The worst case arises for n points distributed along the curve g(t) = (t, t2,., td), called the moment curve, in which case the complexity of the Delaunay triangulation as measured by the number of simplices is O(ndd=2e) (Amenta et al., 2007; McMullen, 1970), while, on the other hand, the complexity is O(n) with a constant factor exponential in dimension for points that are uniformly distributed in a unit ball (Dwyer, 1991). Given these results and the state of the art implementations provided in Barber et al. (1996) and CGAL (2013), Delaunaybased simplicial complexes currently face a serious ‘curse of dimensionality’ challenge as d is increased. In this work, we will demonstrate the feasibility of Delaunay–Cˇ ech complexes in dimensions of up to 6, but for very highdimensional data, other approximations for Xr are required.
The Vietoris-Rips complex, in particular, is suitable for such data. The Vietoris-Rips complex Vr(X) for a set of

Vr(X ) = fs  X : diam(s) 2rg

where diam(s) denotes the supremum over the pairwise

Euclidean distances between points in s. The Vietoris-Rips

complex can be efficiently constructed in high dimensions

if the maximal r parameter is chosen to be sufficiently small

(Zomorodian, 2010). Note however that, for sufficiently

large r, any subset of X will be included in Vr(X), resulting in a complex that is infeasible to compute even for moder-

ately sized X. Furthermore, the Vietoris-Rips complex is

not always homotopy equivalent to Xr, but provides instead an approximation (Carlsson, 2009). If computational effi-

ciency is required at a cost of the accuracy of reconstruc-

tion, sparse approximations to Vr(X) can be considered, such as the Witness complexes discussed by Carlsson

(2009).

To compute 2-skeleta of DCr(X), we first compute a Delaunay triangulation (Barber et al., 1996; CGAL, 2013).

This results in d-simplices [v0,., vd] from which we extract all 0-simplices vi, 1-simplices [vi, vj], 0 i \ j
d and 2-simplices [vi, vj, vk], for 0 i \ j \ k d without repetitions. The 0-simplices are given by vertices

and for the large simplicial complexes in our experiments,

we found that extracting these k-simplices (k = 1, 2)

was sufficiently efficient. Firstly, we extract the k-faces

(k = 1, 2) for each d-simplex, which results in multiple

occurrences of simplices that are faces of more than one

simplex. Next, we lexicographically sorted these resulting

simplices by vertex indices via quicksort and finally

removed multiple occurrences of simplices. Alternatively,

if sufficient memory is available, a set data-structure could

be used for this purpose. In the final step, the Delaunay– Cˇ ech filtration parameter for each simplex has to be

computed. Here, 0-simplices are assigned filtration value 0,

1-simplices

[v,

v0]

are

assigned

d(v, v0) 2

and

for

general

k-sim-

plices we can apply the MiniBall algorithm (Edelsbrunner

and Harer, 2010) to determine f(s), which is particularly

simple in the case of 2-simplices.

4.3. Homological trajectory classification
Consider a set of edge-paths {a0,., am} in DCR(X) starting and ending at 0-simplices s, t 2 DCR(X) respectively. We consider the 1-cycle ca0 (au) ¼ a0 + au 2 Z1(DCR(X )), where the addition is performed over Z2 and we have reduced all edge-paths modulo Z2, so that edges occurring an even number of time are removed. Now ½ca0 (au) 6¼ ½ca0 (aw) 2 H1i;j ¼ H1i;jðDCðX ÞÞ implies [au + aw] 6¼ 0, so that au and aw are not homotopy equivalent in DCr(X), R ri r \ rj, where r1 \ . \ rm denote the critical filtration values at which DCr(X) changes. We hence have trajectory classes f½ca0 (a0), . . . , ½ca0 (am)g 2 H1i, j and the class membership can be computed once we have

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

11

determined a basis for H1i, j. Note that a0 corresponds to the zero vector 0 = ½ca0(a0) and, for Z2, there can be up to 2k trajectory classes for fixed s, t and i, j when dim(H1i, j) = k. We can now compute a basis for H1i, j.
Lemma 4.1. Let K1 & . & Kn be a simplexwise filtration of simplicial complexes, let R = DV denote the reduced boundary matrix after applying the left-to-right reduction algorithm and let Ep4E, Pp4P denote those elements corresponding to p-cycles only. For 1 i n, a basis of Zp(Ki) is given by Si = {Rt: (s, t) 2 Pp, s i}[{Vs: s 2 Ep, s i}, and, for 1 i j n, the image of the set
T i, j = fRt : (s, t) 2 Pp, s i, t.jg
[ fVs : s 2 Ep, s ig

exhibit its worst cast O(n2) computation time. We call F(ca0 (au)) 2 Z#2 Sn the persistent cycle coordinates of au with respect to a0.
If we want to determine a trajectory class at scales corre-
sponding to filtration values ri \ rj, we select the coordinates Fi; j(ca0 (au)) of F(ca0 (au)) corresponding to the basis Ti,j. Two trajectories au, aw are then not homotopy equivalent if Fi; j(ca0 (au)) 6¼ Fi, j(ca0 (aw). Each nonzero coordinate of F(ca0(au)) corresponds to a column Rt of R which has a death filtration value f(st). At filtration value r, only those nonzero coordinates that have been born and have not
died yet contribute to the classification of cycles. We hence
obtain an agglomerative clustering of trajectories lying in a
common DCR(X) as we increase the filtration value r ! R. Finally, at rm, DCrm(X) = DCN(X) = Conv(X) and all trajectories then lie in the same class.

under the quotient map

q : Zp(Ki) ‡ Hpi, j = Zp(Ki)=(Bp(Kj) \ Zp(Ki))

forms a basis of Hpi, j. Finally #Ep = dim(Hp(Kn)).

Proof. This follows from the reduction algorithm

(Edelsbrunner and Harer, 2010). Please see the appendix

for further details.

h

In order to classify {a0,., am}, we first select a simplex-wise refinement fKigni = 1 of the filtration given by DCr(X), r ! 0. Next, we compute the Z2-coordinates of ca0 (au) for 0 u m in the basis Sn once. To classify
trajectories at a scale given by the filtration value ri = f(s),
we simply look up the binary coordinates of ca0 (au) restricted to the basis elements Ti,i4Sn. Similarly, we can

check if two trajectories au, aw are homotopy inequivalent
for all ri r \ rj by looking up whether the coordinates of ca0 (au) and ca0 (aw) differ in the basis Ti,j4Sn.
Note now that DCr(X) = D(X) for sufficiently large r,
where D(X) denotes the full Delaunay triangulation and

H1(D(X)) = {0} since D(X) is contractible. Hence E1 is
empty implying that we do not need to keep track of the matrix V to determine a basis of H1i, j. This is important since, in our experiments, these matrices have up to mil-

lions of columns and R is typically very sparse and of low

rank, while V has full rank. Since low is injective on the set Sn, we order elements of Sn (for p = 1) by their low value and we store low21 = l as a map such that l(k) is the element s 2 Sn with low(s) = k. For any cycle c 2 Z1(Ki),
we can then trivially solve for the coefficients in the basis Sn by iterating c c + l(low(c)). Each iteration reduces

low(c) until we arrive at the zero vector. In the ordered basis Sn, c then has nonzero coefficients F(c) 2 Z#2 Sn exactly at those basis elements s 2 Sn for which low(s) =

low(c) during the execution of the above loop. Again, n

can be very large (millions), but the vector F(c) is in our

experiments very sparse so that the algorithm does not

4.4. Illustration

Consider Figure 1. The red trajectory corresponds to a0,

the two blue trajectories in the left and middle figure repre-

sent a1 and a2 respectively, and all trajectories lie in

2DCHr1ia(,Xb),forri

= all

11.07. i a

We have b, but

½ca0 (a0) = ½ca0 (a1) = 0 ½ca0 (a2) 6¼ 0 2 H1a, b, for

i a b j, where rj = 73.76 is the critical filtra-

tion value at which the hole surrounded by a0, a2 gets

filled in.

4.5. Arbitrary filtration functions
Suppose now that we have sampled Cf sufficiently densely and that DCR(X), for some fixed R, provides a good approximation of Cf . Consider a function c : Cf ! R. Our aim now is not only to classify trajectories in the space Cf , but to take into account a threshold for the function c. Naturally, such c : Cf ! R can arise as a cost or risk function associating a certain cost or risk to each x 2 X. Similarly, one might have defined a probabilistic model associating a certain likelihood or density value to each x 2 X. Given c, we define the value ^c of a k-simplex s = {v0,., vk} 2 DCR(X) to be ^c(s) = max (c(v0), . . . , c(vk)). Then ^c satisfies ^c(t) ^c(s) whenever t4s. In order to apply our algorithm without having to keep track of the potentially non-sparse matrix V, we furthermore let ^c(s) = max (c(v0), . . . , c(vk)) + C for any k-simplex s 2 D(X) 2 DCR(X) and for C larger than the cost of any v 2 X. Then LR, l = ^cÀ1(( À ‘, l) yields a filtration as l varies, and LR,l4DCR(X) for l \ C and LR,N = D(X), ensuring H1(LR,N) = 0. We think of LR,l as an approximation to MR,l = XR\c21((2N, l]) for l \ C. Note that this approach yields a filtration by sub-level sets.
In the case of a probability density c, super-level sets c21([l, N)) might be more appropriate. In that case, we simply replace c by 2c in the above framework to yield the
desired filtration.

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

12

The International Journal of Robotics Research

4.6. General start and goal regions

Real-world trajectories are often noisy and varied and

might not naturally start and end in a fixed start point s and

end point t. In this section, we discuss an extension of our

approach which enables us to work with connected regions

S and T generalizing the points s and t respectively. We

hence assume that there exist connected regions S, T & Cf , S\T = ;, such that each of our trajectories starts in a point

in S and terminates in a point in T.

Note that, in the case where S and T correspond to sub-

complexes with trivial first homology, the following proce-

dure could be employed. We select a representative 0-sim-

plex s 2 S and t 2 T and extend each trajectory {a0,., am} to a trajectory from s to t by first determining an edgepath from s to aj(0) inside S, then following aj, and finally concatenating the resulting path by another edge-path from

aj(1) to t. The resulting augmented trajectories could then be classified with our previous approach. However, in the

case where H1(S) 6¼ 0 or H1(T) 6¼ 0, this procedure will depend on how the trajectories are augmented, requiring

motion planning under homology constraints. We now pro-

pose an alternative approach that can be applied in all cases

and which relies only on a cone construction.

Intuitively, we would like to work with a quotient space

where the regions S and T are identified with points s and t

respectively. We hence define a simplicial complex filtration d DC with two additional 0-simplices at filtration value zero,

called s and t. We then reassign filtration value zero to any

simplex in T. We

ifnurtthheermfilotrreatdioenfinwehsoimsepvliecretsicSespdþ=a1l1l

lie (Sp

either in S or [ T p), where

Sp = ffv0, . . . , vpÀ1, sg : s = ½v0, . . . , vpÀ1 2 DC‘(X ), vj 2 S for all j 2 f0, . . . , p À 1gg
T p = ffv0, . . . , vpÀ1, tg : s = ½v0, . . . , vpÀ1 2 DC‘(X ), vj 2 T for all j 2 f0, . . . , p À 1gg

and also assign filtration value zero to these, and we create a simplex-wise filtration where we also insert faces of simplices before their containing simplices whenever these have an identical filtration value. This yields a new filtration where the two subcomplexes of DCN(X) corresponding to S and T and the newly added cones over these subcomplexes appear at filtration value zero and additional simplices from DCR(X) are only added in afterwards. Any simplex in d DCR(X ) which involves s and t does not correspond to a specific geometric simplex in Cf , but is abstract in nature. Note that s corresponds to the apex of the cone over S and t to the apex of the cone over T. Since cones are contractible topological spaces, this yields an explicit identification of the sub-complexes corresponding to S and T with the points s and t respectively.
Each trajectory a can now first be discretized as a sequence of edges in DCR(X) as before. Assume that a starts in point a 2 S \ X and terminates in b 2 T \ X . By

Fig. 7. Examples of trajectory classes obtained using the cone construction for samples in ½0, 12 & R2. All the trajectories depicted here start in the red part of the complex and terminate in the blue part of the complex. The trajectories in the left part of the figure belong to a single topological class and the trajectories to the right similarly belong to a single topological class at the depicted filtration value of R = 0.1. The subcomplexes corresponding to S and T are shaded in red and blue respectively. The square has a side-length one and we used 3000 sample points X. The depicted simplicial complex shows only the simplices of DdCR (X ) which do not involve the special points s and t.
appending the edges (s, a) and (b, t) to each such trajectory, we obtain a set of lifted trajectories a^0, . . . , a^m in d DCR(X ) which now all start and end in the same (non-geometric) points s and t respectively.
Since we will only be interested in the first homology group, we can in fact ignore all simplices of dimension larger than 2 in the above construction since these do not influence the first homology group. We can then apply our previous algorithm on these augmented trajectories to obtain a topological classification. If two trajectories a^i, a^j are inequivalent at filtration R . 0 using this approach, then the corresponding trajectories ai, aj cannot be continuously deformed into one another, even when the end points are allowed to move within the sub-complexes corresponding to S and T. Figure 7 illustrates two examples of classes of trajectories which are considered inequivalent using this approach. The computational cost incurred by adding the cone construction is dependent only on the number of additional simplices in the 2-skeleton of d DC. In particular, we add two 0-simplices s and t and one edge for each point in S [ T, as well as one triangle for each edge lying either entirely in S or entirely in T.
5. Experiments
Our experiments were performed on an Intel Core i7 laptop with 8 GB of RAM. We present only the computation times of core algorithms and disregard the time required to initially load data into memory. We used the matrix and binary tree column vector data structure of the PHAT library (Bauer et al., 2013) to efficiently manipulate large boundary matrices. Instead of working with the full simplicial complex DCr(X), we extracted the 2-skeleton DCr2(X ) from the Delaunay triangulation D(X). The 2-skeleton is sufficient

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

13

Fig. 8. We display example worlds and examples of paths which were determined to lie in a single class (in blue) at filtration value r2. DCr2 (X ) was constructed from 100,000 samples and the classes are computed using the indicated red trajectories corresponding to a0.
for our purposes since H1i, j(DCr(X )) does not depend on higher-dimensional simplices. We reduced only the submatrix of the boundary matrix corresponding to the first homology group. D(X) was computed with CGAL (2013) for all but our Baxter experiments where we used QHull Barber et al. (1996) which was faster in higher dimensions.
Trajectory classification in 2D. We generated the set of 2D worlds W1, ., W10 displayed in Figure 8 and of size 512 × 512 by sampling Gaussian Random Fields and defining those regions above a threshold to be obstacles. From the resulting free space Cf , we sampled N 2 {1000,

10000, 100000, 1000000} uniform samples. We computed the Delaunay–Cˇ ech filtration for all examples and recorded

the computation times for the Delaunay triangulation, for

the construction of the filtration, as well as the time

required to reduce the boundary matrix D to its reduced

form R. The Delaunay triangulation took 1 ms, 2 ms,

76 ms, 810 ms, the construction of the filtration took

11 ms, 31 ms, 278 ms and 3.27 s and the reduction of the

boundary matrix took 14 ms, 13 ms, 76 ms, 981 ms on

average as the sample size increased. We investigated the

filtration DpCﬃrﬃ(ﬃﬃXﬃﬃﬃ)ﬃﬃﬃaﬃﬃtﬃﬃvﬃﬃ arious thresholds. At a filtration value of r1 = 25 1000=N , we fpouﬃnﬃﬃﬃdﬃﬃﬃﬃtﬃhﬃﬃaﬃﬃtﬃﬃﬃCf was conservatively covered, while at r2 = 35 1000=N , the space was well covered with a minimum number of holes in collision free

areas. In order to investigate interesting path classes, we

generated a set of 1000 paths per world and sample setting

as follows. In ten trials, we selected two sample points v1 and v2 at random and, for each such setting, we selected another 100 random waypoints w1, ., w100 from the sampled point-cloud. We determined the shortest edge-path

from v1 to wi and then to v2 utilizing Dijkstra’s algorithm on the 1-skeleton graph of DCr1(X ). The computation times for the persistent cycle coordinates for these paths

were 1.8 ms, 10 ms, 115 ms and 1.75 s for a batch of 100

query paths and for the respective sample sizes on average.

These encouraging timings suggest that our framework

could be used as a classification ‘black box’ e.g. for contin-

uous trajectory optimization engines.

Trajectory classification in 4D. We consider the planar

robot arm displayed in the top part of Figure 10 which is

attached to the central black disk and with four joints u1,

.,

u4.

We

constrain

u1

2

½À

p 2

,

p2 ,

u2,

u3,

u4

2

[20.9p,

0.9p] and furthermore disallow self-collisions and colli-

sions with the environment (the black rectangle and the floor), yielding Cf & R4. The robot now has the task of
moving from the start configuration displayed in blue to the

red goal joint configuration as shown in the top left figure.

We sampled 100,000 poses uniformly in Cf using OpenRave (Diankov and Kuffner, 2008) and applied our

framework. DC‘2 (X ) had about 6.2 million triangles and 1.8 million edges. The bottom right part of Figure 10 displays

the resulting first persistence diagram which clearly shows

that a single homological feature has large persistence in

Cf . The projection of the joint configurations onto the first two angles, as shown in the middle figure, confirms the

existence of a single hole. We computed 1000 edge-paths

in DC0.25 between the start- and end-configuration using 1000 random waypoints as before. For filtration values

r 2 [0.301, 0.382] only two trajectory classes existed. The

reduction of the boundary matrix took 0.46 s, while the per-

sistent cycle coordinates for all 1000 paths were calculated in 0.55 s. The Delaunay triangulation in R4 took 251 s, par-

tially due to the increased dimension. Note however that

these results are not directly comparable to the 2D case

since methods for 2D Delaunay triangulations in CGAL

(2013) are especially optimized. We inspected the trajec-

tories in each homology class and found that they were

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

14

The International Journal of Robotics Research

Fig. 9. We display the example world W1 with DCr2 (X ) for 1000, 10,000 and 100,000 sample points per row. In each column, we plot paths a1, ., as (in blue) which belong to a fixed trajectory class at filtration value r2. The fixed reference path a0 is plotted in red. As expected, we can clearly see that two paths in different classes also lie in different homotopy classes. In our experiments, paths within a class are furthermore homotopy equivalent in DCr2 (X ), but the quality of the approximation DCr2 (X ) ’ Cf is only sufficient for 10,000 or more sample points as can be seen in the right figure in the first row. There, some 2-simplices (triangles) cover the thin obstacle region to the right.

Fig. 10. The top figure displays the robot arm in start configuration (blue) on the right and in goal configuration (red) on the left. The bottom right figure displays the first persistence diagram for our reconstruction with one red point far above the diagonal. A projection of the samples onto u1 and u2 is shown in the bottom left and an illustration of the difference between the two trajectory classes for r 2 [0.301, 0.382] is shown in the middle figure. In the first trajectory class (in red), the arm is extended to the left when passing under the narrow passage while in the second class (in blue), the arm is extended to the right.

classified according to whether the second link was positioned to the left or to the right of the base link of the arm when u1 = 0 as the arm passed the narrow passage (see Figure 10). Our framework hence allows the robot to discover the fact that two fundamentally different solution trajectory classes exist. Note that it is also intuitively clear that no trajectory in the red class can be continuously deformed to any trajectory in the blue class since the second link would have to collide with the marked black obstacle above the arm at some point in the course of any such deformation. Our method hence allows us to automatically recover this information.
Filtrations with cost functions. We consider the free configuration space Cf & R2 of size 250 × 500 with two obstacles (in white) displayed in Figure 11. We would now like to distinguish not only between homotopy classes depending on the obstacles in the configuration space, but also discern how trajectories behave with respect to the two peaks of the cost function.

The simplicial complex L10,l(X) is displayed for 10,000 samples X and height values are determined by the cost function. At cost threshold l = 90, the top of one of the hills defined by the cost-function is removed from the complex in the rightmost figure (indicated in blue), while at l = 70 both hills are truncated in the remaining figures. We sampled 100 random paths in this configuration space by fixing the initial and terminal vertex at the start and end point of the drawn red reference trajectory and by sampling random waypoints as before. The figure displays example trajectory classes for differing cost filtration values. Note how, at a cost threshold of l = 90 in the right plot, the two classes depicted in the two leftmost parts of the figure merge.
Baxter robot, 3D and 6D. We now investigate a kinesthetic demonstration scenario where the Baxter robot in Figure 12 is taught a set of trajectories which we then classify topologically. In the first experiment (E1, Figure 12, column 1-2), the robot is shown two ways to reach from

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

15

Fig. 11. We display a cost function and classes of trajectories (in blue) depending on a cost threshold, and a path a0 (in red). For the higher threshold in the rightmost plot, the two classes in the two leftmost figures merge.

Fig. 12. Baxter robot experiments (E1: column 1-2, E2: column 3-4, E3: column 5-6). Trajectory classes are illustrated in the top row and details are provided in the bottom row. We recorded 97, 18 and 40 trajectories resulting in point clouds with 9594, 3650, 4326 points in dimension 3, 6 and 6 and in filtrations with 0.19, 2.72, 3.05 million edges and triangles for E1, E2, E3 respectively. The computation times for (Delaunay triangulation, 2-skeleton and filtration computation, boundary matrix reduction) were (0.22, 0.26, 0.12), (41.84, 46.95, 44.17) and (44.92, 51.99, 52.44) seconds for E1, E2, E3 respectively, while the classification of all trajectories in each experiment took no more than 0.05 s. Bottom row: The first two images show the end-effector trajectories in E1. While we obtain three classes for r = 0.08 m (first image) the green class merges with the blue one at r ’ 0.084 m (second image, see Figure 13). The 3rd, 4th and 5th, 6th image show the right and left hand trajectories for E2 and E3 respectively. The trajectory classes at r = 0.19 m are indicated in red and blue.

one point above its head to a point in front of its torso. Only one arm is moved in each demonstration while the other arm remains still. We used the end-effector positions of the moving arm to represent trajectories in R3. In the second (column 3-4) and third (column 5-6) experiment E2 and E3, we record the positions of both end-effectors during dual arm manipulations resulting in a 6D configuration space. In E2, the robot is taught to pick up a cylindrical object with both hands from a table and to move it to one of two positions, one higher and one lower than the table. We also vary the distance between the hands during grasping between demonstrations. The trajectories in E2 are periodic. The motions start with the arms in a rest position on the sides, the object is then grasped and moved and the rest position is visited again. In experiment E3, the robot moves the same object from a horizontal to a vertical configuration, but a metal bar is located between the robot and the object. Two intuitive motion classes are based on whether the left arm crosses in front of the obstacle, or behind it.

Note that, in experiment E1 and E2, no obvious obstacles lie directly in Cf , but due to the type of demonstrations and the robot’s joint limits, the space Xr ’ DCr(X ) & Cf exhibits interesting voids which we can exploit for classification. We found that trajectories were well-approximated using the described heuristic mapping to nearby edge-paths in DCR(X) (section 4) for R = 0.08 m (experiment E1) and R = 0.15 m (experiment E2 and E3) respectively. For smaller r, DCr(X) was either not path-connected, or the edge path approximation deteriorated significantly. We hence investigated classifying paths in Xr for r ! R. Figure 13 displays how the number of topological trajectory classes changes with varying r and the second row of Figure 12 displays trajectory classes at various filtration values. In all experiments, there exists a large filtration interval with just two trajectory classes corresponding to the two intuitive classes we just described for each experiment. The first image in the second row of Figure 12 also illustrates the three classes one obtains in E1 for a choice

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

16

The International Journal of Robotics Research

Fig. 13. Number of path classes (vertical axis) versus filtration value (horizontal axis) for experiments E1, E2, E3 from left to right. All paths exist starting at filtration value R = 0.08 m for E1 and R = 0.15 m for E2 and E3.

of r = 0.08 m. More details on the computation times and the sizes of the simplicial complexes are provided in Figure 12.
Cone construction and human-robot collaboration. In this experiment, we demonstrate the cone construction with real-world data and provide initial experiments exploring how our approach could be incorporated in a humanrobot collaboration scenario. In particular, we illustrate how, by topologically clustering trajectories, a robot can automatically extract high-level motion behaviors.
We consider the top part of Figure 14. A PR2 robot is positioned at the depicted position in the photo and does not move, while a human stands at the green disk marked on the floor. Using a Nest of Birds magnetic motion tracker, we recorded the position of an object that is initially placed in the PR2’s right gripper and which is then handed over to a human worker who then places it on the blue table by turning his upper body while keeping his feet on the shaded green disk on the floor. In the first experiment, we recorded seven trajectories of the object being handed over and placed on the blue table, resulting in 2486 points in R3. The bottom part of Figure 14 indicates the trajectories. Green shaded points correspond to points which we classified as lying in the start region S in the vicinity of the robot’s right gripper. The shaded cyan points correspond to goal positions T in the vicinity of the blue table-region.
We applied our cone construction and classified the trajectories. For a large filtration interval between R ’ 16 cm and R ’ 21 cm, we obtained two classes as indicated in color in the figure. Here, the red trajectories imitate a worker first placing the object on the table marked in red in the top part of Figure 14 (i.e. to perform an additional work step), followed by placing the object on the table marked in blue. Our method is able to identify these outliers as belonging to a separate class (red) from the motions that move directly towards the blue table region (blue trajectories). Note also how the cone construction allows us to identify the wide variations of terminal positions of the blue trajectories.
In a second experiment, we recorded 18 trajectories resulting in 4228 points in R3 (and 45,895 edges and 83,334 triangles in d DC). This time, the object is picked up from the PR2’s hand and placed on the red table. The human turns either left or right by 180° during this motion and does not leave the marked green spot in Figure 14. The resulting trajectories are depicted from two perspectives in Figure 15. Again, we apply the cone construction with

Fig. 14. The top figure displays a PR2 robot in an environment with two tables. The marked red and blue regions simulate two target work surfaces. A human is positioned to stand on the green marked disk on the floor. We record human-robot handover trajectories simulating a human worker collaborating with the robot. The 3D position of an object placed in the PR2’s right endeffector is tracked and the human worker takes the object and places it on the blue work surface, but in some cases the object is first moved to the red work surface for an intermediate simulated ‘assembly step’. The bottom part of the figure illustrates an example topological classification of such trajectories at filtration R ’ 16 cm. The found red trajectories correspond to sequences where the object is first placed on the red work surface, while blue trajectories correspond to sequences without this intermediate step. The bottom left figure is displayed from a bird’s eye viewpoint, while the bottom right figure displays a viewpoint from behind the blue work surface.
points marked in green and cyan corresponding to S and T respectively. At filtration value R ’ 15 cm, we obtain the four trajectory classes indicated in color. At R ’ 20 cm the red and blue classes merge and at R ’ 23 cm the green and black classes merge and only two classes exist. One corresponding to the black and green trajectories and one corresponding to the blue and red trajectories. These finally merge into one class at R ’ 35 cm. The two classes found in the significant filtration interval (23 cm, 35 cm) exactly correspond to whether the worker turned to the left or to the right after obtaining the object. The green trajectories correspond to a simulated case where the object was dropped or placed on the ground before being put on the table marked in red. Again, our method is able to identify such interesting trajectories as well as the high-level information about the turning behavior in this trajectory dataset. We believe that such classification information could serve as input to further algorithms to allow the robot to reason about the behaviors of the observed human worker, for example in order to optimally assist the human worker or to

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

17

robotics which is capable of generalizing the notion of a graph to extract novel topological information for the purpose of robotics applications. In future work, we plan to further investigate the potential applications of these datastructures and techniques in robotics.

Fig. 15. Top and 3D view of our second set of recorded trajectories between the robot’s endeffector and the work surface marked in red in Figure 14. The depicted classification was obtained at filtration R ’ 15 cm and uses the cone construction.
automatically extract clusters of trajectories based on which dynamic motion primitives can be learned.
6. Conclusion and future work
In this work, we have proposed a novel sampling-based approach to studying topological classes of trajectories in general configuration spaces which utilizes persistent homology and filtrations of simplicial complexes as key ingredients. We have shown the applicability of our approach in real-world scenarios and believe that our approach could furthermore be incorporated with many existing algorithms. For example, the integration of local trajectory optimization based algorithms with our approach which extracts global information about trajectories could be of interest. Another promising future application of our method could be a class-dependent generation of dynamic motion primitives.
While our method scaled well to large sample sizes in 2 to 4 dimensions and was applicable also for a smaller set of samples in 6D, Delaunay triangulations and hence DCr(X) have a worst-case complexity of O(ndd=2e) (McMullen, 1970) in dimension d and sample size n making triangulations in higher dimensions computationally very challenging. It remains to be seen where the boundaries of feasibility of simplicial complex based methods lie exactly in this respect in robotics. The generalization of computer graphics based works on mesh-compression such as Blandford et al. (2005) to higher dimensions might enable us to scale the presented techniques to very large complexes by reducing the required memory footprint, for example. Another direction of future research will be an investigation of alternative simplicial complexes, such as Vietoris-Rips and (weak) witness complexes (Carlsson, 2009) which approximate Xr and which could be used to mitigate the ‘curse of dimensionality’ in higher dimensions to some extent. Another potential direction could be the use of projections or nonlinear dimensionality reduction techniques to accommodate higher-dimensional data.
Our work has established that filtrations of simplicial complexes can provide a rich alternative data-structure for

Acknowledgements
Parts of this work were presented in Pokorny et al. (2014) at Robotics: Science and Systems 2014. This work contains an extended discussion, theory section and experimental evaluation.
Funding
This work was supported by the EU projects TOMSY (IST-FP7270436) and TOPOSYS (ICT-FP7-318493).
References
Amenta N, Attali D and Devillers O (2007) Complexity of Delaunay triangulation for points on lower-dimensional polyhedra. In: Proceedings of the eighteenth annual ACM–SIAM symposium on Discrete algorithms, pp. 1106–1113. Society for Industrial and Applied Mathematics.
Aoude GS, Luders BD, Joseph JM, Roy N and How JP (2013) Probabilistically safe motion planning to avoid dynamic obstacles with uncertain motion patterns. Autonomous Robots 35: 51–76.
Barber CB, Dobkin DP and Huhdanpaa H (1996) The quickhull algorithm for convex hulls. ACM Transactions on Mathematical Software 22(4): 469–483.
Bauer U and Edelsbrunner H (2014) The morse theory of Cˇ ech and Delaunay filtrations. In: Proceedings of the thirtieth annual symposium on computer geometry (SOCG’14), New York, USA, pp. 484–490. New York: ACM.
Bauer U, Kerber M and Reininghaus J (2013) PHAT (Persistent Homology Algorithm Toolbox). Available at: http://code. google.com/p/phat/ (accessed 1 July 2014).
Bhattacharya S, Kumar V and Likhachev M (2010) Search-based path planning with homotopy class constraints. In: Proceedings of the twenty-fourth AAAI conference on artificial intelligence, Atlanta, GA.
Bhattacharya S, Likhachev M and Kumar V (2011) Identification and representation of homotopy classes of trajectories for search-based path planning in 3D. In: Proceedings of robotics: science and systems.
Bhattacharya S, Lipsky D, Ghrist R and Kumar V (2012) Invariants for homology classes with application to optimal search and planning problem in robotics. Annals of Mathematics and Artificial Intelligence 67(3–4): 251–281.
Billard A, Calinon S, Dillmann R and Schaal S (2008) Robot programming by demonstration. In: Springer handbook of robotics. New York: Springer, pp. 1371–1394.
Blandford DK, Blelloch GE, Cardoze DE and Kadow C (2005) Compact representations of simplicial meshes in two and three dimensions. International Journal of Computational Geometry and Applications 15(1): 3–24.
Brock O and Khatib O (2000) Real-time re-planning in highdimensional configuration spaces using sets of homotopic paths. In: Proceedings of the IEEE international conference on robotics and automation (ICRA’00), volume 1, pp. 550–555. IEEE.

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

18

The International Journal of Robotics Research

Canny J (1988) The complexity of robot motion planning. Cambridge, MA: MIT Press.
Carlsson G (2009) Topology and data. Bulletin of the American Mathematical Society (N.S.) 46(2): 255–308.
CGAL (2013) CGAL: Computational Geometry Algorithms Library. Available at: http://www.cgal.org (accessed 1 July 2014).
Chazal F, Fasy BT, Lecci F, Rinaldo A, Singh A and Wasserman L (2013) On the bootstrap for persistence diagrams and landscapes. Modeling and Analysis of Information Systems 20(6): 111–120.
Chen C and Kerber M (2011) Persistent homology computation with a twist. In: Proceedings of the 27th European workshop on computational geometry.
Chou KS and Zhu XP (2001) The curve shortening problem. Boca Raton, FL: CRC Press.
Cristianini N and Shawe-Taylor J (2000) An introduction to support vector machines and other kernel-based learning methods. Cambridge: Cambridge University Press.
de Silva V and Ghrist R (2006) Coordinate-free coverage in sensor networks with controlled boundaries via homology. The International Journal of Robotics Research 25(12): 1205–1222.
de Silva V and Ghrist R (2007) Coverage in sensor networks via persistent homology. Algebraic and Geometric Topology 7(1): 339–358.
Deisenroth MP, Fox D and Rasmussen CE (2013) Gaussian processes for data-efficient learning in robotics and control. IEEE Transactions on Pattern Analysis and Machine Intelligence 99. DOI: 10.1109/TPAMI.2013.218.
Diankov R and Kuffner J (2008) OpenRAVE: A planning architecture for autonomous robotics. Report CMU-R-I-TR-08-34, Robotics Institute, Pittsburgh, USA.
Dwyer RA (1991) Higher-dimensional Voronoi diagrams in linear expected time. Discrete and Computational Geometry 6(1): 343–367.
Edelsbrunner H (1992) Weighted alpha shapes. Report UIUCDCS-R-92-17-60, University of Illinois, USA.
Edelsbrunner H (1995) The union of balls and its dual shape. Discrete and Computational Geometry 13(1): 415–440.
Edelsbrunner H and Harer J (2008) Persistent homology - a survey. Contemporary Mathematics 453: 257–282.
Edelsbrunner H and Harer JL (2010) Computational topology: An introduction. Providece, RI: American Mathematical Society.
Edelsbrunner H, Letscher D and Zomorodian A (2002) Topological persistence and simplification. Discrete and Computational Geometry 28(4): 511–533.
Edelsbrunner H and Mu¨cke EP (1994) Three-dimensional alpha shapes. ACM Transactions on Graphics 13(1): 43–72.
Fasy BT, Lecci F, Rinaldo A, Wasserman L, Balakrishnan S and Singh A (2014) Confidence sets for persistence diagrams. Annals of Statistics 42(6): 2301–2339
Hatcher A (2002) Algebraic topology. Cambridge: Cambridge University Press.
Jaillet L, Corte´s J and Sime´on T (2010) Sampling-based path planning on configuration-space costmaps. IEEE Transactions on Robotics 26: 635–646.
Jaillet L and Sime´on T (2008a) Path deformation roadmaps. In: Akella S, Amato NM, Huang WH and Mishra B (eds) Algorithmic Foundation of Robotics VII (Springer Tracts in Advanced Robotics, vol. 47). New York: Springer, pp. 19–34.

Jaillet L and Sime´on T (2008b) Path deformation roadmaps: Compact graphs with useful cycles for motion planning. The International Journal of Robotics Research 27(11–12): 1175–1188.
Karaman S and Frazzoli E (2011) Sampling-based algorithms for optimal motion planning. The International Journal of Robotics Research 30(7): 846–894.
Katsikouli P, Sarkar R and Gao J (2014) Persistence based online signal and trajectory simplification for mobile devices. In: International conference on advances in geographic information systems (ACM SIGSPATIAL).
Kavraki LE, Svestka P, Latombe JC and Overmars MH (1996) Probabilistic roadmaps for path planning in high-dimensional configuration spaces. IEEE Transactions on Robotics and Automation 12(4): 566–580.
Kim S, Sreenath K, Bhattacharya S and Kumar V (2012) Optimal trajectory generation under homology class constraints. In: 51st IEEE conference on decision and control.
Knepper RA, Srinivasa SS and Mason MT (2012) Toward a deeper understanding of motion alternatives via an equivalence relation on local paths. The International Journal of Robotics Research 31(2): 167–186.
Latombe JC (1991) Robot motion planning. New York: Springer. LaValle SM (2006) Planning algorithms. Cambridge: Cambridge
University Press. LaValle SM and Kuffner JJ (2001) Rapidly-exploring random
trees: Progress and prospects. In: Donald BR, Lynch KM and Rus D (eds) Algorithmic and Computational Robotics: New Directions. Wellesley, MA: A K Peters, pp. 293–308. Lindemann SR and LaValle SM (2005) Current issues in sampling-based motion planning. In: Robotics Research. New York: Springer, pp. 36–54. Lozano-Pe´rez T and Wesley MA (1979) An algorithm for planning collision-free paths among polyhedral obstacles. Communications of the ACM 22(10): 560–570. Luders B, Kothari M and How J (2010) Chance constrained RRT for probabilistic robustness to environmental uncertainty. In: AIAA Guidance, Navigation and Control Conference. American Institute of Aeronautics and Astronautics. Mainprice J, Sisbot EA, Jaillet L, Corte´s J, Alami R and Sime´on T (2011) Planning human-aware motions using a sampling-based costmap planner. In: 2011 IEEE international conference on robotics and automation (ICRA), pp. 5012–5017. IEEE. Masehian E and Sedighizadeh D (2007) Classic and heuristic approaches in robot motion planning - a chronological review. World Academy of Science, Engineering and Technology 23: 101–106. McMullen P (1970) The maximum numbers of faces of a convex polytope. Mathematika 17(02): 179–184. Morris B and Trivedi M (2009) Learning trajectory patterns by clustering: Experimental studies and comparative evaluation. In: IEEE international conference on computer vision and pattern recognition (CVPR’09), pp. 312–319. IEEE. Munkres JR (1984) Elements of algebraic topology. Reading, MA: Addison-Wesley. Niyogi P, Smale S and Weinberger S (2008) Finding the homology of submanifolds with high confidence from random samples. Discrete and Computational Geometry 39(1–3): 419–441. Pokorny FT, Ek CH, Kjellstro¨m H and Kragic D (2012) Topological constraints and kernel-based density estimation. In: Workshop on algebraic topology and machine learning (Advances in Neural Information Processing Systems, vol. 25).

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

Pokorny et al.

19

Pokorny FT, Hawasly M and Ramamoorthy S (2014) Multiscale topological trajectory classification with persistent homology. In: Proceedings of robotics: science and systems, Berkeley, CA.
Rasmussen CE and Williams C (2006) Gaussian processes for machine learning. In: Gaussian Processes for Machine Learning. Cambridge, MA: MIT Press.
Schwartz JT and Sharir M (1983) On the ‘‘piano movers’’ problem. II. General techniques for computing topological properties of real algebraic manifolds. Advances in Applied Mathematics 4(3): 298–351.
Sisbot E and Alami R (2012) A human-aware manipulation planner. IEEE Transactions on Robotics 28(5): 1045–1057.
Zhang L, Kim YJ and Manocha D (2007) A hybrid approach for complete motion planning. In: Proceedings of the IEEE/RSJ international conference on intelligent robots and systems (IROS’07), pp. 7–14. IEEE.
Zheng Y and Zhou X (2011) Computing with spatial trajectories. New York: Springer.
Zomorodian A (2010) Fast construction of the Vietoris-Rips complex. Computers and Graphics 34(3): 263–271.

Appendix

Here, we provide further details of the proof of Lemma 4.1. While we could not find the exact statement of this lemma in the literature, this result is a direct consequence of the abstract decomposition theorems of persistent homology (Edelsbrunner and Harer, 2010). We sketch the details of direct proofs which are obtained simply by reasoning about reduced matrices and which do not require further theory to provide a ‘hands on’ practical approach to these results. Let us recall that we denote by R the reduced boundary matrix, by D the original boundary matrix and R = DV for the transformation matrix V. When M is a matrix, Mi denotes the ith column and low(Mi) is defined to be the index of the lowest nonzero element of Mi when Mi6¼ 0 and low is undefined otherwise. We begin with two claims.

Claim 1. Let (i, j) 2 P = {(i, j): Rj 6¼ 0 and i = low(Rj)}. Then Ri = 0.

Proof. Suppose Ri6¼0 instead. Then Ri;B(Ki21) =

span(R1,.,Ri21) since low is injective on the non-zero

columns of R since R is reduced. We have

∂Rj = ∂(si + w) = ∂si + h = ∂∂Vj = 0, for some w 2

C(Ki21), h = ∂w 2 B(Ki21) and si denotes the ith simplex

in the filtration. Hence ∂si 2 B(Ki21), but

Ri = ∂Vi = ∂si + w0 for some w0 2 B(Ki21). But then

Ri 2 B(Ki21). This is a contradiction.

h

Claim 2. With the same notation as in the main lemma, so K = [ni = 1 si, we have:
(a) #P = #non-zero columns of R, where (i, j) 2 P corresponds to column Rj;
(b) #P + #E = #zero columns of R, where (i, j) 2 P corresponds to column Ri and s 2 E to column Rs;
(c) 2#P + #E = n.

Proof. Part (a): If Ri 6¼ 0, low(Ri) = s for some s, so (s, i) 2 P and s is unique since R is reduced. Also, for each

(s, i) 2 P, Ri 6¼ 0. Part (b): If Ri = 0, either there exists a j such that i = low(Rj) in which case (i, j) 2 P and this j is

unique since R is reduced, or there is no such j, in which

case i 2 E by definition of E. Part (c) follows from the

above since each column of R is either zero or nonzero and

R has n columns.

h

Lemma. Let K1 & . & Kn be a simplexwise filtration of simplicial complexes, let R = DV denote the reduced
boundary matrix after applying the left-to-right reduction
algorithm and let Ep 4 E, Pp 4 P denote those elements corresponding to p-cycles only. For 1 i n, a basis of Zp(Ki) is given by Spi = fRt : (s, t) 2 Pp, s ig[ fVs : s 2 Ep, s ig, and, for 1 i j n, the image of the set

Tpi, j = fRt : (s, t) 2 Pp, s i, t.jg [fVs : s 2 Ep, s ig

under the quotient map

q : Zp(Ki) Hpi, j = Zp(Ki)=(Bp(Kj) \ Zp(Ki))
forms a basis of Hpi, j. Finally #Ep = dim(Hp(Kn)).
Proof. Let us first show that Spi forms a basis for Zp(Ki). Note that each column of R only contains nonzero coef-
ficients corresponding to simplices of a single fixed dimen-
sion each, since column additions are only performed
among columns of the same dimension. It is hence clear that Spi  Cp(Ki). Note furthermore that Spi  Zp(Ki) since, for each Rt corresponding to (s, t) 2 Pp, s i, we have ∂Rt = ∂∂Vt = 0. Similarly, for Vs, for s 2 Ep and s i, we have ∂Vs = Rs = 0 by the definition of Ep. Next, we show that the elements of Spi are linearly independent. Define Aip = fRt : (s, t) 2 Pp, s ig and Bip = fVs : s 2 Ep, s ig. We observe that low is injective on Aip. To see this, assume that (i, j),(i, j0) 2 Pp for j 6¼ j0. Without loss of generality, assume j \ j0, then we obtain a contradiction since R would not be reduced as we could add Rj to Rj0 to further reduce R. Similarly, low(Vi) = i for all i n, as can be seen by observing that V is the result of a sequence of
left-to-right column additions performed on the identity matrix, so low is also injective on Bip. Finally low(Aip) \ low(Bip) = ; by the definition of E and P. Hence low is injective on Spi = Aip [ Bip and the set is hence linearly independent. To show that Spi is a basis for Zp(Ki), we now just need to show dim (Zp(Ki)) = #Spi.
Since the upper-left submatrices of the reduced matrix R
which correspond to the subcomplexes Ki for i n are themselves reduced, and due to the grading by p, it is not
difficult to extend the reasoning in Claim 2 to show that dim BpðKiÞ ¼ #Pp i and dim CpðKiÞ ¼ 2#Pp iþ #Ep i, for all i n, where we define Pp i ¼ fða; jÞ : Rj 6¼ 0;

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

20

The International Journal of Robotics Research

a ¼ lowðRjÞ; dimðsaÞ ¼ p and j ig and Ep i ¼ ft : Rt ¼ 0; lowðRjÞ 6¼ t for all j 2 f1; . . . ; ig and dimðstÞ ¼ pg. By the rank-nullity theorem, it follows that dimðZpðKiÞÞ ¼ #Pp i þ #Ep i for all i n. Since it is clear that this is also the cardinality of the set Spi , the result follows.
Next, we prove the statement about Tpi, j. Note that Tpi, j is a linearly independent set since low is injective on Tpi, j. We need to show that Bp(Kj) \Zp(Ki), i j, is spanned by Spi À Tpi, j = fRt : (s, t) 2 Pp, s i and t jg. First, observe that
Bp(Kj) = spanfRt : (s, t) 2 Pp, t jg
This follows since span(V1, ., Vj) = C(Kj) and if ∂Vi6¼ 0, then Ri = ∂Vi is in the above spanning set which is also linearly independent.

Next, we know that Zp(Ki) has basis Spi . From this, we

observe, Spi À Tpi, j & Bp(Kj) \ Zp(Ki). Finally, Bp(Kj) +

Zp(Ki) has basis fRt : (s, t) 2 Pp, t jg [ Spi = fVs : s 2 Ep,

s ig[fRt : (s,t) 2 Pp,t j or s ig which can be written as

a disjoint union of Spi and {Rt: (s, t) 2 Pp, i \ s t j}.

Counting dimensions, we find that dim(Bp(Kj)\Zp(Ki))

= dim(Bp(Kj)) + dim(Zp(Ki)) À dim(Bp(Kj) + Zp (Ki)) =

# fRt : (s,t) 2 Pp,t jg À #fRt : (s,t) 2 Pp : i \ s t jg=

#fRt : (s,t) 2 Pp : s i and t jg=#(Spi ÀTpi,j). To see that

#Ep = dim(Hp(Kn)), observe that Hp(Kn)=Hpn,n(Kn) and

Tpn,n =Ep.

h

Downloaded from ijr.sagepub.com at PENNSYLVANIA STATE UNIV on September 12, 2016

