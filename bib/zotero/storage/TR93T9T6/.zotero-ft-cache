100

IEEE TRANSACTIONS OF SYSTEMS SCIENCE AND CYBERNETICS, VOL. ssc-4, NO. 2, JULY 1968

[N1 J. E. Falk, "Lagrange multipliers and nonlinear programming,"
J. Math. Anal. Appl., vol. 19, July 1967. [6] 0. L. Mangasarian and J. Ponstein, "Minimax and duality in
nonlinear programming," J. Math. Anal. Appl., vol. 11, pp. 504518, 1965.
[7] J. Stoer, "Duality in nonlinear programming and the minimax theorem," Numerische Mathematik, vol. 5, pp. 371-379, 1963.
[8] R. T. Rockafellar, "Duality and stability in extremum problems involving convex functions," Pacific J. Math., vol. 21, pp. 167-187, 1967.
[9] P. Wolfe, "A duality theorem for nonlinear programming," Q. A ppl. Math., vol. 19, pp. 239-244, 1961.
[10] R. T. Rockafellar, "Nonlinear programming," presented at the American Mathematical Society Summer Seminar on the Mathematics of the Decision Sciences, Stanford University, Stanford, Calif., July August 1967.
[1ll D. G. Luenberger, "Convex programming and duLality in normal space," Proc. IEEE Systems Science and Cybernetics Conf. (Boston, Mass., October 11-13, 1967).
[12] J. M. Danskin, "The theory of max-min with applications," J. SIAM, vol. 14, pp. 641-665, July 1966.
113] W. Fenchel, "Convex cones, sets, and functions," mimeographed notes, Princeton University, Princeton, N. J., September
1963. [14] R. Fletcher and M. J. D. Powell, "A rapidly convergent
descent method for minimization," Computer J., vol. 6, p. 163, July
1963.
[115 L. S. Lasdon and A. D. Waren, "Mathematical programming for optimal design," Electro-Technol., pp. 53-71, November 1967.
[16] J. B. Rosen, "The gradient projection method for nonlinear programming, pt. I, linear constraints," J. SIAM, vol. 8, pp. 181217, 1960.

[17] R. Fletcher and C. M. Reeves, "Function minimization by conjugate gradients," Computer J., vol. 7, July 1964.
[I8] D. Goldfarb, "A conjugate gradient method for nonlinear
programming," Ph.D. dissertation, Dept. of Chem. Engrg., Princeton University, Princeton, N. J., 1966.
[19] L. S. Lasdon, "A multi-level technique for optimization," Ph.D. dissertation, Systems Research Center, Case Institute of Technology, Cleveland, Ohio, Rept. SRC 50-C-64-19, 1964.
120] L. S. Lasdon and J. D. Schoeffler, "A multi-level technique for optimization," Preprints, Joint Automatic Control Conf., Troy, N. Y., June 22-25, 1965, pp. 85-92.
[21] '-,"Decentralized plant control," ISA Trans., vol. 5, pp. 175-183, April 1966.
[22] C. B. Brosilow and L. S. Lasdon, "A two level optimization technique for recycle processes," 1965 Proc. AICHE-Symp. on Application of Mathematical Models in Chemical Engineering Research, Design, and Production (London, England).
[21] L. S. Lasdon, "Duality and decomposition in mathematical programming," Systems Research Center, Case Institute of Technology, Cleveland, Ohio, Rept. SRC 119-C-67-52, 1967.
[24] A. V. Fiacco and G. P. McCormick, Sequential Unconstrained Minimization Techniques for Nonlinear Programming. New York: Wiley, 1968.
12] R. Fox and L. Schmit, "Advances in the integrated approach to structural synthesis," J. Spacecraft and Rockets, vol. 3, p. 858, June 1966.
[261 B. P. Dzielinski and R. E. Gomory, "Optimal programming of
lot sizes, inventory, and labor allocations," Management Sci., vol. 11, pp. 874-890, July 1965.
[271 J. E. Falk, "A relaxed interior approach to nonlinear programming," Research Analysis Corp., McLean, Va. RAC-TP-279, 1967.

A Formal Basis for the Heuristic Determination of Minimum Cost Paths
PETER E. HART, MEMBER, IEEE, NILS J. NILSSON, MEMBER, IEEE, AND BERTRAM RAPHAEL

Abstract-Although the problem of determining the minimum cost path through a graph arises naturally in a number of interesting applications, there has been no underlying theory to guide the development of efficient search procedures. Moreover, there is no adequate conceptual framework within which the various ad hoc search strategies proposed to date can be compared. This paper describes how heuristic information from the problem domain can be incorporated into a formal mathematical theory of graph searching and demonstrates an optimality property of a class of search strategies.
I. INTRODUCTION
A. The Problem of Finding Paths Through Graphs MANY PROBLEIVIS of engineering and scientific
importance can be related to the general problem of finding a path through a graph. Examples of such problems include routing of telephone traffic, navigation through a maze, layout of printed circuit boards, and
Manuscript received November 24, 1967. The authors are with the Artificial Intelligence Group of the Applied Physics Laboratory, Stanford Research Institute, Menlo Park, Calif.

mechanical theorem-proving and problem-solving. These problems have usually been approached in one of two
ways, which we shall call the mathematical approach and the heuristic approach.
1) The Inathematical approach typically deals with the
properties of abstract graphs and with algorithms that prescribe an orderly examination of nodes of a graph to
establish a minimum cost path. For example, Pollock and Wiebensonf11 review several algorithms which are guaranteed to find such a path for any graph. Busacker and Saaty[2' also discuss several algorithms, one of which uses the concept of dynamic programming. [3] The mathematical approach is generally more concerned with the ultimate achievement of solutions than it is with the computational feasibility of the algorithms developed.
2) The heuristic approach typically uses special knowledge about the domain of the problem being represented by a graph to improve the computational efficiency of solutions to particular graph-searching problems. For example, Gelernter's 41 program used Euclidean diagrams to direct the search for geometric proofs. Samuel[1 and others have used ad hoc characteristics of particular games to reduce

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

HART et al.: DETERMINATION OF MINIMUM COST PATHS

101

the "look-ahead" effort in searching game trees. Procedures
developed via the heuristic approach generally have not been able to guarantee that minimum cost solution paths will always be found.
This paper draws together the above two approaches by describing how information from a problem domain can be incorporated in a formal mathematical approach to a graph analysis problem. It also presents a general algorithm which prescribes how to use such information to find
a minimum cost path through a graph. Finally, it proves, under mild assumptions, that this algorithm is optimal in the sense that it examines the smallest number of nodes necessary to guarantee a minimum cost solution.
The following is a typical illustration of the sort of problem to which our results are applicable. Imagine a set of cities with roads connecting certain pairs of them. Suppose we desire a technique for discovering a sequence of cities on the shortest route from a specified start to a specified goal city. Our algorithm prescribes how to use special knowledge-e.g., the knowledge that the shortest road route between any pair of cities cannot be less than the airline distance between them-in order to reduce the total number of cities that need to be considered.
First, we must make some preliminary statements and definitions about graphs and search algorithms.
B. Some Definitions About Graphs
I nil A graph G is defined to be a set of elements called
nodes and a set {eij} of directed line segments called arcs.
eijj, If epq is an element of the set { then we say that there
is an arc from node np to node n, and that nq is a successor
of n,. We shall be concerned here with graphs whose arcs
have costs associated with them. We shall represent the
cost of arc eij by cij. (An arc from ni to nj does not imply the existence of an arc from nj to ni. If both arcs exist, in general cij cji.) We shall consider only those graphs G
for which there exists 8 > 0 such that the cost of every arc of G is greater than or equal to 6. Such graphs shall be called 8 graphs.
In many problems of interest the graph is not specified explicitly as a set of nodes and arcs, but rather is specified implicitly by means of a set of source nodes Sc n} and a
successor operator P, defined on nil}, whose value for each
ni is a set of pairs { (nj, cij) }. In other words, applying r to node ni yields all the successors nj of ni and the costs cij
associated with the arcs from ni to the various nj. Applica-
tion of r to the source nodes, to their successors, and so forth as long as new nodes can be generated results in an explicit specification of the graph thus defined. We shall assume throughout this paper that a graph G is always given in implicit form.
The subgraph G,, from any node n in { ni} is the graph
defined implicitly by the single source node n and some r defined on {ni}. We shall say that each node in G,, is accessible from n.
A path from n, to nk is an ordered set of nodes (n1, n2, ... , nk) with each ni+ a successor of ni. There exists a path from ni to nj if and only if nj is accessible from ni. Every

path has a cost which is obtained by adding the individual costs of each arc, ci,i+l, in the path. An optimal path from
ni to nj is a path having the smallest cost over the set of all
paths from ni to nj. We shall represent this cost by h(ni, n3).
This paper will be concerned with the subgraph G, from some single specified start node s. We define a nonempty set T of nodes in GU as the goal nodes.1 For aniy node n in G., an element t e T is a preferred goal node of n if and only if the cost of an optimal path from n to t does not exceed the cost of any other path from n to any member of T. For simplicity, we shall represent the unique cost of an optimal path from n to a preferred goal node of n by the symbol h(n); i.e., h(n) = min h(n,t).
teT
C. Algorithms for Finding Minimun Cost Paths
We are interested in algorithms that search G, to find an optimal path from s to a preferred goal node of s. What we mean by searching a graph and finding an optimal path is made clear by describing in general how such algorithms proceed. Starting with the node s, they generate some part of the subgraph G, by repetitive application of the successor operator r. During the course of the algorithm, if P is applied to a node, we say that the algorithm has expanded that node.
We can keep track of the minimum cost path from s to each node encountered as follows. Each time a node is expanded, we store with each successor node n both the cost of getting to n by the lowest cost path found thus far, and a pointer to the predecessor of n along that path. Eventually the algorithm terminates at some goal node t, and no more nodes are expanded. We can then reConstruct a minimum cost path from s to t known at the time of termination simply by chaining back from t to s through the pointers.
We call an algorithm admissible if it is guaranteed to find an optimal path from s to a preferred goal node of s for any 8 graph. Various admissible algorithms may differ both in the order in which they expand the nodes of G, and in the number of nodes expanded. In the next section, we shall propose a way of ordering node expansion and show that the resulting algorithm is admissible. Then, in a following section, we shall show, under a mild assumption, that this algorithm uses information from the problem represented by the graph in an optimal way. That is, it expands the smallest number of nodes necessary to guarantee finding an optimal path.
II. AN ADMISSIBLE SEARCHING ALGORITHM
A. Description of the Algorithm
In order to expand the fewest possible nodes in searching for an optimal path, a search algorithm must constantly make as informed a decision as possible about which node to expand next. If it expands nodes which obviously cannot be on an optimal path, it is wasting effort. On the other
hand, if it continues to ignore nodes that might be oIn an
I We exclude the trivial case of s e T.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

102

IEEE TRANSACTIONS ON SYSTEMS SCIENCE AND CYBERNETICS, JULY 1968

optimal path, it will sometimes fail to find such a path and

thus not be admissible. An efficient algorithm obviously

needs some way to evaluate available nodes to determine

which one should be expanded next. Suppose some evalu-

ation function f(n) could be calculated for any node n.

We shall suggest a specific function below, but first we shall

describe how a search algorithm would use such a function.

Let our evaluation function f(n) be defined in such a way that the available node having the smallest value off

Fig. 1.

is the node that should be expanded next. Then we can

define a search algorithm as follows.

subgraph shown in Fig. 1. It consists of a start node s and

Search Algorithmn A*:

three other nodes, n3, n2, and n3. The arcs are shown with arrowheads and costs. Let us trace how algorithm A* pro-

1) Mark s "open" and calculatef(s).

ceeded in generating this subgraph. Starting with s, we

2) Select the open node n whose value of f is smallest. obtain successors ni and n2. The estimates 0(n1) and &(n2)

Resolve ties arbitrarily, but always in favor of any node are then 3 and 7, respectively. Suppose A * expands ni next

n E T.

with successors n2 and n3. At this stage g(n3) = 3 + 2 = 5,

3) If n e T, mark n "closed" and terminate the algorithm. and g(n2) is lowered (because a less costly path to it has

4) Otherwise, mark n closed and apply the successor been found) to 3 + 3 = 6. The value of 0(no) remains

operator P to n. Calculate f for each successor of n and mark as open each successor not already marked closed.
Remark as open any closed node n, which is a successor of n and for which f(ni) is smaller now than it was when n,
was marked closed. Go to Step 2.
We shall next show that for a suitable choice of the
evaluation function f the algorithm A* is guaranteed to
find an optimal path to a preferred goal node of s and thus is admissible.

equal to 3.
Next we must have an estimate h(n) of h(n). Here we rely on information from the problem domain. Many
problems that can be represented as a problem of finding a minimum cost path through a graph contain some "physi-
cal" information that can be used to form the estimate A.
In our example of cities connected by roads, h(n) might be
the airline distance between city n and the goal city. This distance is the shortest possible length of any road connecting city n with the goal city; thus it is a lower bound on

B. The Evaluation Function

h(n). We shall have more to say later about using information from the problem domain to form an estimate f, but

For any subgraph GU and any goal set T, let f(n) be the first we can prove that if h is any lower bound of h, then

actual cost of an optimal path constrained to go through n, the algorithm A* is admissible.

from s to a preferred goal node of n. Note that f(s) = h(s) is the cost of an unconstrained C. The Admissibility of A *

optimal path from s to a preferred goal node of s. In fact, We shall take as our evaluation function to be used in A*

f(n) -f(s) for every node n on an optimal path, and f(n) > f(s) for every node n not on an optimal path. Thus,

f(n) = A(n) + Ai(n)

(2)

although f(n) is not known a priori (in fact, determination where g(n) is the cost of the path from s to n with minimum

of the true value of f(n) may be the main problem of inter- cost so far found by A*, and J(n) is any estimate of the est), it seems reasonable to use an estimate of f(n) as the cost of an optimal path from n to a preferred goal node of evaluation function f(n). In the remainder of this paper, n. We first prove a lemma.

we shall exhibit some properties of the search algorithm A * when the cost f(n) of an optimal path through node n is Lemma 1

estimated by an appropriate evaluation function f(n).
We can write f(n) as the sum of two parts:

For any nonclosed node n and for any optimal path P from s to n, there exists an open node n' on P with g(n')-

f(n) = g(n) + h(n)

(1)

g(n'). Proof: Let P = (s

no, n1, n2,

nk = n). If s is open

where g(n) is the actual cost of an optimal path from s to n, (that is, A* has not completed even one iteration), let
and h(n) is the actual cost of an optimal path from n to a n -s, and the lemma is trivially true since 0(s) = g(s)

preferred goal node of n.

0. Suppose s is closed. Let A be the set of all closed

Now, if we had estimates of g and h, we could add them nodes ni in P for which g(ni) = g(ni). A is not empty,
to form an estimate of f. Let g(n) be an estimate of g(n). since by assumption s e A. Let n* be the element of A with

An obvious choice for g(n) is the cost of the path from s to highest index. Clearly, n* 5 n, as n is nonclosed. Let n'

n having the smallest cost so far found by the algorithm. be the successor of n* on P. (Possibly n' = n.) Now

Notice that this implies 0(n) > g(n).

0(n') . g(n*) + cn*,w, by definition of 0; -(n*) - g(n*)

A simple example will illustrate that this estimate is because n~is in A, and g(n') = g(n*) + Cn*,n, because P

easy to calculate as the algorithm proceeds. Consider the is an optimal path. Therefore, g(n') < g(n'). But in

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

HART et al.: DETERMINATION OF MINIMUM COST PATHS

103

general, g(n') > g(n'), since the lowest cost g(n') from s to n' discovered at any time is certainly not lower than
the optimal cost g(n'). Thus O(n') = g(n'), and moreover,
n' must be open by the definition of A.
Corollary
Suppose h(n) < h(n) for all n, and suppose A* has not terminated. Then, for any optimal path P from s to any preferred goal node of s, there exists an open node n' on P with f(n') < f(s).
Proof: By the lemma, there exists an open node n' on P with g(n') = g(n'), so by definition of f
f(n') - (n') + hf(n')
- g(n') + hJ(n')
< g(n') + h(n') = f(n').

nodes in x(M) must be forever closed. Since no nodes outside x(M) can be expanded, A* must terminate.
Case 3
Termination is at a goal node without achieving minimum cost. Suppose A* terminates at some goal node t
with f(t) = g(t) > f(s). But by the corollary to Lemma 1,
there existed just before termination an open node n' on an optimal path with f(n') < f(s) < f(t). Thus at this stage, n' would have been selected for expansion rather than t, contradicting the assumption that A* terminated.
The proof of Theorem 1 is now complete. In the next section, we shall show that for a certain choice of the
function h(n), A* is not only admissible but optimal, in
the sense that no other admissible algorithm expands fewer nodes.

But P is an optimal path, so f(n') = f(s) for all n'e P,

III. ON THE OPTIMALITY OF A*

which completes the proof. We can now prove our first A. Limitation of Subgraphs by Informationfrom the Problem

theorem.

In the preceding section, we proved that if h(n) is any

Theorem 1
If ii(n) < h(n) for all n, then A* is admissible. Proof: We prove this theorem by assuming the contrary, namely that A* does not terminate by finding an optimal path to a preferred goal node of s. There are three cases to consider: either the algorithm terminates at a nongoal node, fails to terminate at all, or terminates at a goal node without achieving minimum cost.

lower bound on h(n), then A* is admissible. One such
lower bound is h(n) = 0 for all n. Such an estimate amounts
to assuming that any open node n might be arbitrarily
close to a preferred goal node of n. Then the set { Gn is unconstrained; anything is possible at node n, and, in particular, if g is a minimum at node n, then niode n must be expanded by every admissible algorithm.
Often, however, we have information from the problem that constrains the set { Gn} of possible subgraphs at each

Case 1
Termination is at a nongoal node. This case contradicts the termination condition (Step 3) of the algorithm, so it may be eliminated immediately.

node. In our example with cities connected by roads, no subgraph G01 is possible for which h(n) is less than the airline distance between city n and a preferred goal city of n. In general, if the set of possible subgraphs is constrained, one can find a higher lower bound of h(n) than

Case 2

one can for the unconstrained situation. If this higher lower
bound is used for h(n), then A* is still admissible, but, as

There is no termination. Let t be a preferred goal node of will become obvious later, A* will generally expand fewer

s, accessible from the start in a finite number of steps, nodes. We shall assume in this section that at each node n,

with associated minimum cost f(s). Since the cost on any certain information is available from the physical situation

arc is at least 3, then for any node n further than M- on which we can base a computation to limit the set; Gn3 f(s)/6 steps from s, we have f(n) > g(n) > g(n) > Mb- of possible subgraphs.

f(s). Clearly, no node n further than M steps from s is ever Suppose we denote the set of all subgraphs from node n

I expanded, for by the corollary to Lemma 1, there will be by the symbol Gn,,,} where c indexes each subgraph, and
some open node n' on an optimal path such that f(n') < co is in some index set Q,n. Now, we presume that certain

f(s) < f(n), so, by Step 2, A* will select n' instead of n. information is available from the problem domain about

Failure of A* to terminate could then only be caused by the state that node n represents; this information limits

continued reopening of nodes within M steps of s. Let the set of subgraphs from node n to the set Gn,0o}, where
%(M) be the set of nodes accessible within M steps from s, 6 is in some smaller index set OnC Qn.

and let P(M) be the number of nodes in %(M). Now, any For each Gn,, in { Gn,0} there corresponds a cost ho(n)

node n in %(M) can be reopened at most a finite number of of the optimum path from n to a preferred goal node of n.

times, say p3(n, M), since there are only a finite number of We shall now take as our estimate i(n), the greatest

paths from s to n passing only through nodes within M lower bound for ho(n). That is,

steps of s. Let

p(M) = max p(n, M), neX(M)

hi(n) = inf h(n).

(3)

0 ,On

We assume the infimum is achieved for some fOn

the maximum number of times any one node can be re- In actual problems one probably never has an explicit

opened. Hence, after at most v(M)p(M) expansions, all representation for { Gn,0 but instead one selects a pro-

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

104

IEEE TRANSACTIONS ON SYSTEMS SCIENCE AND CYBERNETICS, JULY 1968

cedure for computing A(n), known from information about the problem domain, to be a lower bound on h(n).
This selection itself induces the set { Gn,0} by (3). Never-
theless, it is convenient to proceed with our formal dis-
cussioni as if { Gn,O} were available and as if A(n) were
explicitly calculated from (3). For the rest of this paper, we assume that the algorithm A * uses (3) as the definition
of A.
B. A Consistency Assumption
When a real problem is modeled by a graph, each node of the graph corresponds to some state in the problem domain. Our general knowledge about the structure of the problem domain, together with the specific state represented by a node n, determines how the set Qn is reduced to
the set O,. However, we shall make one assumption about the uniformity of the manner in which knowledge of the problem domain is used to impose this reduction. This assumption may be stated formally as follows. For any nodes m and n,

3

n

5

t

Fig. 2.

choose to expand node n2 next. This error occurs because the estimates h(s) = 8 and h(n2) = 1 are inconsistent in view of the fact that n2 is only six units away from s. The information that there cannot exist a path from s to a goal with total cost less than eight was somehow available for the computation of h(s), and then ignored during the computation of (n2). The result is that (5) was violated, i.e.,
h(s, n2) + A(n2) = 6 + 1 < 8 = h(s).

h(m,n) + inf ho0(n) > inf ho(m).

OceOn

oeOm

(4) For the rest of this paper, we shall assume that the family { 04 of index sets satisfies (4) or, equivalently, the

Using the definition of A given in (3), we can restate (4) procedures for computing the estimates A always lead to

as a kind of triangle inequality:

values that satisfy (5). We shall call this assumption the

h(m, n) + A(n) 2 A(m).

consistency assumption. Note that the estimate A(n) = 0 (5) for all n trivially satisfies the consistency assumption.

The assumption expressed by (4) [and therefore (5)] amounts to a type of consistency assumption on the estimate h(n) over the nodes. It means that any estimate h(n) calculated from data available in the "physical" situation represented by node n alone would not be improved by using corresponding data from the situations represented
by the other nodes. Let us see what this assumption means in the case of our example of cities and roads. Suppose we

Intuitively, the consistency assumption will generally be satisfied by a computation rule for h that uniformly uses measurable parameters of the problem state at all nodes; it will generally be violated if the computation rule depends upon any parameter that varies between nodes independently of the problem state (such as a parity count or a random variable), or if the computations at some nodes are more elaborate than at others.

decide, in this example, to use as an estimate A(n), the airline distance from city n to its closest goal city. As we have stated previously, such an estimate is certainly a lower
bound on h(n). It induces at each node n a set { Gn,0} of
possible subgraphs from n by (3). If we let d(m, n) be the airline distance between the two cities- corresponding to nodes n and m, we have h(m, n) > d(m, n) and, therefore, by the triangle inequality for Euclidean distance
h(m, n) + h(n) > d(m, n) + h(n) > h(m),

C. Proof of the Optimality of A *
The next lemma makes the important observation about the operation of A* that, under the consistency assumption, if node n is closed, then fr(n) = g(n). This fact is important for two reasons. First, it is used in the proof of the theorem about the optimality of A * to follow, and second, it states that A * need never reopen a closed node. That is, if A* expands a node, then the optimal path to that node has already been found. Thus, in Step 4 of the algorithm

which shows that this A satisfies the assumption of (5). A*, the provision for reopening a closed node is vacuous
Now let us consider for a moment the following A for the and may be eliminated.

roads-and-cities problem. Suppose the nodes of the graph are numbered sequentially in the order in which they are

Lemma 2

discovered. Let A for cities represented.by nodes with odd- Suppose the consistency assumption is satisfied, and

numbered indexes be the airline distance to a preferred suppose that node n is closed by A*. Then g(n) = g(n).

goal city of these nodes, and let A = 1 for nodes with even- Proof: Consider the subgraph Gs just before closing n,

numbered indexes. For the graph of Fig. 2, f(s) h(ni) = 8. and suppose the contrary, i.e., suppose g(n) > g(n). NoW

Nodes n2 and n3 are the successors of n, along arcs with there exists some optimal path P from s to n. Since '(n) >

costs as indicated. By the above rule for computing A, g(n), A* did not find P. By Lemma 1, there exists an open

h(n2) 1 while A(n3) = 5. Then f(n2) = 6 + 1 = 7, while node n' on P with g(n') = g(n'). If n' = n, we have

f(n) = 3 + 5 = 8, and algorithm A* would erroneously proved the lemma. Otherwise,

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

HIART et al.: DETERMINATION OF MINIMUM COST PATHS

105

g(n) g(n') + h(n',n)
g(n') + h(n',n).
Thus,
9(n) > g(n') + h(n',n).
Adding h(n) to both sides yields
0(n) + h(n) > g(n') + h(n',n) + A(n).
We can apply (5) to the right-hand side of the above inequality to yield
0(n) + h(n) > g(n') + h(n')
or
f(n) > f(n'),
contradicting the fact that A * selected n for expansion when n' was available and thus proving the lemma.
The next lemma states that f is monotonically nonde-
creasing on the sequence of nodes closed by A *.
Lemma S
Let (n1, n2, .., n,) be the sequence of nodes closed by
A*. Then, if the consistency assumption is satisfied, p . q
impliesf(np,) < f(nq).
Proof: Let n be the next node closed by A * after closing m. Suppose first that the optimum path to n does not go through m. Then n was available at the time m was selected, and the lemma is trivially true. Then suppose that the optimum path to n does, in fact, go through m. Then g(n) = g(m) + h(m, n). Since, by Lemma 2, we have 0(n) g(n) and g(m) =g(m),
J(n) -C(n) + A(n) -g(n) + h(n)
g(m) + h(m, n) + h(n)
> g(m) + h(m)
- (m) + A(m)
where the inequality follows by application of (5). Thus we have
f(n) . f(m).
Since this fact is true for any pair of nodes tk and nk+l in the sequence, the proof is complete.
Corollary Under the premises of the lemma, if n is closed then
f(n) < f(s).
Proof: Let t be the goal node found by A*. Then f(n) <
>(t) = f(t) = f(s).
We can now prove a theorem about the optimality of A * as compared with any other admissible algorithm A that

uses no more information about the problem thanl does A *.
Let 0/, be the index set used by algorithm A at node n. Then, if OnA* C 0"A for all nodes n in Gs, we shall say that
algorithm A is no more informed than algorithm A*.
The next theorem states that if an admissible algorithm A is no more informed than A *, then any node expanded by A * must also be expanded by A. We prove this theorem for the special case for which ties never occur in the value
of f used by A *. Later we shall generalize the theorem to
cover the case where ties can occur, but the proof of the noties theorem is so transparent that we include it for clarity.
Theorem 2
Let A be any admissible algorithm no more iniformed than A*. Let G, be any a graph such that n # m implies
f(n) X f(m), and let the consistency assumption be satis-
fied by the h used in A *. Then if niode n was expanided by A*, it was also expanded by A.
Proof: Suppose the contrary. Then there exists some node n expanded by A* but not by A. Let t* anid t be the preferred goal nodes of s found by A* and A, respectively. Since A * and A are both admissible,
f(t*) 0(t*) + A(t*) -J(t*) + 0 = f(t*) f(t) = f(s).
Since A * must have expanded n before closing t*, by Lemma 3 we have
f(n) <f(t*) = f(t)
(Strict inequality occurs because no ties are allowed.)
There exists some graph Gn,, 0 EeOn,3 for which A(n) -
h(n) by the definitioin of h. Now by Lemma 2,0(n) = g(n).
Then on the graph Gn,Oi f(n) = f(n). Since A is no more
informed than. A*, A could not rule out the existence of Gn,O; but A did not expand n before termination and is,
therefore, not admissible, contrary to our assumption and completing the proof.
Upon defining N(A,Gs) to be the total number of nodes in G, expanded by the algorithm A, the following simple corollary is immediate.
Corollary
Under the premises of Theorem 2,
N(A*, Gs) < N(A, Gs)
with equality if and only if A expands the identical set of nodes as A*.
In this sense, we claim that A* is an optimal algorithm. Compared with other no more informed admissible algorithms, it expands the fewest possible nodes necessary to guarantee finding an optimal path.
In case of ties, that is if there exist two or more open
nodes n1, . ., nk with f(n1) = ... = f(n,) < f(n) for every
other open node n, A * arbitrarily chooses one of the ni. Consider the set C* of all algorithms that act identically to A * if there are no ties, but whose members resolve ties differently. An algorithm is a member of R* if it is simply the original A * with any arbitrary tie-breaking rule.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

106

IEEE TRANSACTIONS ON SYSTEMS SCIENCE AND CYBERNETICS, JULY 1968

The next theorem extends Theorem 2 to situations where Proof: For any noncritical tie, all alternative nodes must

ties may occur. It states that for any admissible algorithm be expanded by A as well as by A* or A would not be

A, one can always find a member A* of R* such that each admissible. Therefore, we need merely observe that each

node expanded by A* is also expanded by A.

node expanded by A* but not by A must correspond to a

Theorem 3

different critical tie in which A *'s tie-breaking rule made the inappropriate choice.

Let A be any admissible algorithm no more informed
than the algorithms in a'*, and suppose the consistency
assumption is satisfied by the A used in the algorithms in *. Then for any a graph G, there exists an A*E G,* such
that every node expanded by A* is also expanded by A. Proof: Let G, be any a graph and Al* be any algorithm
in a*. If every node of G, that A1* expands is also ex-
panded by A, let A1* be the A* of the theorem. Otherwise, we will show how to construct the A* of the theorem by changing the tie-breaking rule of A,*. Let L be the set of
nodes expanded by A, and let P = (s, n1, n2, ..*, nk, t) be
the optimal path found by A.

Of course, one must remember that when A does expand fewer nodes than some particular A* in 02*, it is only because A was in some sense "lucky" for the graph being searched, and that there exists a graph consistent with the
information available to A and A * for which A * would not search more nodes than A.
Note that, although one cannot keep a running estimate of R while the algorithm proceeds because one does not know the value of f(s), this value is established as soon as the algorithm terminates, and R can then be easily computed. In most practical situations, R is not likely to be large because critical ties are likely to occur only very

Expand nodes as prescribed by A1* as long as all nodes close to termination of the algorithm, when A can become a

selected for expansion are elements of L. Let n be the first perfect estimator of h.

node selected for expansion by A1* which is not in L. Now

f(n) < f(s) by the corollary to Lemma 3. Since A(n) <

IV. DiscussION AND CONCLUSIONS

f(s) = f(t) would imply that A is inadmissible (by the
argument of Theorem 2), we may conclude that f(n)
f(s). At the time A1* selected n, goal node t was not closed
(or A1* would have been terminated). Then by the corollary to Lemma 1, there is an open node n' on P such that f(n') < f(s) f(n). But since n was selected for ex-
pansion by A1* instead of n', A(n) < f(n'). Hence f(n) <
A(n') < A(n), so f(n) = f('). Let A2* be identical to A1*
except that the tie-breaking rule is modified just enough to
choose n' instead of n. By repeating the above argument, we obtain for some i an A *,e a* that expands only nodes that are also expanded by A, completing the proof of the theorem.

A. Comparisons Between A * and Other Search Techniques
Earlier we mentioned that the estimate A(n) - 0 for all n trivially satisfies the consistency assumption. In this
case, f(n) = &(n), the lowest cost so far discovered to node
n. Such an estimate is appropriate when no information at all is available from the problem domain. In this case, an admissible algorithm cannot rule out the possibility that the goal might be as close as a to that node with minimum
g(n). Pollack and WiebensonUl] discuss an algorithm, proposed to them by Minty in a private communication, that
is essentially identical to our A* using f(n) = g(n).
Many algorithms, such as Moore's "Algorithm D"[fi

and Busacker and Saaty's implementation of dynamic

Corollary 1
Suppose the premises of the theorem are satisfied. Then for any a graph G, there exists an A *e a* such that N(A *,
GQ) NA(A, G,), with equality if and only if A expands the
identical set of nodes as A*.

programming, keep track of g(n) but do not use it to
order the expansion of nodes. The nodes are expanded in a "breadth-first" order, meaning that all nodes one step away from the start are expanded first, then all nodes two steps away, etc. Such methods must allow for changes in the value of g(n) as a node previously expanded is later

Since we cannot select the most fortuitous tie-breaking reached again by a less costly route.

rule ahead of time for each graph, it is of interest to ask It might be argued that the algorithms of Moore,

how all members of a* compare against any admissible Busacker and Saaty, and other equivalent algorithms

algorithm A in the number of nodes expanded. Let us (sometimes known as "water flow" or "amoeba" algodefine a critical tie between n and n' as one for which rithms) are advantageous because they first encounter the
J(n) =(n') ff(s). Then we have the following as a second goal by a path with a minimum number of steps. This

corollary to Theorem 3.

argument merely reflects an imprecise formulation of the

Corollary 2

problem, since it implies that the number of steps, and not the cost of each step, is the quantity to be minimized.

Suppose the premises of the theorem are satisfied. Let R(A*, C,) be the number of critical ties which occurred in the course of applying A* to G,. Then for any a graph G, and any A*Ea*,
AV(A*, Gs) N(A, Gs) + R(A*, G,).

Indeed, if we set cij = 1 for all arcs, this class of algorithms
is identical to A* with A-0. We emphasize that, as is always the case when a mathematical model is used to
represent a real problem, the first responsibility of the investigator is to ensure that the model is an adequate representation of the problem for his purposes.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

HART et al.: DETERMINATION OF MINIMUM COST PATHS

107

It is beyond the scope of the discussion to consider how ample, choose h(n) = (x + y)/2. Since (x + y)/2 <

to define a successor operator P or assign costs cij so that V/x2 + y2, the algorithm is still admissible. Since we are

the resulting graph realistically reflects the nature of a not using "all" our knowledge of the problem domain, a

specific problem domain.2

few extra nodes may be expanded, but total computational

B. The Heuristic Power of the Estimate A
The algorithm A * is actually a family of algorithms; the choice of a particular function A selects a particular algorithm from the family. The function A can be used to tailor A * for particular applications.
As was discussed above, the choice AO0 corresponds to the case of knowing, or at least of using, absolutely no information from the problem domain. In our example of cities connected by roads, this would correspond to assuming a priori that roads could travel through "hyperspace," i.e., that any city may be an arbitrarily small road distance from any other city regardless of their geographic

effort may be reduced; again, each "extra" node must also
be expanded by other admissible algorithms that limit themselves to the "knowledge" that the distance between two cities may be as small as (x + y)/2.
Now suppose we would like to reduce our computational effort still further, and would be satisfied with a solution path whose cost is not necessarily minimal. Then we could choose an A somewhat larger than the one defined by (3). The algorithm would no longer be admissible, but it
might be more desirable, from a heuristic point of view,
than any admissible algorithm. In our roads-and-cities
example, we might let A - x + y. Since road distance is
usually substantially greater than airline distance, this h

coordinates.
Since we are, in fact, "more informed" about the nature of Euclidean space, we might increase A(n) from 0 to
Nx2 + y2 (where x and y are the magnitudes of the differences in the x, y coordinates of the city represented by node n and its closest goal city). The algorithm would then still find the shortest path, but would do so by expanding, typically, considerably fewer nodes. In fact, A * expands no more nodes3 than any admissible algorithm that uses no more information from the problem domain; viz., the information that a road between two cities might

will usually, but not always, result in an Qptimal solution
path. Often, but not always, fewer nodes will be expanded
and less arithmetic effort required than: if we used A(n)
VX2 + y2.
Thus we see that the formulation presented uses one
function, A, to embody in a formal theory all knowledge
available from the problem domain. The selection of A, therefore, permits one to choose a desirable compromise
between admissibility, heuristic effectiveness, and com-
putational efficiency.

be as short as the airline distance between them. Of course, the discussion thus far has not considered the

REFERENCES

cost of computing A each time a node is generated on the graph. It could be that the computational effort required to compute x2 + y2is significant when compared to the effort involved in expanding a few extra nodes; the optimal procedure in the sense of minimum number of nodes expanded might not be optimal in the sense of minimum total resources expended. In this case one might, for ex-
2 We believe that appropriate choices for r and c will permit many of the problem domains in the heuristic programming literature[7 to be mapped into graphs of the type treated in this paper. This could lead to a clearer understanding of the effects of "heuristics" that use information from the problem domain.
3 Except for possible critical ties, as discussed in Corollary 2 of Theorem 3.

[1] M. Pollack and W. Wiebenson, "'Solutions of the shortest-

route problem-a review," Operations Res., vol. 8, March-April

1960.

[1] I. Busacker and T. Saaty, Finite Graphs and Networks: An

Introduction with Applications. New York: McGraw-Hill, 1965,

ch.[33].R. Bellman and S. Dreyfus, Applied Dynamic
Princeton, N. J.: Princeton University Press, 1962.

Programming.

[4] H. Gelernter, "Realization of a geometry-theorem proving

machine," in Computers and Thought. New York: McGraw-Hill,

1963.

[5] A. Samuel, "Some studies in machine learning using the game of

checkers," in Computers and Thought. New York: McGraw-Hill,

1963.

[6J E. Moore, "The shortest path through a maze," Proc. Internat'l

Symp. on Theory of Switching (April 2-5, 1957), pt. 2. Also, The

Annals of the Computation Laboratory of Harvard University, vol. 30.

Cambridge, Mass.: Harvard University Press, 1959.

[1] E. Feigenbaum and J. Feldman, Computers and Thought.

New York: McGraw-Hill, 1963.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on July 15,2022 at 13:53:36 UTC from IEEE Xplore. Restrictions apply.

