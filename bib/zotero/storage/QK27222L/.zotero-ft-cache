2600

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 3, NO. 3, JULY 2018

A Topological Approach to Workspace and Motion Planning for a Cable-Controlled Robot in Cluttered
Environments
Xiaolong Wang and Subhrajit Bhattacharya

Abstract—There is a rising demand for multiple-cable controlled robots in stadiums or warehouses due to its low cost, longer operation time, and higher safety standards. In a cluttered environment, the cables can wrap around obstacles, but careful choice needs to be made for the initial cable conﬁgurations to ensure that the workspace of the robot is optimized. The presence of cables makes it imperative to consider the homotopy classes of the cables both in the design and motion planning problems. In this letter, we study the problem of workspace planning for multiple-cable controlled robots in an environment with polygonal obstacles. This letter’s goal is to establish a relationship between the boundary of the workspace and cable conﬁgurations of such robots and solve related optimization and motion planning problems. We ﬁrst analyze the conditions under which a conﬁguration of a cable-controlled robot can be considered valid, discuss the relationship between cable conﬁguration, the robot’s workspace and its motion state, and using graph search based motion planning in h-augmented graph perform workspace optimization and compute optimal paths for the robot. We demonstrated the algorithms in simulations.
Index Terms—Motion and path planning, industrial robots, collision avoidance.
I. INTRODUCTION
A. Literature Review
D ESPITE the advances in mobile and aerial robotics, there are various applications in which cable-controlled robots are better suited. A robotic system controlled by varying-length cables anchored to ﬁxed control points provide greater reliability (less prone to environmental noise such as wind gusts [1] since the robot is tethered), has less onboard power consumption (since the actuation is done by the external cables [2]) and does not rely on onboard sensors for localization and control (thus works in GPS-denied and featureless environments).
Manuscript received December 2, 2017; accepted March 5, 2018. Date of publication March 21, 2018; date of current version April 11, 2018. This letter was recommended for publication by Associate Editor T. Seo and Editor W. Chung upon evaluation of the reviewers’ comments. (Corresponding author: Xiaolong Wang.)
The authors are with the Department of Mechanical Engineering and Mechanics, Lehigh University, Bethlehem, PA 18015 USA (e-mail:, xiw716@ lehigh.edu; sub216@lehigh.edu).
This letter has supplemental downloadable multimedia material available at http://ieeexplore.ieee.org, provided by the authors. The Supplementary Materials contain a video demonstrating planning results, valid boundary construction, point-to-point path planning, and multi-task path planning. This material is 32.3 MB in size.
Digital Object Identiﬁer 10.1109/LRA.2018.2817684

Fig. 1. A wire camera (Skycam, source: Wikimedia Commons).
Robots attached to passive cables for power supply and communication have been extensively used for many real-world applications [3], [4]. For such robots, the main challenge is to avoid entanglement of the cable with obstacles and to ensure that the tether does not violate any geometric constraints [5]–[8]. The use of cables to manipulate objects in an environment has also been studied extensively [9]–[11].
Active control of robots using cables, on the other hand, has gained relatively less attention in robotics literature. The typical controllers for such robots are designed for obstacle-free environments where the inverse-kinematics problem can be solved in a closed form [12]. However, the problem of negotiating obstacles for a cable-controlled robot requires signiﬁcant additional consideration. With the recent advent of topological path planning techniques [6], [10], [13], it has become possible to compute optimal solutions to motion planning problems for systems involving ﬂexible cables by reasoning about topological classes (homotopy and homology classes) of paths and cables in a cluttered conﬁguration space. This letter uses these recent developments in the ﬁeld of topological path planning to design algorithms for cable-controlled robots in environments with polygonal obstacles.
B. Problem Statement and Motivation
We consider a planar environment cluttered by polygonal obstacles. This is a model for robots that can be used to transport goods in a warehouse or to move overhead cameras in a stadium (Fig. 1) – attached and controlled by cables that are driven by motors at the boundaries of the environment (roof or walls). The obstacles which cables cannot penetrate would inevitably make some of the regions inaccessible to the robot. The initial cable conﬁguration of the system inﬂuences the shape and size

2377-3766 © 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications standards/publications/rights/index.html for more information.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

WANG AND BHATTACHARYA: TOPOLOGICAL APPROACH TO WORKSPACE AND MOTION PLANNING

2601

Fig. 2. Same environment, different workspaces enclosed by shortest paths in some homotopy classes. (a) Original cables (orange solid) can be seen as a whole (green solid) which can deforming continuously into a closed boundary (blue solid). (b) Another initial conﬁguration of cables. The cables can deform continuously into a valid boundary of its workspace as well. (c) An arbitrary combination of shortest paths between neighboring control points do not necessarily enclose a valid workspace.

of the workspace (see the difference between Fig. 2(a) and (b)). It is thus important to choose the best cable conﬁgurations of optimizing workspace’s area and ensuring that the robot is able to reach the desired locations. We need a method to search for a boundary of robot’s workspace corresponding to its initial cable conﬁguration. A related application is that of sea farming, where a net needs to be anchored at certain points on its boundary, ensuring that the net does not get tangled with obstacles, such as boats or buoys, while maximizing the area covered by the net (which is used for farming of marine species).
In this letter, we start by presenting some of the preliminary backgrounds including visibility graph, homotopy/homology class and h-augmented graph. Following that we analyze the properties of the workspace of a multiple-cable controlled robot and its boundary, and propose an algorithm for computing the boundary for which workspace’s area is optimized or certain speciﬁc points fall within the workspace. Finally, we describe the algorithms for robot motion planning and cable velocity control and apply these to several example applications.

Fig. 3. Illustration of homotopy and homology equivalences. In this example
τ1 and τ2 are both homotopic and homologous. (a) τ1 is homotopic to τ2 since there is a continuous deformation from one to the other, but not τ3 . (b) τ1 is homologous to τ2 since they bound an area, A, but τ3 belongs to a different homology class.

II. PRELIMINARIES
A. Construction of Visibility Graph
Consider a rectangular planar environment with polygonal obstacles. We establish a visibility graph of the environment with vertices, v ∈ V, consisting of the vertices of the polygonal obstacles, the control points (points on the environment boundary at which the cables are attached to the robot), robot point as well as start and end vertices of a trajectory, and the edges, {v → v } ∈ E, consisting of line segments that connect vertices with direct line of sight. When dealing with the concave polygon, we select shortcuts between corners.
B. Brief Introduction of Homotopy and Homology Class [14]
Deﬁnition 1: (Homotopy classes [13]) Two trajectories τ1 and τ2 connecting the same start and end points, vs and vg respectively, are homotopic or belong to the same homotopy class iff one can be continuously deformed into the other without intersecting any obstacle (see Fig. 3(a)).
Deﬁnition 2: (Homology classes [13]) Two trajectories τ1 and τ2 connecting the same start and end points, vs and vg respectively, are homologous or belong to the same homology

Fig. 4. h- and H -signatures of different trajectories connecting two same points. (a) h-signature. (b) H -signature.
class iff τ1 together with τ2 (the later with opposite orientation) forms the complete boundary of a 2-dimensional manifold not containing/intersecting any of the obstacles (see Fig. 3(b)).
C. h-signature and H-signature
Assuming that all obstacles and ends of trajectories are ﬁxed, h-signature and H-signature are respectively homotopy and homology invariants of trajectories. Function h(·) is for denoting h-signature of a trajectory. We use representative points (obstacles), ζi, and the non-intersecting rays ri emanating from the representative points for constructing h-signature. We form a word by tracing τ , and consecutively placing the letters of the rays that it crosses, with a superscript of +1 if the crossing is from right to left, and −1 if the crossing is from left to right. For example, in Fig. 4(a), if τ ﬁrst crosses rb right to left

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

2602

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 3, NO. 3, JULY 2018

Fig. 5. Robot states and cable conﬁguration. (a) Interior state. (b) Boundary state in open area. (c) A special boundary state in open area. (d) Boundary state touching an obstacle.

then ra from right to left as well, the h-signature is ‘ba’ (short for ‘b+1 a+1 ’); if τ ﬁrst crosses ra left to right then rb from left to right too, the h-signature is ‘a−1 b−1 ’. If the same letters
appear adjacent to each other with opposite superscript signs, they cancel. For instance, in Fig. 4(a) the empty h-signature of the upper curve was simpliﬁed from the initial ‘baa−1 b−1 ’ to ‘bb−1 ’, then from ‘bb−1 ’ to ‘ ’(empty). The h-signature is inter-
nally non-commutative. The direction of a curve is important,
for the same path in reverse direction will result in an inverse h-signature where both the order of letters and superscripts of
letters are opposite [10]. Likewise, H(·) is a function for denoting H-signature of a
trajectory. H-signature is a vector, the ith element of which has
the simple interpretation of counting the number of times the curve, τ , intersects the ray emanating from ζi (see Fig. 4(b)). In particular, deﬁne #iτ = (Number of times τ crosses the ray ri emanating from ζi from left to right) − (Number of times τ crosses the ray ri emanating from ζi from right to left). Then, H(τ ) = [#1 τ, #2 τ, . . . , #n τ ] [10]. For instance, 3 obstacles in the environment, if the H-signature of trajectory τ is H(τ ) = [1, 0, 1] , it shows that after all τ cross ray r1 once and r3 once from left to right, not crossing r2. If τ is a closed loop, H(τ ) = [1, 0, 1] shows that ζ1 and ζ3 are inside the loop and ζ2 is outside.

D. The h-signature Augmented Graph [13]

In order to keep track of the homotopy invariants, we deﬁne an h-augmented graph, Gh = (Vh , Eh ), based on a visibility graph, G = (V, E), such that a vertex in Gh contains the additional information of the h-signature of the trajectory leading from
a start vertex vs up to this vertex besides its coordinate. A transition from vertex (v, h) to vertex (v , h ) means that the h-signature, h , is a concatenation of h and the h-signature of
trajectory from v to v .
1)

⎧ ⎪⎨

v ∈ V, and,

⎫ ⎪⎬

Vh = ⎪⎩(v, h) h = h(vs v) for some trajectories from ⎪⎭ the start vertex vs to this vertex v

2) An edge {(v, h) → (v , h )} is in Eh for (v, h) ∈ Vh and (v , h ) ∈ Vh , iff (v → v ) ∈ E, and, h = h ◦ h(v → v ), where, “◦” is a concatenate operator.

3) The cost associated with an edge {(v, h) → (v , h )} ∈ Eh is the same as that associated with edge {v → v } ∈ E.
The h-augmented graph is unbounded. Its vertices are generated on-the-ﬂy and as required during the execution of Dijkstra’s/A* search on the graph, which we describe later.
III. ALGORITHM DESIGN FOR WORKSPACE COMPUTATION
In this section, we describe some speciﬁc features, properties and algorithms related to the cable conﬁgurations and the workspace of the cable-driven robot.
A. Deﬁnition of Boundary of a Workspace
The conﬁgurations of a cable-robot system in which the robot is capable of moving in any direction are called an interior point (Fig. 5(a)). On the contrary, a boundary point is a conﬁguration where the robot can move only in some speciﬁc directions. These directions can constitute a half plane (Fig. 5(b)) or more generally union of cones (Fig. 5(d)). All the boundary points constitute a boundary of the workspace.
B. Force Analysis
The physical constraint of the cable is that there can only be tensions but no pressure acting on the cable and that the net force on the robot must be zero to make it stay at a certain position (see Fig. 5(a)), denoted as 0 = i Fieˆi, i = 1, 2, . . . , n, where Fi ≥ 0 is a non-negative scalar of tension, eˆi is a unit vector of the direction in which the ith cable points at the location of the robot and n is the number of cables. When the robot is maneuverable, not all of the cables can be slack, that is,
i Fi = 0. To make the net force zero with some taut cables, there must exist at least two of them and they must lie in different half-planes to counteract each other. If all cables are pointing in the same half-plane, the robot cannot go any further towards the other half-plane (Fig. 5(b) and (c)). We call this case the boundary state in the open area.
C. Boundary State
There are two kinds of boundary states. 1) In the Open Area: If eˆi of all taut cables span a onedimensional line, it is a boundary state and the robot is located at the boundary of the workspace (see Fig. 5(b) and (c)).

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

WANG AND BHATTACHARYA: TOPOLOGICAL APPROACH TO WORKSPACE AND MOTION PLANNING

2603

2) Touching an Obstacle: When the robot driven by cables touches an obstacle, the robot is in touching-obstacle boundary state and the obstacle’s edge or/and corner that is touched is a part of boundary of the workspace, where the net force of cables may not be zero, shown in Fig. 5(d).
D. Shortest Paths and Boundary
Lemma: The workspace boundary curve connecting a pair of neighboring control points is the shortest path in the same homotopy class connecting that pair (by “neighboring” we refer to adjacent control points encountered as we trace the boundary of the environment).
Sketch of Proof: When in boundary state, if we remove all slack cables, the robot’s position and taut cables will keep stable. We can regard the pair of taut cables as a whole which is also taut, going from one control point to a neighboring one though the robot which can be regarded as a mass point on that whole cable. This whole taut cable is the shortest path in current homotopy class connecting those two control points, shown as blue curves in Fig. 2(a) and (b).

Algorithm 1: Shortest Path Searching in the ith Thread Ti.

Input: The h-augmented graph, Gh = {Vh , Eh }; the set of control points for start vertices and goal vertices,

C = {c1 , c2 , . . . , cn }; a limit of boundary cost L. Output: Set of shortest paths in different homotopy classes,

Pi = {τi1 , τi2 , . . .}; set of h-signatures of paths, Hi = {hi1 , hi2 , . . .}. 1: k ← 1

2: loop

3: τik ← a shortest path, in the kth homotopy class

connecting {ci,‘ ’} and {ci+1 , h} for some h

4: li ← C(τik ) + j C(τj1 ), j = 1, 2, . . . , n, j = i

5: if (li > L) then

6:

break loop

7: end if

8: Insert τik into Pi 9: hik ← h(τik ) 10: Insert hik into Hi 11: k ← k + 1

12: end loop

E. Boundary’s Features
When the robot is at an interior point, we can move the robot along arbitrary trajectories inside the boundary. As the robot is moving toward a part of boundary, a pair of neighboring cables can deform continuously into that part of boundary, without interfering with any obstacle, shown in Fig. 2(a) and (b). This deformation from the initial conﬁguration into a part of boundary holds for any pair, which indicates that all cables pairs can deform into a complete and closed-loop boundary. Since no obstacles are crossed during this deformation, there must be no obstacles inside the boundary. Just for comparison, Fig. 2(c) shows an invalid boundary, even if it is made of shortest paths.
Proposition 1: The closed-loop formed by the boundary of a workspace is null homotopic (i.e., its h-signature is ‘empty’ word), stated in Section II-C.
F. Shortest Paths Searching
After constructing the visibility graph, we use Dijkstra’s search in the h-augmented graph to get the shortest paths with various h-signatures. We construct n threads for multi-threading search, Ti, where i = 1, 2, . . . , n and n is the number of control points. Each thread contains a Dijkstra search returning paths connecting a pair of neighboring control points which are indexed along clockwise or anticlockwise direction. For example, T1 is for paths connecting control point c1 and c2 , namely T2 for c2 and c3 , . . ., Tn for cn and c1 , as shown in Fig. 2(a). We insert the output τ into n corresponding sets of shortest paths, Pi = {τi1 , τi2 , . . .}. These n threads keep searching till the length of boundary (consist of n paths, one from each set) must exceed a limit L we properly preset.
Since there are only n control points, the indices of control points in Algorithm 1 can run from 1 to n, thus in Line 3, if i = n, then by i + 1th we refer to 1st control point (i.e.,: we take the modulo with respect to n with shift of 1). Hereafter whenever we refer to i + 1 for a control point index, we assume this convention. The paths returned from Dijkstra’s search are in an order from least cost to higher cost. Thus the 1st path, τi1 , in every thread’s outcome is of the least cost. In Line 4–7, length l is the sum of the latest path in the current thread and the 1st paths from other threads, a possible least boundary cost for this

Algorithm 2: Getting Valid Closed Boundary.

Input: Set of shortest paths in different homotopy classes,

Pi = {τi1 , τi2 , . . .}; set of h-signatures, Hi = {hi1 , hi2 , . . .}, where hij = h(τij ); Output: Set of valid closed boundary, W;

1: m ← 1

2: for all h1i in H1 do

3: for all h2j in H2 do

4:

···

5:

for all hnk in Hn do

6:

q ← h1i ◦ h2j ◦ · · · ◦ hnk

7:

if q = ‘ ’ then

8:

if (any of τ1i, τ2j , . . . , τnk self-tangles) then

9:

continue loop

10:

end if

11:

Insert ωm = {τ1i, τ2j , . . . , τnk } into W

12:

m←m+1

13:

end if

14: end for

15: · · ·

16: end for

17: end for

latest outcome. If li is greater than L, indicating all subsequent outcomes of the current thread must form a boundary that has a length greater than L, thus we stop this thread. Function C is for obtaining the cost of path. In Line 10, h-signatures of all shortest paths in different homotopy classes are stored in the set Hi for later boundary validation. Here we introduce a function P for later use to get a part of the boundary such that P (vs , vg , hig ) returns the shortest path from {vs ,‘ ’} to {vg , hig }.
G. Valid Boundary Construction
After we ﬁnished searching in all threads, we need to ﬁnd out all proper combinations that have an empty concatenation of h-signatures. Algorithm 2 retrieves one path’s h-signature at a time from each h-signature set Hi, n h-signatures in total, to check whether their full concatenation is empty in Line 6

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

2604

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 3, NO. 3, JULY 2018

Fig. 6. The workspace from given cable conﬁguration. (a) Input: initial cable conﬁguration and robot, control points and obstacles. (b) Output: closed boundary and the area: 16200.

Fig. 7. Planning of the workspace that covers multiple task points. (a) Input: task points (in purple), control points (in red) and obstacles. (b) Output: only one valid boundary when L = 900.

and 7. If so, we store the whole boundary, ω, into the set of all boundaries, W, shown in Line 11. Although the complexity of the algorithm rises exponentially with the number of control points or the size of set Hi, we have limited number of control points and the upper bound of the length of cables during the
search hence make it computationally feasible.

H. Area Computation

Every boundary is made up of a few vertices, ω =

{v1 , v2 , . . . , vn }, where vertex, vi = {xi, yi}, is either a con-

trol point or a vertex of the polygon obstacles. We use the fol-

lowing formula to compute the area of the workspace: A(ω) =

1 2

|(x1 y2

−

y1 x2 )

+

(x2 y3

−

y2 x3 )

+

·

·

·

+

(xn

y1

−

yn

x1 )|.

Fig. 8. h-signature revision. (a) Before signiﬁcant motion of obstacle. (b) Obstacle ζα right crosses ζβ ’s ray rβ along trajectory of ‘β−1 ’.

IV. WORKSPACE OPTIMIZATION
The methods described in this letter was implemented in C++ and Discrete Optimal Search Library (DOSL) [16]. In the sections below we mostly use 200 × 200 environment with two convex and one concave polygon as obstacles. Four control points are placed at each corner of the environment.
A. Computing Workspace’s Boundary and Area from Initial Cable Conﬁguration
If we have the initial cable conﬁguration, we are able to compute the corresponding workspace. The cable bi is given in form of vertices in visibility graph, going from the robot to the ith control point. We need goal h-signatures hig of pairs of cables for searching for corresponding boundaries. We concatenate the inverse of the ith cable’s h-signature with the i + 1th cable’s, hig = (h(bi))−1 ◦ h(bi+1 ), where superscript “−1” indicates inverse operation explained in Section II-C.
Use function P (ci, ci+1 , hig ) to get all corresponding shortest paths, then concatenate them into a closed boundary ω. For we have shown that cables can deform continuously into a closed boundary, no need to check the concatenation of goal hsignatures. In the end compute the area of this boundary, A(ω). An example is shown in Fig. 6.
B. Maximization of the Workspace Covering Multiple Task Points
If we expect the robot to perform multiple tasks at static points in the environment, we should choose an appropriate initial cable conﬁguration which can generate a workspace covering all task

points. For this kind of problem, we need to use H-signature (homology signature) to check if all the task points are inside the workspace. If the components in the H-signature of boundary corresponding to task points are non-zero, that vertex is inside the boundary. If we get an H-signature that does not have any zero component, all task points are enclosed. After getting all workspaces that satisfy the criteria and the areas of them, the algorithm returns the one that has the largest area. A case is shown in Fig. 7.

C. Maximization of Expected Workspace’s Area in an Environment With Moving Obstacle

In real-world scenarios, despite ﬁxed control points, there

could be moving obstacles. Although uncertain about the future

locations of the obstacles, if we have prior knowledge of prob-

abilities associated with different conﬁgurations of obstacles in

the environment, we can choose a cable conﬁguration with the

max expectation of workspace’s area.

1) Boundaries Change Upon Obstacle Reconﬁguration: If

the current workspace’s boundary is ωm , the mth one in set W we previously established, when the obstacles move from

current conﬁguration to the jth potential conﬁguration, ωm deforms as well into a new boundary ωmj , where ωm = {τm1 , τm 2 , . . . , τm n } and ωmj = {τmj 1 , τmj 2 , . . . , τmj n } (for example, the initial conﬁguration of Fig. 9(a) deforms into Figs 9(b), (c)

and (d) when the obstacles move). Because control points do

not move and same start and

ceanbdlevserdtoicensotasinτtemjrkseacnt dobissthacolmeso,toτpmikc

has the to τmj k ,

where τm k ∈ ωm , τmj k ∈ ωmj , and k = 1, 2, . . . , n. Based on

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

WANG AND BHATTACHARYA: TOPOLOGICAL APPROACH TO WORKSPACE AND MOTION PLANNING

2605

Fig. 9. Boundary of Fig. 6(b) changes in potential conﬁgurations, expectation: 10435, max cable length sum: 2155.56. (a) Current conﬁguration, area: 16200,
max cable length sum: 1138.39. (b) Potential conﬁguration 1, p1 = 0.5, area: 10250, max cable length sum: 2155.56. (c) Potential conﬁguration 2, p2 = 0.3, area: 11400, max cable length sum: 1241.1. (d) Potential conﬁguration 3, p3 = 0.2, area: 9450, max cable length sum: 1364.59.

Fig. 10. A boundary with max expectation (20265) in an environment with moving obstacles, max cable length sum: 1488.13. (a) Current conﬁguration, area:
19300, max cable length sum: 1435.66. (b) Potential conﬁguration 1, p1 = 0.5, area: 19300, max cable length sum: 1488.13. (c) Potential conﬁguration 2, p2 = 0.3, area: 20100, max cable length sum: 1374.21. (d) Potential conﬁguration 3, p3 = 0.2, area: 22925, max cable length sum: 1283.95.

the homotopy invariants, we are able to search for τmj k ,

τmj k = P (ck , ck+1 , Rj (h(τm k )))

(1)

thus the new boundary in the jth obstacle conﬁguration is

ωmj = Pj (ωm ) =

τ τ = P (ck , ck+1 , Rj (h(τm k ))), where τmk ∈ ωm , k = 1, 2, . . . , n

(2)

where function Rj (·) is for revising h-signatures for the jth
potential conﬁguration. We use Rj (h(τmk )) instead of h(τmk ) because sometimes h(τmj k ) = h(τmk ) may not hold (Fig. 8). The motion of obstacles could be so signiﬁcant that the rays

emanating from obstacles interchange of their coordinates. As

a result, although τmj k and τmk belong to the same homotopy class, the h-signatures of them in terms of crossing rays may be

different. Hence we need to revise h-signatures.

2) Revision of h-signatures: We revise h-signatures depend-

ing on how the obstacles move. The revision applies in four

steps: add/remove, interchange, insert and simplify. The follow-

ing is an example of revision triggered by the representative

point ζα crossing the ray of the representative point ζβ from left to right, namely, the trajectory along which ζα moves has an h-signature of ‘β−1 ’, shown in Fig. 8.

a) Add/remove: When the representative point ζα ’s ray rα moves from the left of the end vertex of one path to its right, we add a corresponding letter ‘α’ at the back of the path’s h-

signature, like τ1 in Fig. 8. Likewise, if it is the start vertex that

any representative point’s ray crosses, add/remove that letter at

the front of path’s h-signature.

b) Interchange: In the h-signature of the path, when ‘α’

is next to ‘β’, we interchange positions of ‘α’ and ‘β’, like τ2 in Fig. 8. Likewise, if ‘α−1 ’ is next to ‘β−1 ’, interchange positions of ‘α−1 ’ and ‘β−1 ’.
c) Insert pair: If ‘α’ or ‘α−1’ appears alone (its previous and next letters are not ‘β’ or ‘β−1 ’), insert ‘β−1 ’ into its left

and ‘β’ into its right, like τ3 in Fig. 8.

d) Simplify: Check if a letter and its inverse appear side-

by-side. If so, cancel both of them. Keep checking until there is

no such a case.

On the contrary, when representative point ζα crossed rβ ’s right to left, going along ‘β’, do “add/remove”, “interchange”

and “simplify” in the same way described above; but when coming to “insert pair”, if there is an lone ‘α’ or ‘α−1’, we insert ‘β’ into its left and ‘β−1 ’ into its right.

A representative point may cross multiple rays. Thus we have

to decompose the crossing into several stages of coordinates

interchanges, then revise h-signatures stage by stage till reach-

ing the ﬁnal conﬁguration. e.g. in Fig. 10, we can split the

transformation from Fig. 10(a) to (b) into two stages: ﬁrstly ζα going along a trajectory ‘β−1 ’, secondly ζα going along ‘γ−1 ’;
transformation from Fig. 10(a) to (b) in two stages: ζβ going along ‘γ−1 ’, then ζα going along ‘γ−1 ’; transformation from
Fig. 10(a) to (d) in one stage: ζβ going along ‘α’. An example

of revision is shown in Table I.

3) Expectation Computation: The probability of the ith po-

tential conﬁguration ρ is the number of

is denoted as pi, i = 1, 2, . . potential conﬁgurations and

.,

ρ, where

ρ i=1

pi

=

1. The area {τm 1 , τm 2 , . .

expectation of the mth . , τm n } ∈ W, is E(ωm )

=validρj=b1oAun(Pdajr(yω, mω)m)p=j .

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

2606

IEEE ROBOTICS AND AUTOMATION LETTERS, VOL. 3, NO. 3, JULY 2018

TABLE I STAGE-BY-STAGE h-SIGNATURE REVISION FOR PATHS IN FIG. 9

Cfg Stg

c1 c2

c2 c3

c3 c4

c4 c1

Cur. N/A

α

α−1 β−1 γ −1

γ β γ −1

γ

P. 1 1

β−1 αβ

β−1 α−1 γ −1

γ β γ −1

γ

2

β−1 γ −1 αγ β β−1 γ −1 α−1

γ β γ −1

γ

P. 2 1

α

α−1 γ −1 β−1

β∗

γ

2

γ−1 αγ

γ −1 α−1 β−1

β

γ

P. 3 1

α

β−1 α−1 γ −1 γ αβα−1 γ −1

γ

∗ Initially it was ‘β γ γ −1 ’ before simpliﬁcation.

Next we can choose a valid boundary with the max expectation from set W.
4) Maximum Cable Length Computation: In order to
ensure that cables are long enough for all potential conﬁgu-
rations, we need to know the maximum length of each ca-
ble. Since the workspace is a polygon that must have convex vertices at control points, the max length from the ith con-
trol point is used when it reaches one of the other control
points. In a particular obstacle and workspace conﬁguration,
that is max{C(cic1 ), C(ci c2 ), . . . , C(cici−1 ), C(cici+1 ), . . . , C(cicn )}, where cicj is the shortest path between the ith and the jth control points inside the workspace. To get goal h-signatures for searching, we concatenate the h-signatures tracing the boundary from the ith control point to the jth in clockwise or counterclockwise direction. For instance, if j > i, the shortest path between ci and cj is cicj = P (ci, cj , h(τi) ◦ h(τi+1 ) ◦ · · · ◦ h(τj−1 )). In Figs. 9 and 10, the sum of four maximum cable lengths were calculated for each conﬁguration.

Fig. 11. Shortest path searching within the workspace by using alternative vertices (vs , vs , vg , vg ) at the boundary instead of start and goal vertices (vs , vg ) to get the goal h-signature.
Fig. 12. Goal-directed path planning within the workspace. Path is colored in green. Alternative points at the boundary in black. (a) Input. (b) Output.

V. ALGORITHM DESIGN FOR ROBOT PATH PLANNING WITHIN THE WORKSPACE
We move a robot from one point to another by controlling the motors to change the cables’ lengths at each one’s desired speed. The cable control algorithm has the following inputs: haugmented graph of environment, coordinate of start and goal vertices, vs and vg , coordinate of control points (xic , yci ), initial cable conﬁguration bi, and desired robot speed vr ; and outputs: shortest trajectory from the start vertex to the end vertex, velocities of each cable vci over time.
A. h-signature of Shortest Trajectory within Boundary
With a correct h-signature of the desired trajectory, we can ensure the search outcome is within the workspace. We chose a path constituting the boundary that can be easily obtained from the said inputs and can be continuously deformed into (homotopic to) the desired shortest path connecting the start and goal points. If both start and goal vertices are at the boundary, we can directly construct the h-signature of a trajectory between two vertices along the boundary. If any of them is inside the workspace, we can use alternative vertices – points (vs and vg ) on the boundary adjacently above start and goal vertices, shown in Fig. 11. vs vg inside the workspace can contin-
uously deform into vs vs vg vg partially at the boundary – they
are in identical homotopy class: h(vs vg ) = h(vs vs vg vg ) = h(vs vs ) + h(vs vg ) + h(vg vg ). Since path vs vs and vg vg are

vertical, they do not cross any rays, having empty h-signatures.
Hence, h(vs vg ) = h(vs vg ) and the shortest trajectory from
start vertex vs to goal vertex vg is vs vg = P (vs , vg , h(vs vg )). Besides, we can use vs and vg (below vs and vg , respectively) instead. In addition, we can apply this method for obtaining cables’ new h-signatures in the next subsection while the robot is moving, where vs = ci and vg = vr (the robot’s location).

B. Cable Velocity

The cable velocity is the projection of the robot’s velocity

in the cable’s direction. Denote coordinates of the ith control

point and robot as (xic , yci ) and (xr , yr ), and the speed of robot

as (vrx , vry ). The velocity of cable attached to the ith control

point

is

vci

=

√(x

i c

−x r

)

v

x r

+

(

y

i c

−y r

)v

y r

(

x

i c

−x r

)2

+

(y

i c

−y r

)2

,

where

vci

is

a

scalar

and

its

positive direction is from the robot to the ith control point, and

robot coordinates (xr , yr ) are integrals of its velocity over time

plus start coordinates. Sometimes the cable may go around an

obstacle, which makes it no longer straight. Instead we use a

temporary control point which is at the nearest turn of cables to

the robot. Thus we search for a new cable conﬁguration based

on the robot’s position. We construct h-signatures from robot’s

alternative vertex vr to each control point along the boundary

in a same direction. In the test shown in Fig. 12, we got h(vr c3 )

ﬁrst, and then got h(vr c4 ), h(vr c1 ) and h(vr c2 ).

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

WANG AND BHATTACHARYA: TOPOLOGICAL APPROACH TO WORKSPACE AND MOTION PLANNING

2607

In the example of Fig. 14 we place 12 task points inside the workspace, the start vertex in the middle overlapping the end vertex. We ﬁnd the workspace ﬁrst then build the t-augmented graph to ﬁnd the shortest path that visits all the task points.

Fig. 13. The task graph Y showing the possible transitions of the task indicator, β, for 4 tasks.
Fig. 14. Using t-augmented graph for multi-task planning within the workspace in a non-convex environment. The robot returns to the start after ﬁnishing all tasks. A shortest path is colored in green. (a) Input: 12 tasks to be ﬁnished. (b) Output: a shortest trajectory.
VI. PATH PLANING FOR MULTI-TASK ACCOMPLISHMENT Suppose the cable-controlled robot needs to execute M unordered tasks, each described as static points in the workspace, before it arrives at the goal vertex. We need to solve the traveling salesman problem – ﬁnd the shortest trajectory that goes through these static task points. One way to accomplish this is to construct a task indicator augmented graph and search in it [17]. A task indicator is a string of M binary digits, denoted by β, in which each bit is a ﬂag or indicator of whether the corresponding task has been completed. For example, if there are 4 tasks to be ﬁnished, ‘0101’ means that the 1st and the 3rd task is ﬁnished while others are not. The robot must set off at the start vertex with β = 0000 and arrive at goal vertex with β = 1111. The task indicator augmented graph Gt = (Vt , Et ) is deﬁned as 1) Vt = {(v, β)|v ∈ V, β ∈ Y} 2) An edge {(v, β) → (v , β )} = P (v, v , h((v) (v ) )) is
in Et for (v, β) ∈ Vt and (v , β ) ∈ Vt , (v) and (v ) being alternative vertices of v and v respectively, iff one of the followings holds
a) The edge {(v, β) → (v , β )} ∈ E, and v ∈/ {τl| the lth bit of β is 0}, and β = β
b) The edge {(v, β) → (v , β )} ∈ E, and v ∈ {τl| the lth bit of β is 0}, with v = τλ, and β → β ∈ Y such that the λth bit of β is 1 (see Fig. 13).
3) The cost associated with an edge {(v, β)→(v , β )} is the same as that associated with edge {v→v } ∈ E.

VII. CONCLUSION
In this letter we have introduced a novel and efﬁcient method for workspace planning for a cable-control robot in a cluttered environment, using the h-signature augmented graph. We have presented algorithms for workspace planning and trajectory planning based on it. Also, we have developed several applications and demonstrated those through simulations in both static and changing environment. More applications such as optimization of location of control points and extension to a full 3-D workspace are within the scope of future research.
REFERENCES
[1] N. Sydney, B. Smyth, and D. A. Paley, “Dynamic control of autonomous quadrotor ﬂight in an estimated wind ﬁeld,” in Proc. 52nd Annu. IEEE Conf. Decision Control, Dec. 2013, pp. 3609–3616.
[2] Y. Mei, Y.-H. Lu, Y. C. Hu, and C. S. G. Lee, “A case study of mobile robot’s energy consumption and conservation techniques,” in Proc. 12th Int. Conf. Adv. Robot., Jul. 2005, pp. 492–497.
[3] K. Pratt, R. Murphy, J. Burke, J. Craighead, C. Grifﬁn, and S. Stover, “Use of tethered small unmanned aerial system at berkman plaza ii collapse,” in Proc. IEEE Int. Workshop Safety, Security Rescue Robot., 2008, pp. 134– 139.
[4] N. Michael et al., “Collaborative mapping of an earthquake-damaged building via ground and aerial robots,” J. Field Robot., vol. 29, no. 5, pp. 832–841, 2012.
[5] R. H. Teshnizi and D. A. Shell, “Planning motions for a planar robot attached to a stiff tether,” in Proc. IEEE Int. Conf. Robot. Autom., May 2016, pp. 2759–2766.
[6] S. Kim, S. Bhattacharya, and V. Kumar, “Path planning for a tethered mobile robot,” in Proc. IEEE Int. Conf. Robot. Autom., Hong Kong, China, May 31– Jun. 7, 2014, pp. 1132–1139.
[7] R. H. Teshnizi and D. A. Shell, “Computing cell-based decompositions dynamically for planning motions of tethered robots,” in Proc. IEEE Int. Conf. Robot. Autom., May 2014, pp. 6130–6135.
[8] I. Shnaps and E. Rimon, “Online coverage by a tethered autonomous mobile robot in planar unknown environments,” IEEE Trans. Robot., vol. 30, no. 4, pp. 966–974, Aug. 2014.
[9] B. R. Donald, L. Gariepy, and D. Rus, “Distributed manipulation of multiple objects using ropes,” in Proc. IEEE Int. Conf. Robot. Autom., San Francisco, CA, USA, Apr. 24–28, 2000, pp. 450–457.
[10] S. Bhattacharya, S. Kim, H. Heidarsson, G. S. Sukhatme, and V. Kumar, “A topological approach to using cables to separate and manipulate sets of objects,” Int. J. Robot. Res., vol. 34, no. 6, pp. 799–815, 2015.
[11] P. Cheng, J. Fink, V. Kumar, and J.-S. Pang, “Cooperative towing with multiple robots,” ASME J. Mechanisms Robot., vol. 1, no. 1, 2008, Art no. 011 008–8.
[12] D. Theodorakatos, E. Stump, and V. Kumar, “Kinematics and pose estimation for cable actuated parallel manipulators,” in Proc. ASME Int. Des. Eng. Tech. Conf. Comput. Inf. Eng., 2007, vol. 8, no. PART B, pp. 1053– 1062.
[13] S. Bhattacharya, M. Likhachev, and V. Kumar, “Topological constraints in search-based robot path planning,” Auton. Robots, vol. 33, no. 3, pp. 273– 290, Oct. 2012.
[14] R. W. Ghrist, Elementary Applied Topology. Createspace, https://www. math.upenn.edu/∼ghrist/notes.html, 2014.
[15] S. Bhattacharya, D. Lipsky, R. Ghrist, and V. Kumar, “Invariants for homology classes with application to optimal search and planning problem in robotics,” Ann. Math. Artif. Intell., vol. 67, no. 3, pp. 251–281, Mar. 2013.
[16] S. Bhattacharya, “Discrete optimal search library (dosl): A templatebased c++ library for discrete optimal search,” 2017. [Online]. Available: https://github.com/subh83/DOSL
[17] S. Bhattacharya, M. Likhachev, and V. Kumar, “Multi-agent path planning with multiple tasks and distance constraints,” in Proc. IEEE Int. Conf. Robot. Autom., 2010, pp. 953–959.

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on September 16,2022 at 11:18:59 UTC from IEEE Xplore. Restrictions apply.

