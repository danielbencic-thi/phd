IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathZoom.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Journals & Magazines > IEEE Transactions on Industri... > Volume: 9 Issue: 1
Comparison of Parallel Genetic Algorithm and Particle Swarm Optimization for Real-Time UAV Path Planning
Publisher: IEEE
Cite This
PDF
  << Results   
Vincent Roberge ; Mohammed Tarbouchi ; Gilles Labonte
All Authors
View Document
535
Paper
Citations
14273
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Environment and Trajectory Representation
    III.
    Cost Function
    IV.
    Genetic Algorithm (GA)
    V.
    Particle Swarm Optimization (PSO)

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: The development of autonomous unmanned aerial vehicles (UAVs) is of high interest to many governmental and military organizations around the world. An essential aspect of... View more
Metadata
Abstract:
The development of autonomous unmanned aerial vehicles (UAVs) is of high interest to many governmental and military organizations around the world. An essential aspect of UAV autonomy is the ability for automatic path planning. In this paper, we use the genetic algorithm (GA) and the particle swarm optimization algorithm (PSO) to cope with the complexity of the problem and compute feasible and quasi-optimal trajectories for fixed wing UAVs in a complex 3D environment, while considering the dynamic properties of the vehicle. The characteristics of the optimal path are represented in the form of a multiobjective cost function that we developed. The paths produced are composed of line segments, circular arcs and vertical helices. We reduce the execution time of our solutions by using the “single-program, multiple-data” parallel programming paradigm and we achieve real-time performance on standard commercial off-the-shelf multicore CPUs. After achieving a quasi-linear speedup of 7.3 on 8 cores and an execution time of 10 s for both algorithms, we conclude that by using a parallel implementation on standard multicore CPUs, real-time path planning for UAVs is possible. Moreover, our rigorous comparison of the two algorithms shows, with statistical significance, that the GA produces superior trajectories to the PSO.
Published in: IEEE Transactions on Industrial Informatics ( Volume: 9 , Issue: 1 , Feb. 2013 )
Page(s): 132 - 141
Date of Publication: 10 May 2012
ISSN Information:
INSPEC Accession Number: 13188393
DOI: 10.1109/TII.2012.2198665
Publisher: IEEE
Contents
SECTION I.
Introduction

The path planner is a key element of the unmanned aerial vehicle (UAV) autonomous control module [1] . It allows the UAV to autonomously compute the best path from a start point to an end point. Whereas commercial airlines fly constant prescribed trajectories, UAVs in operational areas have to travel constantly changing trajectories that depend on the particular terrain and conditions prevailing at the time of their flight.

In the past, the best path has been associated with the shortest path and deterministic search algorithms were used to find the very shortest path. The definition of the problem has since evolved and the best path is now associated with the path that minimizes the distance travelled, the average altitude, the fuel consumption, the radar exposure, etc. These are a few examples of the factors to be considered and clearly show that the complexity of the problem has grown. To cope with this complexity, researchers have slowly moved from using deterministic algorithms to using nondeterministic algorithms [2] .

As an example, the authors of [3] proposed the use of a vibrational genetic algorithm (GA) to improve the exploration and better avoid local minima when searching for an optimal path. In [4] , Bezier curves are used with a GA to produce trajectories that respect a minimum curvature and torsion in an effort to better consider the dynamic properties of the UAV. The authors of [5] also use a GA, but add the concept of artificial immune system in order to maintain superior population diversity throughout the evolution process. In [6] , the authors use a PSO to compute the shortest path between targets in the context of surveillance UAV. In [7] , a comparison of the PSO, the phase angle-encoded PSO and the quantum-behaved PSO in the context of UAV path planning is presented.

In this paper, we use two nondeterministic algorithms to develop an operational path planning module for fixed wing UAVs. Our research work presents three important contributions. First, we propose a comprehensive cost function which includes both the optimization and the feasibility criteria. This allows us to use a generic optimization algorithm (without modification) as the search algorithm. In our case, we use the GA and the PSO, but these could easily be replaced by other algorithms. Second, we present a technique to parallelize both the GA and the PSO while minimizing the communication between the processes in order to achieve a near linear speedup and fully exploit the computing power of today's multicore CPUs. Finally, we offer a statistically significant comparison between the quality of the trajectories generated by our GA-based and PSO-based path planners. Both algorithms have recently been widely used for UAV path planning [3] – [4] [5] [6] [7] [8] and [9] . However, to our knowledge, there exists no rigorous comparison between the two algorithms when applied to this particular problem. The results we present in this paper provide clear insight as to which of the two optimization algorithms is preferable for UAV path planning in complex 3D environments.

Nondeterministic algorithms have been used to cope with the complexity of UAV path planning; however, they could potentially produce, on some occasions, poor solutions. A subsequent re-execution of the algorithm would then be required. It is important to note that the path planner is a submodule of an UAV autonomous control system that includes a decision-making module to handle such situations [1] . For this reason, this paper does not cover the decision making process that would be required in the event of a poor trial run.

The remainder of this paper is organized into sections. Section II provides details of the representation of the terrain and the encoding of the trajectories. We present in Section III the cost function we developed to evaluate the quality of candidate trajectories. Sections IV and V , respectively, discuss the use of the GA and the PSO to find trajectories that optimize the cost function. Section VI briefly presents the method we used to smooth the generated path into a feasible path with no discontinuity in the velocity. Section VII explains the method used to parallelize the GA and the PSO in order to allow real-time path planning. Finally, we compare the quality of the trajectories produced by the GA and the PSO in Section VIII .
Fig. 1. - UAV trajectory in a 3D environment. The red dots represent the waypoints of the UAV trajectory, the blue line represents the line segments connecting the waypoints and the red cylinders represents the danger zones to be avoided.
Fig. 1.

UAV trajectory in a 3D environment. The red dots represent the waypoints of the UAV trajectory, the blue line represents the line segments connecting the waypoints and the red cylinders represents the danger zones to be avoided.

Show All

SECTION II.
Environment and Trajectory Representation

The first step of path planning is to discretize the world space into a representation that will be meaningful to the path planning algorithm. This representation is closely related to a search algorithm and some algorithms will only perform well when coupled with a specific environment representation. An overview of the performance of different representations used with different algorithms is presented in [10] . In our implementation (see Figs. 1 and 2 ), we use an approximate cell decomposition of the terrain using a 2D grid where each element of the matrix represents the elevation of the terrain. This representation allows us to use digital elevation maps freely available from the GeoBase [11] repository with no further processing. Our representation of the environment also allows for the definition of cylindrical danger zones (or no-fly zones) to be kept in a separate matrix where each row represents the coordinates ( x i , y i ) and the diameter d i of the i th cylinder as shown in (1) . Complex no-fly zones can be built by partially juxtaposing multiple cylinders
d a n g e r   z o n e s = ⎡ ⎣ ⎢ ⎢ ⎢ x 1 x 2 ⋯ x n y 1 y 2 ⋯ y n d 1 d 2 ⋯ d n ⎤ ⎦ ⎥ ⎥ ⎥ . (1)
View Source Right-click on figure for MathML and additional features. {\rm danger}\ {\rm zones}= \left[\matrix{x_{1} & y_{1} & d_{1}\cr x_{2} & y_{2} & d_{2}\cr \cdots & \cdots & \cdots \cr x_{n} & y_{n} & d_{n}} \right].\eqno{\hbox{(1)}}

The trajectories generated by the optimization algorithm are composed of line segments and encoded in a matrix where each row represents the ( x i , y i , z i ) coordinates of the i th waypoint, as shown in (2) . The trajectories are flown at constant speed
t r a j e c t o r y = ⎡ ⎣ ⎢ ⎢ ⎢ x 1 x 2 ⋯ x n y 1 y 2 ⋯ y n z 1 z 2 ⋯ z n ⎤ ⎦ ⎥ ⎥ ⎥ . (2)
View Source Right-click on figure for MathML and additional features. {\rm trajectory}=\left[\matrix{x_{1} & y_{1} & z_{1}\cr x_{2} & y_{2} & z_{2}\cr \cdots & \cdots & \cdots \cr x_{n} & y_{n} & z_{n}}\right].\eqno{\hbox{(2)}}

SECTION III.
Cost Function

As previously stated, searching for the best path is often associated with searching for the shortest path. This is the case when solving the Traveling Salesperson Problem (TSP), which consists of finding the shortest path that visits all the given cities only once. In the case of UAV path planning, the optimal path is more complex and includes many different characteristics. To take into account these desired characteristics, a cost function is used and the path planning algorithm becomes a search for a path that will minimize the cost function. The cost of a path decreases with the degree to which the desired characteristics are being fulfilled. A path that fulfills all the characteristics to a high degree would result in a low cost. We define our cost function as follows:
F c o s t = C l e n g t h + C a l t i t u d e + C d a n g e r   z o n e s + C p o w e r + C c o l l i s i o n + C f u e l + C s m o o t h i n g (3)
View Source Right-click on figure for MathML and additional features. \displaylines{F_{\rm cost}= C_{\rm length}+C_{\rm altitude} +C_{\rm danger\ zones}+C_{\rm power}\hfill\cr \hfill+C_{\rm collision}+C_{\rm fuel}+C_{\rm smoothing} \quad\hbox{(3)}}

Fig. 2. - 2D matrix representation of the terrain displayed on Fig. 1. The number in each cell represents the terrain elevation at that location.
Fig. 2.

2D matrix representation of the terrain displayed on Fig. 1 . The number in each cell represents the terrain elevation at that location.

Show All
where C l e n g t h penalizes longer paths, C a l t i t u d e penalizes paths with a higher average altitude, C d a n g e r   z o n e s penalizes paths going through danger zones, C p o w e r penalizes paths requiring more power than the maximum available power of the UAV, C c o l l i s i o n penalizes paths colliding with the ground, C f u e l penalizes paths requiring more fuel than initially available in the UAV, and finally, C s m o o t h i n g penalizes paths that cannot be smoothed using circular arcs. C l e n g t h , C a l t i t u d e and C d a n g e r   z o n e s are optimization criteria and are used to improve the quality of the trajectory. Each of those three terms are defined to be in the range of [0, 1]. On the other hand, C p o w e r , C c o l l i s i o n , C f u e l , and C s m o o t h i n g are feasibility criteria that must be satisfied for the final trajectory to be valid. Each feasibility criterion is defined to be equal to 0, when it is respected, or in the range [ P , P + 1 ] when it is not. By choosing a P greater than 3, we ensure that unfeasible trajectories always have a cost greater than any feasible ones. It is important to note that our implementation defines C d a n g e r   z o n e s as an optimization criterion in the sense that it is preferable to avoid danger zones but not necessarily essential to the survival of the UAV.

This would simulate the scenario where the UAV should avoid enemy radars identified by the danger zones. If used in a different scenario, our cost function could easily be modified to include C d a n g e r   z o n e s as a feasibility criterion ensuring no danger zones are violated. Moreover, although we define danger zones as cylindrical regions, our approach also allows the representation of complex zones by overlapping multiple cylinders.

In our costs function, the term associated with the length of a path is defined as follows:
C l e n g t h therefore C l e n g h t = 1 − ( L P 1 P 2 L t r a j ) ∈ [ 0 , 1 ] (4) (5)
View Source Right-click on figure for MathML and additional features. \eqalignno{C_{\rm length}& =1-\left({L_{P1P2}\over L_{\rm traj}} \right) &\hbox{(4)}\cr\noalign {\hbox{therefore}}\quad C_{\rm lenght}& \in [0, 1] &\hbox{(5)}} where L P 1 P 2 is the length of the straight line connecting the starting point P 1 and the end point P 2 and L t r a j is the actual length of the trajectory.

The term associated with the altitude of the path is defined as follows:
C a l t i t u d e therefore C a l t i t u d e = A t r a j − Z min Z max − Z min ∈ [ 0 , 1 ] (6) (7)
View Source Right-click on figure for MathML and additional features. \eqalignno{C_{\rm altitude}& ={{A_{\rm traj}-Z}_{\min}\over Z_{\max}-Z_{\min}} &\hbox{(6)}\cr \noalign {\hbox{therefore}}\quad C_{\rm altitude}& \in [0, 1] &\hbox{(7)}} where Z max is the upper limit of the elevation in our search space, Z min is the lower limit and A t r a j is the average altitude of the actual trajectory. Z max and Z min are respectively set to be slightly above the highest and lowest points of the terrain.

The term associated with the violation of the danger zones is defined as follows:
C d a n g e r   z o n e s with C d a n g e r   z o n e s = L i n s i d e   d . z . ∑ n i = 1 d i ∈ [ 0 , 1 ] (8) (9)
View Source Right-click on figure for MathML and additional features. \eqalignno{C_{\rm danger\ zones}& ={L_{{\rm inside}\ d.z.} \over \sum_{i=1}^{n} {d_{i}}} &\hbox{(8)}\cr \noalign{\hbox{with}}\quad C_{\rm danger\ zones}& \in [0,1] &\hbox{(9)}} where n is the total number of danger zones, L i n s i d e   d . z . is the total length of the subsections of the trajectory which go through danger zones and d i is the diameter of the danger zone i . This definition ensures that a trajectory passing through a single danger zone is severely penalized on a map containing few danger zones and lightly penalized on a map containing many danger zones. Since it is possible for L i n s i d e   d . z . to be larger than ∑ n i = 1 d i (as in the case of a dog-leg path through a single danger zone), we arbitrarily bound C d a n g e r   z o n e s to 1.

The term associated with a required power higher than the available power of the UAV is defined as follows:
 therefore C p o w e r = { 0 , P + ( L n o t   f e a s i b l e L t r a j ) ,   L n o t   f e a s i b l e = 0     L n o t   f e a s i b l e > 0 C p o w e r   ∈ 0   ∪ [ P , P + 1 ] (10) (11)
View Source Right-click on figure for MathML and additional features. \eqalignno{ & C_{\rm power}=\cases{ 0, & $ L_{\rm not\ feasible}=0$ \cr P+\left({L_{\rm not\ feasible}\over L_{\rm traj}}\right), & $ L_{\rm not\ feasible} > 0 $}\qquad &\hbox{(10)}\cr \noalign {\hbox{ therefore}}& \qquad \qquad \qquad C_{\rm power}\ \in 0\ \cup [P, P+1] &\hbox{(11)}} where L n o t   f e a s i b l e is the sum of the lengths of the line segments forming the trajectory which require more power than the available power of the UAV, L t r a j is the total length of the trajectory and P is the penalty constant. This constant must be higher than the cost of the worst feasible trajectory which would have, based on our cost function, a cost of 3. By adding this penalty P , we separate nonfeasible solutions from the feasible ones. The power required and available depends on the altitude and the current weight of the UAV and is computed using the approach presented in [12] and based on [13] .

The term associated with ground collisions is defined as follows:
therefore C c o l l i s i o n = { 0 , P + ( L u n d e r   t e r r a i n L t r a j ) ,   L u n d e r   t e r r a i n = 0     L u n d e r   t e r r a i n > 0 C c o l l i s i o n   ∈ 0 ∪ [ P , P + 1 ] (12) (13)
View Source Right-click on figure for MathML and additional features. \eqalignno{& C_{\rm collision}=\cases{0, & $ L_{\rm under\ terrain}=0$ \cr P+\left({L_{\rm under\ terrain}\over L_{\rm traj}}\right), & $ L_{\rm under\ terrain} > 0$}\cr &&\hbox{(12)}\cr \noalign {\hbox{therefore}} &\qquad \qquad \qquad C_{\rm collision}\ \in 0\cup [P, P+1] &\hbox{(13)}} where L u n d e r   t e r r a i n is the total length of the subsections of the trajectory which travels below the ground level and L t r a j is the total length of the trajectory. We compare the altitude of the terrain and the altitude of the trajectory in a discreet way using the Bresenham's line drawing algorithm [14] .

The term associated with an insufficient quantity of fuel available is defined as follows:
therefore C f u e l = { 0 , P + 1 − ( F P 1 P 2 F t r a j ) ,   F t r a j ≤ F i n i t     F t r a j > F i n i t C f u e l   ∈ 0 ∪ [ P , P + 1 ] (14) (15)
View Source Right-click on figure for MathML and additional features. \eqalignno{& C_{\rm fuel}=\cases{0, & $ F_{\rm traj}\leq F_{\rm init}$ \cr P+1-\left({F_{P1P2}\over F_{\rm traj}}\right), & $ F_{\rm traj} > F_{\rm init}$} &\hbox{(14)}\cr \noalign {\hbox{therefore}} &\qquad \qquad \qquad C_{\rm fuel}\ \in 0\cup [P, P+1] &\hbox{(15)}} where F P 1 P 2 is the quantity of fuel required to fly the imaginary straight segment connection the starting point P 1 to the end point P 2 , F t r a j is the actual amount of fuel needed to fly the trajectory, F i n i t is the initial quantity of fuel onboard the UAV. The quantity of fuel required is computed using the approach presented in [12] and based on [13] .

Because our representation defines a path as a series of line segments, the trajectory generated includes discontinuity in the velocity at the connections of those segments. As will be explained later in Section VI , we remove those discontinuity using circular constructions in the last step of our path planning algorithm. However, to ensure the smoothing of the optimal solution found is possible, we verify the feasibility of the smoothing in our cost function. So finally, the term associated with the impossible smoothing of the path is defined as follows:
therefore C s m o o t h i n g = { 0 , P + ( N i m p o s s i b l e N t o t a l ) ,   N i m p o s s i b l e = 0     N i m p o s s i b l e > 0 C s m o o t h i n g   ∈ 0 ∪ [ P , P + 1 ] (16) (17)
View Source Right-click on figure for MathML and additional features. \eqalignno{& C_{\rm smoothing}=\cases{0, & $ N_{\rm impossible}=0$ \cr P+\left({N_{\rm impossible}\over N_{\rm total}}\right), & $ N_{\rm impossible} > 0 $} \qquad &\hbox{(16)}\cr \noalign {\hbox{therefore}} &\qquad \qquad \qquad C_{\rm smoothing}\ \in 0\cup [P, P+1] &\hbox{(17)}} where N i m p o s s i b l e is the number of connection that cannot be smoothed using circular constructions as explained in Section VI and N t o t a l is the total number of connections in the trajectory.

During the optimization phase of our path planner algorithm, the search engine will be used to find a solution which minimize the cost function and, therefore, find a trajectory that best satisfies all the qualities represented by this cost function. Our cost function represents a specific scenario where the optimal path minimizes the distance travelled, the average altitude (to increase the stealthiness of the UAV) and avoids danger zones, while respecting the UAV performance characteristics. This cost function is highly complex and demonstrates the power of our path planning algorithm. However, this cost function could easily be modified and applied to a different scenario.
SECTION IV.
Genetic Algorithm (GA)

The GA is a population based nondeterministic optimization method that was developed by John Holland in the 1960s and first published in 1975 [15] . Based on the genetic theory of Darwin evolution, the GA simulates the evolution of a population of solutions to optimize a problem. Similarly to living organisms adapting to their environment over the generations, the solutions in the GA adapt to a fitness function over an iterative process using biology-like operators such as the crossovers of chromosomes, the mutations of genes and the inversions of genes. In recent years, the GA has been used for a wide range of applications such as the design of minimal phase digital filters [16] and the optimization of surface grinding process [17] . In this work, we use the GA to simulate the evolution of a population of trajectories adapting to the cost function defined in the previous section.

In our implementation, the initial trajectories are randomly generated within the 3D search space with no consideration of their feasibility. The fitness of each solution is then evaluated and the mating pool selected favoring fit parents using the stochastic universal sampling method presented in [18] . Children solutions are created from the selected parents using single point crossover also based on [18] . The children solutions are then subject to the following mutations: addition of a new waypoint, deletion of an existing waypoint and modification of an existing waypoint. Finally, the parent generation is replaced by the children generation and the evolution cycle continues until the termination criterion has been met. Our implementation allows the user to define the termination criterion as a maximum number of generations to be simulated (as used in Section VII ) or a fixed execution time (as used in Section VIII ).

We implemented the addition operator by randomly selecting one of the line segments of the trajectory and adding a random waypoint within the 3D neighborhood of its midpoint. Similarly, we implemented the modification operator by randomly selecting one of the waypoints of the trajectory and moving it to a random location within its 3D neighborhood. The size of this neighborhood is initially set based on the size of the search space and is linearly reduced throughout the evolution process improving the exploration at the beginning of the execution and the refinement towards the end. At every generation, each children solution is subject to a mutation based on the mutation rate parameter. The type of mutation is randomly selected between the three we implemented and the mutation affects the solution in a single point. Our implementation also uses the concept of elitism when replacing the old generation with the new one in order to improve convergence. The flowchart of the GA is shown in Fig. 3
Fig. 3. - Flowchart of the genetic algorithm.
Fig. 3.

Flowchart of the genetic algorithm.

Show All
Fig. 4. - Genetic operators used in our GA: (a) single-point crossover and (b) mutations: addition, deletion, modification.
Fig. 4.

Genetic operators used in our GA: (a) single-point crossover and (b) mutations: addition, deletion, modification.

Show All
and the different genetic operators used, in Fig. 4 . The parameter values used in our implementation of the GA are listed in Table I . To reflect the good design of our GA and cost function, we plot in Fig. 5 the cost of the solutions generated by the GA against iterations. At iteration 1, the best solution has a cost of 9.17 and therefore violates a few feasibility constraints. The optimization process rapidly converges and finds a first feasible solution at iteration 30. The refinement of the solutions continues until the maximum number of iterations is attained. The cost of the best solution at the last iteration is 0.342.
Fig. 5. - Cost of the solutions generated by our GA at each iteration (256 chromosomes, 300 iterations, for the scenario shown in Fig. 1).
Fig. 5.

Cost of the solutions generated by our GA at each iteration (256 chromosomes, 300 iterations, for the scenario shown in Fig. 1 ).

Show All
Table I Algorithm Parameter Values
Table I- Algorithm Parameter Values

SECTION V.
Particle Swarm Optimization (PSO)

The PSO is a population-based nondeterministic optimization method that was proposed by Kennedy and Eberhart in 1995 [19] . Similarly to the GA, the PSO has recently been used in a wide range of applications such as the design and optimization of infinite impulse response digital filters [20] . The algorithm simulates the movement of a swarm of particles in a multidimensional search space progressing towards an optimal solution. The position of each particle represents a candidate solution and is randomly initiated. In our implementation, the position of a particle represents a complete trajectory using the same encoding as with the GA. At every step of the iterative process, the velocity of each particle is individually updated based on the previous velocity of the particle, the best position ever occupied by the particle (personal influence) and the best position ever occupied by any particle of the swarm (social influence). In line with the original PSO [19] , our implementation does not allow any mutation type operations. As outlined in [21] , the equations used to compute the velocity and position of a single particle at iteration t are as follows:
Fig. 6. - Flowchart of the particle swarm optimization.
Fig. 6.

Flowchart of the particle swarm optimization.

Show All
v t + 1 x t + 1 = ω v t + c 1 r 1 ⋅ ∗ ( b t − x t ) + c 2 r 2 ⋅ ∗ ( g t − x t ) = x t + v t + 1 (18) (19)
View Source Right-click on figure for MathML and additional features. \eqalignno{{\mbi v}_{t+1}& ={\omega {\mbi v}}_{t}+c_{1}{\mbi r}_{1} \cdot \ast ({\mbi b}_{t}-{\mbi x}_{t})+c_{2}{\mbi r}_{2} \cdot \ast ({\mbi g}_{t}-{\mbi x}_{t}) \qquad &\hbox{(18)}\cr {\mbi x}_{t+1}& ={\mbi x}_{t}+{\mbi v}_{t+1} &\hbox{(19)}} where variables in bold are vectors v is the velocity of the particle; x is its position; b is the best position previously occupied by the particle; g is the best position previously occupied by any particle of the swarm; r 1 and r 2 are vectors of random values between 0 and 1; and ω , c 1 and c 2 are the inertia, the personal influence and the social influence parameters. When searching for an 8-waypoint trajectory, vectors in (18) and (19) have 24 elements and the particles are moving in a 24 D search space. Every element of the particles' velocity v and position x are updated independently as per the two equations. Still based on [21] , the flow diagram of our implementation of the PSO is displayed in Fig. 6 . The parameter values used in our implementation of the PSO are listed in Table I . Our implementation of the PSO allows the user to define the termination criterion as a maximum number of iterations to be simulated (as used in Section VII ) or a fixed execution time (as used in Section VIII ). As we previously did for the GA, we plot in Fig. 7 the cost of the solutions generated by the PSO against iterations. Compared to the GA, the PSO took more iterations before finding the first feasible solution. We also note that the refinement of the best solution is less visible than with the GA. This may be caused by a local minimum. Although the cost versus iteration graphs give clear insight of the good design of our GA and PSO, it is not sufficient to compare the two algorithms. A rigorous comparison in presented in Section VIII of this document.
Fig. 7. - Cost of the solutions generated by our PSO at each iteration (256 particles, 300 iterations, for the scenario shown in Fig. 1).
Fig. 7.

Cost of the solutions generated by our PSO at each iteration (256 particles, 300 iterations, for the scenario shown in Fig. 1 ).

Show All
Fig. 8. - Circular constructions used to smooth the final trajectory and remove all discontinuity in the velocity (left diagram shows a simple circular arc and the right diagram shows a connection using two circular arcs and a circle on an horizontal plane) (reproduced with permission from [22]).
Fig. 8.

Circular constructions used to smooth the final trajectory and remove all discontinuity in the velocity (left diagram shows a simple circular arc and the right diagram shows a connection using two circular arcs and a circle on an horizontal plane) (reproduced with permission from [22] ).

Show All
Fig. 9. - Execution time of our parallel GA for different work sizes.
Fig. 9.

Execution time of our parallel GA for different work sizes.

Show All

SECTION VI.
Path Smoothing

Consistent with solutions proposed in the literature [22] – [23] [24] , our solution generates a path composed of line segments. This would be sufficient
Fig. 10. - Speedup achieved by our parallel GA for different work sizes.
Fig. 10.

Speedup achieved by our parallel GA for different work sizes.

Show All
Table II Computer System Used For The Experimental Test
Table II- Computer System Used For The Experimental Test
Fig. 11. - 3D visualization of the computed path [fictitious map, 25 km2, altitude ranging from 0 to 250 m above mean sea level (AMSL)].
Fig. 11.

3D visualization of the computed path [fictitious map, 25 km 2 , altitude ranging from 0 to 250 m above mean sea level (AMSL)].

Show All
for multidirectional ground robots, but inadequate for a fixed-wing UAV. To remove all discontinuities in the velocity, we smooth the final path by connecting the line segments with simple circular arcs (when the power available is sufficient) or circles on a horizontal plateau (when the power available is not sufficient to fly a simple circular arc) based on [22] , [24] , [25] , and as shown in Fig. 8 . Our final stage module also replaces any line segment requiring more power than available with a vertical helix as in [22] .
Fig. 12. - 3D visualization of the computed path (St-John, NL, Canada, area of 100 km2, altitude ranging from 0 to 246 m AMSL).
Fig. 12.

3D visualization of the computed path (St-John, NL, Canada, area of 100 km 2 , altitude ranging from 0 to 246 m AMSL).

Show All
Fig. 13. - 3D visualization of the computed path (Lake Louise, AB, Canada, area of 192 km2, altitude ranging from 1 515 to 3 491 m AMSL).
Fig. 13.

3D visualization of the computed path (Lake Louise, AB, Canada, area of 192 km 2 , altitude ranging from 1 515 to 3 491 m AMSL).

Show All
Fig. 14. - 3D visualization of the computed path (Kinbasket lake, BC, Canada, area of 348 km2, altitude ranging from 750 to 2 746 m AMSL).
Fig. 14.

3D visualization of the computed path (Kinbasket lake, BC, Canada, area of 348 km 2 , altitude ranging from 750 to 2 746 m AMSL).

Show All
Although smoothing of the path is performed after the optimization process, the feasibility of this operation is verified in our cost function to ensure the smoothing of the final trajectory is always possible.

SECTION VII.
Parallel Implementation

We have
Fig. 15. - 3D visualization of the computed path (Columbia Icefield, AB, Canada, area of 269 km2, altitude ranging from 1 621 to 3 486 m AMSL).
Fig. 15.

3D visualization of the computed path (Columbia Icefield, AB, Canada, area of 269 km 2 , altitude ranging from 1 621 to 3 486 m AMSL).

Show All
Fig. 16. - 3D visualization of the computed path (Banff, AB, Canada, area of 1 360 km2, altitude ranging from 1290 to 3079 m AMSL).
Fig. 16.

3D visualization of the computed path (Banff, AB, Canada, area of 1 360 km 2 , altitude ranging from 1290 to 3079 m AMSL).

Show All
Fig. 17. - 3D visualization of the computed path (Jasper, AB, CA, area of 3 717 km2, altitude ranging from 1020 to 3308 m AMSL).
Fig. 17.

3D visualization of the computed path (Jasper, AB, CA, area of 3 717 km 2 , altitude ranging from 1020 to 3308 m AMSL).

Show All
now discussed all the elements required to build a complete path planning module for UAVs. Although the generated trajectories are feasible and nearly optimal, the computation time remains too long for real-time applications. To address this problem, we developed parallel versions of our GA and PSO using the “Single-program, multiple-data” parallel programming paradigm. Our implementation was done in MATLAB™. It can be classified as a multiple-deme parallel GA where sub-populations evolve independently while allowing some level of migration between the demes
Fig. 18. - Flowchart of our parallel genetic algorithm.
Fig. 18.

Flowchart of our parallel genetic algorithm.

Show All
[26] . In our implementation, the migrations occur synchronously, ten times throughout the optimization process and involve all the solutions. Our approach maintains a good level of collaboration between the subpopulation, minimizes the communication between the processes, offer a better speedup than a master-slave implementation [26] and allows full use of today's multicore CPUs. The flowchart of our parallel GA is shown in Fig. 18 . Although drawn for two processes, our implementation allows any number of processes. Our parallel version of the PSO is not shown in this paper but follows the same principle. The execution time and the speedup of our parallel GA were measured using the parameters in Table I , on the system described in Table II and are plotted in Figs. 9 and 10 . The execution time and the speedup of our parallel PSO are not presented here, but almost identical.

Although we achieved a computation time of 3.63 s for 128 chromosomes and 100 generations, we arbitrarily configured our path planning module for a fixed execution time of 10 s. This allows the simulation to continue for few hundreds of generations (318 for the GA and 213 for the PSO) and generate very high-quality trajectories in a wide range of complex 3D environments. Ten seconds may seem too long for a real-time application, but easily allows the UAV to compute the next path, while flying the current one. As an example, the Global Hawk (one of the fastest UAVs currently in use) has a cruising speed of 635 km/h and travels 1 764 m in 10 s
Table III Average Cost Of The 60 Trajectories Generated For Each Of The 40 Scenarios Using Our Ga-Based And Pso-Based Path Planning Algorithm (Showing Results For The First 20 Scenarios Due To Space Limitation)
Table III- Average Cost Of The 60 Trajectories Generated For Each Of The 40 Scenarios Using Our Ga-Based And Pso-Based Path Planning Algorithm (Showing Results For The First 20 Scenarios Due To Space Limitation)
[13] . Our path planning module can easily generate trajectories longer than this distance and therefore allows computation while in flight.

SECTION VIII.
Comparison of the GA and the PSO

Finally, we compare the performance of the GA and the PSO using 40 different scenarios from two fictitious terrain elevation maps and six real terrain elevation maps from the Canadian coast, the Canadian Rockies and the Canadian ice fields. The digital elevation maps for the six real terrains were taken from the GeoBase repository [11] . Each scenario has a unique start and finish point and a varied number of danger zones. Six of the 40 scenarios are shown in Figs. 11 – 17 . These scenarios are representative of the complexity and realism of all 40 scenarios used. The average costs of 60 trajectories generated using our parallel GA and parallel PSO for a fixed computation time of 10 s and population size of 256 are listed in Table III . Each run used a different initial random population of solutions. To compare our implementations of the GA and the PSO, we used the T-test [27] on the cost distributions of the trajectories obtained by each algorithm. In Table III , the p-value obtained by the T-test represents the probability that the difference between the two averages is due to chance. In other words, when the p-value obtained is lower than 0.05, the two averages are significantly different with a 95% confidence. In that case, we can compare the two averages and identify which algorithm performed the best. Base on the results presented in Table III , we conclude that:

    the GA produced trajectories significantly better than those generated by the PSO for 25 of the 40 scenarios;

    the PSO produced trajectories significantly better than those generated by the GA for 3 of the 40 scenarios;

    the GA and the PSO produced trajectory of similar quality for 12 of the 40 scenarios.

Based on these results, we conclude that the GA is preferable to the PSO when solving the path planning problem for UAVs in a fixed computation time of 10 s on multicore commercial off-the-shelf processors.
SECTION IX.
Conclusion

This paper presents a path planning solution for UAVs which considers the dynamic properties of the UAV and the complexity of a real 3D environment. We used two nondeterministic algorithms, the GA and the PSO, to attack this complexity and produce solutions in a relatively short computation time. We further reduced the execution time by developing parallel versions of our algorithms. After achieving a quasi-linear speedup of 7.3 on 8 cores and an execution time of 10 s for both algorithms, we conclude that by using a parallel implementation on standard multicore CPUs, real-time path planning for UAVs is possible. Moreover, our rigorous comparison of the two algorithms shows, with statistical significance, that our implementation of the GA produces superior trajectories than our implementation of the PSO when using the same encoding.

Authors
Figures
References
Citations
Keywords
Metrics
   Back to Results   
More Like This
Path planning of mobile robots based on specialized genetic algorithm and improved particle swarm optimization

Proceedings of the 31st Chinese Control Conference

Published: 2012
Rotary unmanned aerial vehicles path planning in rough terrain based on multi-objective particle swarm optimization

Journal of Systems Engineering and Electronics

Published: 2020
Show More
References
1. H. Chen, X.-M. Wang and Y. Li, "A survey of autonomous control for UAV", Proc. 2009 Int. Conf. Artif. Intell. Comput. Intell. , vol. 2, pp. 267-271, 2009.
Show in Context View Article Full Text: PDF (323) Google Scholar
2. E. Masehian and D. Sedighizadeh, "Classic and heuristic approaches in robot motion planning—A chronological review", World Academy of Science , vol. 29, pp. 101-106, 2007.
Show in Context Google Scholar
3. P. Y. Volkan, "A new vibrational genetic algorithm enhanced with a Voronoi diagram for path planning of autonomous UAV", Aerosp. Sci. Technol. , vol. 16, no. 1, pp. 47-55, Jan. 2012.
Show in Context Google Scholar
4. D. G. Macharet, A. A. Neto and M. F. M. Campos, "Feasible UAV path planning using genetic algorithms and Bezier curves", Proc. SBIA'10 , pp. 223-232, 2010.
Show in Context CrossRef Google Scholar
5. Z. Cheng, Y. Sun and Y. Liu, "Path planning based on immune genetic algorithm for UAV", Proc. Int. Conf. Electric Inform. Control Eng. , pp. 590-593, 2011.
Show in Context View Article Full Text: PDF (261) Google Scholar
6. Y. Bao, X. Fu and X. Gao, "Path planning for reconnaissance UAV based on particle swarm optimization", Proc. 2nd Int. Conf. Comput. Intell.Natural Comput. CINC'10 , vol. 2, pp. 28-32, 2010.
Show in Context View Article Full Text: PDF (725) Google Scholar
7. Y. Fu, M. Ding and C. Zhou, "Phase angle-encoded and quantum-behaved particle swarm optimization applied to three-dimensional route planning for UAV", IEEE Trans. Syst. Man Cybern. , vol. 42, no. 2, pp. 511-526, 2012.
Show in Context View Article Full Text: PDF (1518) Google Scholar
8. D. M. Pierre, N. Zakaria and A. J. Pal, "Master-slave parallel vector-evaluated genetic algorithm for unmanned aerial vehicle's path planning", Proc. Int. Conf. Hybrid Intell. Syst. , pp. 517-521, 2011.
Show in Context View Article Full Text: PDF (721) Google Scholar
9. G. Wang, Q. Li and L. Guo, "Multiple UAVs routes planning based on particle swarm optimization algorithm", Proc. 2nd Int. Symp. Inform. Eng. Electronic Commerce , pp. 1-5, 2010.
Show in Context View Article Full Text: PDF (1955) Google Scholar
10. N. Sariff and N. Buniyamin, "An overview of autonomous mobile robot path planning algorithms", Proc. 4th Student Conf. Res. Develop. , pp. 183-188, 2006.
Show in Context View Article Full Text: PDF (242) Google Scholar
11. GeoBaseCanadian Digital Elevation Data , Accessed: Apr. 2012.
Show in Context Google Scholar
12. G. Labont, Mathematical relations to analyze aircraft performance for trajectory planning , Dec. 2010.
Show in Context Google Scholar
13. J. D. J. Anderson, Introduction to Flight, New York:McGraw-Hill, 2008.
Show in Context Google Scholar
14. J. Bresenham, "Algorithm for computer control of a digital plotter", IBM Syst. J. , vol. 4, no. 1, pp. 25-30, 1965.
Show in Context View Article Full Text: PDF (1210) Google Scholar
15. J. H. Holland, Adaptation in Natural and Artificial Systems, MA, Cambridge:MIT Press, 1975.
Show in Context Google Scholar
16. A. Slowik, "Application of evolutionary algorithm to design minimal phase digital filters with non-standard amplitude characteristics and finite bit word length", Bull. Polish Acad. Sci.: Tech. Sci. , vol. 59, no. 2, pp. 125-135, 2011.
Show in Context Google Scholar
17. A. Slowik and J. Slowik, "Multi-objective optimization of surface grinding process with the use of evolutionary algorithm with remembered Pareto set", Int. J. Adv. Manuf. Technol. , vol. 37, no. 78, pp. 657-669, 2008.
Show in Context CrossRef Google Scholar
18. X. Yu and M. Gen, Introduction to Evolutionary Algorithms, U.K., London:Springer, 2010.
Show in Context CrossRef Google Scholar
19. J. Kennedy and R. Eberhart, "Particle swarm optimization", Proc. IEEE Int. Conf. Neural Networks , vol. 4, pp. 1942-1948, 1995.
Show in Context View Article Full Text: PDF (627) Google Scholar
20. A. Slowik and M. Bialko, "Design and optimization of ir digital filters with non-standard characteristics using particle swarm optimization algorithm", Proc. ICECS'07 , pp. 162-165, 2007.
Show in Context View Article Full Text: PDF (670) Google Scholar
21. M. Clerc, Particle Swarm Optimization, France, Paris:Lavoisier, 2005.
Show in Context Google Scholar
22. G. Labont, "On the construction of dynamically feasible aircraft trajectories using series of line segments", Comput. Intell. Res. Lab RMC , Nov. 2009.
Show in Context Google Scholar
23. I. Hasircioglu, H. R. Topcuoglu and M. Ermis, "3-D path planning for the navigation of unmanned aerial vehicles by using evolutionary algorithms", Proc. 10th Annu. Conf. Genetic Evol. Comput. , pp. 1499-1506, 2008.
Show in Context CrossRef Google Scholar
24. E. P. Anderson, R. W. Beard and T. W. McLain, "Real-time dynamic trajectory smoothing for unmanned air vehicles", IEEE Trans. Control Syst. Technol. , vol. 13, no. 3, pp. 471-477, May 2005.
Show in Context View Article Full Text: PDF (432) Google Scholar
25. C. L. Bottasso, D. Leonello and B. Savini, "Path planning for autonomous vehicles by trajectory smoothing using motion primitives", IEEE Trans. Control Syst. Technol. , vol. 16, no. 6, pp. 1152-1168, 2008.
Show in Context View Article Full Text: PDF (1275) Google Scholar
26. S. N. Sivanandam and S. N. Deepa, Introduction to Genetic Algorithms, New York:Springer, 2008.
Show in Context Google Scholar
27. MATLAB Two-Sample T-Test , Accessed Apr. 2012.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
