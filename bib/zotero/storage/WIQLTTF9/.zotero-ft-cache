2018 IEEE International Conference on Robotics and Automation (ICRA) May 21-25, 2018, Brisbane, Australia
Planning, Fast and Slow: A Framework for Adaptive Real-Time Safe Trajectory Planning
David Fridovich-Keil*, Sylvia L. Herbert*, Jaime F. Fisac*, Sampada Deglurkar, and Claire J. Tomlin

Abstract— Motion planning is an extremely well-studied problem in the robotics community, yet existing work largely falls into one of two categories: computationally efﬁcient but with few if any safety guarantees, or able to give stronger guarantees but at high computational cost. This work builds on a recent development called FaSTrack in which a slow ofﬂine computation provides a modular safety guarantee for a faster online planner. We introduce the notion of “meta-planning” in which a reﬁned ofﬂine computation enables safe switching between different online planners. This provides autonomous systems with the ability to adapt motion plans to a priori unknown environments in real-time as sensor measurements detect new obstacles, and the ﬂexibility to maneuver differently in the presence of obstacles than they would in free space, all while maintaining a strict safety guarantee. We demonstrate the meta-planning algorithm both in simulation and in hardware using a small Crazyﬂie 2.0 quadrotor.
I. INTRODUCTION
The navigation of autonomous dynamical systems through cluttered environments is a hard problem, particularly when there is a need for both speed and safety. Often, elements of the environment (such as obstacle locations) are also unknown a priori, further complicating the problem. Many popular methods exist for planning trajectories in such scenarios, but a key challenge lies in accounting for dynamic feasibility in real time while providing a safety guarantee. Some of the most common approaches in this space are sampling-based planners such as rapidly-exploring random trees (RRTs) [1]. Typically, these planners fall into one of two broad categories: geometric planners only attempt to ﬁnd a path the system can take from its current position to the goal, while kinodynamic planners ﬁnd a dynamically feasible trajectory, i.e. a path with associated time stamps that adheres to some known system dynamics.
Since the output of a geometric planner is not usually dynamically feasible, a common practice is to apply a feedback controller, e.g. a linear quadratic regulator (LQR), to attempt to track a geometric plan. Since the controller will not follow the plan perfectly, geometric plans are usually generated by assuming an ad hoc safety margin. This idea is illustrated in Fig. 1(a-b).
In practice, this safety margin is almost always a conservative heuristic chosen by the operator. However, the recently-
*These authors contributed equally. This research is supported by NSF under the CPS Frontiers VehiCal project (1545126), by the UC-PhilippineCalifornia Advanced Research Institute under project IIID-2016-005, and by the ONR MURI Embedded Humans (N00014-16-1-2206). S. Herbert and D. Fridovich-Keil are funded by the NSF GRFP. S. Herbert is also funded by the UC Berkeley Chancellor’s Fellowship. {dfk, sylvia.herbert, jﬁsac, sampada deglurkar, tomlin}@berkeley.edu





 


 






Fig. 1: (a) A dynamical system (black, dotted) may not be able to track the output of a geometric planner (blue, solid), resulting in collision with an obstacle. (b) Often planners account for tracking error by heuristically augmenting obstacles; however, the system may still deviate from the planned path by more than this margin. (c) Schematic of meta-planner operation using fast (blue, dashed) and slow (red, solid) planning models with correspondingly large (blue, solid) and small (red, hatched) TEB-augmented obstacles.

developed Fast and Safe Tracking (FaSTrack) framework [2] provides a rigorous way to precompute a safety margin ofﬂine, given a model of the true system dynamics and a (possibly lower-dimensional) model of the online planner’s dynamics. In the FaSTrack framework, a guaranteed maximum possible tracking error is computed between the tracking system model and the planning model. This tracking error bound (TEB) can also accommodate deviations due to external disturbances such as wind and time delays. The TEB is used to expand obstacles by a margin that guarantees

978-1-5386-3081-5/18/$31.00 ©2018 IEEE

387

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

safety. The ofﬂine precomputation also provides a computationally efﬁcient safety controller that maps the relative state between the tracking system and the planned trajectory at any given time to the most effective control action for the tracking system to remain within the TEB. Hence, the online algorithm involves real-time planning using a fast, potentially low-dimensional planning model, and quickly computable robust optimal tracking of the planned trajectory using a higher-dimensional tracking model.
While FaSTrack makes no signiﬁcant assumptions about the speciﬁc type of low-dimensional planner, in this work we focus our attention on geometric planners operating in the robot’s conﬁguration space. We observe that the resulting geometric paths can be interpreted as kinematic trajectories with a ﬁxed maximum speed in each dimension. We emphasize that the restriction to geometric planners is pedagogical; like FaSTrack, our proposed meta-planning approach is more general and extends to more complex planning models.
One key drawback of FaSTrack is that the TEB can be overly conservative if the system is tracking a particularly difﬁcult-to-track planning model. In this paper we propose an extra layer to the core framework that allows combining multiple planning models with different maximum speeds, and hence different TEBs. We call this process metaplanning, and it effectively generates a tree of trajectories that switch between “faster” and “slower” planning models, as illustrated in Fig. 1(c). Faster planning models are able to navigate through the environment quickly, but their larger TEBs prevent them from threading narrow passages between obstacles. Slower planning models take more time to traverse the environment, but the correspondingly smaller TEBs allow them to maneuver more precisely near obstacles. By adaptively selecting the planning model in real time, our framework can trade off between speed of navigation and size of the TEB. Crucially, our meta-planning scheme can quickly and safely adapt to the presence of obstacles detected at motion time.
The main contributions of this paper are the aforementioned real-time meta-planning algorithm for Fast and Safe Tracking, a constructive proof of safety, and a demonstration of the full algorithm both in simulation and hardware using a small quadrotor vehicle.
II. RELATED WORK
Robust motion planning and trajectory optimization have been active areas of research in recent years. However, navigation that is both robust and fast is still a challenge. Sampling-based motion planners can be computationally efﬁcient, but attempts to make them robust are generally heuristic. Other techniques for online dynamic navigation include model predictive control (MPC), which is extremely useful, particularly for linear systems. MPC is harder to use in real time for nonlinear systems due to the computational costs of solving for dynamic trajectories, though work to speed up computation is ongoing [3, 4]. Robustness can be achieved in linear systems [5, 6], and there is work on making MPC for nonlinear systems robust by using

algorithms based on minimax formulations and tube MPCs that bound output trajectories with a tube around a nominal path (see [7] for references).
There are other techniques for robust navigation that take advantage of precomputation. Safety funnels can be constructed around motion primitives that can then be pieced together in real time [8]. Given a precomputed nominal dynamically feasible trajectory, contraction mapping can be used to make this nominal trajectory more robust to external disturbances in real time [9]. Finally, HamiltonJacobi (HJ) reachability analysis has been used for ofﬂine robust trajectory planning in fully known environments, providing guaranteed tracking error bounds under external disturbances [10].
The meta-planning aspect of this paper was inspired by behavioral economist Daniel Kahneman’s Nobel Prize winning work on “fast” (intuitive) and “slow” (deliberative) modes of cognitive function in the brain [11]. Thinking with the “fast system” is efﬁcient, but more error-prone. Thinking with the “slow system” is less error-prone, but slower. The brain adaptively chooses which mode to be in to operate efﬁciently while minimizing error in scenarios where error can be disastrous. This act of deciding how much cognitive effort to expend for a given task is called metareasoning [12], and can be useful for robotics. It may be desirable for a robot to plan and move swiftly whenever possible, but to operate more carefully when approaching a challenging region in the environment. Research in psychology has suggested that selecting between a limited number of discrete cognitive modes is computationally advantageous [13], which inspires the use of discrete set of faster and slower planning models in our meta-planning algorithm. Our algorithm is able to trade off planner velocity and tracking conservativeness in a modular way while providing a strong theoretical safety guarantee.
III. BACKGROUND
The FaSTrack framework can be used to plan and track a trajectory online and in real time. The real-time planning is done using a set of kinematic or dynamic planning models, and the physical system is represented by a dynamic tracking model that will attempt to follow the current planning model. The environment can contain static a priori unknown obstacles provided they can be observed by the system within a limited sensing range.1 In this section we will deﬁne the tracking and planning models and their relation to one another, and present a brief overview of FaSTrack.
A. Tracking Model
The tracking model should be a realistic representation of the real system dynamics, and in general may be nonlinear and high-dimensional. Let s represent the state variables of
1In order to provide safety guarantees, the minimum allowable sensing distance in any direction is the length of the TEB’s projection onto that direction, added to the largest distance the current planning reference could move while a new meta-plan is generated.

388

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

the tracking model. The evolution of the dynamics satisﬁes the ordinary differential equation (ODE):

ds dt

=

s˙

=

f (s, us, d), t

∈

[0, tf ]

(1)

s ∈ S, us ∈ Us, d ∈ D

The trajectories of (1) will be denoted as ξf (t; s0, t0, us(·), d(·)), where t0, t ∈ [0, tf ] and t0 ≤ t. Under standard technical assumptions [2], these trajectories will satisfy the initial condition and the ODE (1) almost everywhere. For a running example we will consider a tracking model of a simple double-integrator with control us and disturbances d = [dv, da]T :

s˙x s˙vx

=

svx − dv us − da

(2)

B. Planning Model
The planning model deﬁnes the class of trajectories generated by the motion planner. Let p represent the state variables of the planning model, with control up. The planning states p ∈ P are a subset of the tracking states s ∈ S. FaSTrack is agnostic to the type of planner, as long it can be represented using a kinematic or dynamic model as follows:

dp dt

= p˙ = h(p, up), t ∈ [0, tf ], p ∈ P,

up ≤ up

≤ up

(3)

This paper focuses on geometric planners. Although geometric planners may not directly use a dynamical model, the paths they generate can be described by a point with direct velocity control. For example, a 1D geometric planner could be described as a point moving with a direct velocity controller: p˙x = up. Note that the planning model does not need a disturbance input. Disturbances need only be considered in the tracking model and not the planning model, since the latter only exists in the abstract as a reference for the former.

C. Relative Dynamics
The FaSTrack framework relies on using the relative dynamics between the tracking and planning models. The relative system may be derived by lifting the planner’s state from P to S and subtracting:

r = s − Qp, r˙ = g(r, us, up, d)

(4)

Q is matrix that matches the common states of s and p by augmenting the state space of the planning model. The relative states r now represent the tracking states relative to the planning states. Using our tracking and planning model examples from above we can deﬁne the dynamics of a double-integrator tracking a 1D point mass as:

r˙x s˙vx

=

svx − dv − up us − da

(5)

D. The FaSTrack Framework
The FaSTrack framework, explained in detail in [2], consists of both an ofﬂine precomputation algorithm and an online planning algorithm. Together, these allow a nonlinear dynamic system to navigate through an a priori unknown environment with static obstacles, safely and in real time.
Ofﬂine, FaSTrack computes a tracking error bound (TEB) and a safety controller to stay inside this bound. The TEB is a safety margin that, when using the safety controller, guarantees robust tracking despite worst-case planner behavior and bounded disturbances. The safety controller operates on the relative state between tracker and planner, and is computed ofﬂine via HJ reachability analysis in free space. This is possible because the relative dynamics do not depend on the absolute state of the tracking system in the environment. Since the tracker will always remain inside the TEB, as long as the TEB never intersects any obstacles, the free space relative dynamics will always apply.
Online, both at the start and whenever a new obstacle is sensed, an off-the-shelf planning algorithm—equipped with the precomputed TEB for collision-checking—generates a new trajectory. The tracking system may then apply the precomputed safety controller to track this planned trajectory in real time.
IV. META-PLANNING
A. General Framework
In this work, we use the term planner to denote the conjunction of a planning algorithm and an associated planning model that it uses to generate timed trajectories.This paper’s main contribution to the FaSTrack framework is the introduction of a meta-planning algorithm to choose between a selection of planners {πi}Ni=1 with different maximum speeds and hence different TEBs at runtime. We ﬁrst assume that planners are sorted in order of decreasing maximum speed and hence TEB size, and that the overall objective is to minimize the time to reach a speciﬁed goal point. This objective implies a preference for planners that can move faster, but also for planners that can safely navigate a more direct route even if they must do so at lower speed.
The core of the meta-planner is a random tree T inspired by RRT-style sampling-based planners [1], as shown in Fig. 1.2 The obstacles are shown in black, and are augmented by the TEBs for two different planners. As in RRT, waypoints in P are sampled randomly from the environment and (potentially) connected with their nearest neighbor in T . If the fast planner3 (with the large blue TEB) ﬁnds a collisionfree trajectory, the connection is established (dashed blue lines). Otherwise, the slow planner (with smaller red striped TEB and solid red lines) attempts to connect to the nearest neighbor. Upon success, the waypoint is inserted into T , along with the trajectory generated by the planner to reach
2The choice of a tree topology is for convenience; any directed graph including the robot’s current state would sufﬁce.
3Note that by a faster planner we mean one with a higher associated maximum velocity, rather than smaller computation time.

389

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

0.8

analytic

0.4

numerical

0

-0.4 -0.8
-0.8 -0.4 0 0.4 0.8

Fig. 3: Example of a Dubins car that must leave its tight orbit in order to eventually move closer to the origin. This example illustrates why the switching safety bound may generally be larger than the tracking error bound.

Fig. 2: Invariant set that the double-integrator can remain in despite worst-case disturbance and planning control for the both numerical solution (dotted) and analytic solution (solid).
that waypoint from the nearest neighbor, and the associated safety controller to remain inside the TEB. If a waypoint is successfully inserted near the goal, a similar process ensues to attempt to ﬁnd a trajectory between it and the goal point.
Once a valid “meta-plan” is found from start to goal, the meta-planner continues building T until a user-speciﬁed maximum runtime has elapsed, always retaining the best (shortest time) sequence of waypoints to the goal. Similar to Informed RRT* [14], the meta-planner immediately rejects samples which could not possibly improve upon the best available trajectory.4
The key to meta-planning lies in ensuring safe switching between planners. This guarantee requires an ofﬂine computation to determine a safety margin for switching into successively slower planners (with smaller TEBs), as well as a safe switching control law. Online, we must be sure to plan with the appropriate safety margin at each step, and to “backtrack” if we detect the need for a switch to a slower planner. We will next explore the ofﬂine and online steps in detail.
B. Ofﬂine Reachability Analysis
There are two major components to the ofﬂine precomputation for the meta-planner. The ﬁrst step is to compute the TEB and safety control look-up tables for each planner. This is done following the standard FaSTrack precomputation algorithm [2]. Fig. 2 shows the set of relative states in the x-subsystem that the tracker can remain within despite worst case planner behavior and external disturbance. The projection of this controlled invariant set onto the position axis comprises the x-TEB. For the double-integrator dynamics in (5), an analytic solution can also be found by applying the equations of constant-acceleration motion under the worstcase disturbance and the best associated control effort. The analytic controlled invariant set, consisting of two parabolic curves, is superimposed in Fig. 2. Such analytic solutions do not exist in general.
4In Informed RRT*, planner velocities lie on the sphere leading to an elliptical geometry for valid samples. Since we assume a maximum speed in each dimension, valid samples lie in a distorted rhombicuboctahedron.

The second major component of the ofﬂine precomputation is to ﬁnd the corresponding tracking bound and optimal controller for transitioning between planners. For the dynamics in (5), switching from a planner with a small TEB to one with a large TEB is safe by construction, because the large TEB contains the small TEB. Switching from a large TEB to a small one is more complicated.
To transition from a large TEB to a small TEB we must ensure that the relative state between the autonomous system and the planned path is within the small TEB by the time of the planner switch. FaSTrack provides the optimal control for staying within each bound individually, but does not provide the controller and bound required for reducing the tracking error prior to a switch. Perhaps surprisingly, in general the tracker may ﬁrst need to exit the large TEB before converging to the small TEB. Fig. 3 provides an intuitive example of this phenomenon. Here, a Dubins car moving at a ﬁxed speed remains within radius R of the origin by turning at its maximum steering angle. In order for the car to reduce its distance to the origin, it must ﬁrst exit the original circle to reorient itself towards the origin. In general we must precompute the set of states that the system may visit when transitioning from a large TEB to a small TEB, and the optimal control to achieve this transition. To do this we use HJ reachability analysis.
HJ reachability analysis provides a rigorous mechanism for analyzing the goal satisfaction of a system, and can be used to determine the backward reachable tube (BRT). The BRT is the set of all allowable initial states of a system such that it can enter a set of goal states within a given time interval. HJ reachability analysis can also be used in the context of differential pursuit-evasion games [15, 16]. Here, as in FaSTrack [2], we assume there is such a game between the tracking system and the planning system. In this game, the tracking system will try to “capture” the planning system, while the planning system is attempting to avoid capture. In practice, the planner is not actively trying to avoid the tracker, but this assumption accounts for unexpected, worstcase planner behavior. We want to determine the set of states that the tracking system may visit when transitioning from the larger TEB to the smaller TEB.
Before constructing the differential game we must ﬁrst determine its information structure, i.e. how and when each player makes decisions. Since the relative dynamics between the tracker and planner are decoupled in their respective

390

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

2
rx 0

Switching

Large

2

Small

rx 0

-2

-2

-2

0

2

svx

-2

0

2

svx

Fig. 4: Visualizations of the x-subsystem’s numerical (left) and analytic (right) controlled invariant sets for two different planners. The numerical SSB is guaranteed to overapproximate the minimal SSB.

inputs, and we assume an additive disturbance, it is in fact irrelevant who “plays ﬁrst” at each time instant, and the value of the game is well deﬁned under feedback strategies.
For the system in the form of (4), we would like to compute the BRT of time horizon T , denoted R(T ). Intuitively, R(T ) is the set of states from which there exists a control strategy to drive the system into a target set L within a duration of T despite worst-case disturbances. Formally, the BRT is deﬁned here as

R(T ) = {r : ∃us(·) ∈ Us, ∀up(·) ∈ Up, ∀d(·) ∈ D,

r(·) satisﬁes (4),

(6)

∃t ∈ [t0 − T, t0], ζ(t; r, t0, us(·), d(·)) ∈ L}

where Us, Up, D denote the sets of feedback strategies for the tracker, planner and disturbance.
Standard HJ formulations exist for computing the BRT in general [17–20], and more efﬁciently for decomposable systems [21]. Here the target L is the set of states represented by the smaller tracking error bound. Using the relative dynamics between the tracking model and the planning model associated with the smaller TEB, we evolve this set backwards in time. We stop the computation when the tube contains the set of states associated with the larger TEB. This BRT represents the set of states from which the system can enter the small TEB, as well as the states that the trajectories may enter along the way. By projecting this set onto the position dimensions we obtain a switching safety bound (SSB). We note that this is an over-approximation of the minimal SSB because it includes trajectories that do not originate inside the larger TEB’s controlled invariant set. The SSB precomputation also generates the switching controller. Continuing our double-integrator example, Fig. 4a shows the controlled invariant sets associated with the larger and smaller TEBs, and the over-approximated set associate with the SSB. The same information computed analytically is shown in Fig. 4b, where the minimal SSB may be computed exactly.

C. Online Meta-Planning
At runtime, the meta-planner is in charge of constructing and maintaining a tree, T , of waypoints connected via trajectories generated by the set of available planners. It is also responsible for re-planning whenever new information about the environment becomes available, i.e. when obstacles are detected.
The precomputed safety sets allow the meta-planner to reason quickly about dynamic tracking feasibility as it builds T . Using the precomputed TEBs, the meta-planner can determine which planners are safe to use in different regions of the environment. In addition, the SSBs allow the meta-planner to determine the validity of planner-to-planner transitions. The meta-planner’s logic is detailed below and illustrated in Fig. 5.
Step 0: Root. The root node of T is initially set at the starting position of the tracking system. Since the system has an initial tracking error equal to zero, it is by deﬁnition inside of all the available TEBs. Later, if an obstacle has just been detected mid-trajectory, the new root node will be placed at the predicted position of the planning system after some allowed computation time (typically < 1 s) and the tracking system will only be guaranteed to be inside the TEB associated to the current edge of T .
Step 1: Sample. The meta-planner constructs its tree T by sequentially sampling points uniformly at random from the environment and attempting to connect them to the nearest existing waypoint in the tree.
Step 2: Plan. By default, the meta-planner always tries to connect waypoints using the fastest planner π1, which is also associated to the largest TEB. If π1 does not ﬁnd a collisionfree trajectory, the meta-planner then attempts to use the second-fastest planner π2, which has a smaller TEB. The meta-planner continues trying available planners in order of decreasing TEB size until one succeeds or all have failed (in which case it abandons this candidate waypoint and samples a new one).
Step 3: Virtual Backtrack. When a planner πk succeeds in reaching a new point p from the nearest waypoint w ∈ T , the meta-planner checks what planner was previously used to reach waypoint w from its parent v ∈ T . If this preceding planner πj had a larger TEB than the new planner (that is, if j < k), then p cannot be immediately added to T . Instead, the meta-planner ﬁrst needs to ensure that the tracking system will be able to safely transition into TEBk before reaching w, so that it can then track πk’s plan from w to p while remaining inside its TEB. The meta-planner does this is by checking what planner πi was used to reach w’s parent v, and if i < k, using the safe switching bound SSBi→k to collisioncheck the already-computed path v → w. If i ≥ k, there is no need to use a SSB and the path v → w is guaranteed to be safe under TEBk, since it was already deemed safe under the larger TEBj by πj.
If the check is successful, this means that, instead of getting from v to w tracking the faster planner πj, the system can follow an alternative trajectory, skipping πj altogether and transitioning from the speed of πi to the speed of πk.

391

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

TEBi v πi

Step 1: Sample TEBj
πj w

Step 2: Plan

p TEBi v

p TEBj
TEBk

πj

πi

w

πk

Fast planner Medium planner Slow planner Switching

Step 3: Virtual Backtrack

TEBi v

SSBi−→k

p

πk

TEBk

πi

w

πk

Fig. 5: Illustration of the online meta-planning algorithm.

This path is added to T as an alternative to the original v → w path: the more-slowly-reached w is a new node in T , and p is added to T as a child of this new node.
If the check is unsuccessful, the meta-planner does not add p to the tree. Two different options for handling this possibility are as follows:
a) Discard: p is discarded and the meta-planner moves on to sample a new candidate point.
b) Recursive Virtual Backtrack: the meta-planner marks v as a waypoint that needs to be reached from its parent using a slower planner than the original πi, so that safe transition into TEBk will be possible. This will always be the case if v is reached using πj, since v → w is safe under TEBj ⊂ TEBi. Step 3 can then be repeated on v, and recursively applied (at worst) until the root of T .
One alternative option for handling planner-switching failures is to prevent them altogether by always using SSBs instead of TEBs for the planning in Step 2. In particular, replacing TEBi with SSBi→N will ensure that planners will only attempt to add a candidate point p to the tree if it would not only be possible to reach p under this planner but also, if later deemed necessary, to do so while transitioning to the smallest TEB (so that subsequent nodes can be connected to it by any planner without the need for the backtracking veriﬁcation in Step 3). The additional conservativeness introduced by this substitution depends on the relative tracker-planner dynamics, namely on how much larger SSBi→N is than TEBi.
Remark 1: In the case of a point-mass tracking model following a kinematic planner, we have SSBi→j = TEBi, ∀j > i, and therefore this substitution does not need to be done explicitly nor does it introduce any additional conservativeness. The backtracking check in Step 3 is always guaranteed to succeed.
Proposition 1: Any plan generated by the meta-planner algorithm can be safely followed by the tracking system. Proof: The proof is by construction of the meta-planner, based on FaSTrack guarantees; we provide an outline here. A point is only added to the meta-planning tree if there exists a sequence of planned trajectories that reach the point such that (a) each planned trajectory can be tracked by the system with an error bounded by the associated TEB, and is clear of known obstacles by at least TEB, (b) each transition

between planners can be followed by the system with an error bounded by the corresponding SSB, and is clear of known obstacles by at least SSB, and (c) if new obstacles are detected, re-planning succeeds (at worst, a geometric planner can always reverse or stop) in time for the system to switch to the new plan before colliding.

V. RESULTS

We demonstrate our algorithm on a 6D near-hover quadro-

tor model tracking a suite of 3D geometric planners running

BIT* [22] in the cluttered environment depicted in Fig. 6

with different maximum speeds in each dimension. The

tracking5 and planning models (for the ith planner πi) are

given below in Eq. 7 (tracker at left, planner at right):

⎡ ⎢⎢⎢⎢⎢⎣

s˙x s˙y s˙z s˙vx s˙vy

⎤⎡ ⎥⎥⎥⎥⎥⎦ = ⎢⎢⎢⎢⎢⎣

svx − dvx svy − dvy svz − dvz g tan θ − dax −g tan φ − day

⎤

⎥⎥⎥⎥⎥⎦

,

⎡ ⎣

p˙x p˙y p˙z

⎤⎡ ⎦ = ⎢⎣

b(xi) b(yi) b(zi)

⎤ ⎥⎦

(7)

s˙vz

T − g − daz

Here us = [θ, φ, T ]T and correspond to roll, pitch, and thrust. In all experiments, we set −0.15 rad ≤ [θ, φ] ≤

0.15 radls and 7.81 m/s2 ≤ T ≤ 11.81 m/s2. Planner πi’s controls are up = [b(xi), b(yi), b(zi)], each representing a

ﬁxed maximum speed in the given dimension. Due to the

form of (7), the optimal safety controller will be bang-bang.

However, it is only critical to apply the safety control at the

boundary of the TEB. A smooth linear controller may be

used in the interior, following a least-restrictive supervisory

control law. The relative dynamics between the tracking and

planning models are:

⎡ ⎢⎢⎢⎢⎢⎣

r˙x r˙y r˙z r˙vx r˙vy r˙vz

⎤⎡ ⎥⎥⎥⎥⎥⎦ = ⎢⎢⎢⎢⎢⎢⎣

svx − dvx − b(xi) svy − dvy − b(yi) svz − dvz − b(zi)
g tan θ − dax −g tan φ − day
T − g − daz

⎤ ⎥⎥⎥⎥⎥⎥⎦

(8)

Equation (8) can be split into three 2D subsystems with states (x, vx), (y, vy), and (z, vz) that are of the same form as the double-integrator example from Section IV-B. Note that the dynamics of the (x, vx) and (y, vy) subsystems are identical, and thus can be solved once and applied to each subsystem. By using decomposable HJ reachability [21] we compute the (x, vx) set in 2 min 15 s and the (z, vz) set in 2 min, for a total of a 4 min 15 s precomputation time. Fig. 7 shows the growth of TEBp in each subsystem’s position state as the planner speed in that dimension increases. Moreover, as explained in Section IV-B, the TEB for πi is identical to the SSB for switching from πi −→ πj, j > i.

A. Simulation

We implemented the meta-planning online algorithm within the robot operating system (ROS) [23] framework. We used the BIT* [22] geometric planner from the Open Motion

5Note that we have assumed a zero yaw angle for the quadrotor. This is enforced in practice by using a strict feedback controller on yaw rate to regulate yaw to zero.

392

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

(a) LQR controller.

(b) Safety controller.

Fig. 6: Simulated autonomous ﬂight in a cluttered environment. Notice that when using LQR control the quadrotor leaves the TEB, but under optimal safety control it remains within the TEB. This is particularly important in the vicinity of obstacles.

Error Bound (m)

3
TEB in horizontal dims TEB in vertical dim
2

1

0

0.2

0.4

0.6

0.8

1

Speed of planner (m/s)

Fig. 7: TEB vs. planner speed in each subsystem.

B. Hardware Demonstration
We replicated the simulation on a hardware testbed using the Crazyﬂie 2.0 open source quadrotor platform, shown in Fig. 8. We obtained position and orientation measurements at ∼ 235 Hz from an OptiTrack infrared motion capture system. Given state estimates, we send control signals over a radio to the quadrotor at 100 Hz. As shown in our accompanying video,7 the quadrotor successfully avoids the obstacles while remaining inside the TEB for each planner the meta-plan.
Fig. 9 shows the quadrotor’s position over time recorded during a hardware demonstration. Note that the quadrotor stays well within the TEB throughout the ﬂight even when the TEB changes size during planner switches.

Planning Library (OMPL) [24]. Code is written in C++ and is available as an open source ROS package.6 Meta-planning typically runs in well under one second in a moderately cluttered environment.
Fig. 6 shows a snapshot of a simulated autonomous quadrotor ﬂight in an artiﬁcial environment with spherical obstacles using trajectories generated by our algorithm. Initially, the obstacle locations and sizes are unknown to the quadrotor, but as soon as they come within the sensing radius (the size of which must adhere to the constraint discussed in Section III) they are added to the meta-planner’s internal environment model and used during re-planning.
In Fig. 6a we show what happens when the tracking controller is a standard LQR controller, while in Fig. 6b everything remains the same except that we apply the optimal controllers derived from the ofﬂine analysis in Section IVB. Note that the LQR controller makes no guarantee about staying within the TEB, and hence it is unable to remain inside the TEB in the vicinity of the obstacle. The optimal controller, conversely, is guaranteed to remain in the TEB.

Fig. 8: A Crazyﬂie 2.0 ﬂying during our hardware demonstration. Two OptiTrack cameras are visible in the background.
VI. CONCLUSIONS We have proposed a novel meta-planning algorithm for using FaSTrack with multiple planners. The algorithm adaptively selects the fastest-moving planner that ﬁnds locally collision-free paths, and guarantees safe online transitions between these planners. The resulting meta-plans use more

6https://github.com/HJReachability/meta fastrack

7https://youtu.be/lPdXtR8Ar-E

393

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

1

Planner Tracker

-1

TEB

0

2

4

6

8

2 0

0

2

4

6

8

1

0

0

2

4

6

8

Time (s)

Fig. 9: Position vs. time during a hardware demonstration.

aggressive, faster-moving planners in open areas and more cautious, slower-moving planners near obstacles. We demonstrate meta-planning in simulation and in a hardware demonstration, using a quadrotor to track piecewise-linear trajectories at different top speeds.
The theory we develop here is general and can be applied to a wide variety of systems, including manipulators and other mobile robots. However, computing the TEB and SSB using HJ reachability can be challenging for these high-dimensional coupled systems. Ongoing work seeks to alleviate this challenge using other methods of computation such as sum of squares programming and neural network function approximators. Other promising directions include incorporating time-varying obstacle avoidance, further integration with OMPL and other planning libraries, providing adaptable error bounds based on external disturbances, and updating the tracking error bound online based on learned information about the tracking model.
REFERENCES
[1] S. M. LaValle. Rapidly-exploring random trees: A new tool for path planning. 1998.
[2] S. Herbert*, M. Chen, S. Han, et al. “FaSTrack: a Modular Framework for Fast and Guaranteed Safe Motion Planning”. IEEE Conference on Decision and Control (to appear, 2017). URL: https://arxiv.org/pdf/1703.07373.pdf.
[3] M. Diehl, H. J. Ferreau, and N. Haverbeke. “Efﬁcient numerical methods for nonlinear MPC and moving horizon estimation”. Nonlinear Model Predictive Control. 2009.
[4] M. Neunert, C. de Crousaz, F. Furrer, et al. “Fast nonlinear model predictive control for uniﬁed trajectory optimization and tracking”. Proc. IEEE Int. Conf. Robotics and Automation. 2016.
[5] A. Richards and J. P. How. “Robust variable horizon model predictive control for vehicle maneuvering”. Int. J. Robust and Nonlinear Control 16.7 (2006).
[6] S. Di Cairano and F. Borrelli. “Reference tracking with guaranteed error bound for constrained linear systems”. IEEE Trans. Automatic Control 61.8 (2016).

[7] M. Hoy, A. S. Matveev, and A. V. Savkin. “Algorithms for collision-free navigation of mobile robots in complex cluttered environments: a survey”. Robotica 33.03 (2015).
[8] A. Majumdar and R. Tedrake. “Funnel libraries for real-time robust feedback motion planning”. Int. J. Robotics Research (June 2017).
[9] S. Singh, A. Majumdar, J.-J. Slotine, and M. Pavone. “Robust online motion planning via contraction theory and convex optimization”. Proc. IEEE Int. Conf. Robotics and Automation. 2017.
[10] S. Bansal, M. Chen, J. F. Fisac, and C. J. Tomlin. “Safe Sequential Path Planning of Multi-Vehicle Systems Under Presence of Disturbances and Imperfect Information”. Proc. American Control Conference (2017).
[11] D. Kahneman. Thinking, fast and slow. Macmillan, 2011. [12] S. Russell and E. Wefald. “Principles of metareasoning”.
Artiﬁcial intelligence 49.1-3 (1991). [13] S. Milli, F. Lieder, and T. L. Grifﬁths. “When Does Bounded-
Optimal Metareasoning Favor Few Cognitive Systems?” AAAI. 2017. [14] J. D. Gammell, S. S. Srinivasa, and T. D. Barfoot. “Informed RRT*: Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic”. Intelligent Robots and Systems (IROS 2014), 2014 IEEE/RSJ International Conference on. IEEE. 2014. [15] H. Huang, J. Ding, W. Zhang, and C. Tomlin. “A differential game approach to planning in adversarial scenarios: A case study on capture-the-ﬂag”. Proc. IEEE Int. Conf. Robotics and Automation. 2011. [16] M. Chen, Z. Zhou, and C. J. Tomlin. “Multiplayer Reach-Avoid Games via Pairwise Outcomes”. IEEE Trans.Automatic Control 62.3 (Mar. 2017). [17] E. Barron. “Differential Games with Maximum Cost”. Nonlinear analysis: Theory, methods & applications (1990). [18] I. Mitchell, A. Bayen, and C. Tomlin. “A time-dependent Hamilton-Jacobi formulation of reachable sets for continuous dynamic games”. IEEE Trans. Automatic Control 50.7 (2005). [19] O. Bokanowski, N. Forcadel, and H. Zidani. “Reachability and minimal times for state constrained nonlinear problems without any controllability assumption”. SIAM J. on Control and Optimization (2010). [20] J. F. Fisac, M. Chen, C. J. Tomlin, and S. S. Sastry. “ReachAvoid Problems with Time-Varying Dynamics, Targets and Constraints”. Proc. ACM Int. Conf. Hybrid Systems: Computation and Control. 2015. [21] M. Chen, S. L. Herbert, M. S. Vashishtha, et al. “Decomposition of Reachable Sets and Tubes for a Class of Nonlinear Systems”. arXiv preprint arXiv:1611.00122 (2016). [22] J. D. Gammell, S. S. Srinivasa, and T. D. Barfoot. “Batch informed trees (BIT*): Sampling-based optimal planning via the heuristically guided search of implicit random geometric graphs”. Robotics and Automation (ICRA), 2015 IEEE International Conference on. IEEE. 2015. [23] M. Quigley, K. Conley, B. P. Gerkey, et al. “ROS: an opensource Robot Operating System”. ICRA Workshop on Open Source Software. 2009. [24] I. A. S¸ ucan, M. Moll, and L. E. Kavraki. “The Open Motion Planning Library”. IEEE Robotics & Automation Magazine 19.4 (Dec. 2012). http://ompl.kavrakilab.org.

394 Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on May 24,2022 at 11:07:06 UTC from IEEE Xplore. Restrictions apply.

