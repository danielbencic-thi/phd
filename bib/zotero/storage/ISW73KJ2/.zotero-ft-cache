IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 100%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2019 International Conference...
Real-Time Planning with Multi-Fidelity Models for Agile Flights in Unknown Environments
Publisher: IEEE
Cite This
PDF
  << Results   
Jesus Tordesillas ; Brett T. Lopez ; John Carter ; John Ware ; Jonathan P. How
All Authors
View Document
11
Paper
Citations
627
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Related Work
    III.
    Problem Formulation
    IV.
    Algorithm
    V.
    Experimental Results

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Media
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: Autonomous navigation through unknown environments is a challenging task that entails real-time localization, perception, planning, and control. UAVs with this capability... View more
Metadata
Abstract:
Autonomous navigation through unknown environments is a challenging task that entails real-time localization, perception, planning, and control. UAVs with this capability have begun to emerge in the literature with advances in lightweight sensing and computing. Although the planning methodologies vary from platform to platform, many algorithms adopt a hierarchical planning architecture where a slow, low-fidelity global planner guides a fast, high-fidelity local planner. However, in unknown environments, this approach can lead to erratic or unstable behavior due to the interaction between the global planner, whose solution is changing constantly, and the local planner; a consequence of not capturing higher-order dynamics in the global plan. This work proposes a planning framework in which multi-fidelity models are used to reduce the discrepancy between the local and global planner. Our approach uses high-, medium-, and low-fidelity models to compose a path that captures higher-order dynamics while remaining computationally tractable. In addition, we address the interaction between a fast planner and a slower mapper by considering the sensor data not yet fused into the map during the collision check. This novel mapping and planning framework for agile flights is validated in simulation and hardware experiments, showing replanning times of 5-40 ms in cluttered environments.
Published in: 2019 International Conference on Robotics and Automation (ICRA)
Date of Conference: 20-24 May 2019
Date Added to IEEE Xplore : 12 August 2019
ISBN Information:
ISSN Information:
INSPEC Accession Number: 18903908
DOI: 10.1109/ICRA.2019.8794248
Publisher: IEEE
Conference Location: Montreal, QC, Canada
Contents
SECTION I.
Introduction

UAV autonomous navigation in unknown environments has received special interest in the last few years because of its unlimited applications, ranging from aerial surveying and inspection to search and rescue. However, these applications are often reduced to low-speed flights due to the current limitations and low rates of the state-of-the-art mappers and planners. The inherent non-convexity of the path planning optimization problem, together with the high mapping and planning rate needed for agile flights make this problem especially hard. This work presents a novel framework to perform high-rate mapping and planning in unknown environments suitable for agile maneuvers, addressing the fundamental problem between the interaction of a global planner and a local planner.

Computational tractability of the planning problem leads to the use of a low-fidelity global planner that computes a cost-to-go (CTG) needed by the high-fidelity local planner. However, the fact that the global planner does not account for the dynamics results in erratic behaviors when the world model is changing rapidly. There is therefore a need of an accurate CTG calculation that captures both the global environment and the dynamic feasibility, maintaining relatively low computation times at the same time.
Fig. 1:

Global optimum and our method. When the map is completely known, the optimal trajectory computed using the approach of [1] is shown in blue (H). The red trajectory is the solution found by our method, where the world is not known and it is being discovered as the UAV flies forward. The grid is lm × 1m, and the sensing range is 10 m.

Show All

Moreover, the choice of the representation of the environment and the size of the “global” map (larger scale than the sensor FOV and the local representation, but typically does not contain all information observed to reduce effort) have a significant impact on the computational cost, but for most systems updates of these models cannot be done at the sensor frame rates ( ∼ 30 Hz) and updates are typically slower than the re-plan rate. Thus a second design challenge is how to combine the global knowledge (available at a slower rate) with the high-rate local information in the planner representation of the environment. Finally, the state-of-the-art mappers and planners run onboard at ∼ 5 Hz, so the the third key challenge is how to optimize the planning and mapping algorithms to achieve higher rates, suitable for aggressive flights.

This work addresses these challenges with the following contributions:

    A novel formulation of the planning problem that takes into account the dynamics of the vehicle in the cost-to-go calculation to solve the negative interaction that usually occurs between the global and local planners when operating in unknown environments.

    A lightweight fused-based mapping framework using a sliding map to reduce the estimation error influence that runs onboard fusing a depth image in 50 ms.

    An integration of a high-rate planner with a slower-rate mapper, with a collision check algorithm that accounts for both the most recent fused information and the available sensed data not included in that map.

    Simulation and hardware experiments showing agile flights in completely unknown cluttered environments, achieving replanning times of 5-40 ms.

SECTION II.
Related Work

Different methods have been proposed in the literature for planning, mapping, and the integration of this two.

For planning , most of the current state-of-the-art methods exploit the differential flatness of the quadrotors, and solve the planning problem minimizing the squared norm of a derivative of the position [2] , [3] to find a dynamically feasible smooth trajectory [4] . On the one hand, there are approaches where the obstacle constraints, and sometimes also input constraints, are checked after solving the optimization problem: Some of them use stitched polynomial trajectories that pass through several waypoints obtained running RRT-based methods [2] , [4] , [5] . Others use Pontryagin’s Minimum Principle to find closed-form solutions [6] . These closed-form solutions are also used to search over the state space [7] , [1] . Alternatively, there are works that use the cost function to penalize the distance to the obstacles [8] , [9] , requiring usually computationally expensive distance fields representations. Finally, there are also approaches that add the obstacle constraints in the optimization problem, like Mixed-Integer Programming (MIP) [10] , convex decompositions [11] , [12] , [13] and Successive Convexification [14] , [15] , [16] .

Most of the approaches described above either assume that the global map is known, and the optimization is done using the global map. Others assume that there is a global planner (RRT or exploration based planners) that gives the waypoints to the local planner. In agile flights, this leads to oscillatory behaviors, since the world is being discovered and the solution of the global planner changes constantly.

Moreover, two main categories can be highlighted in the mapping methods proposed in the literature: memory-less and fused-based methods. The first category includes the approaches that rely only on instantaneous sensing data, using only the last measurement, or weighting the data [17] , [18] . These approaches are in general unable to reason about obstacles observed in the past [19] , [20] . The second category is the fusion-based approach, in which the sensing data are fused into a map, usually in the form of an occupancy grid or distance fields [21] , [22] . Two drawbacks of these approaches are the influence of the estimation error, and the fusion time (which means that the planner usually uses an out-of-date fused map).

Finally, several approaches have been proposed for the integration between the planner and the mapper: reactive and map-based planners. Reactive planners often use a memory-less representation of the environment, and closed-form primitives are usually chosen for planning [19] and [20] . These approaches often fail in complex cluttered scenarios. On the other hand, map-based planners usually use occupancy grids or distance fields to represent the environment. These planners either plan all the trajectory at once or implement a Receding Horizon Planning Framework, optimizing trajectories locally and based on a global planner. Moreover, when unknown space is also taken into consideration, several approaches are possible: [23] and [24] used optimistic planners (considering unknown space as free), while in [8] and [9] , an optimistic global planner is used combined with a conservative local planner.
SECTION III.
Problem Formulation
A. Planning

Computing a dynamically feasible trajectory from the start to the goal is typically intractable, which is the standard argument for the distinction between the global and local planners. The global planner gives the local planner a notion of cost-to-go (CTG) or traversability in certain directions; while the local planner deviates around the nearby obstacles and chooses the terminal point accordingly. Key to this CTG calculation is the trade-off between accuracy and computation time. Issues include the sophistication of the dynamics used in the calculation and the number of points at which the CTG is computed.

In our proposed framework, Jump Point Search (JPS) is used as a global planner to find the shortest path from the current position to the goal. JPS was chosen instead of A \ast because it runs an order of magnitude faster, while still guaranteeing completeness and optimality [25] , [12] . The only assumption of JPS is a uniform grid, which holds in our case. JPS is only done for position (not velocity or acceleration) to reduce the computational burden.

Our local planner monitors the JPS solution for drastic changes between each replan. If a large change is detected, a new path, composed of a high, medium, and low fidelity model (where the model order is reduced farther away from the vehicle) is created for the current and last JPS solution. This procedure is able to capture a subset of the dynamics while maintaining computational tractability. The resulting multi-fidelity paths are compared and the path with lowest cost is selected for execution. This hierarchical trajectory consists of a jerk-controlled part, a velocity-controlled part, and a geometric part.

The jerk-controlled primitive is the part of the trajectory nearest to the current position, and it is the one that will be actually executed. The quadrotor is modeled using triple integrator dynamics with state x T = [ x T   x ˙ T   x ¨ T ] = [ x T   v T   a T ] and control input u = x ¨ = j (where x , v , a , and j are the vehicle’s position, velocity, acceleration, and jerk, respectively), and the following convex optimization problem is solved using CVXGEN [26] to find this trajectory:
min u 0 : N − 1 ∑ i = 0 N − 1 ∥ u i ∥ 2 + ( x N − x f ) T Q ( x N − x f ) (1)
View Source \begin{equation*}\min _ { u _ { 0 } : N - 1 } \sum _ { i = 0 } ^ { N - 1 } \left\| \mathbf { u } _ { i } \right\| ^ { 2 } + \left( \mathbf { x } _ { N } - \mathbf { x } _ { f } \right) ^ { T } Q \left( \mathbf { x } _ { N } - \mathbf { x } _ { f } \right) \tag{1}\end{equation*}

subject to x 0 = x i n i t
x k + 1 = M 1 x k + M 2 u k ∀ k = 0 : N − 1 ∥ v k ∥ ∞ ≤ v max ∀ k = 1 : N ∥ a k ∥ ∞ ≤ a max ∀ k = 1 : N ∥ u k ∥ ∞ ≤ j max ∀ k = 0 : N − 1.
View Source \begin{equation*}\mathrm { x } _ { k + 1 } = M _ { 1 } \mathrm { x } _ { k } + M _ { 2 } \mathrm { u } _ { k } \quad \forall k = 0 : N - 1\\\left\| v _ { k } \right\| _ { \infty } \leq v _ { \max } \quad \forall k = 1 : N\\\left\| a _ { k } \right\| _ { \infty } \leq a _ { \max } \quad \forall k = 1 : N\\\left\| u _ { k } \right\| _ { \infty } \leq j _ { \max } \quad \forall k = 0 : N - 1.\end{equation*}

Fig. 2:

Sliding map and goal projection. The sliding map M has occupied space O , unknown space u map and free space F . Total unknown space is u = u m a p ∪ u o u t m a p . Q is the projection into the map of the terminal goal G t e r m in the direction of A G t e r m − → − − − − . The closest free or unknown frontier point to Q ( G in the figure) is selected as the goal.

Show All

In this problem, the number of discretization steps N is fixed. The time step dt (embedded in M 1 and M 2 ) is computed as
d t = max { T v x ,   T v y ,   T v z ,   T a x ,   T a y ,   T a z ,   T j x ,   T j y ,   T j z } / N
View Source \begin{equation*}dt=\max\{T_{v_{x}},\ T_{v_{y}},\ T_{v_{z}},\ T_{a_{x}},\ T_{a_{y}},\ T_{a_{z}},\ T_{j_{x}},\ T_{j_{y}},\ T_{j_{z}}\}/N\end{equation*}

where T v i , T a i and T j i are the solution for each axis i = { x ,   y ,   z } of the constant-velocity, constant-acceleration and constant-jerk motion equations applying v max , a max and j max respectively. This dt is a tight lower bound that is increased in each iteration until the problem converges.

The second key part of the trajectory is a velocity-controlled primitive. It is a trade-off between the sophistication of the dynamic model (lower order than jerk input model), but sufficiently accurate to capture the UAV CTG (more accurate than the distance-based cost). Moreover, it ensures that the computation times are maintained in the order of 300 μ s , four times faster than the ones required when the input is higher. The final part of the trajectory is the part of the JPS solution that goes from the end of the velocity-controlled primitive to the goal. This provides an indication of how to avoid traps and avoid obstacles, but there is little attempt to capture to vehicle dynamics at that distance away – that is done when the receding horizon controller gets closer.
B. Mapping

A sliding map, which moves with the UAV, is used to represent the world. This is a compromise between storing the whole world and relying only on local maps. It also tries to minimize the accumulated estimation error. This map M contains free space F , (known) obstacles O and unknown space U m a p (see Fig. 2 ). In this way,
R 3 = O ∪ F ∪ U map ∪ U O u t map = M ∪ U O u t map
View Source \begin{equation*}\mathbb { R } ^ { 3 } = \mathcal { O } \cup \mathcal { F } \cup \mathcal { U } _ { \operatorname { map } } \cup \mathcal { U } _ { O u t } \operatorname { map } = \mathcal { M } \cup \mathcal { U } _ { O u t } \operatorname { map }\end{equation*}

Using this map, the collision check for each of the three primitives presented above is done as follows: the jerk-controlled trajectory is considered collision-free if it does not intersect O ∪ U . The velocity-controlled primitive is forced to pass through the waypoints of the JPS solution. Finally, the JPS path is guaranteed not to hit O . In this way, and similar to [9] , JPS is an optimistic global planner, while the local planner is conservative.
Fig. 3:

Illustration of the Alg. 1. The radii r a and r b define the spherical surfaces S a and S b . JPS is used to compute the paths JPS 1 and JPS2 . The UAV chooses the jerk-controlled primitive Prim j i that has lowest cost, considering the cost of that primitive, the velocity-controlled primitive Prim vi and the distance from C i to G following J P S i . Unknown space U is shown in blue. Note that the Figure is in 2D for visualization purposes, but the planning is in 3D.

Show All
Fig. 4:

Iteration k in the Alg. 1. JPS 2 is the modified version of J P S { k − 1 } , that avoids the new obstacles detected. The algorithm chooses the jerk-controlled primitive Prim J that has the lowest associated cost-to-go J i . The terms in green are only computed if ∠ B ′ 1 A B ′ { k − 1 } is greater than α 0 .

Show All

SECTION IV.
Algorithm

Let us introduce some notation first (see also Fig. 3 ): Let A be the state taken (in the previous planned trajectory) some steps ahead of the current position of the UAV. Let S a and S b be two concentric spheres with center in A , and with radius r a and r b respectively. JPS will denote the shortest piece-wise linear path found by running JPS between A and the goal G . For this path, define the tuples J P S w p : = ( q 1 ,   q 2 ,   … ,   q n ) and J P S p a t h : = ( q 1 q 2 ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ,   … ,   q n − 1 q n ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ¯ ) , where JPS wp has the n waypoints q i ∈ R 3 of the solution of JPS (being q 1 the start and q n the goal) and JPS path contains the segments between these waypoints.

Define the point B ′ : = n f ( S a ,   J P S p a t h ) , where n f ( S ,   J P S p a t h ) is a function that computes the first intersection between the spherical surface S and the path JPS path . Similarly, C : = ⋂ l ( S b ,   J P S p a t h ) will be the last intersection. In an analogous way, ⋂ i n t ( S a ,   S b ,   J P S w p ) will denote all the elements of JPS wp that are intermediate between B ′ and C . Hence, JPS wp can be written as:
J P S w p = ⎛ ⎝ ⎜ ⎜ q 1 , … q r − 1 , q r , … , q s − 1              ∩ i n t ( S a , S b , J P S w p ) , q s , … , q n ⎞ ⎠ ⎟ ⎟
View Source \begin{equation*}J P S _ { w p } = \left( \boldsymbol { q } _ { 1 } , \ldots \boldsymbol { q } _ { r - 1 } , \underbrace { \boldsymbol { q } _ { r } , \ldots , \boldsymbol { q } _ { s - 1 } } _ { \cap _ { i n t } \left( \mathcal { S } _ { a } , \mathcal { S } _ { b } , J P S _ { w p } \right) } , \boldsymbol { q } _ { s } , \ldots , \boldsymbol { q } _ { n } \right)\end{equation*}

where q r is the first point outside the sphere S a and q s − 1 is the last point inside the sphere S b . The subindex will indicate the iteration number. Finally, the subindex 1 in JPS will denote the JPS solution of the current iteration, while 2 will be the modified (i.e not intersecting any obstacles) version of J P S { k − 1 } (chosen in the previous iteration). Same applies to B ′ and C . The concept of modified is explained later on.

In our algorithm, the whole trajectory planned is divided into three primitives: P r i m j ∪ P r i m v ∪ P r i m d , which are defined as follows:

    Primj is a jerk-controlled primitive that has A as initial state and a final stop condition in the point B , which is defined as the point in the sphere S a near to B ′ that guarantees that P r i m j ∩ ( O ∪ U ) = ∅ .

    Primv is defined as the composition of several velocity-controlled primitives between each pair of consecutive points of ( B ,   q r ,   … ,   q s − 1 C ) .

    Finally, Prim d is the part of JPS that goes from C to the goal G , and therefore P r i m d ∩ O = ∅ .

The time-normalized costs associated with each one of these primitives are:
J P r i m j = N ⋅ d t j 2 max ⋅ ∑ i = 0 N − 1 ∥ j i ∥ 2 2 J P r i m v = ∑ k = 0 s − r ( N ⋅ d t k v 2 max ⋅ ∑ i = 0 N − 1 ∥ v k i ∥ 2 2 ) J P r i m d = ∥ q s − C ∥ 2 v max + ∑ k = s n − 1 ( ∥ q k + 1 − q k ∥ 2 v max )
View Source \begin{equation*}J _ { P r i m _ { j } } = \frac { N \cdot d t } { j _ { \max } ^ { 2 } } \cdot \sum _ { i = 0 } ^ { N - 1 } \left\| j _ { i } \right\| _ { 2 } ^ { 2 }\\J _ { P r i m _ { v } } = \sum _ { k = 0 } ^ { s - r } \left( \frac { N \cdot d t _ { k } } { v _ { \max } ^ { 2 } } \cdot \sum _ { i = 0 } ^ { N - 1 } \left\| v _ { k _ { i } } \right\| _ { 2 } ^ { 2 } \right)\\J _ { P r i m _ { d } } = \frac { \left\| \boldsymbol { q } _ { s } - \boldsymbol { C } \right\| _ { 2 } } { v _ { \max } } + \sum _ { k = s } ^ { n - 1 } \left( \frac { \left\| \boldsymbol { q } _ { k + 1 } - \boldsymbol { q } _ { k } \right\| _ { 2 } } { v _ { \max } } \right)\end{equation*}

The total cost of the planned trajectory is then J : = J P r i m j + J P r i m v + J P r i m d . In this total cost we combine a high-fidelity model near the UAV, a medium-fidelity model in the medium part, and model without dynamics for the farthest part of the trajectory. This cost is an approximation of the total cost of the jerk-controlled trajectory that goes from A to G , but it is much faster to compute. Also, it is more accurate than relying only on jerk for the first part, and distance in the JPS path for the rest, since an intermediate velocity-controlled primitive is included.

The proposed approach is shown in Alg. 1 and Fig. 3 . For iteration k , it proceeds as follows – first (line 3), the terminal goal G term is projected into M in the direction of A G t e r m − → − − − − to obtain Q (see Fig. 2 ). The nearest unknown or free point to Q is selected as the (intermediate) goal G , and JPS is run from the actual position A to G to obtain JPSl . The intersection of JPS 1 with the inner sphere S a defines the point B ′ 1 . This point indicates the direction towards which the jerk-controlled planner should optimize. As a jerk-controlled primitive from A to B ′ 1 is not guaranteed to be collision free, we sample ≈ 30 points in the sphere S a around B ′ 1 to obtain a final position that makes this primitive collision-free, storing them in the priority queue K (line 19). We prioritize points near to B ′ that have at the same time a high probability of the primitive being collision-free. As the geometry of JPS encodes where the obstacles are, we sample these points in the following way ( Fig. 5 ): First, the points q 2 , … , q r − 1 are projected onto S a to obtain P q 2 , … , P q r − 1 . Then we sample from B ′ to P q r − 1 , from P q r − 1 to P q r − 2 , and so on. Finally, we append to this priority queue some samples taken in concentric circles to B ′ , to increase the probability of finding a feasible final condition.
Algorithm 1:

Replan

Show All

Then we iterate over each point in K (setting it as the final position in the optimization problem 1) and stop when a collision free primitive (i.e that does not intersect O ∪ U ) is found (lines 20-23). At this point, the algorithm computes the angle ∠ B ′ 1 A B ′ { k − 1 } , where B ′ { k − 1 } is the intersection of S a with J P S { k − 1 } . This angle gives a measure of how much the JPS solution has changed from the iteration k − 1 . A small angle indicates that JPS 1 and J P S { k − 1 } are very similar (at least within the sphere S a ), and that therefore the local plan will not differ much from the iteration k − 1 . Hence, if this angle is smaller than a threshold α 0 (typically ≈ 15 ∘ ), the algorithm finishes, and Primj 1 is returned. If it is bigger, the algorithm needs to decide whether obtaining the local plan using JPS 1 , or relying on the previous path J P S { k − 1 } . To do this, in lines 10-11 first we modify J P S { k − 1 } by obtaining I 1 and I 2 (first and last intersections of J P S { k − 1 } with O ) and run JPS three times to obtain the paths A → I 1 , I 1 → I 2 , and I 2 → G . The union of these paths is JPS2 . Once JPS 2 is obtained, a very similar process as explained before is done, but with JPS 2 in this case, to obtain Prim j2 (line 12).

The decision between Primj 1 or Primj 2 is made (lines 14-16) choosing the one that has the lowest cost J i : = J P r i m j i + J P r i m v i + J P r i m d i , i = { 1 , 2 } .
Fig. 5:

Priority queue K . Given JPS the priority queue K returned by SamplePoints ( B ′ ) contains points in this order: First samples along the spherical arc B ′ → P q 3 . Then along the arc from P q 3 to the next projection, and so on. After that, several samples are taken from concentric circumferences to B ′ .

Show All
Fig. 6:

Instantaneous sensing data and occupancy grid pipeline. Sensing data from the depth sensor (O) is received at f s e n s o r . New point clouds are fused into the Occupancy Grid Collision check at t 1 is done using an array of k -d trees that contains the k -d tree of the last map fused (), and the k -d trees of some of the last point clouds received that are not included in the map (H).

Show All
J P r i m j i + J P r i m v i + J P r i m d i , i = { 1 , 2 }
View Source \begin{equation*}J _ { P r i m _ { j i } } + J _ { P r i m _ { v i } } + J _ { P r i m _ { d i } } , i = \{ 1,2 \}\end{equation*}

A. Mapping and Planning Integration

We fuse a depth map into the occupancy grid using the 3D Bresenham’s line algorithm for ray-tracing [27] . However, as discussed earlier, the mapper update rate is slower than the sensor frame rate, and problems can arise when the local planner only relies on this (out-of-date) map to generate a primitive. This issue is addressed here by storing the k -d trees of the point clouds that have arrived since the most recent map was published (see Fig. 6 ). Collision checks are then done using the occupancy grid and some of the saved k -d trees of the instantaneous point clouds. This combination ensures that the local planner relies both on the most recent fused map with global knowledge of the world, and on up-to-date point clouds that contain the instantaneous sensing data.
SECTION V.
Experimental Results
A. Simulation

We evaluate the performance of the proposed algorithm in different simulated scenarios. The simulator uses C++ custom code for the dynamics engine, and Gazebo [28] to simulate perception data (in the form of a depth map and a point cloud). In all these simulations, the depth camera has a horizontal FOV of 90°, and a sensing range of 10 m.
TABLE I Distances Obtained By Seven Different Methods In the Cluttered Forest Simulation. the Distance Values Are Computed For the Cases That Reach the Goal. the Improvement Percentages Are Computed For the Minimum and the Maximum of Each Column. the Results For the Other Planners Were Provided By the Authors of [9].

We first compare our method against six different methods: Incremental approach (no goal selection), random goal selection, optimistic R R T ⋆ (unknown space = free), conservative R R T ⋆ (unknown space=occupied), “next-best-view” planner (NBVP) [29] , and Safe Local Exploration [9] . These six methods are described deeper in [9] . The scenario setting is a random cluttered forest with an obstacle density of 0.1 obstacles / m 2 (see Fig. 8 ) and a sliding map size of 20m × 20m, with a voxel size of 10 cm. The results for ten different random forests are shown in Table I . Our method succeeds in all 10 simulations and obtains a path that is in average 19-47 % shorter than the other methods.

The map and voxel size chosen have a strong impact on the computation times and performance. For a given map, a small voxel size provides a more accurate solution, at the expense of more computation time running JPS and collision check. For a map size of 20 m × 20 m , the timing breakdown of the replan function in the forest simulation for different map voxel sizes is shown in Fig. 7 . The replan function takes 37 ms in average when the voxel size is 10 cm, and is reduced to less than 10 ms when the voxel size is bigger than 15 cm. JPS takes ≈ 80 % of the total replanning time when the voxel size is low, and ≈ 15% when the voxel size is higher. This is due to the fact that the computation time of JPS depends on the number of cells, which is reduced by the cube of the voxel size. Note that the values of C v x j e r k and C v x v e l indicate the total computation time for all the jerk-controlled and velocity-controlled primitives computed in each replanning step. The mean time per primitive is 1.3 ms for jerk and 0.3 ms for velocity. The distances of these primitives range from 0.5 to 4 m and from 2 to 5.5 m (depending on the geometry of the obstacles) for the jerk-controlled and velocity-controlled primitives respectively.

To compare the trajectory found by our approach (in which the map is discovered as the UAV proceeds) with the optimal trajectory when the map is completely known , we use two simulation environments: a bugtrap scenario ( Fig. 1 ) and a cluttered office scenario ( Fig. 9 ). In the bugtrap scenario, our method produces a trajectory of 56.8 m, approximately the same length as the optimal trajectory (56.3 m). In the office simulation, the total length with our approach is 41.5 m (optimal trajectory is 35.9 m). In this simulation, the UAV enters two rooms, but when it detects that there is no exit, turns back and finds another path to the goal. In both simulations, the optimal trajectory has been obtained using the approach proposed in [1] , which is optimal in the discretized space. As in our approach the world is being discovered gradually, our solution is not globally optimal, and it requires more control effort than the optimal one. However, the similarity between these two paths reflects the performance of our algorithm, able to obtain a near-optimal path even when the world is discovered gradually.
Fig. 7:

Timing breakdown for different voxel sizes in the forest simulation. The replan function takes less than 10 ms when the voxel size is bigger than 15 cm. The sliding map is 20 m × 20 m .

Show All

B. Hardware Experiments

The UAV used for the hardware experiments is shown in Fig. 10 . All the perception, planning and control runs onboard, and the position, velocity, attitude, and IMU biases are estimated by fusing propagated IMU measurements with an external motion capture system via a Kalman filter. The mapping fusion times achieved onboard are 50ms and 80ms for depth image resolutions of 480 × 270 and 640 × 480 respectively. All these experiments are available in this video.
SECTION VI.
Conclusions

This work presented a novel planning a mapping framework suitable for agile flights in unknown environments. The key properties of this framework is its ability to solve the interaction between the global planner and the local planner considering the dynamics of the vehicle, and its ability to address efficiently the integration between a fast planner and a slower mapper. The replanning and mapping rates are several times faster than the state of the art.

The Gazebo worlds and the code for the optimizer used in this paper are available here.
Fig. 8:

Forest simulation. The UAV must fly from A to G t e r m in a 50m × 50m forest with an obstacle density of 0.1 obstacles/m2.

Show All
Fig. 9:

Office simulation. The UAV must fly from A to G t e r 7 γ ι in an office environment. The optimal trajectory is shown in blue (H). The red trajectory is the solution found by our method.

Show All
Fig. 10:

UAV used in the experiments. It is equipped with a Qualcomm ® SnapDragon Flight, an Nvidia ® Jetson TX2 and an Intel ® RealSense Depth Camera D435.

Show All

ACKNOWLEDGMENT

Thanks to Boeing Research & Technology for support of the hardware, to Helen Oleynikova (ASL-ETH) for the data of the forest simulation, and to Pablo Tordesillas (ETSAM-UPM) for his help with some figures of this paper. Supported in part by Defense Advanced Research Projects Agency (DARPA) as part of the Fast Lightweight Autonomy (FLA) program, HR0011-15-C-0110. Views expressed here are those of the authors, and do not reflect the official views or policies of the Dept. of Defense or the U.S. Government.

Authors
Figures
References
Citations
Keywords
Metrics
Media
   Back to Results   
More Like This
Dynamic Collision Avoidance Path Planning for Mobile Robot Based on Multi-sensor Data Fusion by Support Vector Machine

2007 International Conference on Mechatronics and Automation

Published: 2007
Multi-sensor based collision avoidance algorithm for mobile robot

2015 Long Island Systems, Applications and Technology

Published: 2015
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
