IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 33%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Journals & Magazines > IEEE Access > Volume: 2
Sampling-Based Robot Motion Planning: A Review
Publisher: IEEE
Cite This
PDF
Mohamed Elbanhawi ; Milan Simic
All Authors
View Document
372
Paper
Citations
3
Patent
Citations
21330
Full
Text Views
Open Access
Comment(s)

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Sampling Based Planning Overview
    III.
    Parameters and Heuristics
    IV.
    Kinodynamic Planning
    V.
    Optimal SBP

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Media
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Bidirectional Rapidly-exploring Random Tree (RRT) utilised for path planning in cluttered 3D environments, Right: An overview of a Sampling-Based Planning Algorithm
Abstract: Motion planning is a fundamental research area in robotics. Sampling-based methods offer an efficient solution for what is otherwise a rather challenging dilemma of path ... View more
Metadata
Abstract:
Motion planning is a fundamental research area in robotics. Sampling-based methods offer an efficient solution for what is otherwise a rather challenging dilemma of path planning. Consequently, these methods have been extended further away from basic robot planning into further difficult scenarios and diverse applications. A comprehensive survey of the growing body of work in sampling-based planning is given here. Simulations are executed to evaluate some of the proposed planners and highlight some of the implementation details that are often left unspecified. An emphasis is placed on contemporary research directions in this field. We address planners that tackle current issues in robotics. For instance, real-life kinodynamic planning, optimal planning, replanning in dynamic environments, and planning under uncertainty are discussed. The aim of this paper is to survey the state of the art in motion planning and to assess selected planners, examine implementation details and above all shed a light on the current challenges in motion planning and the promising approaches that will potentially overcome those problems.
Published in: IEEE Access ( Volume: 2 )
Page(s): 56 - 77
Date of Publication: 24 January 2014
Electronic ISSN: 2169-3536
INSPEC Accession Number: 14066429
DOI: 10.1109/ACCESS.2014.2302442
Publisher: IEEE
Bidirectional Rapidly-exploring Random Tree (RRT) utilised for path planning in cluttered 3D environments, Right: An overview of a Sampling-Based Planning Algorithm
Hide Full Abstract
Contents
SECTION I.
Introduction

Autonomous robots are characterized by their ability to execute tasks deprived of any human intervention. Decision making requires full or partial knowledge of the surrounding environment, or workspace, in which the agent is operating. Recent advances in sensor technology have enabled the use of reliable multisensory perception systems [1] – [2] [3] [4] [5] . Uncertainty in the perception stage leads to accumulated localization errors [6] . Processing of collected data and accounting for errors is essential for accurate mapping and localization [7] . The planning stage involves devising a collision free strategy from the current location, or configuration, to a desired goal location, or configuration. The current configuration is estimated in the localization stage whereas a behavioral planner can provide a goal configuration [8] , [9] (the notion of a configuration will be discussed later). Path planning is a purely geometric process that is only concerned with finding a collision free path regardless of the feasibility of the path. Kinodynamic planning, on the other hand, considers the kinematics and dynamics of the robot. Once a path is specified the final procedure is motion control or execution [10] – [11] [12] . The full potential of autonomous vehicles is yet to be fully exploited in enriching human lives. Nevertheless there exist several applications such as self-driving cars, forklifts, mining trucks, unmanned aerial vehicles (UAV), military drones, cleaning mobile robots, planetary rovers, rescue robots and many more.
A. Path Planning

Planning is not only one of the fundamental problems in robotics [13] – [14] [15] , it is perhaps the most studied [16] . Early efforts to develop deterministic planning techniques showed that it is computationally demanding even for simple systems [17] . Exact roadmap methods such as visibility graphs [18] – [19] [20] , Voronoi diagrams [21] , [22] , Delaunay triangulation [23] , adaptive roadmaps [24] attempt to capture the connectivity of the robot search space. Cell decomposition methods, in which the workspace is subdivided into small cells, have been applied in robotics [25] . Search algorithms such as Dijkstra [26] and A ∗ [27] find an optimal solution in a connectivity graph, whereas D ∗ [28] and A D ∗ [29] are tailored to dynamic graphs. The use of graph search methods involves discretization of the workspace and their performance degrades in high dimensions. The work in [30] – [31] [32] , generates state lattices using motion primitives and combines them with graph search algorithms but, it still suffers from undesirable discretization. Efficient discretization can be achieved on the expense of completeness and high-resolution discretization is computationally expensive. The emergence of novel computational methods inspired their use in path planning. Methods such as Fuzzy Logic Control [33] – [34] [35] , Neural Networks [36] , Genetic Algorithms [37] , [38] , Ant Colony Optimization [39] and Simulated Annealing [20] have all been applied in robot path planning. Khatib [40] proposed a potential field method such that artificial forces repelled the robot away from the obstacles and attracted it towards the goal position. Potential fields were also applied for mobile robots in [41] , however they suffered from falling into local minima and performed poorly in narrow regions [42] . Sensor based reactive planning methods have been proposed [43] – [44] [45] . Control based methods require formulating accurate models for the robot and the environment [46] , [47] , which can be a rather daunting task.
B. Randomization and Sampling in Robot Planning

Sampling based planning (SBP) is unique in the fact that planning occurs by sampling the configuration space (C-space). In a sense SBP attempt to capture the connectivity of the C-space by sampling it. This randomized approach has its advantages in terms of providing fast solutions for difficult problems. The downside is that the solutions are widely regarded as suboptimal. Sampling based planners are not guaranteed to find a solution if one exists, a property that is referred to as completeness. They ensure a weaker notion of completeness that is probabilistic completeness. A solution will be provided, if one exists, given sufficient runtime of the algorithm (in some cases infinite runtime).

Sampling based planning is by no means a novel concept in robotics [48] . It was proposed to overcome the complexity of deterministic robot planning algorithms for a robot with six degrees of freedom. The use of random computations to solve otherwise rather difficult problems, have been immensely successful [49] , [50] . Both sampling based planners and the success of random computations inspired the development of the Randomized Potential Planner (RPP) [51] . RPP used random walks to escape local minima of the potential field planner. Later on, a planner based entirely on random walks, with adaptive parameters, was proposed [52] .

The work of Barraquand and Latombe [51] paved the way for a new generation of motion planning algorithms that employ randomization. Some of these planners are listed in Table I . Perhaps the most commonly used algorithms are Probabilistic Roadmap Method (PRM) [53] – [54] [55] and Rapidly-exploring Random Trees (RRT) [56] . Several other algorithms were developed at the same time that outperformed RPP. The intuitive implementation of both RRT and PRM, and the quality of the solutions, lead to their widespread adoption in robotics and many other fields.
TABLE I Main SBP Algorithms

PRM implements two main procedures to generate a probabilistic roadmap. A learning phase occurs first, where the C-space is sampled for a certain amount of time. The samples, or configurations in the free space, are maintained while those in the obstacle space are discarded. This is followed by a query phase where the start and goal configurations are defined and connected to the roadmap. Roadmaps are sometimes referred to as forests, as an analogy to trees in RRT. As a result of maintaining the roadmap and specifying start and goal configurations in a subsequent stage, PRM is able to solve different instances of the problem in the same environment. It is referred to as a multi-query planner. Planning time is invested in sampling and generating a roadmap so that queries are solved quickly. Initially developed for articulated robots [53] – [54] [55] . PRM has been extended for non-holonomic car-like robots [57] . It was shown that PRM is probabilistically complete [58] , [59] .

RRT represents another category of sampling based planners, which are single-query planners. A tree is incrementally grown from the start configuration to the goal configuration, or vice versa. A configuration is randomly selected in the configuration space. If it lies in the free space, a connection is attempted to the nearest vertex in the tree. For single query problems, RRT is faster compared to PRM. It does not need to sample the configuration space and construct a roadmap i.e., learning phase. RRT was shown to be probabilistically complete [60] .

Expansiveness was proposed as a measure of the number of neighboring nodes to any nodes [61] . It is used as an indication whether a node will be useful in expanding the search tree. Expansive space trees (EST) were developed based on that proposed measure. Unlike RRT where sampling is uniform [56] , EST employs a function that sets the probability of node selection based on neighboring nodes.

Ariadne's clew is planner that builds a search tree [62] , similar to EST and RRT, to explore the configuration space. The difference in this algorithm is the connection of the randomly selected node. It attempts to connect a node that is furthest from existing nodes. This heuristic is employed to increase the exploration rate of the algorithm. Unlike RRT where the implementation is intuitive by connecting the closest node, a genetic algorithm is used to select the node for expansion [62] .

Sampling based planners have been successfully implemented in a variety of fields aside from robotic applications. This is a testament to the generality of the proposed algorithms and their ability to solve difficult and constrained problems. Interestingly, the two fields in which sampling based planning is used are digital animation and computational biology [16] . In digital animation, agents are constructed out of triangular meshes and paths are planned using sampling based planners such as RRT [63] or PRM [64] . A Gaussian-process based Spline-RRT was used to guide a UAV to explore an unknown environment [65] . In computational biology, molecules and proteins are modeled as articulated bodies and sampling based planners are used to simulate protein folding and protein-ligand interactions [66] , [67] . EST was used in architectural design to evaluate accessibility of constrained and narrow areas [68] . Medical needles [69] and, deformable objects [70] sampling based motion planning frameworks, have been developed. Several researchers investigated the use of RRT in non-linear control applications such as pendulum control [71] . Apart from simulation based planning, the first real life applications were reported in multi-robot competitive dynamic environments [72] . Ever since, welding multi-degree of freedom (DOF) robots [73] , industrial robots [74] , domestic robots [75] , [76] and urban self-driving vehicles have used sampling based planning [77] , [78] .
C. Contribution

It must be stated that sampling based planning reviews exist in literature. Both surveys [66] , [67] focus on RRT and PRM for computational biology and physics-based simulation and modeling. The review papers [16] , [79] and the survey by Tsianos, et al. [80] are considered outdated. A significant body of work exists after their publication. Researchers have since evaluated some of the claims and open research questions. Recommendation for planners implementation are proposed [81] and a benchmarking software is presented [82] but they do not survey recent research in the area and present only a handful of planners. Recently, LaValle [83] , [84] published outstanding tutorials, which, by no means, can be considered reviews.

In this study we present a survey on state of the art sampling based planners and their applications. The planners are decomposed into different primitives and then differences and similarities between planner's primitives are exposed. We review some of the parameters for selected sampling based planners and, optimal planners, and provide recommendations for implementation. This highlights the importance of parameters and heuristics in sampling based planners and evaluates some of the claims made by researchers. A particular emphasis of this research are recent direction in planning such as optimal planning, real time kinodynamic planning and planning (replanning) in dynamic environments and under uncertainty.

We have introduced the paradigm of robotic planning and highlighted some of the important classical, sensor-based, control based and sampling based planners in Section I . The remainder of this paper is arranged as follows, Section II an overview of sampling based planners and a formal description of the planning problem are provided. Methods to improve solutions and performances of sampling based planners are presented and some are evaluated using simulations in segment III. We present the problem of kinodynamic planning in segment IV. Optimal planning algorithms are presented and evaluated in segment V. The problem of planning under uncertainty in dynamic environments is then presented in segment VI. The study is finally concluded in segment VII.
SECTION II.
Sampling Based Planning Overview

SBP is treated as a black box that returns a feasible, collision free path once information about the start and goal configurations is provided, as shown in Fig. 1 . In a hierarchical overview of motion planning for autonomous robots, SBP lies between a high-level behavioral planner that specifies global goals and a low-level controller that plans the execution of path.
Fig. 1. A general sampling based planner.

Show All

A. Problem Definition

In order to define the motion planning problem some concepts must be introduced. SBP operate, mostly, in the configuration space (C-space). It is the space of all possible transformations that could be applied to a robot. Lozano-Perez [85] introduced the concept of C-space planning to simplify complex planning scenarios in the workspace of the robot. Free space, C f r e e , and obstacle space, C o b s , are the two regions within the C-space, C . This prevents the need to explicitly define obstacles. The robot can be only represented by a configuration, q , at any instance. The configuration, q , has equal dimensions as the C-space. Common terminology to describe configurations, such as nodes, samples, or landmarks, will be used interchangeably in this study. A sequence of consecutively connected configurations represents a path, P .

Start, q s t a r t , and goal, q g o a l , configurations are the inputs to the motion planner. The problem is to find a collision free path, P f r e e , which connects q s t a r t to q g o a l A path is considered free if its entire configurations lie in C f r e e and their connecting paths do not intersect C o b s .
B. Primitives

It is essential to introduce the constitutions of any SBP algorithm prior to introducing the different planners. Even though these primitives are found in most planners, their implementation differentiates the planner. Variants of each of these primitives will be thoroughly discussed in Section III along with their effect on the performance of the planner.

    Sampling: This procedure is used to select a configuration, randomly, or quasi-randomly, and add it to the tree or roadmap. As mentioned earlier, the samples can be either in the free, or obstacle configuration space. It can be considered as the core of the planner and the main advantage of SBP over other techniques.

    Metric: Given two configurations q a and q b , this procedure returns a value, or cost, that signifies the effort required to reach q b from q a . It is important that it is truly representative of the effort, or time-to-go between both configurations. Otherwise highly suboptimal solutions will be returned.

    Nearest Neighbor (NN): It is a search algorithm that returns that closest node(s) to the new sample. The value is based on the predefined metric function. Some papers refer to it as proximity search or near vertices.

    Select Parent: This procedure selects an existing node to connect to newly sampled node. That existing node is considered parent. RRT selects the nearest node as the parent. PRM connects the sample to several nodes within its neighborhood. On the other hand, EST selects a parent node to randomly extend based on its neighboring nodes. Ariadne's clew selects a parent node for extension using a genetic algorithm.

    Local planning: Given two configurations q a and q b , this procedure attempts to establish a connection between them. It is intuitive to employ straight-line paths. For most robotic systems this is not a feasible plan due to kinematic or dynamic constraints.

    Collision checking (CC): It is mostly a Boolean function that returns success, or failure, when connecting two configurations. A connection is successful, if it does not intersect C o b s .

C. Algorithms

Algorithms for PRM and RRT are presented here as introduced in [55] and [56] . They are the main algorithms used in SBP. It must be noted that configurations may be referred to, using common SBP literature terminology, as nodes or milestones, throughout this study.
1. RRT

    The search is initialized from q s t a r t .

    A node, q r a n d , is selected from the C-space using the sample procedure, as shown in Fig. 2(a) .

    q r a n d is discarded, if it is in C o b s .

    Using Nearest Neighbor search q n e a r is returned according to the metric, as shown in Fig. 2(b) .

    The local planner is used to connect q r a n d and q n e a r . The planner may return q n e w ⋅ q r a n d may not be reachable, as shown in Fig. 2(c) . If q r a n d is not reached, it is discarded.

    Collision checking is performed to ensure the path between q n e a r and q n e w is collision free. If path is collision free q n e w is added to the tree as shown in, as show in Fig. 2(d) .

    The search terminates when q n e w = q g o a l , a number of iterations is exceeded or a specified time period are exceeded.

Fig. 2. The procedure of extending RRT.

Show All

The ability of RRT to explore free space in presence and absence of obstacles is illustrated in Fig. 3 . This property is often referred to as the Voronoi bias of RRT. As a result of uniform sampling, the planner is more likely to select samples in larger Voronoi regions and the tree is incrementally and rapidly grown towards that free space.
Fig. 3. RRT exploring free space (right) and environment with one obstacle (left) after 500 iterations. The root of the trees in both cases is shown as green bold green circle, in top right corner (left) and center (right).

Show All

2. PRM

Firstly, a roadmap is built in the learning phase,

    A node, q r a n d , is selected from the C-space using sample procedure.

    q r a n d is discarded, if it is in C o b s .

    Otherwise, q r a n d is added to the roadmap.

    Find all nodes within a specific range to q r a n d

    Attempt to connect all neighboring nodes using local planner to q r a n d .

    Check for collision and disconnect colliding paths

    This process is repeated until a certain number of nodes have been sampled.

A typical roadmap, built in the learning phase, is shown in Fig. 4 . In the query phase the start and goal configurations are connected to the roadmap. A graph search algorithm is then used to find the shortest path through the roadmap between start and goal configurations.
Fig. 4. Roadmap built in the PRM learning phase.

Show All

SECTION III.
Parameters and Heuristics

Sampling based planners consist of a number of primitives with varying parameters. A significant portion of research in SBP is dedicated to designing algorithms with smart heuristics and parameters.

The aim of these improvements is generally twofold, reducing algorithm run time and cost of solutions. In this section SBP variants are categorized and surveyed. SBP are rather sensitive to their implementation and some emphasis must be placed to selecting the correct parameters [86] . Sucan and Kavraki [81] highlight the importance of parameters and argue that the implementation details are often not mentioned when SBP are presented. Motivated by the reliance of RRT on heuristics, Randomized Statistical Path Planning (RSPP) applies machine learning to actively adjust the planners parameters while the algorithm is running [87] . In this section, a number of implementations and parameters are tested using simulations in various scenarios.
A. Sampling Strategies

Sampling is the core of the SBP. It is the process through which the planner is able to extend and explore the C-space. Initially, PRM and RRT were proposed with uniform sampling schemes [55] – [56] [57] . This can be considered as a drawback because the planner has a high probability of sampling a node from a wide region unlike a narrow free region. This is a result of all configurations have uniform probability of being sampled and narrow regions have less free configurations. Another drawback of uniform sampling is not capturing the true connectivity of the environment. The following sampling strategies have been suggested as means to overcome those shortcomings,

    Medial axis: Sampling probability is increased around the medial axis (Voronoi graph) to guide the generation of a roadmap that fully captures the shape of the C-space [88] – [89] [90] .

    Boundary: Forcing sampling towards the boundary of obstacles, as opposed to free space, was proposed in [54] .

    Gaussian: Similar to boundary sampling, this strategy increases the probability of sampling around obstacles. Nodes are expanded using an adaptive probability based on obstacle and collision data [91] .

    Bridge-test: This overcomes the weakness of SBP in narrow regions. The strategy uses a short segment with two configurations and their midpoint [92] . If the two ends are in C o b s and their midpoint is in C f r e e then a narrow region has been identified.

    Hybrid: Combining two sampling strategies, narrow passage (bridge-test), and uniform sampling. This lead to an increase density in narrow regions and still maintaining randomization which is advantageous in solving difficult problems [93] . Medial axis and narrow sampling are combined to better capture the environment connectivity [94] .

    Visibility PRM [95] : A non-uniform sampling method. Sampling is performed in visibility regions. It decreases the number of nodes maintained in the roadmap while maintaining the same coverage.

    Goal Biasing: It may not be considered as a sampling strategy however biasing is mentioned here as it is used to replace sampling strategy for an interval at some planning stage. Biasing attempt to greedily connect the goal configuration to the current tree [96] . Biasing is recommended, between 1–10 every 100th iteration, to maintain randomization in sampling [13] , [84] .

The effect of sampling on the performance of SBP is still an open research question. The experimental results presented by Lindemann and LaValle [79] , Geraerts and Overmars [86] , [97] show that sampling has no effect on the performance of planners. It also shows that there is no single sampling strategy that outperforms the others in every scenario.
B. Guiding the Exploration

The motivation behind the attempts to guide the search is that RRT expansion is more prone to fail if the node is near and obstacle (boundary node). A simple approach is to attempt to limit the sampling domain to the visibility region, which is difficult to compute. Dynamic-Domain RRT (DD-RRT) limits the sampling domain of boundary nodes to a small ball of a predetermined radius as an alternative to the visibility region [98] . Adaptive Dynamic Domain RRT (ADD-RRT) limits the domain to a ball, whose radius changes according to the extension success rate of each boundary node [99] .

Unlike ADD-RRT and DD-RRT, Utility-RRT influences the direction and length of extension, not the sampling domain. A utility function evaluates the direction of expansion and the selected node [100] . Utility functions are computed based on the success rate of the node and previous direction of expansion. Obstacle Based RRT (OB-RRT) gathers data from obstacles and selects predetermined growth directions [101] . Utility-RRT outperforms both ADD-RRT and RRT [100] , OB-RRT has only been benchmarked against RRT. OB-RRT relies on obstacles models consisting of triangles. No discussion is provided whether this method would extend to other representations.

A novel categorization divides motion planners into exploring and exploiting planners [102] . SBP presented here perform guided exploration. On the other hand, artificial potential field algorithms and wave front decomposition [103] exhibit purely exploitive behavior. Exploring/exploiting tree (EET) balances both behaviors based on successful expansion of the tree [102] . It attempts to use purely exploitive behavior to provide fast solutions for sub-problems and leverages exploring behavior of SBP when the planner fails.

Several adaptive sampling strategies have been proposed. Significant reduction in planning time for a non-holonomic UAV is achieved by increasing the density of sampling around the goal region once the tree approaches it [104] . A high level planner modifies the sampling domain to influence the behavior of a self-driving car by manipulating the Closed Loop RRT (CL-RRT) growth [77] . An estimation model predicts the probability of a sample, to optimize the solution and adapts the sampling strategy accordingly, to direct the search towards lower cost regions [105] . Collision information is used to adapt sampling when building a roadmap in real time [106] .
C. Metrics

Metrics are used to indicate the cost or time to go between two configurations. PRM and RRT are reliant on metrics for extending their search. Choosing an accurate metric is arguably as difficult as the motion problem itself [13] . It is of the utmost importance that metrics provide a good estimation, not necessarily exact, of the cost between two configurations. Metrics can be called multiple times during the planning procedure so it must be easily computed. A theoretical analysis of path quality measures in a plane is presented in [107] .

EST and Guided Expansive Space Trees (GEST) [108] select nodes for expansion based on their neighboring nodes. Path Directed Subdivision Trees (PDST) [109] and KPIECE 1 [110] select nodes for expansion based on their coverage, to ensure that expansion is not wasted on already explored areas. These planners reduce their dependency on metrics.

Amato, et al. [111] experimentally studied the effect of different metrics on PRM and reported that the best performance was obtained by using a weighed Euclidian metric. This metric accounted for rotation as well as linear Euclidian distance. Similarly, accounting for rotation using Euler angles, or Quaternions, proved to be advantageous when planning with RRT in 3D [112] .

Non-holonomic vehicles such as car-like ground robots or UAV with upper-bounded curvature are common robotic platforms. Euclidian metric is a poor choice for those vehicles since two configurations that are physically close may require complex maneuvering to reach (see Section III-G for discussion on local planning). Calculating the true cost involves expensive computations which is infeasible given the frequency of the metric function usage during planning. SRRT uses a Euclidian distance to calculate the closest k-neighbors, where k is a positive integer, and then connect to the one with the smaller real distance [104] . Another approach overestimates the distance when the Euclidian distance is less than the minimum turning radius, indicating that a complex maneuver might be needed [113] . Manipulability was proposed as a metric for articulated robots to signify the ease by which the robot can reach a certain configurations, especially that articulated have redundant configurations [114] .

As a substitute for purely relying on a distance metric to select the suitable node for expansion, the failure rate of previous node expansions is factored in the selection metric, an approach, that is often referred to as Resolution Complete RRT (RC-RRT) [115] , [116] and was adopted in [117] . This prevents wasting planning time on nodes that are bound to fail simply because of their low metric value. RRT-Blossom choses an expansion node similarly [118] . However it proceeds to expand the node in all directions and removes nodes that are close to nodes already in the tree. This approach has a drawback of discretizing the control space, which is one of the strengths of RRT, as it operates in a continuous space. Discretizing the control space has been shown to improve planning for some nonlinear systems [119] , [120] . It is yet to be evaluated for differentially constrained robotic planning.

The costs that arise between two configurations simply account for the effort needed to drive the robot from one to the other. All the previously mentioned approaches assume a uniform cost C-spaces, aside from heuristic method presented in [121] . Non-uniform costs are used to signify non-uniform rough terrain [122] , estimated uncertainty [123] , or can be user defined to bias the plan towards preferred regions [124] . Transition-RRT (T-RRT) [125] were proposed to handle non-uniform cost C-space, referred to as cost maps. It provides an adaptive criterion, referred to as transition test, which prevents transitioning into costly regions based on the cost differences between parent and child nodes.
D. Collision Checking

One of the main properties of SBP is that obstacles in the environment are not explicitly defined. Planning generally takes place in the C-space, which is separated into C f r e e and C o b s . This approach requires a module, which provides information on whether a path collides with any obstacle. Since the goal of SBP is to create collision free paths in the C-space, it stands to reason that collision checking (CC) will be called several times during planning. Some experiments show that more than 90% of planning time is spent processing CC queries [93] . It can be noticed by from any SBL that most connections are collision free.

Several planners use CC as a feedback mechanism to guide the search [72] , [98] , [99] , [108] , [115] adapt the sampling strategy [105] , [106] , or improve the connectivity of the environment [92] , [93] , [126] . Proximity Query Package (PQP) is commonly using for CC [127] . An experimental comparative analysis shows that other packages outperform PQP [128] .

Lazy planning algorithms have been proposed to delay collision checking until it's needed [129] – [130] [131] . These algorithms will check the collision only once a path is found. Once collision is detected the colliding segment is removed and planning is continued. Another approach is to decrease the reliance of expensive CC. The distances between free configuration and C o b s are maintained and similarly obstacle configurations and C f r e e . These distances are used to infer whether a new configuration or, new path segment is colliding and decrease the reliance on CC [132] .

Single-query Bidirectional Lazy (SBL) is a planner that not only delays planning but it also performs CC in regions that are more likely to collide [133] . The CC algorithm in SBL is based on four observations:

    A small fraction of all samples is in the final path (around 0.1%),

    Incrementally checking the path is computationally expensive, especially when no collision is detected, as the entire path must be checked,

    Short connections are more likely to be collision free between two configurations in C f r e e , as shown in Fig. 5(b) ,

    Collision is more likely to be in the midpoint between two configurations, as shown in Fig. 5 .

Fig. 5. Illustration of the observations made by Sánchez and Latombe [133] . (a) The midpoint of a colliding path between two free configurations is more likely to be in {\rm C}_{obs\thinspace} (b) It is difficult to have a colliding path between two free configurations that are separated by a short distance. The collision is still more likely to be towards the midpoint of the short line.

Show All

A collision checking algorithm is employed by SBL based on the observations made in [133] . Naive CC is performing incremental checking at some interval from one end to the other along a path, shown in Fig. 6(a) . SBL checks the midpoint between two configurations dividing the path into two parts, shown in Fig. 6(b) . If the midpoint is free, the midpoints of the two parts are checked. This process is continued until a certain resolution is reached.
Fig. 6. Red arrows connote a CC query between two configurations that are connected by the black solid line (a) Naive incremental collision checking (b) SBL midpoint collision checking.

Show All

E. Heuristics

In this section we introduce some methods that have been shown to refine the solution cost or planning time of SBP. It must be noted that there are no theoretical guarantees to those claims. However, these planners have been shown to work well in various situations. We will provide some discussions about the strengths and shortcoming of those tactics.

RRT-Connect [96] and SBL [133] use two trees to perform bidirectional search. One tree is rooted at the start, whereas the other is at the goal. The search is complete when the two trees are connected. This approach provides significant improvements in the search efficiency, which is illustrated in Fig. 7 . Triple RRT [134] generates two trees from start and goal configurations and one tree from a narrow region which is identified using the bridge test. Similarly, Multiple RRT are generated from all narrow regions, in the free space that are identified using the bridge test [135] . A problem arises when attempting to connect two trees for differentially constrained systems where the local planning is not a simple straight line, resulting in what is known as a boundary valued problem [136] . Methods to overcome this problem will be discussed in Section IV .
Fig. 7. Unidirectional search coverage area (left) and bidirectional search (right). The search is started from the diamond shaped configuration and the final configuration is circle-shaped. Employing two search trees is more effective since less area is searched to find the solution.

Show All

It can be seen that using NN search to connect the sampled node to the nearest node does not necessarily improve the path cost. A k -near RRT employs NN search to find the nearest k nodes, where k is a positive integer [121] . The path is evaluated for all the k -nearest nodes and the node with the best solution is connected to improve the overall solution. The drawback of this approach is computational overhead as, NN search is called, and metrics are evaluated more frequently. An alternative to relying on NN search is evaluating the path towards a candidate node with all nodes in the tree [137] .

Anytime RRT deals with lack of computational time for path improvement by generating an initial suboptimal solution [138] . The tree is then stored and the rest of the time is used to attempt to improve every solution by a predetermined bound (generally 5–10%). This is achieved by applying a node selection strategy. If the underestimated, lower-bound, path cost through the candidate node is less than the current path cost it is deemed “promising” and added to the tree. Waypoint caches were originally proposed for real-time planning are also used to guide replanning with anytime RRT [139] . It is explicitly remarked that Anytime RRTs improve the path within the given planning time, however they provide no guarantees on reaching an optimal solution under certain criteria and time constraints. This property is known as asymptotic optimality and will be discussed in Section V .
F. Post Processing

A major drawback of SBP is their widely regarded suboptimal paths. This is as a result of the arbitrary approach used in sampling and heuristics that are employed to speed up the search. Whereas some methods attempt to guide to improve the path quality during the search process [121] , [138] , the algorithms in this section proceed to smooth and modify the path after planning is complete. Post processing is illustrated in Fig. 8 . The original path is shown as a thin line, the dotted line is the trimmed path, and finally the bold line shows the smooth curved path.
Fig. 8. An illustration of post processing. The original path is highly suboptimal (grey thin line). Redundant nodes are removed and the rest are connected to provide a shortcut path (red dotted line). Smoothing techniques are then employed to fit a curve through the short path (black thick line).

Show All

Simply inspecting subsequent nodes and removing redundant nodes achieve path shortcutting, or tree pruning. An efficient algorithm removes redundant nodes in one dimension at a time and provides some clearance by moving the path towards the medial axis [140] .

Smoothing techniques rely on using a curve to interpolate or fit the given waypoints. These methods are not limited to SBP but have been used in various scenarios and with planners. Methods such as cubic polynomials [141] , quintic polynomials [142] , [143] , Bezier curves [144] – [145] [146] [147] , B-splines [20] and Clothoids [148] have been all applied for path smoothing. An study shows that Bezier and B-splines are well suited for robotic planning and B-splines were shown to be more effective in replanning situations in dynamic environments [149] .

Hybridization graphs (H-graphs) are constructed by coalescing multiple RRTs and attempting to optimize the solution [150] . This work is based on the observation that RRTs are globally suboptimal, conversely some local optimality exists. It is hoped that the locally optimal components of different trees can be combined to achieve global optimality. Hybridization is used with trees generated using the same planner. No studies have been performed on the effect of using trees generated with different parameters. The effect of having a portion of trees rooted at the start, others at the goal and utilizing bidirectional trees are prospects, which are yet to be investigated within the hybridization framework.

Post processing, as is the case with any SBP stage, is limited by an amount of time. Alternating between hybridization and smoothing within the given time-frame have been shown to be effective and computationally efficient [151] . Path Deformation Roadmap (PDR) extends on the notion of Visibility PRM by removing redundant paths that can be deformed into other existing paths [152] . Maintaining a compact deformable roadmap facilitates post processing as various paths between two roadmaps can be easily obtained.

Regardless of the effectiveness of these approaches, post processing does not regulate the impractical attempts to expand nodes towards suboptimal regions. It only proceeds to optimize the path at a later stage. Planning time is wasted in both the search and the optimization stages. A more efficient strategy would be to explicitly consider path quality during planning.
G. Local Planning

Steering functions are employed to connect configurations, or landmarks, in SBP. Intuitively, a straight line joining both configurations may be proposed. In the case of differentially constrained robots, or non-holonomic robots this may not be feasible. A viable approach is to model the robot system and sample the control space for a certain period of time. However, it must be noted that a tradeoff exists between computational efficiency and accuracy when using numerical integration. Kinematic model for a car-like vehicle is often represented using the bicycle model as follows in (1) , where x and y are the vehicle coordinates, \theta is it's orientation, \emptyset is the steering angle, v is the linear velocity and L is the distance between the front and back wheels, as illustrated in Fig. 9 . Non-holonomic planning is a thriving area of research [153] , which can be combined with SBP to provide effective planning techniques. \left[{\matrix{{\matrix{{\mathdot{x}}\cr{\mathdot{y}}\cr{\mathdot{\theta}}}}\cr{\mathdot{\emptyset}}}}\right]=\left[{\matrix{{\matrix{\cos\theta\cr\sin\theta\cr\tan\theta/L}}\cr 0}}\right]v+\left[{\matrix{{\matrix{0\cr 0\cr 0}}\cr 1}}\right]{\mathdot{\emptyset}}\eqno{\hbox{(1)}}
View Source Right-click on figure for MathML and additional features. \left[{\matrix{{\matrix{{\mathdot{x}}\cr{\mathdot{y}}\cr{\mathdot{\theta}}}}\cr{\mathdot{\emptyset}}}}\right]=\left[{\matrix{{\matrix{\cos\theta\cr\sin\theta\cr\tan\theta/L}}\cr 0}}\right]v+\left[{\matrix{{\matrix{0\cr 0\cr 0}}\cr 1}}\right]{\mathdot{\emptyset}}\eqno{\hbox{(1)}}

Fig. 9. Illustration of bicycle model of car-like vehicle rotating, the instantaneous center of rotation (ICR) is shown as circular node.

Show All

Dubin's path [154] and Reeds and Shepp's [155] are commonly used for non-holonomic vehicles that are bound by a minimum turning radius [57] . They combine circular arcs and straight lines to generate optimal paths, however the curvature of the path may not be continuous. Curvature continuous paths were proposed using Clothoids [148] , [156] . Clothoids have no closed form representation and thus provide computational challenges to synthesize in real time [157] – [158] [159] [160] [161] . Bezier curves were proposed for smoothing [144] , [145] and then they were used for local planning in SRRT [65] , [104] . B-splines were proposed for planning and replanning in dynamic and unknown environments [149] .

In order to improve the connectivity of PRM roadmap Delaunay triangulation have been used for local planning [162] . Toggle PRM initially implements a straight line connection. If connections fails, it attempts to establish a connection from the same node in different directions [126] . PRM is combined with RRT or EST as local planners to take advantage of both planners' strengths in solving complex queries [163] . PRM samples milestones and maintains roadmap while single-query motion planner attempts to connect milestones. The planner, formalized as Sampling-Based Roadmap of Trees (SRT), was shown to be more efficient than using a standalone PRM, RRT or EST [164] .
H. Simplifying the Planning Problem

It is often useful to limit the search space dimensions as a means to facilitate the planning process. Motion primitives are often used for highly redundant robots. These robots can solve a single query, i.e., reach a pose, in a various configurations [165] , [166] . Certain planning dimensions are disregarded by constraining the motion of the robot to a specific manifold or moving the planning problem into a lower dimensional space that is more relevant the task [76] , [167] – [168] [169] .

Maneuver based planning was proposed, in which stable trim-trajectories are known a priori and used to connect nodes [137] . The concept of maneuver based planning have been extended into Maneuver Automata, as alternative to optimal control methods [170] . They consist of a finite set of interconnected motion primitives; the connections are governed by some rules to ensure dynamic feasibility. Atlas RRT [171] projects the highly constrained C-space manifold into overlapping charts which are contained within an atlas to overcome the complexity of C-space introduced by kinematic constraints.
I. Implementation Enhancements

It can be argued that most of the research on SBP is focused on theoretical aspects and implementation details are often left out of the discussion [81] . SBP parameters have been shown to have a significant effect on their results [86] . Statistical learning has been used to adaptively adjust parameters [87] .

An open-source library has been developed as a common benchmarking tool that limits the effect of implementation parameters [82] . Kd-trees have been used to improve the efficiency of NN-search [172] . Taking advantage of powerful CPUs by parallel processing and running multiple searches have been shown to be effective [164] , [173] , [174] .
J. Experiments

In order to illustrate the significance of SBP parameters on the results obtained several experiments are presented here.
1. Experimental Setup

RRTs are used to solve single queries two-dimensional environments. We highlight the effect of several implementation parameters such as step size used for extending the RRT, the percentage of biasing, k values in k -RRT, bidirectional search. We also test some of the observations used for lazy CC in SBL.

RRT rely on random sampling. As a result, running the same algorithm with the same parameters will produce different solutions. Some solutions can be near optimal, lucky, while others may be grossly suboptimal, pathological cases. Both cases are shown in Fig. 10 . There are three obstacles in the environment shown as grey boxes. The goal region is highlighted as the green box, the path is shown in red and the RRT is shown as black lines.
Fig. 10. Lucky (left) and pathological (right) solutions obtained by running the same algorithm without changing any parameter. This environment is referred to as “narrow” in this study.

Show All

Several measures have been put in place to ensure that the presented results are truly reflective of parameter effects. Firstly, any experiment is looped for 54 runs, the best and worst two results are then omitted, and the remaining 50 are averaged. All experiments are run on three environments, each with its own challenges. Environment dimensions are 100×100 in all cases, obstacles are grey objects, goal region is a green box, RRT is shown in black, and the final path is highlighted in red. The environments are referred to as narrow, trap and clutter in this study, shown in Figs. 10 and 11 left and Fig. 11 right respectively. All the experiments are implemented in Python.
Fig. 11. Trap environment is shown on the left and cluttered is shown on the right.

Show All

2. Results and Discussion

The goal of the experiments in this segment is to highlight the effect of implementation parameters on RRT. It must be noted that the number of explored nodes is used as an indication of the algorithm run time and the cost is the Euclidian distance.

The result of changing the step size of the RRT extension on the path cost is presented in Fig. 12 . The step size is tested with 5, 10 and then it is unrestricted. Restricting the step in which the RRT is incrementally grown, maybe counterintuitive but it generates far better solutions. The planning time saved by unrestricting the step size will be lost in post-processing to improve the solution.
Fig. 12. Effect of changing the step size of RRT extend on the path cost, a minor implementation detail that has a large effect on the performance.

Show All

An RRT planner is tested with no biasing, 5% and 10%. This percentage indicates the percentage of planning in which the planner attempts to greedily connect to the goal configuration. The results of biasing are given in Fig. 13 . It is expected that biasing will pull the tree towards the goal, leading to decreasing the number of nodes explored. In both, the narrow and cluttered environments, this is true. It is not the case in the trap environment where the tree must first move away from the goal then return to it. Increasing the biasing leads to increased computation.
Fig. 13. Effect of goal biasing on the path cost of the number of nodes explored before a solution is found, which is an indication of the algorithm run time.

Show All

Biasing is then compared with bidirectional search by generating two RRTs. Results are given in Fig. 14 . Bi-RRT provides more consistent improvements across all environments. As previously mentioned, the main drawback of bidirectional RRT is the subsequent BVP, for differentially constrained systems, when attempting to connect two trees.
Fig. 14. Comparison between RRT, Biased RRT and Bidirectional RRT explored nodes before finding a solution.

Show All

Performances of bidirectional RRT and k -RRT, for k=5 and 10, are compared. Path cost and the number of nodes are show in Fig. 16 and the range of the results of using k -near (k=5) is shown in Fig. 15 . It can be seen that both cases of k -RRT produce, better solutions than Bidirectional RRT. However, the computational time needed by k -RRT far exceeds that of Bidirectional RRT and in the case of k=10 the planner fails to find a solution in the trap environment in the specified planning time. Another advantage of k -RRT is the consistency in its results despite its reliance on sampling. This is illustrated by the range of path cost solutions provided by k -RRT (k=5) in comparison to RRT, shown in Fig. 15 .
Fig. 15. The range of the results (path cost) of k-RRT (blue lines) compared to results returned by RRT (red lines). The small variation in the solution returned by k-RRT indicates more consistent performance and reliability.

Show All
Fig. 16. Comparing between RRT, k-RRT and Bidirectional RRT in terms of path cost (top) and number of explored nodes (bottom).

Show All

The motivation behind approaches that employ lazy CC is that a small fraction of most connection collides with obstacles. This observation is consistent with the experiments conducted here. Once a solution is found, CC is performed. If a resulting path collides with obstacles, the planner will either discard the colliding segment or the entire path.

The percentage of infeasible solutions due to collision is often not considered when employing lazy collision checking. If a large number of paths are colliding, it may be more effective to employ an efficient CC algorithm for all connections. The percentage of colliding paths in different environments and under different step size is shown Table II . As expected as the step size decrease so does the failure rate. However, the path failure rate remains high. It is a question of implementation, whether it is more efficient to employ lazy CC and re-plan the path almost 30%-50% of the time, or constantly employ efficient CC.
TABLE II Path Failure Rate Using Lazy Collision Checking

K. Summary

Table III is a summary the body of work reviewed in this section.
TABLE III Summary of SBP Parameters and Heuristics

SECTION IV.
Kinodynamic Planning

Kinodynamic planning deals with the kinematic, non-holonomic and, or, dynamic constraints imposed on the robotic system or vehicle. The previously presented planners were purely geometric, considering only the feasibility of the path. The term “Kinodynamic” has been coined as a synergy between kinematics and dynamics [175] . Deterministic planners were proposed, however, they suffered from high computational costs [175] , [176] .

In some cases path planning and kinodynamic constraints are decoupled. Traditionally, Planners generate a path that relaxes all kinodynamic constraints. Trajectory modification can be employed to gradually modify the trajectory to obey the constraints. Trajectory modification uses small forces to incrementally alter the course. It has been proposed for non-holonomic [177] , [178] and kinodynamic constraints [179] . Trajectory modification has been successfully applied for humanoids [169] , car-tests [180] and multi-DOF non-holonomic planning [181] . Discarding kinodynamic constraints during planning may lead to highly suboptimal solutions that involve difficult maneuvers. Worse, the robot may not be able to execute the plan, resulting in unrecoverable situations that lead to collision. Considering system dynamics is favorable. For some systems attempting to accurately model all the effects will overcomplicate the model and increase the planning space dimensions and the search complexity.

SBP conducts a search in the C-space by sampling configurations, q , and attempting to extend the search towards those configurations. Kinodynamic SBP operates in the state space, \chi , which contains a set of all possible states, x . State space can be considered as C-space augmented with velocities. Subsequently, state space has more dimensions. A state is generally defined as (2) . x=f\left(q,{\mathdot{q}}\right)\eqno{\hbox{(2)}}
View Source Right-click on figure for MathML and additional features. x=f\left(q,{\mathdot{q}}\right)\eqno{\hbox{(2)}} There are several issues confronting kinodynamic planning. It is inherently a high dimensional problem, since considering the first derivatives, for the robot configurations, effectively doubles the dimensions of the search space. The state equation of the robotic system must be known, as shown in (3) . The control space, U , is then discretized. The control, u , that drives the robot as close as possible to the desired state, x , is selected [60] . Similarly, Frazzoli, et al. [137] attempt connections from all nodes in the tree using an optimal controller until the desired state is reached Hsu, et al. [182] select a random state, x , and apply a random control, u , for a fixed time. Equation (3) must be integrated, for the time period that control u is applied, in order to determine the local trajectory that joins two states. KPIECE employs a physics simulator to generate the motion trajectory between states [110] . There is a trade-off between the accuracy of the trajectory generation process and its computational efficiency. {\mathdot{x}}=f\left(x,u\right)\eqno{\hbox{(3)}}
View Source Right-click on figure for MathML and additional features. {\mathdot{x}}=f\left(x,u\right)\eqno{\hbox{(3)}}

Planning in a C-space that has narrow corridors, similar to Fig. 10 , is one of the challenges in SBP. Kinodynamic constraints limit the motion of the robot, essentially creating narrow passages in the state space. The state space is, traditionally, defined into free and obstacle state space. Another subdivision exist in the free state space, referred to as Inevitable Collision States (ICS), in which the robot will collide with obstacles regardless of the control input applied [183] . This contributes to the complexity of the planning dilemma, as the free state space is narrower. High dimensional planning combined with narrow passages in the free state space leads to slowing down SBP planners. Synergistic combination of layers of planning (SyCloP) is a framework that handles these issues by combining two layers of planners, a discrete and a continuous tree planner [184] . The deterministic layer defines where the SBP planner should start planning and changes the search area if the SBP is deemed stuck.

Defining a metric that evaluates the true cost between two states is another challenging problem in kinodynamic planning. Poor metric selection leads to ineffective planning. Euclidian for instance will identify a state as suitable candidate for extension. However, extension from this state maybe redundant, as it does not expand the search, or may constantly lead to collision. Often a trajectory is generated in such a way to optimize a cost function [60] . Similar selection strategies to the ones proposed in path planning to decrease reliance on metrics have been used in motion planning, such as expansiveness [182] , state space coverage [110] , [163] , [184] and accounting for previous success of expansion [115] . The sensitivity of RRT to metrics is more problematic in differentially constrained kinodynamic planning, as extending procedures are computationally extensive. For some systems it is possible to formulate a pseudo-metric estimate for the true cost by linearization of the system dynamics and quadratization of the cost [185] .

Extending the tree requires integrating the equations of motions to obtain the desired trajectory. The reliance on metrics means that several extensions are wasted, as they will not contribute to find a solution. Reachability Guided RRT (RG-RRT) evaluates a reachable set for any node in the tree [186] , as shown in Fig. 17(a) and (b) . RG-RRT is based on the observation that expansion of the tree is more expensive that sampling for differentially constrained systems. A node is added to the tree, if it's closer to the nearest reachable node than to the nearest node in the tree, as shown in as shown in Fig. 17(c) and (d) . Environmentally Guided RRT (EG-RRT) [123] combines two efficient strategies of RG-RRT [186] , of adding reachable nodes, and RC-RRT [115] , of considering failure and success rate of a node prior to selecting it.
Fig. 17. Illustrating the RG-RRT extension procedure (a) Select a random node and find the nearest node in the tree (b) Compute the reachability of the nearest node, shown as a grey shaded arc (c) Find the nearest reachable node to the random node, shown as a red node. Compare the distance between the nearest node and the nearest reachable node (red) (d) Extension will only be executed if the reachable node is closer, it is then added to the tree.

Show All

Kinodynamic planning has been limited to simulation based planning applications. Planning time can reach several minutes in some simulation scenarios [60] . Real time kinodynamic planning in state space require exponential planning time [137] , [187] . Initial attempts to apply kinodynamic planning in real life situations produced inaccurate results and resorted to a decoupled planning hierarchy where dynamics are handled by another module in a step that followed path planning [75] . Bruce and Veloso [188] reported that decoupling path planning, using execution extended RRT (ERRT) [72] , and motion control, produced more accurate and reliable results, especially when fast computations are needed. Recently, successful implementations of kinodynamic SBP have been achieved by limiting the planning dimensions and planning in the task-space [76] , [189] and using visual information for localization [190] . Similarly, RG-RRT implemented in task space with the use of motion primitives, fulfilled the task of real-time kinodynamic motion planning [191] .

A promising approach is adopted by S-RRT. It encodes the constraints of an underactuated vehicle in the characteristics of a Bezier curve used for local planning [104] . Kinodynamic trajectory generation using B-spline [149] and Bezier curves [192] is widely studied and can be utilized by SBP to generate effective kinodynamic planners. The local modification support was exploited by generating a feasible path and then subsequent local adjustments are performed to ensure dynamic feasibility [193] . The main advantage, of using splines, is that kinodynamic planning is limited to a lower dimensional space, a notion similar to maneuver-based planning proposed by [137] , thus planning can be executed in real time scenarios. Subsequently, B-spline interpolation was used to generate smooth trajectories for an RRT planner in a dynamic driving scenario [194] .
SECTION V.
Optimal SBP

The ability of SBP to provide valid solutions for constrained high dimensional problems within a reasonable timeframe is advantageous. Despite the fact that the hit-or-miss sampling approach is the core of the planner's effective strategy, it leads to the inclusion of many redundant maneuvers in the final path. SBP generate highly suboptimal solutions and they are highly sensitive to their implementation details, as shown experimentally in Section III-J .

LaValle and Kuffner [60] proposed modification of the termination condition in a way such that the SBP keeps running to iteratively converge the path cost. The solution convergence remained an unanswered problem, until it was proven that given infinite runtime RRT will not find an optimal solution [195] . Numerous variants, such as k -RRT, Anytime RRT, and post processing methods have been proposed to remedy the poor solutions returned by RRT. Despite their effectiveness they provide no theoretical guarantees for reaching an optimal solution.
A. {\rm RRT}^{\ast}

A recent development in SBP was set forth by Karaman and Frazzoli [196] . A family of optimal sampling based planners, {\rm RRT}^{\ast} 2 , {\rm PRM}^{\ast} and {\rm RRG}^{\ast} , were presented which guaranteed asymptotic optimality. These algorithms operate analogously to any common SBP except in two procedures. Performing nearest neighbor search and adding a node to the existing graph or tree. The two different procedures are named “Near vertices” and “Rewire”. Near vertices returns a number of nearest nodes similar to k -RRT [121] . In the case of {\rm RRT}^{\ast} , the nodes are returned, if they are within a ball of radius, k . This ball radius is a function of the number of nodes in the tree, n , and is defined by (4) , where \gamma is a parameter based on the environment characteristics and d is the C-space dimension [196] . k=\thinspace\gamma\thinspace\left({{\log\left(n\right)}\over{\left(n\right)}}\right)^{^{\scriptstyle 1}\!/\!_{\scriptstyle d}}\eqno{\hbox{(4)}}
View Source Right-click on figure for MathML and additional features. k=\thinspace\gamma\thinspace\left({{\log\left(n\right)}\over{\left(n\right)}}\right)^{^{\scriptstyle 1}\!/\!_{\scriptstyle d}}\eqno{\hbox{(4)}}

The nearest vertices are returned within a ball of radius k and stored in a set Q_{near} , as shown in Fig. 19(b) . The selected node, q_{new} , is connected to the node, q_{parent} , which provides a shorter router to the start configuration, as shown in Fig. 19(c) . All remaining nodes in Q_{near} are rewired to q_{new} as their parent, if it provides a shorter route to the start configuration, as shown in Fig. 19(d) . Hence every new node, q_{new} , will endeavor to improve all local connections within a predefined radius. An {\rm RRT}^{\ast} tree is shown in Fig. 18 after 6,000 iterations.
Fig. 18. {\rm RRT}^{\ast} tree after 6,000 iterations and 4,700 explored nodes.

Show All
Fig. 19. Illustrating the operation of {\rm RRT}^{\ast} (a) A new random node, {\rm q}_{new} , is selected, shown as orange node (b) Near vertices procedure returns a set, {\rm Q}_{near} , of all nodes, shown as red nodes, within a certain distance of the new node (circular area shaded in grey) (c) {\rm q}_{new} is connected to the node, {\rm q}_{parent} , that has the shortest route to the start (shown as orange path) (d) The remaining nodes in {\rm Q}_{near} are rewired through {\rm q}_{new} , if it provides a shorter path towards the start.

Show All

B. Requirements for {\rm RRT}^{\ast} to Generate Optimal Solutions

The realization of an optimal solution dictates some criteria that must be met. Primarily, optimality is defined with respect to a specific metric and the planner is constantly attempting to enhance the value of that metric. As previously discussed SBP, defining a true metric that signifies the cost between two configurations has proved to be a non-trivial task.

In addition to defining a metric, a steering function must be defined in the planner. {\rm RRT}^{\ast} [196] relies on the existence of a steering function that drives the robot through an optimal trajectory between two specified states or configurations. A likewise assumed guidance loop is the core of the work by Frazzoli, et al. [137] . Such steering function does not exist for several robotic systems. Optimal control is still a subject pursued by researchers even for simple path planning purposes [197] . An alternative to defining a steering function is storing optimal trajectories and picking a suitable trajectory when connecting two configurations, a particularly useful strategy for redundant articulated manipulators [74] , or differentially constrained dynamic systems [170] .

Even so for a holonomic system, whose optimal path is the straight line joining two configurations, the planner still guarantees only asymptotic optimality. This property indicates that the planner will always reach an optimal solution when the runtime approaches infinite. The initial solutions will be suboptimal, similar to RRT, and it will continue to converge towards optimality as the planner is running.
C. Convergence Towards an Optimal Solution

{\rm RRT}^{\ast} is guaranteed to asymptotically converge towards an optimal solution under certain assumptions. The convergence rate, however, has been shown to be rather slow. In fact, certain post processing approaches outperform {\rm RRT}^{\ast} [151] . The desirable properties of {\rm RRT}^{\ast} in real-time applications are overshadowed by the planning time wasted to reach an optimal solution.

There are a number of methods that endeavor to speed up the convergence of {\rm RRT}^{\ast} . A bidirectional {\rm RRT}^{\ast} that only joins promising nodes have been shown to improve the performance in high dimensional spaces [198] . The node selection strategy is similar to the one employed by Anytime RRT [138] .

{\rm RRT}^{\ast} -smart removes redundant nodes every planning iteration and biases the sampling towards the remaining nodes [199] . A naive algorithm is implemented to trim the tree as it checks subsequent nodes. A possible improvement is the use path refinement algorithm presented in [140] . {\rm RRT}^{\ast} -smart resembles the anytime meta-algorithm presented in [151] , as it alternates between post processing and expanding the tree.

A potential field function is coupled with the {\rm RRT}^{\ast} algorithm to guide the algorithm towards the optimal solution [200] . It attempts to strike a balance between exploitation and exploration as suggested by [102] . However, the presented approach does not adaptively change the behavior and the parameters are predetermined prior to planning.

NN search is identified as a bottleneck in SBP. {\rm RRT}^{\ast} proceeds to compute a set of near vertices, in each iteration, that lie within a ball of known radius. The convergence rate is accelerated by approximating costs between nodes, when computing nearest vertices for a certain node [201] .

It can be observed that a large fraction of the {\rm RRT}^{\ast} planning time is spent extending the tree into areas that are not necessarily promising, adding and rewiring redundant nodes. This is illustrated in Fig. 18 . All areas are heavily sampled even though most of those nodes will not contribute to the path optimality.

To overcome the slow convergence rate an Anytime framework for {\rm RRT}^{\ast} was implemented on an autonomous forklift [202] . Anytime {\rm RRT}^{\ast} finds a suboptimal path and converges towards optimality within the given planning time. This anytime implementation is suitable for real-time applications, as the planner must return a path whenever it is called i.e., existence of a path in real applications is far more vital than the path optimality.

Node selection criteria were impose to limit the addition of nodes whose shortest path is large than a certain bound [198] , [203] . Modifying the rewiring procedure to include the nearest nodes in the shortest path increases the convergence rate [203] . A predictive model is used to estimate the probability of a node being on the optimal path and is used to guide the path towards optimal regions [105] . {\rm RRT}^{\#} 3 replaces the local rewiring procedure by globally replanning the path [204] . Efficiently updating all the node costs, and categorizing nodes such that only promising nodes will be expanded, is the basis for this planner. In this context, promising nodes are those, which can constitute an optimal path. It is shown that {\rm RRT}^{\#} converges faster towards an optimal solution as it guarantees an optimal solution is returned, given all the present node costs.
D. Optimal Kinodynamic Planning

The development of optimal planning and {\rm RRT}^{\ast} algorithm has renewed interest in SBP. As an example, {\rm RRT}^{\ast} has been extended for vector fields, not just uniform environments [205] . It also led to the emergence of research in optimal kinodynamic planning Karaman and Frazzoli [196] argued that {\rm RRT}^{\ast} is analogous to RRT, thus is a generalized planner that can be applied in any planning context. Conceptually this statement is accurate, however, in a practical sense it is a perplexing task to apply optimal SBP in kinodynamic, real-time or, dynamic scenarios.

At this point, there are a handful of optimal kinodynamic planning planners. They are limited to systems with linear dynamics [206] , [207] , whose cost functions are well known and can be computed between any two states.

Optimal kinodynamic SBP for differentially constrained, high dimensional systems was achieved [208] by limited the planning to the task space [189] and using reachability guided trees [186] . Planning with task space is a general approach that can be adapted to planning relative to the end-effector of a manipulator or a center of mass of a robot. A more challenging problem, non-holonomic kinodynamic SBP, was resolved similarly [209] . Nonetheless, these planners are still restricted to simulation-based applications due to their high computational requirements.
E. Experiments and Results

A preliminary version of this analysis was presented in [203] . The aim of these experiments is twofold,

    Highlight the observation that {\rm RRT}^{\ast} , much like RRT, is sensitive to its implementation parameters which must be carefully chosen,

    Demonstrate the benefits of applying node selection criteria on {\rm RRT}^{\ast} .

1. Parameter Sensitivity

As expected, the implementation of {\rm RRT}^{\ast} is of grave importance to its performance. The results of modifying the step size can be seen in Fig. 20 . Similar to RRT, decreasing the step size of the planner extension improve the overall path cost. To eliminate redundant nodes that will not contribute to the path convergence, a minimum step size has been specified.
Fig. 20. Effect of step size on the path cost and convergence rate.

Show All

Goal biasing is employed to speed up the performance of RRT and guide it towards finding a solution. It has successfully done so for {\rm RRT}^{\ast} as well, as can be seen in Fig. 21 . The planner was unable to find a solution before 1,500 iterations. However with biasing it was successful before reaching 500 iterations. Additionally, biasing improves the cost of the initial solution found by {\rm RRT}^{\ast} and it decreases its convergence. Biasing is recommended prior to find a quick solution and then it has to be terminated due to its negative effect on the convergence rate. Biasing the {\rm RRT}^{\ast} can be an alternative to the recommended use of a traditional RRT to find an initial solution in [208] and [209] .
Fig. 21. Effect of goal biasing on path cost and convergence rate.

Show All

2. Node Selection

The node selection strategy, exploited by Anytime RRT to bound sampling merely to promising nodes has been proposed as a performance enhancement for {\rm RRT}^{\ast} . The lower bound is defined by, \varepsilon , where the lower bound equals (1\hbox{-}\varepsilon) times the current path cost. It is generally taken between 5%–10% and indicates the improvement in the path cost. This leads to generating sparse trees, as shown in Table IV . The effect of node selection is illustrated by comparing Figs. 22 and 18 . The planner generates the almost identical solutions with far less nodes explored. Aside from merely adding promising nodes that will lead to better solutions, the work by [186] argued for the effectiveness of maintaining sparse trees especially for non-holonomic kinodynamic planning.
Fig. 22. A sparse {\rm RRT}^{\ast} tree generated, after 6,000 iterations. Node selection has been employed with \varepsilon=5\% .

Show All
TABLE IV Average Number of Nodes in the Tree After 10,000 Iterations

SECTION VI.
Dynamic and Uncertain Environments

A common assumption in planning algorithms is that the environment is well defined such that the robot's location relative to obstacles and goal positioned are all known. This statement holds true in static environments where industrial manipulators are used or in CAD applications in which the environment is user-defined.

Autonomous vehicles and robots operate in dynamic changing environments with other uncontrollable, in some cases lethargic, agents that cannot be modeled or estimated. In general, the assumption of a well-defined static environment does not hold. There is an uncertainty that arises as a result of sensing errors and noise and the imprecision of actuators and other uncontrollable factors such as wheel slip. Consequently, the exact location of the robot (localization) and the description of the environment (mapping) is not a trivial task. In this section we present planners that tackle one of the two current issues in robotic motion planning, replanning in dynamic and/or uncertain environments. Early on, it was assumed that, since SBP were able to generate relatively rapid solutions, it would suffice to discard current solutions and replan when deviations were identified in the environment.

Regenerating a single-query search tree may be a valid approach, given the appropriate parameters and heuristics in certain instances. In the case for multi-query planners, such as PRM, that invest most of their resources in connecting the environment, regenerating the entire roadmap is not feasible.

An outline for using PRM in dynamic environments involved generating a roadmap while assuming an obstacle free space [210] . The data structure of PRM was made more efficient in order to accommodate changes in the environment and consequently in the roadmap. A similar approach attempts to use single query planner to connect PRM nodes in dynamic environments and encodes obstacle positions in local connections [211] . van den Berg, et al. [212] proposed a generalized PRM method in surroundings where obstacle movements are restricted to local sectors. PDR maintains a roadmap whose paths can be deformed, thus numerous paths can be obtained between two configurations [152] . PDR has been proposed for dynamic path planning by the authors, but is yet to be evaluated in those scenarios.

RRF (Reconfigurable Random Forests) provided a framework to managing either roadmap, or tree planners, under changing settings [213] . Once changes in the environment are detected, nodes in C_{obs} and colliding paths are discarded. This leads to the emergence of separated roadmaps, or forests. The planner then prunes the forests and attempts reconnects paths. Lazy reconfiguration forest (LRF) used the same framework but proceeded to perform collision checking only for the paths involved for planning [214] .

ERRT is often mentioned as the first algorithm to be implemented in a real-time dynamic situation [72] , [188] . ERRT maintains a single tree. If that tree is collides with the obstacle space it is discarded and another one is rebuilt. ERRT maintains the location of the discarded configurations, waypoint cache, and biasing the search slightly towards those node locations. It is motivated by the assumption that, if the algorithm is updated at a high frequency, a small percentage of the original tree needs to be modified.

Dynamic RRT (DRRT) builds on the idea that it is more efficient to repair the existing tree, than to, rebuild an entirely new one [215] . Unlike ERRT, only the colliding configurations and their child nodes are discarded in an efficient manner. DRRT borrows the concept of slightly biasing the search towards invalidated areas from ERRT. Nonetheless, it outperforms ERRT by repairing the tree. {\rm AD}^{\ast} was coupled with PRM to provide an efficient framework for replanning [216] . In this approach the motion of other agents was extrapolated, the planner failed to generate solutions when worst-case scenario of a growing disc is considered. Growing discs assumption creates a narrow free regions in the C-space. A scenario in which SBP perform poorly. Different types of dynamic obstacles are shown in Fig. 23 and worst-case growing discs are shown on the far right. Flexible-PRM (F-PRM) similarly used backward {\rm A}^{\ast} , from the static goal towards the moving robot, in dynamic environments [124] .
Fig. 23. Dynamic obstacles different trajectory assumptions with respect to time.

Show All

Multipartite RRT (MP-RRT) [217] combines the strategy of biasing the search towards discarded configurations, similar to ERRT. It also rebuilds the tree, like DRRT, and maintains separate detached forests, like RRF. MP-RRT distinguishes itself from RRF by only maintaining forests for a limited time so as not to waste computational time in unpromising areas.

In the course of navigating a dynamic environment, it is possible that a plan is deemed unsafe, such that it will collide with a moving obstacle. The selected planning framework must generate an alternate feasible route. The concept \tau -safety ensures that at any stage during path execution there is enough time, \tau , for the planner to compute an alternate path while following the unsafe path [137] . Greedy, Incremental, Path-Directed (GRIP) [180] is a safe, replanning framework that guarantees safety by considering Inevitable collisions states (ICS) during replanning and only considering safety-guarantees to reduce planning time. GRIP employs a similar rebuilding strategy to ERRT and DRRT, node selection is based on coverage, as employed by PDST, and an efficient safe framework based on \tau -safety.

Considering stochastic sensing and dynamic conditions is a relatively novel topic in motion planning. Particle RRT [218] and RRT-SLAM [219] model uncertainty using particle filters, which is then considered in the planning. Similar uncertainty considerations are added to {\rm RRT}^{\ast} framework by Rapidly-exploring Random Belief Trees (RRBT) [220] , [221] . To guarantee the accuracy of planned path, uncertainty is encoded in path costs to guide the robot to useful areas and thus ensuring the robot will not be lost without information. Gaussian processes were also used to predict the motion of other vehicles in the environment [222] . The planner estimates the probability of collision and returns a path that is probabilistically collision free. This approach may serve as an alternative to worst-case growing discs model, however, the objects in the environment must be analyzed prior to planning. EG-RRT [123] evaluates the collision probability of each state in RRT tree based on the modeled uncertainty of dynamics and sensing and creates a cost map of the environment.

Generalized RRT and PRM have been proposed in which the robot dynamics and sensors are stochastically modeled and the local planner estimates the probability of transition success and will not proceed if the probability exceeds a threshold [223] . Unlike traditional planners, generalized planners terminate only when a solution with a high probability of success is found. Feedback-based Information Roadmap (FIRM) also relies on feedback from local planners to reduce the uncertainty propagation between states [224] . The question of path planning amongst moving uncontrollable obstacles, under stochastic dynamic and sensing conditions represents a next step in robotic research. The amalgamation of uncertainty, kinodynamic, and optimal planning in active environments is bound to push robots into new frontiers. Planning strategies in this section are categorized into dynamic, uncertain and safe in Table V .
TABLE V Summary of Replanning Strategies

SECTION VII.
Conclusion

Sampling-based planning has established its success in solving the intricate problem of robot motion planning. Numerous methods have been proposed to improve the efficiency of planning and the quality of plans. They have provided significant advantages in a wide field of real-life and simulation based scenarios. Subsequently, there exists an immense body of work on the topic of SBP.

This brings into the light the gap that existed in classical motion planning algorithms to illustrate the significance of SBP and the motivation behind their inception. We then continue by listing the main algorithms that all state of the art algorithms are built upon. The growing body of work is surveyed in this paper. Several experiments are executed to shed a light on some of the current issues, investigated by researchers, and highlight the implementation details that are often not discussed when planners and algorithms are proposed.

An emphasis is placed on the contemporary research problems. Motion planning has moved away from path planning in static environments for simple robots into more challenging arenas. Methods that address real-time kinodynamic planning, optimal planning, planning under uncertainty and in dynamic environments are given particular attention. The continued expansion of robot motion planning boundaries promises more realistic methods that can be utilized in real-life scenarios.

Authors
Figures
References
Citations
Keywords
Metrics
Media
Footnotes
More Like This
Dynamic target tracking using a four wheeled mobile robot with optimal path planning technique

2017 International Conference on Circuit ,Power and Computing Technologies (ICCPCT)

Published: 2017
A Simple Adaptive Control Approach for Trajectory Tracking of Electrically Driven Nonholonomic Mobile Robots

IEEE Transactions on Control Systems Technology

Published: 2010
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
