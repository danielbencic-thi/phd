IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathZoom.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Journals & Magazines > IEEE Access > Volume: 9
Improved Bat Algorithm for UAV Path Planning in Three-Dimensional Space
Publisher: IEEE
Cite This
PDF
Xianjin Zhou ; Fei Gao ; Xi Fang ; Zehong Lan
All Authors
12
Paper
Citations
1423
Full
Text Views
Open Access
Comment(s)

    Alerts

Under a Creative Commons License
Abstract
Document Sections

    I.
    Introduction
    II.
    UAV Mathematical Model
    III.
    Classical Bat Algorithm
    IV.
    Improved Bat Algorithm (IBA)
    V.
    Result

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Abstract:
This paper describes the flight path planning for unmanned aerial vehicles (UAVs) based on the advanced swarm optimization algorithm of the bat algorithm (BA) in a static environment. The main purpose of this work is that the UAVs can obtain an accident-free, shorter, and safer flight path between the starting point and the endpoint in the complex three-dimensional battlefield environment. Based on the characteristics of the standard BA and the artificial bee colony algorithm (ABC), a new modification of the BA algorithm is proposed in this work, namely, the improved bat algorithm integrated into the ABC algorithm (IBA). The IBA mainly uses ABC to modify the BA and solves the problem of poor local search ability of the BA. This article demonstrates the convergence of the IBA and performs simulations in MATLAB environment to verify its effectiveness. The simulations showed that the time required for the IBA to obtain the optimum solution is approximately 50% lower than the BA, and that the quality of the optimum solution is about 14% higher than the ABC. Furthermore, by comparing with other traditional and improved swarm intelligent path planning algorithms, the IBA can plan a faster, shorter, safer, accident-free flight path for UAVs. Finally, this article proves that IBA also has good performance in optimizing functions and has broad application potential.
Published in: IEEE Access ( Volume: 9 )
Page(s): 20100 - 20116
Date of Publication: 25 January 2021
Electronic ISSN: 2169-3536
INSPEC Accession Number: 20323875
DOI: 10.1109/ACCESS.2021.3054179
Publisher: IEEE
Funding Agency:
Histogram of the average path cost and average iteration time of different algorithms.
Histogram of the average path cost and average iteration time of different algorithms.
Hide Full Abstract
SECTION I.
Introduction

As life and military needs continue to grow, unmanned aerial vehicles (UAVs) play an increasingly important role in many areas. Compared with manned aircraft, UAVs have the advantages of high optical resolution, short warning time, low cost, and high maneuverability [1] . Therefore, UAVs typically perform dangerous, boring, complex tasks in a variety of areas [2] , [3] . In the history of UAVs development, path planning has been thought of as a key factor in the process of performing tasks. A path with strong security, good feasibility, high computational efficiency, and low cost can greatly improve the efficiency of completing the UAVs missions [4] .

In fact, planning the flight path of UAVs usually requires optimization algorithms to optimize the flight path. Optimization methods generally fall in deterministic mathematical programming methods and stochastic metaheuristic algorithms [5] . However, deterministic methods of mathematical programming are prone to stagnation in non-linear space research, which requires high preparation for mathematics [6] . Over the past years, stochastic metaheuristic algorithms have been increasingly used to solve UAV path planning problems due to their flexibility, simplicity, and ability to avoid local optimization. In general, stochastic metaheuristic algorithms may be classified into evolutionary, physics-based, and swarm intelligence (SI) [7] . Evolutionary algorithms generally generate better new populations through combinations and mutations between earlier generations of individuals, such as Genetic Algorithm (GA) [8] , Differential Evolution Algorithm (DE) [9] , and Biogeography-based Optimization (BBO) [10] , et al. Physics-based methods are to use rules extracted from different physical phenomena in nature in search of objectives [6] . Some well-known algorithms are the Simulated Annealing Algorithm (SA) [11] , Gravity Cable Algorithm (GSA) [12] , Central Force Optimization Algorithm (CFO) [13] . SI algorithms usually mimic and foraging activities of animals in nature. It can save the solution obtained so far, uses fewer operators, and is easy to implement than the evolutionary algorithm [7] . Therefore, SI is more widely used in UAV path planning problems. Popular SI includes Artificial Bee Colony Algorithm (ABC) [14] , Particle Swarm Optimization Algorithm (PSO) [15] , Ant Colony Algorithm (ACO) [16] , [18] , Bat Algorithm (BA) [19] , [20] , et al .

However, stochastic metaheuristic algorithms also have unavoidable disadvantages. David H.Wolpert and William G.Macready [21] proposed no free lunch (NFL) theorems in 1997. They logically proved that no metaheuristic algorithm could best solve all optimization problems. In other words, an intelligent algorithm can obtain the desired result in a particular optimization problem, but it misbehaves in other problems. Therefore, people are trying to integrate different intelligent algorithms into UAV path planning to find better solutions. In terms of the theoretical design of the controller, in [22] , a 6-degree of freedom nonlinear PID controller (NLPID), which combines the GA, is designed to meet the system stability and tracking requirements of a four-wing UAV. The improved active disturbance rejection control (IADRC) proposed in [23] , [24] can stabilize and suppress external interference and system uncertainty, and minimize the control energy, adjustment time, and steady-state error. The decentralized control scheme based on IADRC also provides good performance [25] . In addition, other new controllers have been designed recently, and can better solve the problems in the corresponding fields, such as a consistent control system for three quadrotor intelligent bodies [26] , a new classic adaptive controller based on a synergetic theory [27] , a model-free active input-output feedback linearization technique based on IADRC [28] . On the other hand, a large number of papers show that improved swarm intelligence algorithms can also better solve the flight path planning problem. Cristian Ramirez Atencia proposes a new weighted random generator that reduces the convergence speed of the multi-objective evolutionary algorithm (MOEA) [9] . The algorithm based on disturbed fluid and trajectory proposed by Yao Peng can effectively avoid obstacles to a certain extent [4] . Moreover, there is a large volume of published studies showing that improved intelligent algorithms can succeed in route planning. For instance, an aging-based ant colony optimization algorithm (ABACO) is proposed in [29] , which considers the aging of the individual and releases different pheromones according to different ages. [30] conducts further research on [29] and solves the path planning problem of a dynamic environment. Despite there are many types of intelligent algorithms in the planning of UAVs, they suffer from different main drawbacks. For example, in the process of planning the flight path, the lack of mutation mechanism of standard BA is easy to fall into local optimum, resulting in the population losing subsequent evolutionary capacity.

In order to solve the problem of poor local search ability of BA, which was first proposed by Xin-She Yang in 2010 [31] , there has been an increasing amount of literature on improved BA in recent years. People proposed a new directional bat algorithm, which improved the classic bat algorithm in four ways and greatly improved the performance of BA in [32] . Amir H. Gandomi and Xin-She Yang tried to combine the BA algorithm with chaos, which uses four different variations to replace the invariant parameters in the BA, and is verified by thirteen different chaotic maps [33] . Trong-The Nguyen proposed the bat-bee colony algorithm (BA-ABC) [34] . The algorithm mainly iterates the results of the BA algorithm and the ABC algorithm, then replaces the better results of the both parties with the poor results of the other to realize the evolution of the group. In [35] , a hybrid particle swarm optimization-improved frequency bat algorithm (PSO-MFB) and obstacle detection and avoidance algorithm (ODA) are proposed, which effectively solves the path planning problem in a dynamic environment. After that, [36] further improved the algorithm of [35] and proposed a conflict-free shortest path planning algorithm. Furthermore, in the field of path planning, in order to increase the diversity of the population, Gaige Wang applied the bat algorithm with a mutation to UAVs path planning [18] . N.Lin’s studies have reported that the enhanced artificial potential field method combined with the chaotic bat algorithm may enhance the robustness of the algorithm [37] .

Although the standard BA can provide a better quality solution, it takes a lot of time. However, the ABC can quickly obtain the solution, and the quality of the solution is poor. The main contribution of this paper is to propose a new algorithm to solve the problem of UAVs flight path planning, which mainly combines the characteristics of BA and ABC to achieve the purpose of improving the local search ability and obtaining a crash-free, safer and shorter flight path. The IBA algorithm proposed in this article mainly contains two modules. The first module involves the generation of points, which is implemented through the BA. In order to improve the local search ability, the mutation factor is taken into consideration. Then, ABC is used to modify the results of the first module, so as to further enhance the local search ability of the algorithm.

The overall structure of the study takes the form of six chapters, including this introductory chapter. Section 2 introduces the mathematical model of 3D space in UVA path planning. In section 3 , the principle of the classic BA is described. Subsequently, BA with mutation added ABC for UAV path planning is presented and its convergence is proven in detail in section 4 . The fifth chapter tests 9 parameters that appear in the IBA algorithm, compares IBA with other swarm intelligence algorithms, and uses IBA to solve UAVs path planning and benchmark function optimization problems. The final section gives a summary and identifies areas for further research.
SECTION II.
UAV Mathematical Model

In the history of the development of UAVs, path planning has been thought of as a key factor in the process of performing tasks. This chapter mainly describes the comprehensive cost model of UAVs under different threats and the selection method of random path nodes.
A. Path Preprocessing

To accelerate the convergence of the algorithm, the initial UAVs path planning is shown in Fig. 1 . It is assumed that UAV needs to fly from the starting point S(x_{0},y_{0},z_{0}) to the ending point E(x_{E},y_{E},z_{E}) . There are some threat areas during the flight. We convert the original start and end points to new coordinates in the x-axis direction by using Eq. 1 , where (x,y,z) represents the original coordinates, (x',y',z') is the rotated coordinates, \theta is the angles between line SE and XOY plane, and \varphi is the angle between the projection of SE on the XOY plane and the X -axis. \begin{align*} tan\theta=&\frac {|z_{E}-Z_{0}|}{\sqrt {(x_{E}-x_{0})^{2}+(y_{E}-y_{0})^{2}}} \\ \left ({\begin{matrix} \displaystyle x \\ \displaystyle y \\ \displaystyle z \end{matrix}}\right)=&\left ({\begin{matrix} \displaystyle cos\varphi cos\theta & -sin\varphi & -cos\varphi sin\theta \\ \displaystyle sin\varphi cos\theta & cos\varphi & -sin\varphi sin\theta \\ \displaystyle sin\theta & 0 & cos\theta \end{matrix}}\right) \left ({\begin{matrix} \displaystyle x' \\ \displaystyle y'\\ \displaystyle z' \end{matrix}}\right) \\&+\, \left ({\begin{matrix} \displaystyle x_{0} \\ \displaystyle y_{0} \\ \displaystyle z_{0} \end{matrix}}\right)\tag{1}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} tan\theta=&\frac {|z_{E}-Z_{0}|}{\sqrt {(x_{E}-x_{0})^{2}+(y_{E}-y_{0})^{2}}} \\ \left ({\begin{matrix} \displaystyle x \\ \displaystyle y \\ \displaystyle z \end{matrix}}\right)=&\left ({\begin{matrix} \displaystyle cos\varphi cos\theta & -sin\varphi & -cos\varphi sin\theta \\ \displaystyle sin\varphi cos\theta & cos\varphi & -sin\varphi sin\theta \\ \displaystyle sin\theta & 0 & cos\theta \end{matrix}}\right) \left ({\begin{matrix} \displaystyle x' \\ \displaystyle y'\\ \displaystyle z' \end{matrix}}\right) \\&+\, \left ({\begin{matrix} \displaystyle x_{0} \\ \displaystyle y_{0} \\ \displaystyle z_{0} \end{matrix}}\right)\tag{1}\end{align*}

FIGURE 1. - 3D battlefield environment model.
FIGURE 1.

3D battlefield environment model.

Show All

Then, we divide the rotated line segment SE into (D+1) segments (include S and E ) and passing each node except S and E to make planes L_{1}, L_{2}, \ldots, L_{D} perpendicular to the straight line SE [18] , [38] , [39] . After that, randomly select a point on each plane. Obviously, we can get D points and connect them with S node and E node. So that the three-dimensional path planning problem can be turned into a D-dimensional function optimization problem.
B. Comprehensive Cost Model

The battlefield environment is complex and changeable with various threats such as radar, climate, missiles, anti-aircraft guns, et al . These threats will affect the mission completion of UAV’s missions. In addition, UAV maneuverability is also a non-negligible poppy that affects path selection.

The scope of the threat on the battlefield is typically dependent on the combination of different cylindrical or conical geometry [1] . Assuming that the ranges of various threats are spherical areas with different radius. Eq. 2 is the probability of radar threat detecting UAVs [39] . \begin{align*} P(d_{R})=\begin{cases} \displaystyle 0, & d_{R}>d_{R_{max}} \\ \displaystyle \frac {1}{d_{R}^{4}}, & d_{R_{min}}\leq d_{R}\leq d_{R_{max}} \\ \displaystyle 1, & d_{R}< d_{R_{min}}. \end{cases}\tag{2}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} P(d_{R})=\begin{cases} \displaystyle 0, & d_{R}>d_{R_{max}} \\ \displaystyle \frac {1}{d_{R}^{4}}, & d_{R_{min}}\leq d_{R}\leq d_{R_{max}} \\ \displaystyle 1, & d_{R}< d_{R_{min}}. \end{cases}\tag{2}\end{align*} where d_{R_{min}}, d_{R_{max}} are the minimum and maximum range of the radar threat. d_{R} is the distance between UAV and radar source.

In order to facilitate the experimental simulation, the climatic threats, anti-aircraft threats, missile threats and the probability of destroying the UAV are as follows: \begin{align*} P_{i}(d_{i})=\begin{cases} \displaystyle 0, & d_{i}>d_{i_{max}} \\ \displaystyle \frac {1}{d_{i}}, & d_{i_{min}}\leq d_{i}\leq d_{i_{max}} \\ \displaystyle 1, & d_{R}< d_{i_{min}}. \end{cases}\tag{3}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} P_{i}(d_{i})=\begin{cases} \displaystyle 0, & d_{i}>d_{i_{max}} \\ \displaystyle \frac {1}{d_{i}}, & d_{i_{min}}\leq d_{i}\leq d_{i_{max}} \\ \displaystyle 1, & d_{R}< d_{i_{min}}. \end{cases}\tag{3}\end{align*} where P_{A'}(d_{A'}) , P_{M}(d_{M}) , P_{C}(d_{C}) are the threat probability of antiaircraft guns, missiles, and atmosphere to UAV. d_{i} is the distance from the UAV to the threat source. d_{i_{min}} , d_{i_{max}} are the minimum and maximum range of the threat.

Apart from these threats, UAV also threatens to crash when flying over mountains. Supposing that the terrain model is composed of several mountains with different center positions, and the mountains are approximately replaced by cones. Eq. 4 is the expression of mountain height [1] . \begin{equation*} z_{i}(x,y)=h_{i}e^{-\frac {(x-a_{i})^{2}}{10}-\frac {(y-b_{i})^{2}}{10}}\tag{4}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} z_{i}(x,y)=h_{i}e^{-\frac {(x-a_{i})^{2}}{10}-\frac {(y-b_{i})^{2}}{10}}\tag{4}\end{equation*} h_{i} is the height of the mountain and (a_{i}, b_{i}) is the center of the mountain. If the flying height is lower than the mountain height, the probability of UAV (P_{T}(d_{T})) being destroyed is 1. Conversely, P_{T}(d_{T}) is 0.

According to the maneuverability of the UAVs, this paper considers the constraints of fuel consumption and maximum climb angle. Fuel consumption is usually measured by flight distance. Assume there are n segments in the path and each segment is l_{i} . l_{max} is the maximum path length. Therefore, the path constraints are: \begin{equation*} \sum ^{n}_{i=1}l_{i}\leq l_{max}\tag{5}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} \sum ^{n}_{i=1}l_{i}\leq l_{max}\tag{5}\end{equation*}

This article primarily simulates the path planning of UAVs in 3D space. In order to better integrate the real situation, we consider that the maneuvering performance can affect the maximum angle of climb and altitude limitation. Therefore, this paper assumes the maximum climb angle is 45° and the maximum height of the flight is 6 kilometers. When the UAV’s path is beyond the maximum climb angle, the probability of the UAV crash P_{B}=1 . On the contrary, P_{B}=0 . Similarly, When the UAV’s flight altitude exceeds the maximum flight altitude limit, the probability of the UAV crash P_{H}=1 . On the contrary, P_{B}=0 . The comprehensive track cost can be measured by using Eq. 6 . \begin{equation*} minW=min\int _{0}^{L}\sum \delta w(s)ds\tag{6}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} minW=min\int _{0}^{L}\sum \delta w(s)ds\tag{6}\end{equation*} where \sum \delta w(s)=\delta _{O}w_{O}(s)+\,\delta _{R}w_{R}(s)+\,\delta _{M}w_{M}(s)+\,\delta _{C}w_{C}(s)+\,\delta _{A'}w_{A'}(s)+w_{B}(s)+w_{H}(s) . L is track path length. W is optimization objective function. w_{O}(s) , w_{R}(s) , w_{M}(s) , w_{A'}(s) , w_{C}(s) , w_{T}(s) , w_{H}(s) are the cost of path, radar threat, missile threat, anti-aircraft threat, climate threat, terrain threat, maximum climb angle and maximum height. \delta _{O} , \delta _{R} , \delta _{M} , \delta _{A'} , \delta _{C} are the weight of each threat cost and their sum is 1.

For simplicity, each path is divided into five segments on average and the threat cost is calculated at the end of each discrete segment (as shown in Fig. 2 ). At last, the average value of the discrete segments is assumed to be the threat cost of this segment. We can calculate the cost according to the following Eq. 7 . \begin{align*} w_{L_{i,j}}=&\frac {1}{5}\sum \nolimits _{k=1}^{5}w_{k,L_{i,j}} \\ w_{k,L_{i,j}}=&\delta _{R}P_{R}(d_{R})+\delta _{M}P_{M}(d_{M})+\delta _{A'}P_{A'}(d_{A'}) \\&+\,\delta _{C}P_{C}(d_{C})+P_{T}(d_{T})+P_{B}(d_{B})+P_{H}(d_{H})\tag{7}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} w_{L_{i,j}}=&\frac {1}{5}\sum \nolimits _{k=1}^{5}w_{k,L_{i,j}} \\ w_{k,L_{i,j}}=&\delta _{R}P_{R}(d_{R})+\delta _{M}P_{M}(d_{M})+\delta _{A'}P_{A'}(d_{A'}) \\&+\,\delta _{C}P_{C}(d_{C})+P_{T}(d_{T})+P_{B}(d_{B})+P_{H}(d_{H})\tag{7}\end{align*} where L_{i,j} represents the process of UAV flying from node i to node j . w_{k,L_{i,j}} is the threat cost of UAV at the k-th point of the sub-segment.

FIGURE 2. - Sub-path calculation method.
FIGURE 2.

Sub-path calculation method.

Show All

SECTION III.
Classical Bat Algorithm

The classic bat algorithm is a swarm intelligence algorithm. Its search strategy is inspired by the social behavior of bats and the use of echo in foraging and avoiding obstacles. Besides, the bat algorithm is a promising algorithm, which combines the advantages of PSO, GA, and harmony search algorithm to a certain extent [31] .

In nature, some bats not only use echolocation, but also use their vision and smell to find food and avoid obstacles. Even the loudness and frequency emitted by bats are constantly changing. For simplicity, we idealize some of the echo characteristics of the bat and follow the rules [18] .

    All bats only use echolocation to perceive distance, then find targets and avoid obstacles.

    Bats can automatically adjust the wavelength and frequency of their transmitted pulses while preying on prey. They fly randomly at position X_{i} with speed V_{i} , fixed frequency f_{min} , loudness A_{0} , and continuously adjust the pulse transmission frequency r\in [{0, 1}] depending on the proximity to the target.

    The bat loudness varies from the smallest constant value A_{min} to A_{0} .

This study set out to simulate three-dimensional space UAV flight. Thus, we use Eq. 8 to define the update rule for the i th bat’s speed V_{i}^{t} , frequency f_{i} and new solution X_{i}^{t} at time step t . \begin{align*} f_{i}=&f_{min}+(f_{max}-f_{min})\beta \\ V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i} \\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{t}\tag{8}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} f_{i}=&f_{min}+(f_{max}-f_{min})\beta \\ V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i} \\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{t}\tag{8}\end{align*} where \beta \in [{0,1}] is a random number. Here, X^{*} is the optimal solution from time step 1 to time step t-1 , and then X^{*} is only updated when all bats have determined their position in time step t . Generally speaking, the frequency of the ultrasonic waves emitted by each bat is different. Therefore, each bat was randomly assigned a frequency f_{i}\in [{0,100}] .

For the local search section, we generate a random number rand_{1}\in [{0,1}] . Once rand_{1}>r_{i} , the new solution X_{new} to replace the original solution X_{i}^{t} , which is obtained by randomly walking on the current optimal solution. \begin{equation*} X_{new}=X^{*}+\varepsilon A^{t}\tag{9}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{new}=X^{*}+\varepsilon A^{t}\tag{9}\end{equation*} where random number \varepsilon \in [-1,1] , while A^{t} is the average loudness of all bats at time step t .

Furthermore, we create another random number rand_{2}\in [{0,1}] . If rand_{2}< A_{i}^{t} and the fitness of the new solution f(X^{t}_{i}) is less than the fitness of the current optimal solution f(X^{*}) , A_{i}^{t+1} and r_{i}^{t+1} are updated on the basis of Eq. 10 . \begin{align*} A_{i}^{t+1}=&\alpha A_{i}^{t} \\ r_{i}^{t+1}=&r^{0}[1-exp(-\gamma t)]\tag{10}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} A_{i}^{t+1}=&\alpha A_{i}^{t} \\ r_{i}^{t+1}=&r^{0}[1-exp(-\gamma t)]\tag{10}\end{align*} where \alpha , \gamma , r^{0} are constants. Based on the above analysis, the main part of the classic bat algorithm is described in Algorithm 1 and in Fig. 3 .

FIGURE 3. - Flow chart of bat algorithm.
FIGURE 3.

Flow chart of bat algorithm.

Show All
SECTION Algorithm 1
BA Algorithm

Begin:

Initialization. Set the number of bat populations N_{P} , the maximum number of iterations T_{max} , initialize the loudness A^{0} , initial speed V^{0} , frequency r , constant \alpha , \gamma , and generate counter t=1 of each bat.

Calculate the fitness of each bat f(X_{i}^{0})

For t=1:T_{max}

For i=1:N_{P} \begin{align*} V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i}\\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{i}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i}\\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{i}\end{align*}

If rand_{1}>r_{i}^{t} , generate a new solution X_{new} instead of X_{i}^{t}\,\,X_{new}=X^{*}+\varepsilon A^{t}

End if

Calculate the fitness of the new solution f(X_{i}^{t}) .

If rand_{2}< A_{i}^{t} and f(X_{i}^{t})< f(X^{*})

Accept the new solutions and update r_{i}^{t} , A_{i}^{t} .

End if

End for

Update the current optimal solution X^{*} .

End for

Choose the optimal solution as the final result.

End

SECTION IV.
Improved Bat Algorithm (IBA)

This paper intends to integrate the advantages of ABC and mutation operators into the BA. ABC inspired by bee colony foraging behavior, used by Dervis Karaboga earlier and compared with other algorithms [14] . ABC is mainly divided into three steps [40] , [41] . Beginning, bees randomly search for honey sources. Bees with high quality honey sources are called employed bees and bees with poor quality honey sources are called onlooker bees. Then, the employed bees recruit the onlooker bees at the honey source and search together near the honey source. If an improved honey source is found, the original honey source is replaced. Otherwise, the honey source remains unchanged. Finally, if the sub-optimal honey source does not improve over a period of time, the employed bees become a scout bee and randomly searches for the honey source to replace the original honey source. Repeat these three steps continuously until the maximum number of repetitions is reached.

Generally speaking, we convert the three-dimensional problem of UAVs track planning into a D-dimensional function optimization problem, which means that each bat can represent a planning path. The main idea of IBA is that the bat population updates position X_{i} by using speed V_{i} , loudness A_{i} , frequency f_{i} , et al. and then the local position is changed by using the characteristics of ABC.

To better combine the advantages of the BA and the ABC, we have improved the behavior of individuals. Each individual generates a random solution. The first part of the individual with a smaller fitness is selected as the employed bee and the remainder as the onlooker bee. Information update method of employed bees is based on the standard BA’s steps, namely through V_{i}^{t} , f_{i} , A_{i}^{t} , et al to update the solution X_{i}^{t} . Then, the onlooker bees choose to employed bees through roulette and Eq. 11 . \begin{equation*} p(i)=\frac {f(X_{i})}{\sum _{k=1}^{N_{e}}f(X_{j})}\tag{11}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} p(i)=\frac {f(X_{i})}{\sum _{k=1}^{N_{e}}f(X_{j})}\tag{11}\end{equation*} where f(X_{i})=1/W(X_{i}) is the fitness function of the i th individual and N_{e} is the number of employed bees.

For onlooker bees behavior, we introduce mutation factor F [18] to enhance the local search ability of the algorithm and only change a certain node of the individual each time (except for the start and endpoints). \begin{equation*} X_{i,j}=X_{r_{1},j}+F(X_{r_{2},j}-X_{r_{3},j})\tag{12}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{i,j}=X_{r_{1},j}+F(X_{r_{2},j}-X_{r_{3},j})\tag{12}\end{equation*} where X_{i,j} is j-th vector of the i th onlooker bee. Random number r_{1}, r_{2}, r_{3} are employed bee serial number and X_{r_{1}}\neq X_{r_{2}}\neq X_{r_{3}}\neq X_{i} , In order to improve the iterative speed of the algorithm, we only calculate the path cost of the path before and after the replacement point.

To enhance the local search ability of the algorithm, when third random number rand_{3}>r_{i}^{t} , local search based on Eq. 13 . \begin{equation*} X_{i,j}=X_{j}^{*}+\varepsilon A^{t}\tag{13}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{i,j}=X_{j}^{*}+\varepsilon A^{t}\tag{13}\end{equation*} where X^{*}_{j} is the j-th vector of the current optimal solution. Through the greedy criterion, the best result is chosen to replace the original path.

The detailed IBA algorithm steps are as follows:

    Initialize the loudness A_{i} , frequency f_{i}\in [f_{min}, f_{max}] , and speed V_{i} of each bat in the population, and generate a random solution X_{i}^{0}=[S, x_{i_{1}}, x_{i_{2}}, \ldots, E]\in [X_{min}, X_{max}] .

    Calculate the fitness of each bat f(X_{i}^{0}), 1\leq i\leq N_{p} . All bats are arranged in order of fitness, select the bat with the smallest fitness as the current optimal X^{*} , the top 50% small bats are selected as employed bees, and the remaining bats are selected as onlooker bees.

    Update the speed V_{i}^{t} and position X_{i}^{t} of the employed bee according to Eq. 8

    Generate a random number rand_{1} . If rand_{1}>r_{i}^{t} , generate a new solution X_{new} instead of X_{i}^{t} through Eq. 9

    Calculate the fitness of the solution f(X_{i}^{t}) .

    Generate a random number rand_{2} . If rand_{2}< A_{i}^{t} and f(X_{i}^{t})< f(X^{*}) , accept the solution X_{i}^{t} , and update A_{i}^{t} and r_{i}^{t} by Eq. 10 .

    Repeat steps 3-6 to update all employed bees information.

    onlooker bees choose employed bees through roulette, and randomly select the node j that needs to be changed (except for the start and end points).

    Randomly select three solutions r_{1}\neq r_{2}\neq r_{3} that are different from the onlooker bee, and update X_{i,j}^{t} of the onlooker bees according to Eq. 12

    Generate a random number rand_{3} . If rand_{3}>r_{i}^{t} and generate a new solution X_{i,j}^{t}(new) near the optimal solution X^{*} to replace X_{i,j}^{t} by Eq. 13 .

    Calculate the fitness of the onlooker bee. If the fitness of the onlooker bee is better than the corresponding employed bee, then the solution of the onlooker bees can replace the solution of the employed bee, otherwise, the solution of the employed bee cannot change.

    Repeat steps 8-11 until all onlooker bees information are updated.

    Update the optimal solution X^{*} again.

    If the solution of the employed bee X^{t}_{i} does not change after a certain period of time T_{limit} and is not the optimal solution X^{*} , a random solution X_{new} \in [X_{min}, X_{max}] will be generated to replace the employed bee X^{t}_{i} , and initialize the corresponding speed V_{i}^{t} ,frequency f_{i} , loudness A_{i}^{t} and pulse rate r_{i}^{t} .

    After the iteration is complete, choose the optimal solution as the final result. The main part of IBA is described in Algorithm 2 and Fig. 4 .

FIGURE 4. - Improved bat algorithm flow chart.
FIGURE 4.

Improved bat algorithm flow chart.

Show All
SECTION Algorithm 2
IBA Algorithm

Begin:

Initialization. Set the number of bat populations N_{P} , the maximum number of iterations T_{max} , initialize the loudness A^{0} , initial speed V^{0} , pulse frequency r , constant \alpha , \gamma , and generate counter t=1 of each bat.

Calculate the fitness of each bat f(X_{i}^{0}) , choose a part as the employed bees N_{e} and the rest as the onlooker bees N_{s} .

For t=1:T_{max}

For i=1:N_{e} \begin{align*} V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i}\\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{i}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} V_{i}^{t}=&V_{i}^{t-1}+(X_{i}^{t-1}-X^{*})f_{i}\\ X_{i}^{t}=&X_{i}^{t-1}+V_{i}^{i}\end{align*}

If rand_{1}>r_{i}^{t} , generate a new solution X_{new} instead of X_{i}^{t} \begin{equation*} X_{new}=X^{*}+\varepsilon A^{t}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{new}=X^{*}+\varepsilon A^{t}\end{equation*}

End if

Calculate the fitness of the new solution f(X_{i}^{t}) .

If rand_{2}< A_{i}^{t} and f(X_{i}^{t})< f(X^{*}) Accept the new solutions and update r_{i}^{t} , A_{i}^{t} .

End if

End for

Update the current optimal solution X^{*} .

For i=1:N_{s}

Onlooker bee selects employed bee through roulette and randomly determines the nodes j that need to be changed.

Randomly choose three different paths from the employed bee r_{1}\neq r_{2}\neq r_{3} and Update the position of the employed bee node j X_{i,j}=X_{r_{1},j}+F(X_{r_{2},j}-X_{r_{3},j})

If rand_{3}>r_{i}^{t}\,\,X_{i,j}=X^{*}_{j}+\varepsilon A_{t}

End if

Calculate the path cost and the best path replaces the original path through the greedy criterion.

End for

Update the optimal solution.

Determine if any honey source is exhausted. If so, re-plan the path to replace the original path, and initialize the corresponding speed V_{i}^{t} , frequency f_{i} , loudness A_{i}^{t} and pulse rate r_{i}^{t} .

End for

Choose the optimal solution as the final result.

End

Although this article mainly uses the IBA algorithm to solve the UAV path planning problem in three-dimensional space, the theory proves that the convergence of the IBA algorithm is still very necessary. Analyzing the convergence of the algorithm theoretically can promote the improvement and development of the algorithm, and provide clear theoretical significance for the improvement of the algorithm. Similar to the proof in [44] , we can get Theorem 1 Theorem 2 , and Theorem 3 . The definition 1 – 6 are stated in detail in Appendix.

Theorem 1:

In the IBA algorithm, the state sequence \{S(t);t\geq 0\} of the group is a finite homogeneous Markov chain.

Proof:

    In practical problems, the search space of any optimization algorithm is finite. In addition, the speed and spatial location of any individual can be limited, and the whole group is composed of N_{p} individuals. Therefore, the state space of the algorithm is finite.

    According to Definition 4 in Appendix, in the group state sequence {s(t):t>0} , for \forall s(t-1), s(t)\in S , p(T_{S}(S(t-1))=X(t)) affects p(T_{S}(s(t-1))=s(t)) . Then from individual state transition probability we know that p(T_{S}(s(t-1))=X(t)) is only related to the state which is at t-1 , and is not related to time t-1 . So, the state sequence \{s(t):t>0\} is a finite homogeneous Markov chain.

Theorem 2:

The optimal state set G composed of the optimal state of the individual is a closed set on the group state space S .

Proof:

For \forall S_{i}\in G, \forall S_{j}\notin G , any step l\geq 1 , we can get Eq. 29 from Ckapman-Kolmogorov equation: \begin{align*}&\hspace {-.5pc} P^{l}_{s_{i},s_{j}}=\sum _{s_{r_{1}}\in S}\cdots \sum _{s_{r_{l-1}}\in S}p(T_{S}(s_{i})=s_{r_{1}}) \\&\cdot p(T_{S}(s_{r_{1}})=s_{r_{2}})\cdots p(T_{S}(s_{r_{l-1}})=s_{j})\tag{14}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-.5pc} P^{l}_{s_{i},s_{j}}=\sum _{s_{r_{1}}\in S}\cdots \sum _{s_{r_{l-1}}\in S}p(T_{S}(s_{i})=s_{r_{1}}) \\&\cdot p(T_{S}(s_{r_{1}})=s_{r_{2}})\cdots p(T_{S}(s_{r_{l-1}})=s_{j})\tag{14}\end{align*} where P^{l}_{s_{i}, s_{j}} is the probability of group state s_{i} transitioning to state s_{j} after l step. There is p(T_{S}(s_{r_{a-1}})=s_{r_{a}}) in each product expression of the expansion of Eq. 23 , satisfying s_{r_{a-1}}\in G, s_{r_{a}}\notin G , where 1\leq a\leq l . By Definition 4 , \begin{equation*} p(T_{S}(s_{r_{a-1}})=s_{r_{a}})=\prod ^{N_{p}}_{m=1}p(T_{S}(X_{i_{m}})=X_{j_{m}})\tag{15}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} p(T_{S}(s_{r_{a-1}})=s_{r_{a}})=\prod ^{N_{p}}_{m=1}p(T_{S}(X_{i_{m}})=X_{j_{m}})\tag{15}\end{equation*}

From s_{r_{a-1}}\in G and s_{r_{a}}\notin G , there is f(X_{a})>f(X_{a-1})=f(g^{*})=inf(f(c)) , c\in A . Thus there is p(T_{S}(s_{r_{a-1}})=s_{r_{a}})=0 at least, at this time P^{l}_{s_{i},s_{j}}=0 . So, G is a closed set on S .

Theorem 3:

The Markov chain population sequence of the IBA algorithm can converge to the global optimum with probability 1.

Proof:

We can find from the introduction of the IBA that the evolution direction of the entire population is monotonous. Assuming that the state s(t) in which the group is in time t has entered the global optimal solution set G , then it is in state s(t+1) at time t+1 , and P\{s(t+1)\in G| s(t)\in G\}=1 always holds. Thereby, \begin{align*}&\hspace {-1.2pc}P\{s(t+1)\in G\} \\=&P\{s(t)\notin G\} P\{s(t+1)\in G|s(t)\notin G\} \\&+\,P\{s(t+1)\in G\} P\{s(t+1)\in G|s(t)\notin G\} \\=&(1-P\{s(t)\in G\}) P\{s(t+1)\in G|s(t)\notin G\} \\&+\,P\{s(t)\in G\}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-1.2pc}P\{s(t+1)\in G\} \\=&P\{s(t)\notin G\} P\{s(t+1)\in G|s(t)\notin G\} \\&+\,P\{s(t+1)\in G\} P\{s(t+1)\in G|s(t)\notin G\} \\=&(1-P\{s(t)\in G\}) P\{s(t+1)\in G|s(t)\notin G\} \\&+\,P\{s(t)\in G\}\end{align*}

Let P\{s(t+1)\in G|s(t)\notin G\}\geq h(t) \geq 0 , \lim _{t\rightarrow \infty }\prod ^{t}_{i=1}(1-h(i))=0 , then: \begin{align*}&\hspace {-2pc}1-P\{s(t+1)\in G\} \\=&1-(1-P\{s(t)\in G\})P\{s(t+1)\in G|s(t)\notin G\} \\&-P\{s(t)\in G\} \\=&(1-P\{s(t)\in G\})(1-P\{s(t+1)\in G|s(t)\notin G\}) \\\leq&(1-P\{s(t)\in G\})(1-h(t)) \\\leq&\prod _{i=1}^{t}(1-h(i))(1-P\{s(0)\in G\})\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-2pc}1-P\{s(t+1)\in G\} \\=&1-(1-P\{s(t)\in G\})P\{s(t+1)\in G|s(t)\notin G\} \\&-P\{s(t)\in G\} \\=&(1-P\{s(t)\in G\})(1-P\{s(t+1)\in G|s(t)\notin G\}) \\\leq&(1-P\{s(t)\in G\})(1-h(t)) \\\leq&\prod _{i=1}^{t}(1-h(i))(1-P\{s(0)\in G\})\end{align*} So, \begin{equation*} P\{s(t+1)\in G\}\geq 1-\prod _{i=1}^{t}(1-h(i))(1-P\{s(0)\in G\})\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} P\{s(t+1)\in G\}\geq 1-\prod _{i=1}^{t}(1-h(i))(1-P\{s(0)\in G\})\end{equation*} When t\rightarrow \infty , there is: \begin{equation*} \lim _{t\rightarrow \infty }P\{s(t+1)\in G\}\geq 1\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} \lim _{t\rightarrow \infty }P\{s(t+1)\in G\}\geq 1\end{equation*} However, 0\leq P\{s(t+1)\in G\}\leq 1 . So, \begin{equation*} \lim _{t\rightarrow \infty }P\{s(t+1)\in G\}=1\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} \lim _{t\rightarrow \infty }P\{s(t+1)\in G\}=1\end{equation*} Obviously, after iteration, the IBA can finally converge to the global optimal solution.

SECTION V.
Result
A. UAV Path Planning Problem

In order to verify the effectiveness of the algorithm in UAVs path planning. This chapter not only compares and analyzes the various parameters of the IBA, but also compares the IBA algorithm with other intelligent algorithms and the extended algorithm of the BA. In addition, this paper conducts experimental simulation based on MATLAB R2019b software with the computer processor Intel Core i5 2.40GHz, RAM 16.00GB, and 64-bit Windows 10 operating system.

In order to be closer to the real environment, this work constructs a three-dimensional flight environment. We sets the starting node S(10,20,0) , the target node E(42,50,2.8) , the radar threat point R_{1}(26,55,0.2) , R_{2}(35,26,0.2) , R_{3}(35,26,0.2) , R_{4}(51.5,31,0.4) , the missile threat point M_{1}(17,22,0.2) , M_{2}(24,35,0.4) , M_{3}(30,62,0.2) , the artillery threat point A'_{1}(17,22,0.2) , A'_{2}(22,26,0.4) , A'_{3}(14,46,0.6) , the climate threat point C_{1}(16,40,0.4) , C_{2}(24,48,0.6) . In addition, we set the parameters in Table 1 [1] :
TABLE 1 Parameter Settings
Table 1- Parameter Settings

From Table 2 we can find that compared with other swarm intelligence algorithms, the IBA greatly reduces the iteration time and can get a better optimal solution.
TABLE 2 Compared With Other Swarm Intelligence Algorithms
Table 2- Compared With Other Swarm Intelligence Algorithms

It is very necessary to explore the influence of parameters on the performance of IBA. The IBA proposed in this paper deals with establishing multiple parameters. So we have therefore conducted many experiments to determine the appropriate range of parameters. At the same time, other parameters remain consistent to ensure fairness in the experience. Furthermore, when the optimum value remains unchanged, the algorithm is thought to have achieved the convergence value. In the experiment, when the parameters are set, we begin to record the iteration time of the algorithm. This article conducts 50 simulations experiments for each comparison test. Table 3 shows the influence of different population numbers and different ratios of employed bees and onlooker bees of the IBA.
TABLE 3 Statistical Results of Different Populations, Ratios of Employed Bees and Onlooker Bees
Table 3- Statistical Results of Different Populations, Ratios of Employed Bees and Onlooker Bees

From Table 3 we can find when the population increases or the proportion of employed bees is large, the iteration time of the IBA can also increase. The main reason is that the search rules of employed bees and onlooker bees are different, and employed bees take longer to search for paths. In this article, the IBA is more suitable for the population size range of 20-50, and the ratio of employed bees to onlooker bees is 1:4. Within this range, IBA may obtain better results more quickly.

This article then tests parameters T_{limit} , F , r^{0} , and \gamma in the IBA algorithm in turn, and compares the IBA algorithm with other intelligent algorithms horizontally and vertically. The statistics from the simulation experiments in Table 4 – 6 show that the parameters T_{limit} , F , r^{0} , and \gamma have a little impact on the performance of IBA, especially in the average path cost and convergence time that we are concerned about.
TABLE 4 Statistical Results of IBA and ABC for Different T_{limit}
Table 4- Statistical Results of IBA and ABC for Different $T_{limit}$
TABLE 5 Statistical Results of IBA, BA and BA-ABC for Different r^{0} and \gamma
Table 5- Statistical Results of IBA, BA and BA-ABC for Different $r^{0}$ and $\gamma$
TABLE 6 Comparison of Different Intelligent Algorithms With Different F
Table 6- Comparison of Different Intelligent Algorithms With Different $F$

Then, we test the influence of parameters A^{0} and \alpha on the IBA. Table 7 shows that A^{0} and \alpha have no obvious influence on the iteration time of IBA, but the larger the value of A^{0} and \alpha , the smaller the average path cost obtained. In other words, the flight path for the UAVs under the IBA is better.
TABLE 7 Statistical Results of iba and ba for Different A^{0} and \alpha
Table 7- Statistical Results of iba and ba for Different $A^{0}$ and $\alpha$

At last, take T_{limit}=10 , A^{0}=0.95 , \alpha =0.9 , F=0.5 , r^{0}=0.6 , \gamma =0.5 as an example, we explore the impact of the final parameter, namely, the number of nodes D , on the new algorithm.

From the experimental results in Table 8 , the average iteration time and average path cost of the algorithm increase as D increases. This is reasonable from the introduction of the method. Following numerous simulation experiments, we find that the appropriate number of nodes for the IBA in this article is 15-20.
TABLE 8 Comparison of Different Intelligent Algorithms With Different D
Table 8- Comparison of Different Intelligent Algorithms With Different $D$

From Fig. 8 , the IBA algorithm can plan a feasible, safe, and effective flight path for UAVs in a three-dimensional environment that can effectively avoid no-fly areas and mountains. It also can be found that the IBA has good convergence from Fig. 5 – 7 .
FIGURE 5. - The optimal solution convergence curve of BA algorithm and IBA algorithm with different $\gamma $ and $r^{0}$ (a) $r^{0}=0.3$ ; (b) $r^{0}=0.6$ ; (c) $r^{0}=0.9$ .
FIGURE 5.

The optimal solution convergence curve of BA algorithm and IBA algorithm with different \gamma and r^{0} (a) r^{0}=0.3 ; (b) r^{0}=0.6 ; (c) r^{0}=0.9 .

Show All
FIGURE 6. - The optimal solution convergence curve of BA algorithm and IBA algorithm with different $A^{0}$ and $\alpha $ . (a) $\alpha =0.3$ ; (b) $\alpha =0.5$ ; (c) $\alpha =0.7$ ; (d) $\alpha =0.9$ .
FIGURE 6.

The optimal solution convergence curve of BA algorithm and IBA algorithm with different A^{0} and \alpha . (a) \alpha =0.3 ; (b) \alpha =0.5 ; (c) \alpha =0.7 ; (d) \alpha =0.9 .

Show All
FIGURE 7. - Histogram of the average path cost and average iteration time of different algorithms. (a) Average path cost; (b) Average iteration time.
FIGURE 7.

Histogram of the average path cost and average iteration time of different algorithms. (a) Average path cost; (b) Average iteration time.

Show All
FIGURE 8. - Path planning of IBA and optimal value convergence curve (a) Path planning; (b) Optimal value convergence curve.
FIGURE 8.

Path planning of IBA and optimal value convergence curve (a) Path planning; (b) Optimal value convergence curve.

Show All
FIGURE 9. - Four benchmark functions in 3D. (a) Rosenbrock’s function; (b)De Jong’s standard sphere function; (c) Michalewicz’s function; (d) Dixon-Price’s function.
FIGURE 9.

Four benchmark functions in 3D. (a) Rosenbrock’s function; (b)De Jong’s standard sphere function; (c) Michalewicz’s function; (d) Dixon-Price’s function.

Show All

In general, from the statistical results in Table 2 – 8 , we can find that the population size, the ratio of employed bees to onlooker bees, the number of nodes D , the initial loudness A^{0} , and \alpha , have a greater impact on the simulation results of the IBA algorithm, however, T_{limit} , F , r^{0} , and \gamma have a little effect on the results of the IBA algorithm. It can be seen from the comparison results of IBA with standard BA and ABC that IBA presents better advantages. The convergence speed of IBA is about 50% faster than classical BA, and the quality of the optimum solution is about 40% higher than that of ABC. In addition, compared to traditional swarm intelligence algorithms and improved intelligence algorithms, the optimum solution of IBA is better than them. In other words, the IBA can better solve the UAV flight path-planning problem.
B. Function Optimization Problem

This section mainly verifies the performance of the IBA algorithm on continuous problems. We use four benchmark functions to test the accuracy and convergence of the IBA algorithm and compare it with other swarm intelligence algorithms. The goal of optimization is to minimize the test results of all benchmark functions. Moreover, we run each algorithm 20 times for significant statistical analysis.

There are many standard test functions for validating new algorithms. In this article, we choose the well-known Rosenbrock’s function [31] \begin{equation*} f_{1}(\mathbf {x})=\sum _{i=1}^{d-1}(1-x_{i}^{2})^{2}+100(x_{i+1}-x_{i}^{2})^{2}\tag{16}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} f_{1}(\mathbf {x})=\sum _{i=1}^{d-1}(1-x_{i}^{2})^{2}+100(x_{i+1}-x_{i}^{2})^{2}\tag{16}\end{equation*} and De Jong’s standard sphere function \begin{equation*} f_{2}(\mathbf {x})=\sum _{i=1}^{d}x_{i}^{2}\tag{17}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} f_{2}(\mathbf {x})=\sum _{i=1}^{d}x_{i}^{2}\tag{17}\end{equation*}

We know that f_{1}(\mathbf {x}) has a global minimum f_{1}^{min}=0 at (1, 1) in 2D and Minimum of f_{2}(\mathbf {x}) is f_{2}^{min}=0 at (0,0,\ldots,0) for any d\geq 3 .

Michalewicz’s function is also selected to test the algorithm. \begin{equation*} f_{3}(\mathbf {x})=-\sum _{i=1}^{d}sin(x_{i})\left[{sin\left({\frac {ix_{i}^{2}}{\pi }}\right)}\right]^{2m}.\tag{18}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} f_{3}(\mathbf {x})=-\sum _{i=1}^{d}sin(x_{i})\left[{sin\left({\frac {ix_{i}^{2}}{\pi }}\right)}\right]^{2m}.\tag{18}\end{equation*} It is usually set m = 10, and the global minimum has been approximated by f_{3}^{min}\thickapprox -1.801 for d=2 and f_{3}^{min}\thickapprox -4.687 for d=5 .

In addition, we also added a standard test function, Dixon-Price’s function, to perform numerical global optimization, and its global minimum is f_{4}^{min}=0 for x_{i}=0, i=1,2,\ldots,d . \begin{equation*} f_{4}(\mathbf {x})=(x_{1}-1)^{2}+\sum _{i=2}^{d}i(2x_{i}^{2}-x_{i-1})^{2}.\tag{19}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} f_{4}(\mathbf {x})=(x_{1}-1)^{2}+\sum _{i=2}^{d}i(2x_{i}^{2}-x_{i-1})^{2}.\tag{19}\end{equation*}

However, the minimum value of Michalewicz’s function can be less than 0, so we have modified the fitness of the IBA algorithm by Eq 20 . \begin{align*} fit(x_{i})=\begin{cases} \displaystyle \frac {1}{1+f(x_{i})}, & f(x_{i})>0 \\ \displaystyle 1+| f(x_{i})|, & \text {otherwise}. \end{cases}\tag{20}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} fit(x_{i})=\begin{cases} \displaystyle \frac {1}{1+f(x_{i})}, & f(x_{i})>0 \\ \displaystyle 1+| f(x_{i})|, & \text {otherwise}. \end{cases}\tag{20}\end{align*} where f(x_{i}) is the function value of x_{i} .

Moreover, we add other benchmark functions in Table 9 , and set the initial x_{i},i=1,2,\ldots, N_{p} range of each benchmark function to [−100, 100].
TABLE 9 Benchmark Functions
Table 9- Benchmark Functions

We reset the maximum number of evaluations to 3\times 10^{5} , dimension d=50 , F\in [-1,1] and other parameters are the same as the previous simulation experiment.

From the statistical results in Table 10 , we can see that for each benchmark function, IBA can obtain a better quality solution and a lower standard deviation, compared to BA, ABC, PSO, and IABC. From the average of these 10 benchmark functions, IBA can also ensure that the obtained mean and standard deviation are the smallest. We believe that it is worthwhile to perform multiple changes and comparisons for individuals to obtain better solutions. Obviously,in the process of finding the global minimum of different functions, IBA is more suitable for finding the global minimum solution within a fixed number of evaluations.
TABLE 10 Comparison of IBA With BA, ABC, PSO, IABC
Table 10- Comparison of IBA With BA, ABC, PSO, IABC

SECTION VI.
Conclusion

The purpose of this paper is to make the UAV obtain a crash-free, safer, and shorter flight path. An improved bat algorithm (IBA) is proposed that integrates elements of the ABC, employed bee, onlooker bees, and scout bees. In the IBA, the employed bee searches for the path according to the behavior of bats using sonar positioning. To increase the local search ability, a mutation factor is considered. When the individual falls into a local optimum, the scout bee searches for a new path to replace the old one. In addition, this work also proves in detail that the IBA is convergent and solves the function optimization problem to prove that the IBA algorithm has the potential for broad application.

We tested all the setting parameters in the IBA in this paper. Based on the statistical results, it can be found that when T_{limit} , F , r^{0} , and \gamma are changed, the average path cost and iteration time of IBA do not change significantly, that is to say, T_{limit} , F , r^{0} , and \gamma have a little impact on the performance of the IBA. In other aspects, A^{0} and \alpha mainly affect the updating of information from the bat algorithm part of the IBA, and the larger A^{0} and \alpha , the better the result obtained by the IBA. Similarly, the ratio of employed bees to onlooker bees also affects the results of the IBA. This is mainly due to the different behaviors of employed bees and onlooker bees in the search paths. The increase in population size can inevitably increase the iteration time of the algorithm. The increase in D increases the path cost mainly because the method of calculating the cost of a path is flawed, and the path cost cannot be calculated accurately. From a statistical data point of view, the ratio of employed bees to onlooker bees, population size, and D have greater influence than A^{0} and \alpha .

In this article, a large number of simulation experiments have confirmed that the IBA can quickly plan a flight path for the UAVs, effectively avoiding mountains and various threatening no-fly areas. Additionally, based on the comparison results, the IBA is superior to DE, BAM, ABC, PSO, BA, BA-ABC, IABC, and GFACO in the battlefield environment of this article. The convergence speed of the IBA is about 50% lower than the standard BA. Moreover, compared to the ABC algorithm, the IBA sacrifices very little convergence time to improve the quality of the optimal solution by about 14%. In terms of function optimization, compared with ABC, BA, IABC, and PSO, IBA can get higher quality solutions, lower standard deviation. On the other hand, from the perspective of time complexity, suppose the number of populations is n , the problem solution is D-dimensional, and the ratio of employed bees to onlooker bees is Ra . After t iterations, the time complexity of the IBA is approximately O(nD+t(Ra\cdot nD+(1-Ra)n)) , which is less than the time complexity of the BA (O(nD+tnD)) and this is consistent with the experimental results. In future work, we will study the use of the IBA to solve the UAV flight path-planning problem in a dynamic environment.
Appendix IBA Algorithm Convergence

This chapter mainly proves the convergence of IBA through Markov chain. In order to illustrate the Markov chain model of IBA, we need to give some related mathematical descriptions and definitions.

Definition 1 [42] :

State equivalence. Suppose S=\{s=(X_{1}, X_{2},\ldots, X_{N_{P}})|X_{i}\in \mathbf {X},1\leq i\leq N_{P}\} is the state space of the group which is composed of the set of all possible states of the group. \mathbf {X}=\{X|X\in A\} is the individual state space, and is the feasible solution space. \varphi (s,X)=\sum \chi _{|X|(X_{i})} is the number of group state contains individual state X , where \chi _{|B|} is the indicative function of set B , s\in S , X\in s . If \exists s_{1}, s_{2}\in S , such that \forall X\in \mathbf {X} , there is \varphi (s_{1}, X)=\varphi (s_{2}, X) .

Definition 2 [43] :

The group state equivalence class induced by the equivalence relation “ \thicksim ” on S is denoted as L=S/\thicksim . The equivalence class of this group has the following properties:

    Any group state in a certain equivalence class L is equivalent, that is, s_{1}\thicksim s_{2} , \forall s_{1}, s_{2}\in L .

    The state of any group within L is not equivalent to the state of any group outside L , that is, s_{1}\not \sim s_{2} , \forall s_{1}\in L, s_{2}\in L .

    Any two different equivalence classes have no intersection, that is, L_{1}\cap L_{2}=\varnothing , \forall L_{1}\neq L_{2} .

Definition 3:

Group state transition. T_{X}(X_{i})=X_{j} is the group state one-step transition from state X_{i} to state X_{j} , where X_{i}, X_{j}\in X .

After that, we discuss the state transition probability of the IBA. According to the structure of the IBA, we can get the one-step transition probability of the individual state from X_{i} to X_{j} . \begin{align*} p(T_{X}(X_{i})=X_{j}) =\begin{cases} \displaystyle p_{ba}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by bats} \\ \displaystyle p_{on}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by onlooker bees} \\ \displaystyle p_{sc}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by scout bees } \\ \displaystyle p_{ba}(T_{X}(X_{i})=X_{j})\times p_{on}(T_{X}(X_{i})=X_{j}), \\ \displaystyle \text {realized by bats and onlooker bees}. \end{cases}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} p(T_{X}(X_{i})=X_{j}) =\begin{cases} \displaystyle p_{ba}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by bats} \\ \displaystyle p_{on}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by onlooker bees} \\ \displaystyle p_{sc}(T_{X}(X_{i})=X_{j}),\\ \displaystyle \text {realized by scout bees } \\ \displaystyle p_{ba}(T_{X}(X_{i})=X_{j})\times p_{on}(T_{X}(X_{i})=X_{j}), \\ \displaystyle \text {realized by bats and onlooker bees}. \end{cases}\end{align*}

Without considering the population number and dimension in Eq. 8 , we can get \begin{equation*} V_{t}=V_{t-1}+(X_{t-1}-P_{g})f_{i}\tag{21}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} V_{t}=V_{t-1}+(X_{t-1}-P_{g})f_{i}\tag{21}\end{equation*}

Thereby, Eq. 22 is established. \begin{equation*} X_{t}=(2+f_{i})X_{t-1}-X_{t-2}-P_{g}f_{i}\tag{22}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} X_{t}=(2+f_{i})X_{t-1}-X_{t-2}-P_{g}f_{i}\tag{22}\end{equation*} where P_{g} is global optimal position.

According to Definition 3 and the geometric properties of the IBA, the one-step transition probability of a bat from state X_{i} to state X_{j} is: \begin{align*}&\hspace {-.5pc}p_{ba}(T_{X}(X_{i})=X_{j}) \\[3pt]&=p_{ba}(V_{i}\rightarrow V_{j})\times p_{ba}(X_{i}\rightarrow X_{j}) p_{ba}(P_{g_{i}}\rightarrow P_{g_{j}})\tag{23}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-.5pc}p_{ba}(T_{X}(X_{i})=X_{j}) \\[3pt]&=p_{ba}(V_{i}\rightarrow V_{j})\times p_{ba}(X_{i}\rightarrow X_{j}) p_{ba}(P_{g_{i}}\rightarrow P_{g_{j}})\tag{23}\end{align*}

Through individual iterative formula and location update criterion, we can get Eq. 24 \begin{align*} p_{ba}(P_{g_{i}}\rightarrow P_{g_{j}})=\begin{cases} \displaystyle 1, & f(P_{g_{i}})\leq f(P_{g_{j}}) \\ \displaystyle 0, & \text {otherwise}. \end{cases}\tag{24}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} p_{ba}(P_{g_{i}}\rightarrow P_{g_{j}})=\begin{cases} \displaystyle 1, & f(P_{g_{i}})\leq f(P_{g_{j}}) \\ \displaystyle 0, & \text {otherwise}. \end{cases}\tag{24}\end{align*}

Assuming that the individual has n dimensions. Then the one-step transition probability of speed and position is: \begin{align*}&\hspace {-1.2pc}p_{ba}(V_{i}\rightarrow V_{j}) \\[3pt]=&\begin{cases} \displaystyle \frac {1}{|\triangle _{1}|}, & V_{j}\in [V_{i},V_{i}+f_{i}(X_{i}-P_{g_{i}})] \\[3pt] \displaystyle 1, & j=i+1 \\[3pt] \displaystyle 0, & \text {otherwise}. \end{cases}\tag{25}\\[3pt]&\hspace {-1.2pc}p_{ba}(X_{i}\rightarrow X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|\triangle _{2}|}, &X_{j}\in [V_{i}+X_{i},V_{i}\!+\!X_{i}\!+\!f_{i}(X_{i}-P_{g_{i}})]\\ \displaystyle & and~rand_{1}< r_{i}~ and ~ rand_{2}< A_{i} \\ \displaystyle & and~ f(X_{i})< f_{X_{j}}\\ \displaystyle \frac {1}{|P_{g_{i}}\!+\!\varepsilon \cdot rand|}, & X_{j}\in [P_{g_{i}}-\varepsilon \cdot rand, P_{g_{i}}\!+\!\varepsilon \cdot rand] \\ \displaystyle &and~ rand_{1}>r_{i} ~ and~ rand_{2}< A_{i} \\ \displaystyle &and ~ f(X_{i})< f_{X_{j}}\\ \displaystyle 1, & j=i+1 \\ \displaystyle 0, & \text {otherwise}. \end{cases}\!\!\!\!\!\!\! \\\tag{26}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-1.2pc}p_{ba}(V_{i}\rightarrow V_{j}) \\[3pt]=&\begin{cases} \displaystyle \frac {1}{|\triangle _{1}|}, & V_{j}\in [V_{i},V_{i}+f_{i}(X_{i}-P_{g_{i}})] \\[3pt] \displaystyle 1, & j=i+1 \\[3pt] \displaystyle 0, & \text {otherwise}. \end{cases}\tag{25}\\[3pt]&\hspace {-1.2pc}p_{ba}(X_{i}\rightarrow X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|\triangle _{2}|}, &X_{j}\in [V_{i}+X_{i},V_{i}\!+\!X_{i}\!+\!f_{i}(X_{i}-P_{g_{i}})]\\ \displaystyle & and~rand_{1}< r_{i}~ and ~ rand_{2}< A_{i} \\ \displaystyle & and~ f(X_{i})< f_{X_{j}}\\ \displaystyle \frac {1}{|P_{g_{i}}\!+\!\varepsilon \cdot rand|}, & X_{j}\in [P_{g_{i}}-\varepsilon \cdot rand, P_{g_{i}}\!+\!\varepsilon \cdot rand] \\ \displaystyle &and~ rand_{1}>r_{i} ~ and~ rand_{2}< A_{i} \\ \displaystyle &and ~ f(X_{i})< f_{X_{j}}\\ \displaystyle 1, & j=i+1 \\ \displaystyle 0, & \text {otherwise}. \end{cases}\!\!\!\!\!\!\! \\\tag{26}\end{align*} where |\triangle _{1}|=\int _{v_{i_{1}}}^{v_{j_{1}}}\int _{v_{i_{2}}}^{v_{j_{2}}}\cdots \int _{v_{i_{n}}}^{v_{j_{n}}}dv_{n}\cdots dv_{2}dv_{1} , |\triangle _{2}|=\int _{x_{i_{1}}}^{x_{j_{1}}}\int _{x_{i_{2}}}^{x_{j_{2}}}\cdots \int _{x_{i_{n}}}^{x_{j_{n}}}dx_{n}\cdots dx_{2}dx_{1}

Similarly, we you can get \begin{align*}&\hspace {-1.2pc}p_{on}(T_{s}(X_{i})=X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|X_{i}-X_{j}|}p_{1}(X_{i}\rightarrow X_{j}),&X_{j}\in [X_{i}-(X_{i}-X_{k}),\\ \displaystyle &X_{i}+(X_{i}-X_{k})] \\ \displaystyle 0, & \text {otherwise}. \end{cases}\quad \tag{27}\\&\hspace {-1.2pc}p_{sc}(T_{s}(X_{i})=X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|X_{max}-X_{min}|},&X_{j}\in [X_{min}, X_{max}]\\ \displaystyle 0,& \text {otherwise}. \end{cases}\tag{28}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*}&\hspace {-1.2pc}p_{on}(T_{s}(X_{i})=X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|X_{i}-X_{j}|}p_{1}(X_{i}\rightarrow X_{j}),&X_{j}\in [X_{i}-(X_{i}-X_{k}),\\ \displaystyle &X_{i}+(X_{i}-X_{k})] \\ \displaystyle 0, & \text {otherwise}. \end{cases}\quad \tag{27}\\&\hspace {-1.2pc}p_{sc}(T_{s}(X_{i})=X_{j}) \\=&\begin{cases} \displaystyle \frac {1}{|X_{max}-X_{min}|},&X_{j}\in [X_{min}, X_{max}]\\ \displaystyle 0,& \text {otherwise}. \end{cases}\tag{28}\end{align*} where in Eq. 21 – 28 , X is multi-dimensional data, X_{k} is a randomly selected solution within the range of feasible solutions. \begin{align*} p_{1}(X_{i}\rightarrow X_{j})=\begin{cases} \displaystyle 1, & f(X_{i})< f(X_{j}) \\ \displaystyle 0, & \text {otherwise}. \end{cases}\end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} p_{1}(X_{i}\rightarrow X_{j})=\begin{cases} \displaystyle 1, & f(X_{i})< f(X_{j}) \\ \displaystyle 0, & \text {otherwise}. \end{cases}\end{align*}

Definition 4 [42] :

For \forall s_{i}, s_{j}\in S , in the IBA, the individual state is one-step transferred from state s_{i} to state S_{j} , denoted as T_{S}(s_{i})=s_{j} . The one-step transition probability for all individual states in-group s_{i} to simultaneously transfer to all individual states in group s_{j} is: \begin{equation*} p(T_{S}(s_{i}=s_{j}))=\prod ^{N_{p}}_{m=1}p(T_{S}(X_{i_{m}})=X_{j_{m}})\tag{29}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} p(T_{S}(s_{i}=s_{j}))=\prod ^{N_{p}}_{m=1}p(T_{S}(X_{i_{m}})=X_{j_{m}})\tag{29}\end{equation*}

Definition 5 [42] :

Assume that L_{i}=(s_{i_{1}}, s_{i_{2}},\ldots, s_{i_{n}}) and L_{j}=(s_{j_{1}}, s_{j_{2}},\ldots, s_{j_{n}}) are the equivalence classes of any two group states caused by the equivalence relation “ \thicksim ” on S . L_{i} one-step transfers to L_{j} , denoted as T_{L}(L_{i})=L_{j} , then the one-step transition probability of T_{L}(L_{i})=L_{j} is: \begin{equation*} p(T_{L}(L_{i})=L_{j})=\sum _{a=1}^{n}\sum _{b=1}^{m}p(T_{S}(s_{i_{a}})=s_{j_{b}})\tag{30}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} p(T_{L}(L_{i})=L_{j})=\sum _{a=1}^{n}\sum _{b=1}^{m}p(T_{S}(s_{i_{a}})=s_{j_{b}})\tag{30}\end{equation*}

Definition 6 [44] :

Assuming that the optimal solution of optimization problem \langle A,f\rangle is g^{*} , define the group’s optimal state set G=\{s^{*}=(X)| f(X)=f(g^{*}), s\in S\} .

If G=S , then every solution in the feasible solution space is the optimal solution and feasible solution, and optimization is meaningless at this time. So we discuss the convergence of the IBA algorithm in the case of G\subset S .

Authors
Figures
References
Citations
Keywords
Metrics
  < Previous    |    Back to Results    |    Next >  
More Like This
Rotary unmanned aerial vehicles path planning in rough terrain based on multi-objective particle swarm optimization

Journal of Systems Engineering and Electronics

Published: 2020
Comprehensive Learning Particle Swarm Optimisation with Limited Local Search for UAV Path Planning

2019 IEEE Symposium Series on Computational Intelligence (SSCI)

Published: 2019
Show More
References
1. Z. H. Hu, "Research on Some key techniques of UAV path planning based on intelligent optimization algorithm", 2011.
Show in Context Google Scholar
2. Y. Meng, J. Su, J. Song, W.-H. Chen and Y. Lan, "Experimental evaluation of UAV spraying for peach trees of different shapes: Effects of operational parameters on droplet distribution", Comput. Electron. Agricult. , vol. 170, Mar. 2020.
Show in Context CrossRef Google Scholar
3. K. Yang, G. Y. Yang and S. I. Huang Fu, "Research of control system for plant protection UAV based on pixhawk", Procedia Comput. Sci. , vol. 166, pp. 371-375, Jan. 2020.
Show in Context CrossRef Google Scholar
4. P. Yao, H. Wang and Z. Su, "UAV feasible path planning based on disturbed fluid and trajectory propagation", Chin. J. Aeronaut. , vol. 28, no. 4, pp. 1163-1177, Aug. 2015.
Show in Context CrossRef Google Scholar
5. Y. D. Sergeyev, D. E. Kvasov and M. S. Mukhametzhanov, "On the efficiency of nature-inspired metaheuristics in expensive global optimization with limited budget", Sci. Rep. , vol. 8, no. 1, pp. 1-9, Jan. 2018.
Show in Context CrossRef Google Scholar
6. A. Faramarzi, M. Heidarinejad, S. Mirjalili and A. H. Gandomi, "Marine predators algorithm: A nature-inspired Metaheuristic", Expert Syst. Appl. , vol. 152, Aug. 2020.
Show in Context CrossRef Google Scholar
7. S. Mirjalili, S. M. Mirjalili and A. Lewis, "Grey wolf optimizer", Adv. Eng. Softw. , vol. 69, pp. 46-61, Mar. 2014.
Show in Context CrossRef Google Scholar
8. Z. Wang, L. Liu, T. Long and Y. Wen, "Multi-UAV reconnaissance task allocation for heterogeneous targets using an opposition-based genetic algorithm with double-chromosome encoding", Chin. J. Aeronaut. , vol. 31, no. 2, pp. 339-350, Feb. 2018.
Show in Context CrossRef Google Scholar
9. C. R. Atencia, J. Del Ser and D. Camacho, "Weighted strategies to guide a multi-objective evolutionary algorithm for multi-UAV mission planning", Swarm Evol. Comput. , vol. 44, pp. 480-495, Feb. 2019.
Show in Context CrossRef Google Scholar
10. D. Simon, "Biogeography-based optimization", IEEE Trans. Evol. Comput. , vol. 12, no. 6, pp. 702-713, Dec. 2008.
Show in Context View Article Full Text: PDF (746) Google Scholar
11. L. P. Behnck, D. Doering, C. E. Pereira and A. Rettberg, "A modified simulated annealing algorithm for SUAVs path planning", IFAC-PapersOnLine , vol. 48, no. 10, pp. 63-68, 2015.
Show in Context CrossRef Google Scholar
12. R. A. Formato, "Central force optimization: A new deterministic gradient-like optimization Metaheuristic", Opsearch , vol. 46, no. 1, pp. 25-51, Mar. 2009.
Show in Context CrossRef Google Scholar
13. R. A. Formato, "Central force optimization with variable initial probes and adaptive decision space", Appl. Math. Comput. , vol. 217, no. 21, pp. 8866-8872, Jul. 2011.
Show in Context CrossRef Google Scholar
14. D. Karaboga and B. Basturk, "A powerful and efficient algorithm for numerical function optimization: Artificial bee colony (ABC) algorithm", J. Global Optim. , vol. 39, no. 3, pp. 459-471, Oct. 2007.
Show in Context CrossRef Google Scholar
15. J. Karimi and S. H. Pourtakdoust, "Optimal maneuver-based motion planning over terrain and threats using a dynamic hybrid PSO algorithm", Aerosp. Sci. Technol. , vol. 26, no. 1, pp. 60-71, Apr. 2013.
Show in Context CrossRef Google Scholar
16. C. Pan, H. Wang, J. Li and M. Korovkin, "Path planning of mobile robot based on an improved ant colony algorithm", CCIS , 2018.
Show in Context CrossRef Google Scholar
17. T. Stützle and H. H. Hoos, "MAX-MIN ant system", Future Generat. Comput. Syst. , vol. 16, no. 8, pp. 889-914, Jun. 2000.
CrossRef Google Scholar
18. G. Wang, L. Guo, H. Duan, L. Liu and H. Wang, "A bat algorithm with mutation for UCAV path planning", Sci. World J. , vol. 2012, pp. 1-15, Nov. 2012.
Show in Context CrossRef Google Scholar
19. C. Sur and A. Shukla, "Adaptive & discrete real bat algorithms for route search optimization of graph based road network", IEEE Int. Conf. Mach. Intell. Res. Adv , Dec. 2013.
Show in Context View Article Full Text: PDF (456) Google Scholar
20. Y. Wang, K. Li, Y. Han, F. Ge, W. Xu and L. Liu, "Tracking a dynamic invading target by UAV in oilfield inspection via an improved bat algorithm", Appl. Soft Comput. , vol. 90, May 2020.
Show in Context CrossRef Google Scholar
21. D. H. Wolpert and W. G. Macready, "No free lunch theorems for optimization", IEEE Trans. Evol. Comput. , vol. 1, no. 1, pp. 67-82, Apr. 1997.
Show in Context View Article Full Text: PDF (698) Google Scholar
22. A. A. Najm and I. K. Ibraheem, "Nonlinear PID controller design for a 6-DOF UAV quadrotor system", Eng. Sci. Technol. Int. J. , vol. 22, no. 4, pp. 1087-1097, Aug. 2019.
Show in Context CrossRef Google Scholar
23. A. A. Najm and I. K. Ibraheem, "Altitude and attitude stabilization of UAV quadrotor system using improved active disturbance rejection control", Arabian J. Sci. Eng. , vol. 45, no. 3, pp. 1985-1999, Mar. 2020.
Show in Context CrossRef Google Scholar
24. I. K. Ibraheem, "Anti-disturbance compensator design for unmanned aerial vehicle", J. Eng. , vol. 26, no. 1, pp. 86-103, Dec. 2019.
Show in Context CrossRef Google Scholar
25. W. R. Abdul-Adheem, I. K. Ibraheem, A. T. Azar and A. J. Humaidi, "Improved active disturbance rejection-based decentralized control for MIMO nonlinear systems: Comparison with the decoupled control scheme", Appl. Sci. , vol. 7, no. 10, pp. 1-29, Mar. 2020.
Show in Context CrossRef Google Scholar
26. A. A. Najm, I. K. Ibraheem, A. T. Azar and A. J. Humaidi, "Genetic optimization-based consensus control of multi-agent 6-DoF UAV system", Sensors , vol. 12, no. 20, pp. 86-103, Jun. 2020.
Show in Context CrossRef Google Scholar
27. A. J. Humaidi, I. K. Ibraheem, A. T. Azar and M. E. Sadiq, "A new adaptive synergetic control design for single link robot arm actuated by pneumatic muscles", Entropy , vol. 7, no. 22, pp. 1-24, Jun. 2020.
Show in Context CrossRef Google Scholar
28. W. R. Abdul-Adheem, I. K. Ibraheem, A. J. Humaidi and A. T. Azar, "Model-free active input–output feedback linearization of a single-link flexible joint manipulator: An improved active disturbance rejection control approach", Meas. Control , Jun. 2020, [online] Available: https :// journals . sagepub . com / doi / 10 . 1177 / .
Show in Context CrossRef Google Scholar
29. I. K. Ibraheem and F. H. Ajeil, "Path planning of an autonomous mobile robot using swarm based optimization techniques", Al-Khwarizmi Eng. J. , vol. 12, no. 4, pp. 12-25, Dec. 2017.
Show in Context CrossRef Google Scholar
30. F. H. Ajeil, I. K. Ibraheem, A. T. Azar and A. J. Humaidi, "Grid-based mobile robot path planning using aging-based ant colony optimization algorithm in static and dynamic environments", Sensors , vol. 7, no. 20, pp. 1-26, Mar. 2020.
Show in Context CrossRef Google Scholar
31. X. S. Yang, "A new metaheuristic bat-inspired algorithm" in Nature Inspired Cooperative Strategies for Optimization, Berlin, Germany:Springer, vol. 284, 2010.
Show in Context Google Scholar
32. A. Chakri, R. Khelif, M. Benouaret and X.-S. Yang, "New directional bat algorithm for continuous optimization problems", Expert Syst. Appl. , vol. 69, pp. 159-175, Mar. 2017.
Show in Context CrossRef Google Scholar
33. A. H. Gandomi and X.-S. Yang, "Chaotic bat algorithm", J. Comput. Sci. , vol. 5, no. 2, pp. 224-232, Mar. 2014.
Show in Context CrossRef Google Scholar
34. T. T. Nguyen, J. S. Pan, T. K. Dao, M. Y. Kuo and M. F. Horng, "Hybrid bat algorithm with artificial bee colony" in Intelligent Data Analysis and Its Applications Volume II, Cham, Switzerland:Springer, vol. 298, 2014.
Show in Context CrossRef Google Scholar
35. I. K. Ibraheem, F. H. Ajeil and Z. H. Khan, "Path planning of an autonomous mobile robot in a dynamic environment using modified bat swarm optimization", arXiv:1807.05352 , 2018, [online] Available: https :// arxiv . org / abs / 1807 . 05352 .
Show in Context Google Scholar
36. F. H. Ajeil, I. K. Ibraheem, A. T. Azar and A. J. Humaidi, "Autonomous navigation and obstacle avoidance of an omnidirectional mobile robot using swarm optimization and sensors deployment", Int. J. Adv. Robotic Syst. , vol. 17, no. 3, May 2020.
Show in Context CrossRef Google Scholar
37. N. Lin, J. Tang, X. Li and L. Zhao, "A novel improved bat algorithm in UAV path planning", Comput. Mater. Continua , vol. 61, no. 1, pp. 323-344, 2019.
Show in Context CrossRef Google Scholar
38. C. Xu, H. Duan and F. Liu, "Chaotic artificial bee colony approach to uninhabited combat air vehicle (UCAV) path planning", Aerosp. Sci. Technol. , vol. 14, no. 8, pp. 535-541, Dec. 2010.
Show in Context CrossRef Google Scholar
39. G.-G. Wang, H. E. Chu and S. Mirjalili, "Three-dimensional path planning for UCAV using an improved bat algorithm", Aerosp. Sci. Technol. , vol. 49, pp. 231-238, Feb. 2016.
Show in Context CrossRef Google Scholar
40. S. Aslan and S. Demirci, "Solving UAV localization problem with artificial bee colony (ABC) algorithm", Proc. 4th Int. Conf. Comput. Sci. Eng. (UBMK) , pp. 735-738, Sep. 2019.
Show in Context View Article Full Text: PDF (189) Google Scholar
41. L. Lei and Q. Shiru, "Path planning for Unmanned Air Vehicles using an improved artificial bee colony algorithm", 31st Chin. Control Decis. Conf , 2012.
Show in Context Google Scholar
42. R. Zi-hui, W. Jian and G. Yue-lin, "The global convergence analysis of particle swarm optimization algorithm based on Markov chain", Control Theory Appl. , vol. 28, no. 4, pp. 462-466, Apr. 2011.
Google Scholar
43. N. Ai-ping and Z. Xue-ying, "Convergence analysis of artificial bee colony algorithm", Control Decis. , vol. 28, no. 10, pp. 1554-1558, Oct. 2013.
Google Scholar
44. S. Junna, C. Tao, Y. Keqiang and L. Shen, "Markov chain model analysis of bat algorithm", Comput. Eng. , vol. 43, no. 7, pp. 198-202, Jul. 2017.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
