2021 International Conference on Unmanned Aircraft Systems (ICUAS) Athens, Greece. June 15-18, 2021

2021 International Conference on Unmanned Aircraft Systems (ICUAS) | 978-1-6654-1535-4/21/$31.00 ©2021 IEEE | DOI: 10.1109/ICUAS51884.2021.9476752

Three Dimensional Optimal Path Generation and Tracking for Quadrotors in Dynamic Environment
Hariharan R.1, Siddarth Yadla2 and Sikha Hota3

Abstract— This paper presents a collision avoidance algorithm for quadrotors in a three-dimensional (3D) cluttered environment ﬁlled with dynamic obstacles, including a path re-planning algorithm to rejoin with its original trajectory in optimal time. The algorithms are based on a geometrical approach, accomplished by changing the heading and the pitch angles of the quadrotor simultaneously while keeping its speed constant. The novelty of the proposed work is that the algorithm ensures a smooth path generation for both the collision avoidance and re-planning maneuvers for the quadrotor with very low tracking error, including optimality in path length. To validate the proposed algorithm, the generated path is tracked using a dynamic model of a quadrotor using a Lyapunov-based backstepping controller in the presence of external disturbances.
I. INTRODUCTION
Quadrotors have been gaining a lot of momentum due to their applications in a large spectrum of human lives. They are popularly used because of ease of manufacturing, ability to lift off heavy payload, and inherent capability of automation.
For tasks to be completed successfully in a cluttered environment, it is necessary for quadrotors to plan their path, avoiding obstacles, both static and dynamic, on the way. Path planning algorithms are generally classiﬁed into two categories, global and local. The global planning algorithms provide solutions considering the information about the whole environment beforehand. So this requires a considerable amount of memory for storage and computation. The local planning algorithms, on the other hand, are reactive. They only provide solutions reacting to local information acquired from the sensors of quadrotors, which signiﬁcantly reduces the computational requirements and makes it efﬁcient to implement in real-time. But the drawback of local planning algorithms is that they may not provide global optimal solutions. Hence, a hybrid approach that plans the path before the task using a global planner and avoids obstacles on the way using a local planner is preferable [1].
There have been a variety of approaches proposed over the years for collision avoidance. Some of the famous approaches include A* [2], Delaunay Triangulation [3], Rapidly-exploring Random Trees (RRT) [4] and Potential
1Hariharan R. is with the Department of Aerospace Engineering, Indian Institute of Technology Kharagpur, Kharagpur, West Bengal 721302, India rhari1999@iitkgp.ac.in
2Siddarth Yadla is with the Department of Aerospace Engineering, Indian Institute of Technology Kharagpur, Kharagpur, West Bengal 721302, India siddarthyadla@iitkgp.ac.in
3Sikha Hota is with the Department of Aerospace Engineering, Indian Institute of Technology Kharagpur, Kharagpur, West Bengal 721302, India sikhahota@aero.iitkgp.ac.in

Field approaches [5]. A comprehensive survey of these methods is presented in [6]. These methods, even though they provide optimal solutions, require high computational memory and time. Geometric-based algorithms have been widely used as they require low memory and use low computation time, making them simple, efﬁcient, and easy to implement. These algorithms use the geometric relation between an unmanned aerial vehicle (UAV) and an obstacle to calculate the optimal trajectory to evade obstacles. Many geometric-based collision avoidance algorithms exist in the existing literature, such as [7], [8], [9], [10], [11], [12], [13], [14]. Each of these methods has assumed that the change in velocity of the UAV is instantaneous, which demands very high lateral acceleration and hence, impractical. A novel practical collision avoidance approach called 3-dimensional velocity obstacle (3DVO) method, achieved by using a pure turning maneuver of the UAV in a chosen avoidance plane, was proposed in [15]. Since the avoidance plane is selected from a ﬁnite set, the proposed solution does not guarantee global optimality.
In this paper, a collision avoidance strategy and a path re-planning algorithm for quadrotors are proposed to avoid dynamic obstacles and then return to its original trajectory. The collision avoidance algorithm is based on the geometric method that provides an optimal solution by minimizing the change in the velocity vector. In addition, a novel pathreplanning algorithm which makes the quadrotor maneuver back to its original course after successful collision avoidance has been presented. The algorithm presented in this paper changes the heading and elevation of the quadrotor simultaneously for maneuvers, keeping its speed constant. In addition, the proposed work ensures a smooth transition of the velocity vector by maneuvering the quadrotor along circular curves in three-dimensional (3D) space, making it implementable in real-world applications with very low tracking error.
Along with the path planning, a path tracking algorithm [16], [17] that guarantees asymptotic convergence of the UAV with the desired path is also presented here. In order to solve the trajectory tracking problem, many nonlinear controllers like Lyapunov-based control, Sliding mode control [18], [19], backstepping control [20], [21], feedback linearization control [22], and model predictive control [23], [24] exist in the literature. These control techniques take into account the nonlinearities of the dynamics and assure the stability of the nonlinear system [25]. In this work, a Lyapunov-based backstepping control with integral action and Saturation function [26] has been used to track the path

978-0-7381-3115-3/21/$31.00 ©2021 IEEE

120

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

derived from the collision avoidance algorithm efﬁciently with very low tracking error.
The rest of the paper is organized as follows: Section II describes the problem formulation. Section III-A deals with the collision detection algorithm. In section III-B, the collision avoidance approach is presented. Section III-C discusses the novel path replanning approach for the quadrotor to reach the original trajectory. Section IV presents the dynamic model of the quadrotor and the controller design to track the generated path. Section V demonstrates the simulation results. Finally, section VI concludes the paper.
II. PROBLEM FORMULATION

Fig. 2. Deﬁnition of minimum separation distance vector

the following conditions are satisﬁed:

# »

|drel| < dmin and r˙ < 0

(2)

where dmin is the minimum distance radius, i.e., the radius of the avoidance sphere.

B. Collision Avoidance

Fig. 1. Position vectors of quadrotor A0, obstacle B0 and the goal G.

Consider that a quadrotor is moving with constant speed

along a trajectory generated using a global path planner. The

quadrotor detects constant velocity

an #v».

intruder Let the

at position B0 position and

moving velocity

with a of the

quadrotor at this instant be A0 and #u» respectively. All the

vectors are measured in the inertial frame of reference with

x, y, z coordinate axes (refer Fig. 1).

The quadrotor calculates that it would collide with the

intruder if it advanced in the same direction [9]; hence, it

becomes necessary to change its trajectory course.

We focus mainly on two objectives in this paper:

1) To develop a local path planning algorithm that not only avoids the collision with the intruder but also enables the quadrotor to rejoin with its initial trajectory.
2) To design a trajectory tracking algorithm that will ensure the convergence of the quadrotor with the generated path.

III. PATH PLANNING

A. Collision Detection

The collision detection technique is excerpted from [9].

The relative velocity of the quadrotor with respect to the intruder is given by v#re»l = #u»#−»#v» (see Fig. 2). The minimum separation distance vector, drel between the UAV and the

obstacle as deﬁned in [9] can be calculated as

# » drel =

#r» · v#re»l |v#re»l|2

v# re»l

−

#r»

(1)

where, #r» = r#»v − r#»u. It is proved in [9] that the collision

between the UAV and the obstacle is certain if and only if

Fig. 3. Quadrotor turning maneuver along a circular path

Consider that the collision avoidance trajectory includes

a circular turn with radius ρ for t0 seconds on an arbitrary plane, π followed by a straight line till the obstacle is evaded.

ρ can be chosen according to the dynamics of the quadrotor. The quadrotor changes its velocity from #u» to u# new» after

the travel along the circular path (see Fig. 3(a)), and this

change avoids the collision with the intruder. Let the angle

subtended by the circular path towards the center be ϕ. The

relation between ϕ and t0 is given as:

ϕ = | #u»|t0

(3)

ρ

Let the positions of the quadrotor and the intruder, after the quadrotor makes the circular turn, be At0 and Bt0 ,

121

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

respectively. Let us consider two arbitrary points, A on the

initial trajectory of the quadrotor and B on the trajectory

of the intruder. These points are chosen such that if the quadrotor moves from the point A with the velocity u# new»

and the intruder moves from the point B with the velocity #v», they reach the points A0 and B0, respectively after t

seconds. It is assumed that the initial trajectory is a straight

line i.e.,

i# n A0

At»hehvasictihneitysaomf ethdeirceuctriroenntapso#us»it.ioUnsionfg

the quadrotor, geometry, we

can show that (Fig. 3(b))

t=

A|A#u»t|0

=

A0A | #u»|

=

ρ tan(ϕ/2) | #u»|

(4)

r#A» = r#»u + #u».t

(5)

r#B» = r#»v + #v».(t0 − t)

(6)

where r#A» and r#A» are the position vectors of the points A

and B, respectively.

Now, we can redeﬁne the problem as: ”Given that the

quadrotor and the obstacle are at virtual positions, A and B, with the velocities #u» and #v», respectively, ﬁnd the

optimal velocity vector for the quadrotor, which will change

instantaneously from its current direction to avoid collision and make an angle ϕ with #u».”

Fig. 4. Geometric visualization of collision avoidance approach

# » Consider the points D and F such that AD has the same

mqoufaatgdhnreiottuvoderce, tv#oarrne»dl−ad#nv»irde(cA#rteiFf»oenrhaoﬁsfgtt.hh4ee)sr.aeTmlaheteivmepaovgseniltioitoucnidteyvaevncetdcotdrosirreoocfftittohhnee points, D and F are given by

r#D» = r#A» + #u» − #v»

(7)

r#F» = r#A» − #v» = r#»u + #u».t − #v»

(8)

#» #» Note that the vectors AD and AF are in meters whereas v#re»l and − #v» are in meters per second.

The con#e, »C1 represents the collision cone. To avoid the

collision, AD The center of

should lie the sphere

on or S lies

aotutFsi,deantdhesicnoclelisF#ioD»n

cone. = #u»,

the radius is equal to | #u»|. The signiﬁcance of the sphere, S

is that the vector joining the point, A to any point on the

sphere S, represents a possible relative velocity vector of

the quadrotor keeping its #spe»ed constant. The cone, C2 has its vertex ﬁxed at F and F D as its axis. The semi-vertical

angle of the cone, C2 is equal to ϕ, and hence any vector

joining the point, F to any point on the cone will make an angle, ϕ with #u». Since the vertex of the cone, C2 intersects with the center of the sphere, S, their intersection will be a

circle. Hence, to reduce the system further, the circle can be

interpreted as an intersection between the sphere, S, and a

plane, P. Let the center of the circle be the point, C and its position vector, r#C» can be calculated as:

r#C» = r#F» + (1 − cos ϕ) #u»

(9)

For simplifying the notations, we deﬁne two nomencla-

tures here:

1) 2)

vi iP

≡ ith ≡ ith

component component

of of

any any

vector #v» position vector

r# P»

The equations of the plane, P, the sphere, S and the cone,

C1 can be given as

P : ux(x − xC ) + uy(y − yC ) + uz(z − zC ) = 0 (10) S : (x − xF )2 + (y − yF )2 + (z − zF )2 − | #u»|2 = 0 (11) C1 : (|r#AB»|2 − d2min)[(x − xA)2 + (y − yA)2 + (z − zA)2]

− [xAB(x − xA) + yAB(y − yA) + zAB(z − zA)]2 = 0

(12)

where, r#AB» components

= of

r#r#B»AB−»

r#A» and xAB, yAB, zAB are respectively. Any point on

the x, y, z the inter-

section of the sphere, S, the cone, C1, and the plane, P

is a possible solution and let us consider one such point

be Q(x, y, z). Since we are ﬁnding an optimal solution, to

minimize the change in velocity vector, the point Q should

lie close to the point, D. Let the function, f represent the

Euclidean distance between the points Q and D.

f = (x − xD)2 + (y − yD)2 + (z − zD)2

(13)

The problem is now a constrained nonlinear multi-variable optimization problem, described as

min f s.t. S = 0, C1 = 0, P = 0, and ϕ > 0.
x,y,z,ϕ

This problem can be solved numerically using the fmincon

function or MultiStart function (for multiple local minimum

solutions) in MATLAB. Once the solution is found, we can calculate t0 from (3) and u# new» can be calculated as

u# new» = x − xF y − yF z − zF T

(14)

where, xF , yF , zF can be calculated from (4) and (8). The equation of the plane, π can be calculated as

P lane π : nx(x − xu) + ny(y − yu) + nz(z − zu) = 0 (15) wu# nheew»re. ,Tnhxe,cnoyll,insizonaraevothideanxc,ey,trzajeccotmorpyonweinlltsbeofgiv#n»en=by#u»th×e circular path in the plane, π for t0 second, and then a straight path. The maneuver will end when the quadrotor reaches the point of the closest approach with the intruder (see Fig. 5) as the distance between them increases after this moment.
A solution cannot be found if the sphere, S lies entirely inside the cone, C1 and so, the proposed approach can be used if and only if the following condition holds:
∃(x, y, z) ∈ C1: (x − xF )2 + (y − yF )2 + (z − zF )2 ≤ | #u»|

122

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

Fig. 5. Quadrotor at Point of Closest Approach (PCA)
In rare cases where the condition does not hold, a solution is possible if an intersection exists between the cone and the sphere, which is possible only with an increase in the speed of the quadrotor, which is beyond the scope of the present work. The method for this particular case was presented in [10] to provide a solution for heading, elevation, and speed change, but the change of velocity vector was instantaneous and hence impractical. C. Path Replanning
Fig. 6. (a) Global Frame (b) Relative Frame
The replanning maneuver includes two circular turns with a straight path connecting those two turns. Let the position of the quadrotor and the intruder at the point of the closest approach be C and B, respectively. Consider a point, T (xT , yT , zT ), where the quadrotor will rejoin its initial trajectory, and the desired velocity of the quadrotor at T be #u». Let the time taken for the collision avoidance maneuver be tC seconds. The replanned maneuver is given by the path CP QET in the plane π, which is the same plane described in the collision avoidance trajectory (see Fig. 6(a)). P Q and ET are circular arcs of radius, ρ and subtend angles, γ1, and

γ2, with their centers, O and O , respectively. The point, D is the intersection of the extended portions of the line segments, CP , and QE.
Let the time taken to reach P and Q be t1 and t2, respectively. The position vectors for points, P, Q and D can be calculated as

r#P» = r#H» + u# new».(t1 − tC )

(16)

r# D»

=

r# P»

+

ρ

tan(γ1/2) |u# new»|

u# new»

(17)

r# Q»

=

r# D»

+

ρ

tan(γ1/2) |u# tur»n|

u# tur»n

(18)

ﬁawvrhsoetirdceainruc#cunele,aw»ru# ttiuusrrn»nth.eiu#svtutehrl»noecivisteylcoaoclfictuythlaeotefqduthaaesdrqoutoardraofttoerr

collision after the

u# tur»n

=

|u# new»|

r# E» |r# E»

− −

r# D» r# D»|

(19)

Let the point of the intersection between the extended

portions of the line segment, QE, and the initial trajectory

be S. We assume vicinity of point,

that the T , i.e.,

S#inT»itihaal strtahjeecstoarmyeisdisrtercatiigohnt

in as

the #u».

The position vectors of points, E, and S are calculated as

r# S»

=

r# T»

−

ρ tan(γ2/2) | #u»|

#u»

(20)

r# E»

=

r# S»

−

ρ

tan(γ2/2) |u# tur»n|

u# tur»n

(21)

The angles, γ1, and γ2 are given by

γ1 = cos−1

u# new».u# tur»n |u# new»||u# tur»n|

(22)

γ2 = cos−1

#u».u# tur»n | #u»||u# tur»n|

(23)

To simplify further, let us consider the point, E, to be the local goal of the quadrotor. The path is given by C P Q E transforming it to the relative frame of the intruder. In this frame of reference, the circular path P Q will be transformed into a trochoid, P Q (see Fig. 6(b)). The position vectors of the points Q and G can be calculated as

r#Q» = r#Q» − #v».t2

(24)

r#E» = r#E» − #v».tf

(25)

Let the total time taken to reach the goal be tf . The relations between t1, t2 and tf are given as

t2

=

t1

+

ργ1 |u# new»|

(26)

tf

=

t2

+

r#E» − r#Q» |u# tur»n|

(27)

For an optimal maneuver, a path is considered such that Q E is tangential to the avoidance sphere at the point,

123

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

R . Hence, using trigonometry in ∆BR E , the following equation should hold:

|r#B»−r#E»| sin

cos−1

(r#B» − r#E»).(r#Q» − r#E») |r#B» − r#E»| |r#Q» − r#E»|

= dmin (28)

Consider a function, fr that represents the distance traveled by the quadrotor for the replanned maneuver, given as

fr = ργ1 + |r#E» − r#Q»| + ργ2

(29)

For optimal solution, we minimize the function fr, i.e.,

min fr
xT ,yT ,zT

(30)

s.t. (20) − (28), and γ1, γ2 > 0.

This optimization problem can be solved numerically using the fmincon function or MultiStart function (for multiple local minimum solutions) in MATLAB. Once the solution is found, we can get the points in the path CP QET .
It is possible for the optimization problem to have no solution, and hence, we also propose an alternative approach. For this method, the constraint that line segment Q E should be tangential to the avoidance sphere is removed. However, there is a possibility for a previously evaded intruder to appear in this replanned maneuver. To tackle this issue, a parameter, safe replanning radius (dsafe), is proposed for the quadrotor, which is deﬁned as the minimum distance between the quadrotor and the intruder after which the quadrotor starts the circular turn, as shown in Fig. 7.

Fig. 7. Replanning maneuver - Approach II (Relative Frame)

With this parameter, the position vector of the point, P can be calculated as

r#P» = r#C» +

d2saf e − d2min |u# relnew»|

u# new»

(31)

Once r#P» is calculated, the other variables of the problem

(30) can be solved to get the replanned path. Even in

this approach, there are very few cases where an intruder,

previously evaded, may appear on the way. This issue can

be prevented either by turning along the path with a radius

of curvature more than the minimum turning radius of the

quadrotor or increasing the value of the safe replanning

radius.

The combination of the collision avoidance and the replanning algorithms will provide the desired smooth path starting from and ending to the initial trajectory optimally. The generated path for the quadrotor will be a collection of circlestraight-circle (CSC) paths. The path tracking algorithm is discussed in the next section.

IV. TRAJECTORY TRACKING
This section aims at designing a controller that ensures the convergence of the quadrotor with the desired path generated by the path planning algorithm. The problem is described as follows,
• The distance between the center of mass of the quadrotor and the desired position on the generated path should be zero.
• The angle between the velocity vector of the quadrotor and the vector tangent to the desired trajectory should be zero.

A. Dynamic modeling of Quadrotor

In order to understand the position and attitude of the quadrotor in space, following coordinate systems are deﬁned:
• Body-ﬁxed frame, F B (XB, YB, ZB) that is ﬁxed to the quadrotor
• Earth-ﬁxed frame, F E (XE, YE, ZE) that is ﬁxed to the earth
To transform the linear velocities and the angular velocities from the Body-ﬁxed Frame to the Earth-ﬁxed frame, the relationship is as follows:

˙=

R 03×3

03×3 T

VB ωB

(32)

where, gives the quadrotor position (ε = x y z ) and attitude (η = φ θ ψ ), i.e.,

=x y z φ θ ψ

(33)

The linear velocity, VB and angular velocity, ωB, in the body frame is given as

VB = u v w

ωB = p q r

(34)

The rotation matrix R is,

cψcθ cψsθsφ − sψcφ cψsθsφ + sψsφ

R = sψcθ sψsθsφ + cψcφ sψsθcφ − cψsφ (35)

−sθ

cθ sφ

cθ cφ

where cx ≡ cos x and sx ≡ sin x. The transformation matrix is given as,

1 sin φ tan θ cos φ tan θ 

T = 0 cos φ

− sin φ 

(36)

0 sin φ/ cos θ cos φ/ cos θ

The quadrotor is a nonlinear, under-actuated system as six states are controlled by four input variables. The control of the states is accomplished by having an outer loop and an

124

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

inner loop. The outer loop stabilizes the translational states and computes the desired roll and pitch angles which are to be fed to the inner loop to stabilize the attitude. The dynamic equations of the quadrotor are derived using the NewtonEuler method with the assumptions that the quadrotor is rigid and the structure is symmetric, aerodynamic effects are neglected at low speeds. Also the center of mass of the quadrotor is assumed to coincide with the origin of the bodyﬁxed frame.
The Inertial matrix, I is given as

Ixx 0 0 

I =  0 Iyy 0 

(37)

0 0 Izz

The dynamical equations using Newton-Euler’s method can be written as [27], [28],

mI3×3 03×3

03×3

I

V˙B

VB × (mVB)

ω˙B + ωB × (IωB)

=

fB τB

=

frBotor − fgBravity τrBotor

(38)

where fB and τB are the forces and the moments acting on the quadrotor. The forces include the rotor forces (frBotor) and gravitational force (fgBravity). The moments include the rotor moments (τrBotor).
The gravitational forces, rotor forces, and rotor moments
are given by

fgravity = 0 0 −mg T frotor = R frotorx frotory frotorz T
τrBotor = τφ τθ τψ

The dynamic equations of the quadrotor will become

x¨

=

(cos

φ

cos

ψ

sin

θ

+

sin

θ

sin

ψ)

1 m

b(Σωi2)

y¨

=

(cos

φ

sin

ψ

sin

θ

−

sin

θ

cos

ψ)

1 m

b(Σωi2)

z¨

=

cos

θ

cos

φ

1 m

b(ωi2)

−

g

φ¨

=

l Ix

b(ω42

−

ω22)

+ θ˙ψ˙ Iy − Iz Ix

−

Jr Ix

θ˙ωr

θ¨

=

l Iy

b(ω32

−

ω12)

+

φ˙ψ˙ Iz

− Iy

Ix

−

Jr Iy

φ˙ ωr

ψ¨

=

1 Iz

b(ω12

+

ω32

−

ω22

−

ω42)

+

φ˙θ˙ Ix

− Iz

Iy

(39)

where, ωr = ω2 + ω4 − ω1 − ω3. The control inputs to the quadrotor are given as,

U1 b(ω12 + ω22 + ω32 + ω42)

U

=

U2

U3

 

=

  

b(ω42 − ω22) b(ω32 − ω12)

  

(40)

U4

d(ω12 − ω22 + ω32 − ω42)

The external disturbances can be added to the dynamical equations, which can be rewritten in the following form [29].

X¨ = f (X) + g(X)U + δ

(41)

where

X= z φ θ ψ x yT ,



−g



f (X)

=

   

IIyzI−I−xyIIzxθ˙φψ˙˙ψ˙++−JIJIyrxrωωrrφ˙θ˙

  

Ix −Iy Iz

φ˙ θ˙

  

and



0



0

(1/m) cos θ cos φ 0 0 0 





g(X )

=

 







0 0 0 (1/m)ux

l Ix

0

0

0 0

l Iy
0

0
1

  

.



Iz 

0 0 0

(1/m)uy

000

δ = δ1 δ2 δ3 δ4 δ5 δ6 T

where ux and uy are the virtual control inputs and δ is the bounded external disturbance vector (|δi| ≤ β, β is a positive constant). The virtual control inputs are given by

ux = cos φ cos ψ sin θ + sin φ sin ψ

(42)

uy = cos φ sin θ sin ψ − cos ψ sin φ

B. Controller Design
Backstepping control ensures global asymptotic stability for the given choice of Lyapunov function. The classical backstepping technique is not robust to model uncertainties and external disturbances. Hence, an integral action, which eliminates the steady-state error due to the modeling and system uncertainties [30], and a saturation function are added to the control law. The error terms, and the control inputs, for the following system dynamics [29]

X¨ = f (X) + g(X)U + δ

(43)

are deﬁned as follows [26]: The ﬁrst tracking error is deﬁned as

e1 = x1d − x1

(44)

The integral of the error term is,

τ

p1 = e1(τ )dτ

(45)

0

A stabilizing function is deﬁned for the purpose to stabilize the second error term, which is given as

α1 = x˙ 1d + k1e1 + λ1p1

(46)

where, k1 is a positive constant and λ1 is the integral term parameter. Now, the second error term is,

e2 = α1 − x˙ 1 = x˙ 1d − x˙ 1 + λ1p1 + k1e1 (47)

125

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

The Lyapunov function for the ﬁrst and the second error terms can be deﬁned as,

V1(p1, e1)

=

1 2

λ1

p21

+

1 2

e21

(48)

V2(p1, e1, e2)

=

1 2

λ1p21

+

1 2

e21

+

1 2

e22

(49)

The derivatives for the Lyapunov functions are given as,

V˙1(p1, e1) = e1(x1˙ d − x˙1 + λ1p1) = −k1e21 + e1e2 (50)

V˙2(p1, e1, e2) = V˙1(p1, e1) + e2e˙2

= −k1e21 + e2(e1 + x¨1d

(51)

− (x¨1 + k1e˙1 + λp˙1))

From the quadrotor dynamic equations, we get V˙2 = −k1e21 + e2((1 + λ1 − k12)e1 + k1e2 − k1λ1p1 (52)
+ x¨1d − f (x1) − g(x11)U1 − δ1)

The control law to stabilize the error terms is,

U1

1 =
g(x11)

[(1

+

λ1

−

k12)e1

+

(k1

+

k2)e2

− k1λ1p1 − 1sat

e2 µ1

+ x¨1d − f (x1)]

(53)

The derivative of the second Lyapunov function (V˙2) can be proved to be negative deﬁnite using the non-vanishing perturbation theorem [26], [31]. Hence, according to Lyapunov stability theory, the controller ensures the asymptotic stability of the states.
The virtual position control inputs ux and uy and the attitude control inputs can be derived in the same way as U1. The desired pitch angle, φd, can be derived using (42).

V. SIMULATION RESULTS

TABLE I SIMULATION PARAMETERS

Initial Position of Quadrotor Initial Velocity of Quadrotor, #u»
Turning Radius of Quadrotor, ρ
Minimum Distance Radius, dmin Safe Replanning Radius, dsafe Initial Position of Intruder 1 (Dynamic) Velocity of Intruder 1, #v»
Initial Position of Intruder 2 (Static)

(-45,150,350) m 15ˆi m/s 130 m
152.4 m (500 ft) 190.5 m (1.25×dmin) −((1150/3√6.68),4[128ˆi.4+,5ˆj18+.4k)ˆ]mm/s
(1000,100,250) m

For the simulation, the quadrotor is considered moving on a straight-line path initially with a constant speed of 15 m/s. The quadrotor detects a dynamic intruder at t = 3 s and hence calculates the collision avoidance and replanning trajectory. At t = 35.8 s, the quadrotor attempts to rejoin with the initial trajectory after successfully avoiding the dynamic obstacle. But, at t = 41.4 s, the quadrotor detects a static obstacle and hence starts the collision avoidance maneuver once again. Finally, at t = 67.7 s, the quadrotor starts its course to join with the initial trajectory and successfully joins at t = 84.5 s. The parameters for the simulation are tabulated in Table

TABLE II QUADROTOR PARAMETERS

Mass of the quadrotor, m Length, l Acceleration due to gravity, g Roll Inertia, Ixx Pitch Inertia, Iyy Yaw Inertia, Izz Thrust factor, b Drag factor, d

0.65 kg
0.27 m 9.81 m/s2 5.1 × 10−3 kgm2 5.1 × 10−3 kgm2 7.6 × 10−3 kgm2 2.98 × 10−6 Ns2 3.2 × 10−7 Ns2

I. The external periodic disturbances are given as forces and moments, as 0.5sin(t) N and 0.1sin(t) Nm, respectively.
The path tracking algorithm using a 6-degree-of-freedom model of a quadrotor is demonstrated to track the path. The parameters of the quadrotor are tabulated in Table II, and the control parameters used in the simulation are given as [26]
k1−12 = 5 5 2 2 2 2 10 10 12 12 12 5
λ1−6 = 5 3 3 6 6 5
µ1−6 = 1 1 0.4 0.3 0.3 0.3
ε1−6 = 4 6 5 1 1 3
The simulation is performed using MATLAB 2019b on an Intel Core i5-7200U processor and 8 GB RAM system.
Fig. 8 shows the desired trajectory and the actual trajectory of the quadrotor tracked by the controller. The Saturation Integral Backstepping control (SIBC) is compared with the Classical Backstepping Control (CBC) approach in the presence of external periodic disturbances. It can be seen that the SIBC approach is robust to the external disturbances compared to the CBC approach, as discussed in IV. The plots of the control inputs and errors are shown in Fig. 9 and 10 respectively. It can be seen that the path planning algorithm has provided an optimal path avoiding obstacles, and the backstepping controller has tracked the path with an acceptable error.
VI. CONCLUSION
In this paper, a 3-dimensional geometric path planning algorithm that successfully avoids collision with static as well as dynamic obstacles and facilitates the quadrotor to come back to its initial trajectory has been proposed. The algorithms provide an optimal solution by changing the heading angle and the pitch angle of the quadrotor simultaneously while keeping the speed constant. The novelty of the presented approach is that the change in the velocity for collision avoidance is made smooth, making it ﬂyable. A Lyapunov-based backstepping controller has also been designed using a six-degree-of-freedom model of a Quadrotor for tracking the path. The controller is proved to be stable even in the presence of external disturbances such as periodic disturbances in this work. This demonstrates that the proposed approach could be implemented in quadrotors to ﬂy in real-world scenarios.

126

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

Fig. 8. Comparison of Desired Path and Actual Path of the Quadrotor under periodic disturbances

Fig. 9. Control inputs for the quadrotor under periodic disturbances

Fig. 10. Tracking errors from the replanned path under periodic disturbances

REFERENCES
[1] I. Mahjri, A. Dhraief, and A. Belghith, “A review on collision avoidance systems for unmanned aerial vehicles,” in Communication Technologies for Vehicles. Cham: Springer International Publishing, 2015, pp. 203–214.
[2] P. Ferbach, “A method of progressive constraints for nonholonomic motion planning,” IEEE Transactions on Robotics and Automation, vol. 14, no. 1, pp. 172–179, 1998.
[3] M. Shanmugavel, A. Tsourdos, and B. A. White, “Collision avoidance and path planning of multiple uavs using ﬂyable paths in 3d,” in 2010 15th International Conference on Methods and Models in Automation and Robotics, 2010, pp. 218–222.

[4] Y. Lin and S. Saripalli, “Path planning using 3d dubins curve for unmanned aerial vehicles,” in 2014 International Conference on Unmanned Aircraft Systems (ICUAS), 2014, pp. 296–304.
[5] O. Khatib, “Real-time obstacle avoidance for manipulators and mobile robots,” in Proceedings. 1985 IEEE International Conference on Robotics and Automation, vol. 2, 1985, pp. 500–505.
[6] J. N. Yasin, S. A. Mohamed, M.-H. Haghbayan, J. Heikkonen, H. Tenhunen, and J. Plosila, “Unmanned aerial vehicles (uavs): Collision avoidance systems and approaches,” IEEE Access, vol. 8, pp. 105 139– 105 155, 2020.
[7] A. Chakravarthy and D. Ghose, “Obstacle avoidance in a dynamic environment: a collision cone approach,” IEEE Transactions on Systems,

127

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

Man, and Cybernetics - Part A: Systems and Humans, vol. 28, no. 5, pp. 562–574, 1998.
[8] J. Goss, R. Rajvanshi, and K. Subbarao, “Aircraft conﬂict detection and resolution using mixed geometric and collision cone approaches,” in AIAA Guidance, Navigation, and Control Conference and Exhibit, 2004, p. 4879.
[9] C. Carbone, U. Ciniglio, F. Corraro, and S. Luongo, “A novel 3d geometric algorithm for aircraft autonomous collision avoidance,” in Proceedings of the 45th IEEE Conference on Decision and Control, 2006, pp. 1580–1585.
[10] S. Luongo, C. Carbone, F. Corraro, and U. Ciniglio, “An optimal 3d analytical solution for collision avoidance between aircraft,” in 2009 IEEE Aerospace conference, 2009, pp. 1–9.
[11] S. Luongo, F. Corraro, U. Ciniglio, V. Di Vito, and A. Moccia, “A novel 3d analytical algorithm for autonomous collision avoidance considering cylindrical safety bubble,” in 2010 IEEE Aerospace Conference, 2010, pp. 1–13.
[12] J.-W. Park, H. Oh, and M.-J. Tahk, “Uav conﬂict detection and resolution based on geometric approach,” International Journal of Aeronautical and Space Sciences, vol. 10, pp. 37–45, 05 2009.
[13] C. Lai, M. Lone, P. Thomas, J. Whidborne, and A. Cooke, “Onboard trajectory generation for collision avoidance in unmanned aerial vehicles,” in 2011 IEEE Aerospace Conference, 2011, pp. 1–14.
[14] X. Yang, L. M. Alvarez, and T. Bruggemann, “A 3d collision avoidance strategy for uavs in a non-cooperative environment,” Journal of Intelligent & Robotic Systems, vol. 70, no. 1, pp. 315–327, Apr 2013.
[15] Y. I. Jenie, E.-J. van Kampen, C. C. de Visser, J. Ellerbroek, and J. M. Hoekstra, “Three-dimensional velocity obstacle method for uncoordinated avoidance maneuvers of unmanned aerial vehicles,” Journal of Guidance, Control, and Dynamics, vol. 39, no. 10, pp. 2312–2323, 2016.
[16] R. W. Beard and T. W. McLain, Small unmanned aircraft: Theory and practice. Princeton University Press, 2012.
[17] S. Hota and D. Ghose, “Optimal trajectory planning for path convergence in three-dimensional space,” Proceedings of the Institution of Mechanical Engineers, Part G: Journal of Aerospace Engineering, vol. 228, no. 5, pp. 766–780, 2013.
[18] M. Herrera, W. Chamorro, A. P. Go´mez, and O. Camacho, “Sliding mode control: An approach to control a quadrotor,” in 2015 AsiaPaciﬁc Conference on Computer Aided System Engineering. IEEE, 2015, pp. 314–319.
[19] K. Runcharoon and V. Srichatrapimuk, “Sliding mode control of quadrotor,” in 2013 The International Conference on Technological Advances in Electrical, Electronics and Computer Engineering (TAEECE). IEEE, 2013, pp. 552–557.
[20] W. Jasim and D. Gu, “Integral backstepping controller for quadrotor path tracking,” in 2015 International Conference on Advanced Robotics (ICAR). IEEE, 2015, pp. 593–598.
[21] S. Bouabdallah and R. Siegwart, “Backstepping and sliding-mode techniques applied to an indoor micro quadrotor,” in Proceedings of the 2005 IEEE international conference on robotics and automation. IEEE, 2005, pp. 2247–2252.
[22] A. Akhtar, S. L. Waslander, and C. Nielsen, “Fault tolerant path following for a quadrotor,” in 52nd IEEE Conference on Decision and Control. IEEE, 2013, pp. 847–852.
[23] C. E. Garcia, D. M. Prett, and M. Morari, “Model predictive control: Theory and practice—a survey,” Automatica, vol. 25, no. 3, pp. 335– 348, 1989.
[24] M. Bangura and R. Mahony, “Real-time model predictive control for quadrotors,” IFAC Proceedings Volumes, vol. 47, no. 3, pp. 11 773– 11 780, 2014.
[25] F. Alyoussef and I. Kaya, “A review on nonlinear control approaches: sliding mode control back-stepping control and feedback linearization control,” in International Engineering and Natural Sciences Conference (IENSC 2019), vol. 2019, 2019, pp. 608–619.
[26] L. Zhou, J. Zhang, H. She, and H. Jin, “Quadrotor uav ﬂight control via a novel saturation integral backstepping controller,” Automatika, vol. 60, no. 2, pp. 193–206, 2019.
[27] Z. Benic´, P. Piljek, and D. Kotarski, “Mathematical modelling of unmanned aerial vehicles with four rotors,” Interdisciplinary Description of Complex Systems: INDECS, vol. 14, no. 1, pp. 88–100, 2016.
[28] D. Kotarski, Z. Benic´, and M. Krznar, “Control design for unmanned aerial vehicles with four rotors,” Interdisciplinary Description of Complex Systems: INDECS, vol. 14, no. 2, pp. 236–245, 2016.

[29] M. A. M. Basri, A. R. Husain, and K. A. Danapalasingam, “Enhanced backstepping controller design with application to autonomous quadrotor unmanned aerial vehicle,” Journal of Intelligent & Robotic Systems, vol. 79, no. 2, pp. 295–321, 2015.
[30] Y. Al Younes, A. Drak, H. Noura, A. Rabhi, and A. El Hajjaji, “Nonlinear integral backstepping model-free control applied to a quadrotor system,” in Proceedings of the 10th International Conference on Intelligent Unmanned Systems, Montreal, Canada, vol. 29, 2014.
[31] H. Khalil, Nonlinear Systems, ser. Pearson Education. Prentice Hall, 2013.

128

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on April 21,2022 at 10:10:15 UTC from IEEE Xplore. Restrictions apply.

