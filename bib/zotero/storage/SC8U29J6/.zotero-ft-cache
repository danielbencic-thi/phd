IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
Adaptation of Lazy-Theta for UAS 3D path planning considering safety costs
Publisher: IEEE
Cite This
PDF
Rafael Rey ; Jose A. Cobano ; L. Merino ; F. Caballero
All Authors
View Document
59
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    3D Path Planning for UAS
    III.
    3D Planner Based on Lazy Theta* Algorithm
    IV.
    Experimental Results
    V.
    Conclusion and Future Work

Authors
Figures
References
Keywords
Metrics
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper presents a 3D path planning solution for UAS to obtain a safe and smooth path. The safety plays an important role in the missions with UAS surrounding or enter... View more
Metadata
Abstract:
This paper presents a 3D path planning solution for UAS to obtain a safe and smooth path. The safety plays an important role in the missions with UAS surrounding or entering the buildings. The heuristic search algorithms are good candidates to address this problem. The Lazy Theta* algorithm has been modified to foster safety and smoothness maintaining a distance from obstacles of the environment. Modifications to consider a new cost component related to the distance to the obstacles are performed. Tests in a realistic environment are shown to evaluate how the modified algorithm computes safer and smoother paths. Moreover, a comparison with the A* algorithm, the A* algorithm considering the new cost component and the original Lazy Theta* is presented.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20916276
DOI: 10.1109/ICUAS51884.2021.9476772
Publisher: IEEE
Conference Location: Athens, Greece
Funding Agency:
Contents
SECTION I.
Introduction

Safe and efficient path generation is a key problem in Unmanned Aerial Systems (UAS) applications where the robot has to navigate autonomously and close to obstacles such as building or indoors, for instance, disaster management [1] , rescue operations [2] , industrial inspection [3] and package delivery 1 , to name a few. Typically this planning implies a trade-off due to the challenges in computing safe paths, and the complexity of the generation of efficient trajectories that can be executed with relatively low control effort.

UAS path planning has been extensively studied in the literature. Heuristic search algorithms such as A* [4] or D* [5] , [6] have been frequently used for UAS path-planning. A common drawback of these discrete search techniques is that the computed path is not the shortest in continuous space because they are formed by grid edges. The Lazy-Theta* algorithm (a more efficient variant of the Theta* [7] ), has been proposed for UAV planning in several works [8] – [9] [10] [11] , as it offers certain advantages. As shown in [12] , the algorithm leads to paths significantly shorter than A* in 3D grids. Also, it produces smoother paths, avoiding the typical post-processing step required to smooth the zig-zag patterns that algorithms like A* provide.

Most former works focus on computing the shortest path. However, as discussed above, in many applications we need to consider at the same time other aspects, like safety, maintaining a distance from obstacles. This can be done by considering additional cost factors when computing the optimal path, like the distance function with respect to obstacles. Lazy Theta*, however, cannot consider cost functions, as it is directly designed to minimize the Euclidean distance. A*, on the other hand, can consider generic cost functions, but the path will suffer from the same drawbacks mentioned above.

In this paper, we modify the original Lazy-Theta* [12] and extend it to consider the additional cost components while, at the same time, maintaining some of its advantages. The aim is to compute safe and efficient 3D paths for UAS flying close to building or crossing it. The modifications implemented foster safety. We provide comparisons with other search algorithms in order to evaluate the trade-off between safety and computation time.

The paper is organized into five sections. Section II reviews the literature on path planning. The proposed 3D path planning algorithm is presented in Section III . The experimental results and analysis is shown in Section IV , and finally Section V presents the conclusions.
SECTION II.
3D Path Planning for UAS

Different types of approaches for tackling 3D path planning have been proposed in the literature: discrete search optimal algorithms, sampling-based algorithms and bioinspired algorithms. Among the search methods, A* [4] , [13] and Theta* [14] are the preferred approaches in the literature. The zig-zag patterns of the A* are solved by the any-angle path planning Theta* [15] . A faster version of Theta* algorithm is presented in [16] . Another variation of the Theta* is the Lazy Theta* algorithm, which also optimizes the computational load of the algorithm by reducing the number of lines of sight checks [12] . As mentioned above, it has been proposed for UAV planning [8] – [9] [10] [11] .

Sampling-based algorithms such as RRT (Rapidly exploring Random Tree) have also been used in path planning [17] . A comparison between A* and RRT algorithms for path planning in UAS is presented in [18] . Variants of the RRT have also been proposed such as RRT* and RRT-Connect. RRT* produces very optimal paths at the expense of non real-time rates [19] . RRT-Connect achieves faster solutions but at the cost of obtaining longer paths [20] . The advantage of the graph-based methods with respect to sampling-based algorithms is a path closer to the shortest solution, and it is deterministic. Different probabilistic methods are used to solve the motion planning problem in UAVs but the planned trajectory can vary significantly from one execution to another [21] .

A class of methods also used for planning are those based on motion primitives. In [22] , they are used for navigating through partially known environments with multicopters. Other alternative is to solve the optimal control problem using mixed-integer programming [23] . Bioinspired approaches imitate the behavior of humans or other animals, it is worth to mention Particle Swam Optimization (PSO) [24] , and also genetic algorithms [25] . These algorithms generally require significant computational resources, and their performance may vary depending on the scenario considered.

Heuristic search algorithms are used in this work due to the advantages previously mentioned, related to the path length and repeteability. Among the search algorithms presented, we choose the Lazy Theta* algorithm because computes shorter and smoother paths reducing the computation time with respect to Theta* algorithm.
SECTION III.
3D Planner Based on Lazy Theta* Algorithm

The proposed 3D path planning algorithm is based on the Lazy Theta* algorithm [12] . Algorithm 1 shows the pseudo-code of the original Lazy Theta* algorithm and highlights the modifications implemented, that will be explained below.

The scenario is discretized into a 3D grid for the search algorithm. The voxel centres of the grid are the nodes s of the graph, and we consider a 26-node neighborhood. The aim is to find a valid path from an initial node to the goal node without crossing obstacles. The algorithm assumes full observability of this grid.

Lazy Theta* is a variation of Theta* [12] , which is a any-angle version of the A* [15] . Theta* creates the path without restringing it to the graph edges. The key difference between A* and Theta* is that the latter allows the parent of a vertex to be any vertex in the graph if it is visible from it. However, the associated line of sight checks increase the computational load, thus negatively impacting the performance in terms of path computation time.

The term ‘Lazy’ in the Lazy Theta* algorithm comes from the fact that the algorithm reduces the line of sight checks performed during the search, buy delaying them until they are strictly necessary. Lazy Theta* assumes line of sight between nodes when expanding the search (ComputeCost in Line 30), delaying the most possible the line of sight check (which actually takes place in SetVertex in line 37). This is very important in 3D graph with respect to 2D graph because in 3D we have 26 neighbours for each vertex instead of the 8 neighbours of the 2D situation.
A. Variations on the Original Lazy Theta* Algorithm

This section describes the modifications performed on the original Lazy Theta*. The first modification tackles the separation of the obstacles by introducing a non-uniform cost related to the distance to the closest obstacle of each node, so safer paths are computed as they move further away from obstacles. This non-uniform cost is also a suitable way to consider traversability issues on the grid.

The second modification relates to the line of sight in order to produce a smooth path that avoids the obstacles of the environment and in turn fosters the safety. The line of sight feature links the different nodes of the path if they are visible to each other, so the possible benefits of introducing the distance cost term to get safer paths could be lost. Therefore, a maximum line of sight distance helps to control the effect of considering distance costs during the evaluation of the cost of the grid nodes. Hence, in every line of sight check, if the distance between the nodes is higher than a maximum line of sight then there is no line of sight between these two nodes.
Algorithm 1: Lazy Theta* with the Introduced Modifications in Red

The modifications are shown in red in Algorithm 1 . The resultant variant to compute safer paths is called Cost-Aware Lazy Theta* algorithm (CALT*). Next, both modifications of the Lazy Theta* algorithm are described in detail:

    Cost to reach a node . A new cost term, c o b s ( s ′ ) , is added to the Euclidean distance ( g function defined in Algorithm 1 ) in the original algorithm (see lines 33, 35, 40 and 41 of the Algorithm 1 ). For each node in the grid, c o b s depends on the distance to the nearest obstacle. Then, the cost to reach a node is now a sum of the path length, g , and the new cost component for the nodes that define the trajectory, c o b s . The latter component is weighted by a factor C w which makes paths with larger safe margins with respect to obstacles depending on its value.

    Line of sight . The line of sight is limited to prevent the algorithm linking two nodes further than a given distance. Thus, a maximum line of sight distance is included, max in line 38 of the Algorithm 1 , allowing the algorithm to link two nodes only if they are not further than this distance. If this distance is set to ∞ then we recover the original Lazy-Theta* algorithm. This will affect directly the number of expanded nodes.

B. Generation of 3D Grid Costs

The distance cost for each node of the grid evaluated during the search process is generated offline considering the distance to the closest occupied node to every node in our 3D Map, that is to the closest obstacle. For this purpose we generate a distance field (DF) from either a PointCloud or an Octomap [26] , storing for each node the distance to the closest obstacles and the associated cost. This avoids calculating it online every time the node is evaluated, with the corresponding computational cost saving.

We have chosen the same exponential decay function as the one used in the ROS Layered Costmap 2D [27] :
c o b s ( s ) = W 0 ⋅ e − c s f ∗ D F ( s ) (1)
View Source \begin{equation*}c_{obs}(s)=W_{0}\cdot e^{-c_{sf}\ast DF(s)}\tag{1}\end{equation*} where D F ( s ) is the distance to the closest obstacle in meters from state s ,   c s f is the scaling factor of the exponential decay, that modulates the decay ratio and W 0 is the maximum cost for a node close.

Figure 1 shows how both modifications influence the path computed fostering the safety and smoothness. The inclusion of the maximum line of sight and the distance cost makes the computed path to surround the building depending on the weight cost (see Figure 1-d ), instead of passing through of the first floor of the building with a lower value of the weight cost 1-c), Figure 1-a shows the path computed when line of sight is not limited and the distance cost is considered. This path is very similar to one computed by the original Lazy Theta* because the effect of the distance cost is overridden when line of sight is not limited and so the path computed passes through the windows. Figure 1-b shows how the maximum line of sight influences without considering the distance cost. This path is smoother than the one computed in the first case and the path computed passes through the windows again.
Fig. 1.

Influence of the Calt* algorithm: (a) Path computed considering the distance cost and line of sight without limits; (b) Path computed considering the maximum line of sight but not the distance cost; (c) Path computed considering both modifications of the proposed algorithm with weight cost 0.05; (d) Path computed considering both modifications of the proposed algorithm with weight cost 0.15.

Show All

SECTION IV.
Experimental Results

Many tests have been performed with each algorithm considering the scenario shown in Fig. 2 . This scenario corresponds to Challenge 3 of the 2020 Mohamed Bin Zayed International Robotics Challenge (MBZIRC) held in Abu Dhabi (UAE) on February 20-25, 2020 2 . The challenge required to autonomously detect, locate and extinguish fires on different floors of a building, as well as in its surroundings. Safety is crucial in applications with UAS where the robot should approach to a facade or come into a building. Therefore, the proposed algorithm should be relevant in these applications.

The computer and the resources used to perform the tests are: Intel Core i7-7000 CPU 3.60GHz, 32 GB RAM, with Ubuntu OS 16.04 LTS. All the planning algorithms in this paper have been developed in C++ language and has been integrated in ROS (Robot Operating System) framework. Particularly, with ROS Kinetic Distribution.
Fig. 2.

Scenario considered in the test performed.

Show All

This section compares results obtained with A*, A* considering the distance cost to the obstacles, Lazy Theta* and CALT* algorithms. Two paths are considered to evaluate each algorithm: the first one is to fly from one facade to the opposite one, the UAS can pass through the building or surround it (see Fig. 1 ); in the second one the UAS has to enter the building passing through a window (see Fig. 3 ). Path length, separation of the obstacles and computation time are the metrics used to evaluate the algorithms. We consider a 3D costmap for the distance to obstacles cost generated with c s f = 0.5 in (1) .

Figure 1 shows the behaviour of each algorithm when the UAS should fly from one facade to the opposite one. In this case, the distance cost makes the path crossing the building through a window, C w = 0.05 (see Fig. 1-c )), or surrounding the building, C w = 0.15 (see Fig. 1-(d) ).

Figures 5 and 6 show the computation time and the path length with the A* considering the distance cost with different C w , the original Lazy Theta* and CALT* algorithm varying the line of sight ( LoS ) and the cost weight ( C w ). The computation time of the A* and original Lazy Theta* are 189ms and 335ms respectively. The inclusion of the modifications in the Lazy Theta* increases the computation time. Regarding to the A* considering the distance cost, the computation time is greater that the CALT* from C w = 0.2 . The times with lower cost weight than C w = 0.2 is better than the one with CALT* but the paths are not smooth and presents abrupt changes of heading (see Fig. 1-(d) and 4 ).

Figure 6 shows how the path length increases with the line of sight and the cost weight. Once the distance cost is considered, the length increases as the path should be safer and so they surround the building further. Note that the path length also depends on the line of sight as it slightly increases with lower line of sight because nodes are not linked from the maximum line of sight. The effect of both modifications of the CALT* shows the expected behaviour with respect to the safety.
Fig. 3.

Paths computed when UAS has to come into the building: (a) A* algorithm; (b) Original Lazy Theta*; (c) A* considering the distance cost with C w = 0.15 ; (d) CALT* with L o S = 2.5 and C w = 0.15 .

Show All
Fig. 4.

Path computed with A* considering the distance cost, C w = 0.25 , when UAS has to fly to the opposite facade.

Show All

Figures 7 and 8 also show the computation time and the path length with the CALT* but when the UAS has to enter the building. In this case, the computation time with the A* is 368ms and the one with the original Lazy Theta* is 489ms. Again the path length computed by the CALT* is shorter than the one of the A* considering the distance cost (see Fig. 3-(c) and 8 ) the path computed by CALT* is safer and smoother, passing farther from the edges of the window (see Fig. 3-(d) ).

Figure 9 illustrates how safer, smoother and longer paths are computed as the cost weight increases with the same line of sight, L o S = 2.5 . Red and blue areas show the distance-to-obstacle costs, red area represents higher cost area and blue red lower cost areas. It can be observed as the cost weight increases, the path moves from the red areas to the blue areas, so the path run away from the building resulting in a safer and longer path.
Fig. 5.

Path surrounding the building. Computation time with the A* considering distance cost (in dotted red line), the original Lazy Theta* (in dotted black line) and the CALT* considering different values of the C w and the following LoS : L o S = 2.5 (black line), L o S = 3 (dashed black line), L o S = 3.5 (grey line), L o S = 4 (dashed blue line).

Show All
Fig. 6.

Path surrounding the building. Path length computed with A* (in dotted red line), the original Lazy Theta* (in dotted black line) and the CALT* considering different values of the C w and the following LoS : L o S = 2.5 (black line), L o S = 3 (dashed black line), L o S = 3.5 (grey line), L o S = 4 (dashed blue line).

Show All
Fig. 7.

Path coming into the building. Computation time with the A* considering distance cost (in dotted red line), the original Lazy Theta* (in dotted black line) and the CALT* considering different values of the C w and the following LoS : L o S = 2.5 (black line), L o S = 3 (dashed black line), L o S = 3.5 (grey line), L o S = 4 (dashed blue line).

Show All

The influence of the distance to obstacle cost on the safety of the path when UAS has to enter into the building is shown in Fig. 3 . The path computed by A* and the original Lazy Theta* passes close to the edges of the window. The path of the A* presents abrupt changes of heading and instead the Lazy Theta* computes a shorter and smoother path than the A*, 7.75m and 10.00m respectively. However, both A* with the new cost and CALT* compute safer paths because they pass farther from the edges of the window ( Fig. 3-c and Fig. 3-d ). The smoothness of the paths are very different and the path length is 12.59m with the A* considering the distance cost (with C w = 0.15 ) and 8.88m with the CALT* (with L o S = 2.5 m and C w = 0.15 ). Regarding the Lazy Theta*, the path length of the CALT* is greater than the original one and is still less than the path length computed by the A*.
Fig. 8.

Path coming into the building. Path length computed with A* (in dotted red line), the original Lazy Theta* (in dotted black line) and the CALT* considering different values of the C w and the following LoS : L o S = 2.5 (black line), L o S = 3 (dashed black line), L o S = 3.5 (grey line), L o S = 4 (dashed blue line).

Show All

Therefore, the improvements of the CALT* with respect the safety when UAS navigates close to obstacles such as building or indoors are shown from the result obtained. Considering the trade-off due to safety and computation time, the cost weight should be considered with small values in the scenario considered. Note that A* considering the distance cost can take lower times but the path computed is less safe because it approaches more to the obstacles and the path has more changes of heading and is longer (see Fig. 3 ). In the rest of cases the CALT* also improves to the other algorithms tested with respect to the computation time.
SECTION V.
Conclusion and Future Work

A 3D path planning algorithm considering safety costs has been presented in this paper. The aim is to foster safety in missions of UAS navigating autonomously and close to obstacles such as buildings or indoors.

A Lazy Theta* algorithm has been modified to compute safe and smoother path maintaining its advantages. The modifications introduce a non-uniform cost related to the distance from the closed obstacles and a limitation of the line of sight in order to ensure the effect of the new cost component.

Experimental results show the performance of the CALT* considering the safety, smoothness and computation time.
Fig. 9.

Paths computed (green line) to surround the building by original Lazy Theta* (a) and the CALT* with L o S = 2.5 and C w = 0.1 (b), C w = 0.2 (c), C w = 0.3 (d), C w = 0.5 (e) and C w = 0.7 (f) (top view). Distance cost is shown with the red and blue areas.

Show All

After analyzing the data obtained, the distance cost introduced should be considered in the cost function with small values of the cost weight parameter. A comparison with A* algorithm, A* considering the distance cost and the original Lazy Theta* algorithm is also performed to show the advantages of the proposed algorithm.

Future work will be focused on studying the influence of different distance costs on the modified Lazy Theta* algorithm and the consideration of partial-observability for replanning and moving obstacles. The computation time is crucial for replanning when moving obstacles are detected, so the efficiency of the proposed algorithm should be improved. Moreover, the authors will evaluate to incorporate the dynamics of the UAS in the algorithm to compute trajectories. State lattices could be considered although can be computationally expensive.

Authors
Figures
References
Keywords
Metrics
Footnotes
More Like This
Dynamic Motion Planning for Conducting Obstacle Avoidance Maneuver of Fixed Wing Autonomous Aerial Vehicle

2019 4th Asia-Pacific Conference on Intelligent Robot Systems (ACIRS)

Published: 2019
A Study on the Path Planning Algorithm of the Unmanned Aerial Vehicle

2020 IEEE 3rd International Conference on Electronics Technology (ICET)

Published: 2020
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
