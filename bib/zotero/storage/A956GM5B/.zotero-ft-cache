Computing Homotopic Shortest Paths in the Plane
Sergei Bespamyatnikh∗

Abstract
We address the problem of computing homotopic shortest paths in presence of obstacles in the plane. The problems on homotopy of the paths received attention very recently [3, 8]. We present two output-sensitive algorithms, for simple paths and non-simple paths. The algorithm for simple paths improves the previous algorithm [8]. The algorithm for non-simple paths achieves O(log2 n) time per output vertex which is an improvement by a factor of O(n/ log2 n) of the previous algorithm [13] where n is the number of obstacles.
1 Introduction.
Finding shortest paths in a geometric domain is a fundamental problem [18]. Chazelle [4] and Lee and Preparata [14] gave a funnel algorithm that computes the shortest path between two points in a simple polygon. Hershberger and Snoeyink [13] simplify the funnel algorithm and studied various optimizations of a given path among obstacles under the Euclidean and link metrics and under polygonal convex distance functions. The funnel algorithm has been extended in addressing a classic VLSI problem, the continuous homotopic routing problem [7, 15, 9]. For this problem it is required to route wires with ﬁxed terminals among ﬁxed obstacles when a sketch of the wires is given, i.e., each wire is given a speciﬁed homotopy class. If the wiring sketch is not given or the terminals are not ﬁxed, the problem is NP-hard [16, 20, 21].
The topological concept of homotopy captures the notion of deforming paths [1, 19]. A path is a continuous map π : [0, 1] → R2. Let α, β : [0, 1] → R2 be two paths that share starting and ending endpoints, α(0) = β(0) and α(1) = β(1). Let B ⊂ R2 be a set of barriers such that the paths α and β avoids B. α and β are homotopic with respect to the barrier set B if α can be continuously transformed into β avoiding B; more formally, if there exists a continuous function Γ : [0, 1] × [0, 1] → R2 with the following three properties:
1. Γ(0, t) = α(t) and Γ(1, t) = β(t) for 0 ≤ t ≤ 1,
∗Department of Computer Science, University of Texas at Dallas, Box 830688, Richardson, TX 75083, USA. E-mail: besp@utdallas.edu

2. Γ(s, 0) = α(0) = β(0) and Γ(s, 1) = α(1) = β(1) for 0 ≤ s ≤ 1,
3. Γ(s, t) ∈/ B for 0 ≤ s ≤ 1 and 0 < t < 1.
The problem can be stated as follows.
Shortest Homotopic Path (SHP) Problem. Given np disjoint paths and nb point barriers, ﬁnd shortest homotopic paths. We assume that the endpoints of the paths are barriers as well. Let n = 2np + nb be the total number of barriers. Let kin, kout be the total number of edges of the input/output paths and let k = kin + kout.
Hershberger and Snoeyink [13] gave a O(nkin) algorithm for one path, np = 1, which is optimal in the worst case assuming that the running time is evaluated in terms of input parameters n and kin. Recently Cabello et al. [3] studied the problem of testing whether two paths with common endpoints in presence of obstacles are homotopic. They mentioned that computing shortest homotopic paths is expensive for testing homotopy since the shortest path can have Ω(nkin) edges which is quadratic in terms of input size O(n + kin) (of their problem) in the worst case. The key idea of the algorithm is to compute canonical paths and they can be found by rectifying the paths and shortcutting them using segment dragging by Chazelle [5].
Very recently Efrat et al. [8] presented output sensitive algorithm for computing the shortest homotopic paths. The algorithm runs in O(n3/2 + k log n) time where ε > 0 is arbitrary small constant. In the ﬁrst phase of the algorithm they apply shortcuts to compute x-monotone paths using eﬃcient algorithm for computing canonical paths [3]. The computation of the canonical paths is based on the segment dragging [5, 3]. The monotone paths are bundled into O(n) groups of homotopically identical paths. Then, the deterministic algorithm for computing shortest homotopic paths is based on recursive partition of the paths and routing procedure applied to the largest increasing (decreasing) sequence of paths. The running time of this phase is O(n3/2 + k). Efrat et al. [8] also show that this bound can be improved to O(n log n+k) using randomization.

Fig. 1: Shortest path preserving homotopy type.

D F

B

C

b

A

E a

D F
B bC
A
E a

F D B b C
A E
a

(a)

(b)

(c)

Fig. 2: (a) Path ab, (b) Monotone paths, (c) Rectiﬁed paths.

We focus on two versions of SHP problem: (1) simple input paths and (2) non-simple paths. For simple paths we show that the shortest homotopic paths can be computed in O(n log1+ε n + kin log n + kout) time. For non-simple paths we design an implicit funnel algorithm that computes the shortest paths in O(n2+ε + kin log2 n + kout) time. We also show that for relativly small k the running time can be improved to O(n · polylogn + n2/3k2/3polylogk + k · polylogk) using hierarchical cuttings [17].
We mention a related work on ﬁnding homotopic paths amidst semi-algebraic obstacles [10, 11].
The paper is organized as follows. We consider SHP for simple paths in Sections 2-4. In Section 2 we reduce the problem to the case of monotone paths by applying techniques from [3, 8]. In Section 3 we show how to compute the shortest path in a simple polygon with barriers in linear time. In Section 4 we develop an algorithm for computing all the shortest paths. In

Section 5 we consider SHP for non-simple paths.
2 Reduction to Monotone Paths.
In this Section we brieﬂy describe the construction of the canonical paths [3] and the bundling [8]. The canonical paths are x-monotone, i.e. monotone with respect to the direction OX. A path is monotone with respect to a direction d if any line orthogonal to d intersects the path at most one time. One can partition a path into x-monotone pieces by exploring its vertices locally, i.e. we break the path in a vertex if two edges incident to the vertex do not form a x-monotone path as illustrated in Fig. 2 (b) (this partition might not capture the shape of the shortest path, see Fig. ??). We can treat these monotone paths as horizontal segments and obtain rectiﬁed paths [3], see Fig. 2 (c).
To rectify the paths one needs “aboveness” relation between the monotone paths and the barriers. A path is represented as a sequence of points that it passes above

(overbar) and below (underbar). For example, the path ab depicted in Fig. 2 is recorded as the sequence ab = ABCDEF F EDCBAABCDEF F EDC. An adjacent pair of repeated symbols can be deleted by deforming the path without changing the homotopy class. The deletion can be repeated until we obtain canonical sequence. The path shown in Fig. 2 has the canonical sequence ab = ABCDEF F EDCBABCC, see Fig. 4.
In order to generate the rectiﬁed paths we compute a triangulation or a trapezoidation [8] using algorithm of Bar-Yehuda and Chazelle [2]. The running time of the triangulation algorithm is O(n log1+ε n + kin) for any ﬁxed ε > 0. The monotone paths induce “aboveness” relation that is acyclic. The rectiﬁed paths and new positions of barriers are computed using their ranks as y-coordinates [3]. The rectiﬁed paths can be shortcut by vertical segments producing canonical rectiﬁed paths. Applying the segment dragging queries by Chazelle [5] shortcuts can be done in O(kin log n) time using O(n log n) preprocessing time and O(n) space.
DF B

the shortest homotopic paths to the ﬁnding of a shortest monotone path in a simple polygon with two colored barriers so that the barriers are separated by a path according to their colors. The problem can be deﬁned as follows.
Shortest monotone path. Let P be a simple x-monotone polygon1 and s, t are two points in P . Let S be a ﬁnite set of points (barriers) inside P so that each point is colored red or blue. We assume that all the points P ∪S ∪{s, t} have distinct x-coordinates. Find the shortest path from s to t in P so that every point of S above/below the path is red/blue respectively.
In general, if the x-order of barriers is unknown, one can expect the worst case complexity Θ(|P | log |S|). We assume that the barriers are sorted.
Lemma 3.1. The problem above can be solved in linear time assuming that the barriers are sorted by xcoordinates.

b C

¡
A E
a

Fig. 3: Rectiﬁed canonical path.

The number of homotopically diﬀerent paths produced by shortcutting is at most 2n [8]. The homotopic paths can be bundled reducing the problem to the case kin ≤ 2n. We compute the bundles using the property that the ranks of paths homotopic to a path form a sequence of numbers r, r+1, . . . , r for some integers r and r.
3 Shortest Monotone Paths.
Let Π be the set of paths produced by shortcuts and bundling. The number of paths is O(n). There is an order π1, π2, . . . of the paths that is consistent with the aboveness relation. We assume that πi is “below” πi+1. The order of the paths πi, i = 1, 2, . . . is determined by the aboveness tree [3]. Recall that B is the set of all barriers. Let Bi be the set of barriers below πi, i = 1, 2, . . .. We reduce the problem of constructing

Fig. 4: Shortest path separating red and blue points.
Proof. We connect the barrier points inside P to the boundary of P according to the colors, see Fig. 4 for example. We draw vertical segments passing through the points s and t. We obtain a polygon that can be slightly perturbed to make a simple polygon. The shortest path in a simple can be found in linear time [12, 13]. Clearly, the produced path satisﬁes the color constraint.
4 Shortest Paths. Consider a path πi ∈ Π. Let s and t denote its start and target points. The shortest path corresponding to
1A polygon is x-monotone if its boundary is the union of two x-monotone paths.

¢

£

¡

Fig. 5: Polygon P .

¡ £

¤ ¢

Fig. 6: The shortest paths ab and st.

πi can be constructed using Lemma 3.1 as follows. Let R be a rectangle containing all data points inside. It can be deﬁned by enlarging the smallest bounding box of B and Π. We pick two points a and b slightly oﬀ R to make x-monotone polygon P = conv(R ∪ {a, b}, see Fig. 5. The path πi generates a partition of the set B into two sets Bi and B − Bi. We color the points of Si in blue and the points of B − Bi in red. Applying Lemma 3.1 to the polygon P we obtain the shortest path corresponding to πi.
4.1 Splitting a Polygon. In order to apply the algorithm from Lemma 3.1 recursively the polygon P needs to be divided into two polygons. The idea is to connect the points a and b. If we apply the algorithm to ﬁnd the shortest path ab among barriers colored according to πi, it will not necessarily contain the shortest path st, see Fig. 6. However we can still use this approach recursively and all paths produced in this way do not cross the path st. One can prove that the missing edges of st form at most two subpaths of st (in head and tail). These missing pieces can be found later.

We avoid the problem of ﬁxing the paths. Instead we apply the algorithm three times and compute the shortest paths as, st, and tb. Notice that the vertices s and t contribute to both subproblems since they participate in the boundaries of two produced polygons. We call this procedure Split(P, s, t).
There is another potential problem. After we construct the path astb and divide the current polygon by the path, the resulting polygons might be not simple and contains multiple polygons, see Fig. 7 (a). The polygons on either side of the path astb have the property that they are x-monotone and their projections on x-axis are disjoint. Our algorithm can deal with multiple polygons and divide them recursively. In order to make eﬃcient computation we build the following data structure.
4.2 Data Structure. Let T be a binary search tree of height O(log n) whose nodes correspond to the paths π1, π2, . . . in this order. This can be done recursively: the root has the median path πi and the subtrees of its children are constructed for the sets {πj, j < i} and

¤¨§ §
¢ ¤¦¥
¤

¤¦



¥ © £  ¡

¤©

¤¦

')(10

¤

¤§¤  !  #"$ !  ©%   "

¤ ¥  ¤ © ¤¦ !  § "& !  ¥#"

'3240

Fig. 7: (a) Multiple polygons. (b) Tree representation.

{πj, j > i}. At every node v ∈ T we store a pointer path(v) of its path. We associate the set of polygons with a node v of T denoted by ρ1(v), ρ2(v), . . . in sorted order of x-projections. With each polygon produced by Split we store its side, “top” or “bottom”, that is generated. For example, the polygons P1, P2 in Fig. 7 (a) are marked “bottom” and P3, P4, P5 are marked “top”.
The polygons associated with its children are constructed by splitting these polygons using the path astb where s and t are endpoints of the path path(v). Let ai(v) and bi(v) be the leftmost and rightmost vertices of a polygon ρi(v). First we locate s and t in the intervals [ai(v), bi(v)]. If they fall into the same interval, say [ai(v), bi(v)], we apply the procedure Split(ρi(v), s, t). If they fall into diﬀerent intervals, say s ∈ [ai(v), bi(v)] and t ∈ [aj(v), bj(v)] then we split i-th and j-th polygon by calling Split(ρi(v), s, bi(v)) and Split(ρj(v), ai(v), t). If one of the points s or t (or both) falls out the intervals we do not split polygons using this point. The polygons that are split go to the corresponding children nodes. We mark the corresponding sides of these polygons. We assign the other polygons according to their marked sides, i.e. if a polygon Pi has marked top (bottom) side it goes to the child node in the same way as Pi was created.
If new polygons are generated on either side we store the paths connecting them at the corresponding children nodes, see Fig. 7 (b). If a or b disappears from generated polygons we also store the paths from it to polygons, for example the path e4e5 connecting P2 and b in Fig. 7 (b). We denote these paths λ1(v), λ2(v), . . .. A path λi(v) of a node v can be connected (share a vertex) with a path λj(u) of its parent node u (for example, a point b in Fig.

7 (b) can be the leftmost point of a λ-path on the above level). We store pointers between connected λ-paths. Note that a λ-path can be connected to at most two λ-paths, one λ-path per endpoint.
4.3 Shortest Path Retrieval. We show how the shortest path homotopic to πi can be computed. Let s and t be the endpoints of πi. Consider the moment when πi is processed at a node v ∈ T . If the points s and t lie in the same polygon then the procedure Split reports the shortest path. If the points s and t lie in diﬀerent polygons, say Pi and Pj, then Split applied to them can output only two parts of the shortest path st. The interconnection can be computed as follows. If Piand Pj are connected by a λ-path of v we output it. Otherwise we ﬁnd all λ-paths of v between Pi and Pj and, for every two consecutive λ-paths, we follows their pointers to λ-paths reducing the gap. Repeat this procedure until all gaps are closed. Note that these pointers lead to nodes of diﬀerent levels and the levels may go up and down.
Lemma 4.1. The shortest path homotopic to πi can found in O(log n + K) time using T where K is the number of edges of the shortest path.
Proof. The existence of the path follows from the “aboveness” relation on the paths. The algorithm is correct since its paths are λ-paths that are connected.
The location of the points s and t requires O(log n) time and every edge of the shortest path is retrieved in O(1) time.
4.4 Space Reduction. The above data structure takes O(n log n) since

a b
Fig. 8: Simple path ab is homotopic to the segment [ab].

Fig. 9: Shortcut of non-simple path.

(i) every edge of a shortest homotopic path can participate in O(log n) polygons stored in T , one per level, and
(ii) there are O(n) possible edges stored in T since they form a planar graph with n vertices.
Unfortunately the both above bounds are tight. In order to reduce the space we use the following trick. We store the polygons only at leaves of T when T is constructed. The remaining information suﬃces to recurse the construction and retrieve the shortest paths. We show that the space required for T is O(n). The polygons stored at nodes of the same level are interiordisjoint. They take O(n) space since every edge is stored at most twice. The edges of λ-paths are stored once in T.
Theorem 4.1. The above algorithm computes the shortest homotopic paths in O(n log n + k) time.
Proof. By Lemma 4.1 it suﬃces to show that T is constructed in O(n log n) time. By Lemma 3.1 the processing of the nodes at the same level takes O(n) time since the total complexity of polygons is linear. The theorem follows.

5 Non-simple Paths.
If the paths are allowed to intersect themselves, see Fig. 8, an O(kn) algorithm by Hershberger and Snoeyink [13] can be applied. As Efrat et al. [8] pointed out there exist non-trivial examples (even for simple paths!) where k can be much larger than n, for instance k = Ω(2n). We are not aware of any output-sensitive algorithms for ﬁnding the shortest homotopic paths in the case of nonsimple paths. We design an algorithm that computes the shortest paths in polylogn time per vertex.
Our algorithm has two phases: (i) we reduce the problem to x-monotone paths, and (ii) we ﬁnd the shortest homotopic paths for the monotone paths. The algorithm of the ﬁrst phase is a slight modiﬁcation of the algorithm by Efrat et al. [8] that shortcuts the paths using the simplex range search [6]. If two edges of a simple path cross they can be cut by applying shortcut test twice: before the crossing point and after, see Fig. 9. Clearly, the result of shortcuts is a set of x-monotone paths (possibly intersecting). The second phase is more tricky.
5.1 Implicit Funnel Algorithm. The problem is to ﬁnd the shortest homotopic path in presence of obstacles. One can apply the algorithm from Lemma

¨ 
©

 §£

§



 

 §£ §

¢¡¤£

¦¥§£

Fig. 10: (a) Funnel. (b) Implicit representation of funnel.

3.1. This leads to the factor of n to the output size which is too expensive. Instead we use an idea of implicit representation of funnel. Let π = p1, p2, . . . be an xmonotone path. Let l(p) denote the vertical line passing through a point p. For a two points p and q, let l(p)l(q) denote the slab between two vertical lines l(p) and l(q). A funnel with apex p1 and base l(p) is deﬁned as follows. Let BU be the set of points that includes p1 and the barrier points lying in the slab l(p1)l(p) and above π. Let U be the lower envelope of BU . Let BL be the set of points that includes p1 and the barrier points lying in the slab l(p1)l(p). Let L be the lower envelope of BL. The funnel is the area between U and L restricted by l(p), see for example Fig. 10 (a) where p = p2. We represent the funnel implicitly as the triangle deﬁned by the extensions of edges incident to p1 and l(p2), see Fig. 10 (b).
We show how to compute the implicit funnel with base l(p2). Let B be the set of barrier points in the slab l(p1)l(p2). For a point b ∈ B let ∆(b) denote the triangle formed by the lines p1b, p1p2 and l(p2). For any ray p1b, b ∈ B we can test if ∆(b) contains a barrier point using the simplex range search. For every barrier point b we store all the remaining barrier points in a list L(b) = (b1, b2, . . .) sorted by the slopes bbi, 1 = 1, 2, . . .. The list L(b) can be computed in O(n log n) time and n lists for all the barriers can be computed in O(n2 log n) time. Using binary search on L(p1) we can compute the upper side p1q2 and the lower side p1q1 of the implicit funnel that have the highest and the lowest slopes such that ∆(qi) has no barrier points, see Fig. 10 (b).
Suppose that we have computed the implicit funnel F up to the vertical line through a point pi. F is a triangle with vertices p1, r1 and r2. Let q1 and q2 be the points of B deﬁned the sides of F , see Fig. 13. We do not assume the points p2, p3, . . . , pi lie inside the funnel F , for example the point pi in Fig 12. In order

to extend the funnel F to the next vertical line l(pi+1) we apply binary search on L(p1) and compute

§

¨© §

¤£ ¢¡

£¦¥ ¡

Fig. 11: Polygon P (b).
(i) q2, the lowest point (pont with the lowest slope p1q2) point visible from p1 in the slab l(pi)l(pi+1) and above the segment pipi+1, and
(ii) q1, the highest point visible from p1 in the slab l(pi)l(pi+1) and below the segment pipi+1.
The test included in the binary search for q2 is whether, for a point b ∈ B − {p1}, the polygon P (b) bounded by the lines l(pi), l(pi+1), pipi+1 and p1b is empty, see Fig. 11. The polygon P (b) is either a triangle or a trapezoid. A trapezoid can be partitioned into two triangles. Thus the test can be done using simplex range searching in O(log n) time.
If the wedges q1p1q2 and q1p1q2 intersect then we update the funnel F to be their intersection. Otherwise the funnel with apex at p1 collapses. Suppose that the ray p1q2 is below the ray p1q1, see Fig. 13. The remaining case where the ray p1q1 is above the ray p1q2 is symmetrical. The funnel point q1 is the next point of the shortest homotopic path. We report q1, assign p1 = q1 and F = q1r1r2 and continue the computation of the funnel up to l(pi+1).

p4 p2
p1
p3 pi

Fig. 12: The implicit funnel and the path p1p2 . . . pi.
¤£



©  ¡

¢¡

©¡

© ¥£§¦¨¡

call happens when the implicit funnel collapses. In this case we report the apex of the funnel as a vertex of the shortest homotopic path and we charge it for the binary search call. The total number of these calls is at most kout. Thus the total number of binary search calls is O(kin) + kout = O(k). The theorem follows.
5.2 An improvement for small k. The above algorithm is output-sensitive and eﬃciently ﬁnds the shortest homotopic paths if their size is Ω(n2). Note that k can be arbitrarily large relative to n since it includes kin. The complexity of the shortest homotopic paths is Θ(nkin) in the worst case which can be dominated by the preprocessing time O(n2+ε). In order to reduce the total running time we can use standard space-time tradeoﬀ techniques. Matouˇsek [17] applied the technique to the range searching with eﬃcient hierarchical cuttings and obtained O(N 2/3M 2/3) running time for processing M range queries against N points in the plane. There are two diﬃculties that need to be overcome if we apply this approach. One is that the preprocessing step of the algorithm from Theorem 5.1 takes Ω(n2) time and space for computing the lists L(b), b ∈ B. The second diﬃculty is that the queries are not known beforehand. In the ﬁnal version of the paper we show that the approach can still be applied.

Fig. 13: Funnel collapse.

Theorem 5.2. The shortest homotopic paths for paths
that are not necessarily simple can be found in O(n · polylogn + n2/3k2/3polylogk + k · polylogk) time.

Theorem 5.1. The shortest homotopic paths of polylines can be computed in O(n2+ε + kin log2 n) time.
Proof. The preprocessing step includes (i) the computation of the lists L(b) for all barrier
points b ∈ B, (ii) the construction of data structure for simplex
searching [6], (iii) shortcutting the input paths and creating x-
monotone paths. These steps take O(n2 log n), O(n2+ε), and
O(kin log n) respectively. The total preprocessing time is O(n2+ε + kin log n). The total number of vertices of the produced x-monotone paths is O(kin).
In the second phase the implicit funnel algorithm spends O(log n) tests in the binary search. Each test takes O(log n) time so the total time of each binary search is O(log2 n).
We count the total number of times when we apply binary search. There are two ways of applying a binary search. We apply binary search when we promote the base of the implicit funnel. There are O(kin) such calls of the binary search. The second type of binary search

Acknowledgments. I would like to thank the anonymous referees for their valuable comments and the suggestion to apply the hierarchical cuttings.

References

[1] M. A. Armstrong. Basic Topology. McGraw-Hill,

London, UK, 1979.

[2] R. Bar-Yehuda and B. Chazelle. Triangulating disjoint

Jordan chains. Internat. J. Comput. Geom. Appl.,

4(4):475–481, 1994.

[3] S. Cabello, Y. Liu, A. Mantler, and

J. Snoeyink.

Testing homotopy for paths

in the plane.

In Proc. 18th Annu. ACM

Sympos. Comput. Geom., pp. 160–169, 2002.

http://www.cs.uu.nl/people/sergio/publications

/clms-thpp-02.pdf

[4] B. Chazelle. A theorem on polygon cutting with

applications. In Proc. 23th Annu. IEEE Sympos.

Found. Comput. Sci., pp. 339–349, 1982.

[5] B. Chazelle. An algorithm for segment-dragging and

its implementation. Algorithmica, 3:205–221, 1988.

[6] B. Chazelle. Cutting hyperplanes for divide-and-

conquer. Discrete Comput. Geom., 9(2):145–158, 1993.

[7] R. Cole and A. Siegel. River routing every which way, but loose. In Proc. 25th Annu. IEEE Sympos. Found. Comput. Sci., pp. 65–73, 1984.
[8] A. Efrat, S. Kobourov, and A. Lubiw. Computing homotopic shortest paths eﬃciently. In Proc. 10th Annu. European Sympos. Algorithms, pp. 411–423, 2002. http://link.springer.de/link/service/series/ 0558/bibs/2461/24610411.htm
[9] S. Gao, M. Jerrum, M. Kaufmann, K. Mehlhorn, W. Ru¨lling, and C. Storb. On continuous homotopic one layer routing. In Proc. 4th Annu. ACM Sympos. Comput. Geom., pp. 392–402, 1988.
[10] D. Grigoriev and A. Slissenko. Computing minimumlink path in a homotopy class amidst semi-algebraic obstacles in the plane. In T. Mora and H. F. Mattson, editors, AAECC, volume 1255 of Lecture Notes in Computer Science, pp. 114–129. Springer, 1997.
[11] D. Grigoriev and A. Slissenko. Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane. In Proc. 9th Annu. Internat. Sympos. Algorithms Comput., pp. 17– 24, 1998.
[12] L. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. E. Tarjan. Linear-time algorithms for visibility and shortest path problems inside triangulated simple polygons. Algorithmica, 2:209–233, 1987.
[13] J. Hershberger and J. Snoeyink. Computing minimum length paths of a given homotopy class. Comput. Geom. Theory Appl., 4:63–98, 1994.
[14] D. T. Lee and F. P. Preparata. Euclidean shortest paths in the presence of rectilinear barriers. Networks, 14:393–410, 1984.
[15] C. E. Leiserson and F. M. Maley. Algorithms for routing and testing routability of planar VLSI layouts. In Proc. 17th Annu. ACM Sympos. Theory Comput., pp. 69–78, 1985.
[16] C. E. Leiserson and R. Y. Pinter. Optimal placement for river routing. SIAM J. Comput., 12:447–462, 1983.
[17] J. Matouˇsek. Range searching with eﬃcient hierarchical cuttings. Discrete Comput. Geom., 10(2), pp. 157– 182, 1993.
[18] J. S. B. Mitchell. Geometric shortest paths and network optimization. In J.-R. Sack and J. Urrutia, editors, Handbook of Computational Geometry, pp. 633– 701. Elsevier Science Publishers B.V. North-Holland, Amsterdam, 2000.
[19] J. R. Munkres. Topology: A ﬁrst course. Prentice Hall, Englewood Cliﬀs, NJ, 1975.
[20] R. Pinter. River-routing: Methodology and analysis. In R. Bryan, editor, Third Caltech Conference on VLSI, Computer Science Press, Rockville, Maryland, 1983.
[21] D. Richards. Complexity of single layer routing. IEEE Transactions on Computers, 33:286–288, 1984.

