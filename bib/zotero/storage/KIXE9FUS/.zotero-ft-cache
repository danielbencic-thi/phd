Choset-79066 book February 22, 2005 17:53
5 Roadmaps
AS DESCRIBED in chapters 2 and 4, a planner plans a path from a particular start conﬁguration to a particular goal conﬁguration. If we knew that many paths were to be planned in the same environment, then it would make sense to construct a data structure once and then use that data structure to plan subsequent paths more quickly. This data structure is often called a map, and mapping is the task of generating models of robot environments from sensor data. Mapping is important when the robot does not have a priori information about its environment and must rely on its sensors to gather information to incrementally construct its map. In the context of indoor systems, three map concepts prevail: topological, geometric, and grids (see ﬁgure 5.1).
Topological representations aim at representing environments with graphlike structures, where nodes correspond to “something distinct” and edges represent an adjacency relationship between nodes. For example, places may be locations with speciﬁc distinguishing features, such as intersections and T-junctions in an ofﬁce building, and edges may correspond to speciﬁc behaviors or motion commands that enable the robot to move from one location to another, such as wall-following. Recently, it has become popular to augment topological maps with metric information (e.g., relative distance, angle) to help disambiguate places that “look” the same [108,250,382,418] or to use them for navigation [188, 213, 240, 339].
Geometric models use geometric primitives for representing the environment. Mapping then amounts to estimating the parameters of the primitives to best ﬁt the sensor observations. In the past, different representations have been used with great success. Many researchers use line segments [27, 122, 169, 180, 334] to represent parts of the

Choset-79066 book February 22, 2005 17:53
108

5 Roadmaps

Figure 5.1 Different ways to represent an environment: topologically, geometrically, and using grids.
environment. Popular approaches also represent three-dimensional structures of the environment with triangle meshes [17, 161, 182, 416].
Finally occupancy grids are grid structures, similar as those described in chapter 4, where the value of each pixel corresponds to the likelihood that its corresponding portion of workspace or conﬁguration space is occupied [142]. Occupancy grids were ﬁrst introduced for mapping unknown spaces with wide-angle ultrasonic sensors; this topic is discussed in chapter 9.
This chapter focuses on a class of topological maps called roadmaps [91, 262]. A roadmap is embedded in the free space and hence the nodes and edges of a roadmap also carry physical meaning. For example, a roadmap node corresponds to a speciﬁc location and an edge corresponds to a path between neighboring locations. So, in addition to being a graph, a roadmap is a collection of one-dimensional manifolds that captures the salient topology of the free space.
Robots use roadmaps in much the same way people use highway systems. Instead of planning every possible side-street path to a destination, people usually plan their path to a network of highways, then along the highway system, and ﬁnally from the highway to their destination. The bulk of the motion occurs on the highway system, which brings the motorist from near the start to near the goal (ﬁgure 5.2).
Likewise, using a roadmap, the planner can construct a path between any two points in a connected component of the robot’s free space by ﬁrst ﬁnding a collisionfree path onto the roadmap, traversing the roadmap to the vicinity of the goal, and then constructing a collision-free path from a point on the roadmap to the goal. The bulk of the motion occurs on the roadmap and thus searching does not occur in a multidimensional space, whether it be the workspace or the conﬁguration space. If the robot knows the roadmap, then it in essence knows the environment. So one way a robot can explore an unknown environment is by relying on sensor data to construct a roadmap and then using that roadmap to plan future excursions into the environment. We now formally deﬁne the roadmap.

Choset-79066 book February 22, 2005 17:53

5 Roadmaps

109

Figure 5.2 Los Angeles freeway system: Planning a path from Pasadena to the Manhattan Beach requires ﬁnding a path onto the 110, then to the 105 and 405, and ﬁnally from the 405 to the beach. Courtesy of Mapquest.
DEFINITION 5.0.2 (Roadmap) A union of one-dimensional curves is a roadmap R M if for all qstart and qgoal in Qfree that can be connected by a path, the following properties hold: 1. Accessibility: there exists a path from qstart ∈ Qfree to some qstart ∈ R M,
2. Departability: there exists a path from some qgoal ∈ R M to qgoal ∈ Qfree, and
3. Connectivity: there exists a path in R M between qstart and qgoal.
In this chapter, we consider ﬁve types of roadmaps: visibility maps, deformation retracts, retract-like structures, piecewise retracts and silhouettes. All of these roadmaps have a corresponding graph representation. Visibility maps tend to apply to conﬁguration spaces with polygonal obstacles. Nodes of the map are the vertices of the polygons and for visibility maps we can use the terms node and vertex interchangeably. Two nodes of a visibility map share an edge if their corresponding vertices are within line of sight of each other. Deformation retractions are analogous to melting ice or burning grassland. As an arbitrary shaped piece of ice melts, a resulting “stick

Choset-79066 book February 22, 2005 17:53

110

5 Roadmaps

ﬁgure” forms. The ice represents the robot’s free space and since the stick ﬁgure captures the macroscopic properties of the piece of ice, it can be used for path planning in the robot’s free space The representation used for silhouette methods is constructed by repeatedly projecting a shadow of the robot’s multidimensional free space onto lower-dimensional spaces until a one-dimensional network is formed.

5.1 Visibility Maps: The Visibility Graph
The deﬁning characteristics of a visibility map are that its nodes share an edge if they are within line of sight of each other, and that all points in the robot’s free space are within line of sight of at least one node on the visibility map. This second statement implies that visibility maps, by deﬁnition, possess the properties of accessibility and departability. Connectivity must then be explicitly proved for each map for the structure to be a roadmap. In this section, we consider the simplest visibility map, called the visibility graph [262, 298].
5.1.1 Visibility Graph Deﬁnition
The standard visibility graph is deﬁned in a two-dimensional polygonal conﬁguration space (ﬁgure 5.3). The nodes vi of the visibility graph include the start location, the goal location, and all the vertices of the conﬁguration space obstacles. The graph edges ei j are straight-line segments that connect two line-of-sight nodes vi and v j , i.e., ei j = ∅ ⇐⇒ svi + (1 − s)v j ∈ cl(Qfree) ∀s ∈ [0, 1].
qstart

qgoal
Figure 5.3 Polygonal conﬁguration space with a start and goal.

Choset-79066 book February 22, 2005 17:53

5.1 Visibility Maps: The Visibility Graph

111

qstart

qgoal
Figure 5.4 The thin solid lines delineate the edges of the visibility graph for the three obstacles represented as ﬁlled polygons. The thick dotted line represents the shortest path between the start and goal.
Note that we are embedding the nodes and edges in the free space and that edges of the polygonal obstacles also serve as edges in the visibility graph.
By deﬁnition, the visibility graph has the properties of accessibility and departability. We leave it to the reader as an exercise to prove the visibility graph is connected in a connected component of free space. Using the standard two-norm (Euclidean distance), the visibility graph can be searched for the shortest path (ﬁgure 5.4) [366]. The visibility graph can be deﬁned for a three dimensional conﬁguration space populated with polyhedral obstacles, but it does not necessarily contain the shortest paths in such a space.
Unfortunately, the visibility graph has many needless edges. The use of supporting and separating lines can reduce the number of edges. A supporting line is tangent to two obstacles such that both obstacles lie on the same side of the line. For nonsmooth obstacles, such as polygons, a supporting line l can be tangent at a vertex vi if B (vi ) l QOi = vi . A separating line is tangent to two obstacles such that the obstacles lie on opposite sides of the line. See ﬁgure 5.5 for an example of supporting and separating lines.
The reduced visibility graph is soley constructed from supporting and separating lines. In other words, all edges of the original visibility graph that do not lie on a supporting or separating line are removed. Figure 5.6 contains the reduced visibility graph of the example in ﬁgure 5.4. The notion of separating and supporting lines can be used to generalize the visibility graph method for curved obstacles [294].

Choset-79066 book February 22, 2005 17:53
112

5 Roadmaps

Supporting

Obstacle

Separating

Obstacle

Figure 5.5 Supporting and separating line segments. Note that for polygonal obstacles, we use a nonsmooth notion of tangency.
qstart

Figure 5.6 Reduced visibility graph.

qgoal

Choset-79066 book February 22, 2005 17:53 5.1 Visibility Maps: The Visibility Graph
qstart

113 qgoal

Figure 5.7 Reduced visibility graph with nonconvex obstacles.
At ﬁrst, the deﬁnitions of the supporting and separating lines may seem to only apply to convex obstacles. However, this deﬁnition applies to nonconvex shapes as well. Here, we use the notion of local convexity. Recall that convex sets in the plane have the property that for all points on their boundary, there exists a line orthogonal to the surface normal that separates the convex set. This means that the set lies entirely on one side of the line. A set is locally convex at a point c¯ if the hyperplane tangent to c¯ separates the points in a neighborhood of c¯ on the boundary of the convex set QOi . In other words, when N is the surface normal at c¯, QOi is locally convex at c¯ if for all c ∈ QOi nbhd (c¯) , (c − c¯) · N ≥ 0 or (c − c¯) · N ≤ 0. Convex obstacles are locally convex everywhere on the boundary of the set. Figure 5.7 contains a reduced visibility graph for a conﬁguration space with nonconvex obstacles. The reduced visibility graph is beneﬁcial because it has fewer edges making the search for the shortest path more efﬁcient.
5.1.2 Visibility Graph Construction
Let V = {v1, . . . , vn} be the set of vertices of the polygons in the conﬁguration space as well as the start and goal conﬁgurations. To construct the visibility graph, for each v ∈ V we must determine which other vertices are visible to v. The most obvious way to make this determination is to test all line segments vvi , v = vi to see if they intersect an edge of any polygon. For a particular vvi , there are O(n) intersections to check because there are O(n) edges from the obstacles. Now, there are O(n) potential segments emanating from v, so for a particular v, there are O(n2) tests to determine which vertices are indeed visible from v. This must be done for all v ∈ V and thus the construction of the visibility graph would have complexity O(n3).

Choset-79066 book February 22, 2005 17:53

114

5 Roadmaps

There is a more efﬁcient way to compute the set of vertices that are visible from v. Imagine a rotating beam of light emanating from a lighthouse beacon. At any moment, the beam illuminates the object that is closest to the lighthouse. Furthermore, as the beam rotates, the obstacle that is illuminated changes only at a ﬁnite number of orientations of the beam. If the obstacles in the space are polygons, these orientations occur when the beam is incident on a vertex of some polygon. This insight motivates a class of algorithms known in the computational geometry literature as plane sweep algorithms.
A plane sweep algorithm solves a problem by sweeping a line, called the sweep line, across the plane, pausing at each of the vertices of the obstacles. At each vertex, the algorithm updates a partial solution to the problem. Plane sweep algorithms are used to efﬁciently compute the intersections of a set of line segments in the plane, to compute intersections of polygons, and to solve many other computational geometry problems.
For the problem of computing the set of vertices visible from v, we will let the sweep line, l, be a half-line emanating from v, and we will use a rotational sweep, rotating l from 0 to 2π . The key to this algorithm is to incrementally maintain the set of edges that intersect l, sorted in order of increasing distance from v. If a vertex vi is visible to v, then it should be added to the visibility graph (algorithm 5). It is

Algorithm 5 Rotational Plane Sweep Algorithm Input: A set of vertices {vi } (whose edges do not intersect) and a vertex v Output: A subset of vertices from {vi } that are within line of sight of v

1: For each vertex vi , calculate αi , the angle from the horizontal axis to the line segment vvi .
2: Create the vertex list E, containing the αi ’s sorted in increasing order. 3: Create the active list S, containing the sorted list of edges that intersect the horizontal

half-line emanating from v.

4: for all αi do

5: if vi is visible to v then

6:

Add the edge (v, vi ) to the visibility graph.

7: end if

8: if vi is the beginning of an edge, E, not in S then

9:

Insert the E into S.

10: end if

11: if vi is the end of an edge in S then

12:

Delete the edge from S.

13: end if

14: end for

Choset-79066 book February 22, 2005 17:53

5.1 Visibility Maps: The Visibility Graph

v8 E7

115 v7

v4

v3

E3

v

E8

E6

E4

E2

E1 v1

v2

E5

v5

v6

Figure 5.8 An example of the sweep line algorithm at work for an environment containing two rectangular obstacles.

straightforward to determine if vi is visible to v. Let S be the sorted list of edges that intersects the half-line emanating from v; the set S is incrementally constructed as the algorithm runs. If the line segment vvi does not intersect the closest edge in S, and if l does not lie between the two edges incident on v (the sweep line does not intersect the interior of the obstacle at v), then vi is visible from v.
Figure 5.8 shows an example conﬁguration space containing two obstacles with vertices v1, . . . , v8. Table 5.1 shows how the data structures are updated as the algorithm proceeds from initialization to termination. Step 1 of the algorithm determines the angles, αi ’s, at which the line l will pause; such angles correspond to the vertices of the obstacles. In step 2 of the algorithm, these angles are used to construct the vertex list, E, and in step 3 the active list S is initialized. After initialization, E and S are the sorted lists:
E = {α3, α7, α4, α8, α1, α5, α2, α6, },
S = {E4, E2, E8, E6}.

Choset-79066 book February 22, 2005 17:53

116

5 Roadmaps

Vertex Initialization
α3 α7 α4
α8
α1
α5 α2 α6 Termination

New S {E4, E2, E8, E6}
{E4, E3, E8, E6} {E4, E3, E8, E7}
{E8, E7}
{}
{E1, E4}
{E4, E1, E8, E5} {E4, E2, E8, E5} {E4, E2, E8, E6}

Actions
Sort edges intersecting horizontal half-line
Delete E2 from S. Add E3 to S. Delete E6 from S. Add E7 to S. Delete E3 from S. Delete E4 from S. ADD (v, v4) to visibility graph Delete E7 from S. Delete E8 from S. ADD (v, v8) to visibility graph Add E4 to S. Add E1 to S. ADD (v, v1) to visibility graph Add E8 to S. Add E5 to S. Delete E1 from S. Add E2 to S. Delete E5 from S. Add E6 to S.

Table 5.1 Table showing the progress of the rotational plane sweep algorithm for the environment of ﬁgure 5.8.

At termination, the algorithm has added three new edges to the visibility graph: (v, v4), (v, v8), and (v, v1).
The complexity of algorithm 5 is O(n2 log n). The time required by step 1 is O(n), since each vertex must be visited exactly once. For step 2, the required time is O(n log n), since this is the time required to sort a list of n elements. For step 3, the set of active edges can be computed in O(n) time by merely testing each edge to see if it intersects the horizontal axis. In the worst case, if every edge were to intersect the horizontal axis, this set could be sorted in time O(n log n). The main loop of the program (step 4) iterates n times (once for each vertex). At each iteration, the algorithm must perform basic bookkeeping operations (insert or delete), but these can be done in time O(log n) if an appropriate data structure, such as a balanced tree, is used to maintain S Thus, the time required by step 4 is O(n log n), and therefore the total time complexity of the algorithm is O(n2 log n).
Finally, we have not considered here the case when l may simultaneously intersect multiple vertices. In order for this to occur, three vertices must be collinear. When this does occur, the problem can be resolved by slightly perturbing the position of one of

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

117

the three vertices. When no three vertices are collinear, we say that the polygons are in general position, and the general position assumption is common for computational geometry algorithms. It is also possible to modify the visibility test to account for nongeneral conﬁgurations, and this is addressed in [124].

5.2 Deformation Retracts: Generalized Voronoi Diagram
The generalized Voronoi diagram (GVD) is the set of points where the distance to the two closest obstacles is the same. Figure 5.9(d) displays an example of the GVD. Path planning is achieved by moving away from the closest point until reaching the GVD, then along the double equidistant GVD to the vicinity of the goal, and then from the GVD to the goal. Since the GVD is deﬁned in terms of distance, one can expect

ij
i j (a)

ij
i j (b)

ij

i

j

(c)

di(q) dj(q)
(d)

Figure 5.9 (a) The set Si j contains points equidistant to two obstacles QOi and QOj . (b) The set SSi j contains equidistant points with distinct gradients; note that there is no SSi j structure to the right of the obstacles. We delay discussion of this structure for a moment. (c) The set Fi j has the closest pair of obstacles. (d) The GVD is the union of all such sets.

Choset-79066 book February 22, 2005 17:53

118

5 Roadmaps

that a robot equipped with range sensors can incrementally construct the GVD in an unknown space. Once the GVD is constructed, the robot has essentially explored the space because the robot can use the GVD to plan paths in the free space with the GVD.
We show that the GVD is a roadmap because the GVD is a type of deformation retract. Deformation retracts are best described by an analogy. Imagine a doughnutshaped candy: a candy with a hole in the middle of it. As the candy dissolves, eventually a ring remains. This ring captures the topological structure of the candy even though it is signiﬁcantly smaller than the original. Every point on the ring serves as the center of a corresponding planar disk orthogonal to the ring; each disk is shrunk to a point. In this analogy, the original candy represents the robot’s free space and the resulting ring corresponds to a geometric structure called a deformation retract. The function that represents this shrinking process, i.e., the function that maps the ﬁlled torus1 onto a ring, is called a deformation retraction.
First in section 5.2.1, we deﬁne the GVD and then in section 5.2.2, we show it has the properties of accessibility, connectivity, and departability. In section 5.2.2, we rely on the fact that the GVD is indeed a deformation retract to assure it has the roadmap properties and in section 5.2.3 we describe in more detail as to how the GVD is a deformation retract. Next, in section 5.2.4, we prove that the GVD is indeed one-dimensional. Here, we review the preimage theorem to assert the dimensionality property of the GVD. Finally, in section 5.2.5, we describe three methods to construct the GVD.
5.2.1 GVD Deﬁnition
The Voronoi diagram is deﬁned for a set of points called sites [31]. A Voronoi region is the set of points closest to a particular site [31]. The Voronoi diagram is then the set of points equidistant to two sites; it sections off the free space into regions that are closest to a particular site. Points on the Voronoi diagram have two closest sites. In the planar case, the Voronoi diagram is a collection of line segments.
For the purposes of path planning, we can think of the point sites as obstacles, but obstacles are not simple points. Therefore, the deﬁnition of a Voronoi region is extended to the generalized Voronoi region, Fi , which is the closure of the set of points closest to QOi . In other words,
(5.1) Fi = {q ∈ Qfree | di (q) ≤ dh(q) ∀h = i },
1. A torus is two-dimensional structure, and the ﬁlled torus is a three-dimensional version, i.e., the convex hull of a torus embedded in R3.

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

119

where di (q) is the distance to an obstacle QOi from q, i.e., di (q) = minc∈QOi d(q, c) (chapter 4, equation (4.6)).
The basic building block of the GVD is the set of points equidistant to two sets QOi and QOj , which we term a two-equidistant surface denoted by Si j = {x ∈ Q | (di (q) − d j (q)) = 0}. Note that di (q) − d j (q) = 0 is an equivalent way to state di (q) = d j (q) (ﬁgure 5.9). A two-equidistant surface pierces obstacles, so we restrict it to the set of points that are both equidistant to QOi and QOj and have QOi and QOj as their closest obstacles. This restricted structure is the two-equidistant face, which could be denoted by Fi j = {q ∈ Si j | di (q) ≤ dh(q) ∀h}2. We reﬁne this deﬁnition shortly. The union of the two-equidistant faces forms the GVD, i.e.,

GVD =

Fi j .

ij

This deﬁnition of the GVD applies to any dimensional spaces. One can see that the GVD partitions the free space into regions Fi such that points in the interior of one Fi are closer to QOi than to any other obstacle. Points on the GVD have two or more closest obstacles. In the planar case, we term the Fi j as GVD edges and they terminate at either meet points, the set of points equidistant to three or more obstacles (Fi jk), or boundary points, the set of points whose distance to the closest obstacle is zero. Boundary points are the endpoints of “spokes” of the GVD.

5.2.2 (5.2)

GVD Roadmap Properties

In Rm, the GVD has the properties of accessibility, connectivity, and departability. In the plane, the GVD is a roadmap because it has these properties and is onedimensional. We show that the planar GVD is one-dimensional in the next subsection and the properties of accessibility, connectivity, and departability here. The robot achieves accessibility by moving away from the closest obstacle; it performs gradient ascent of distance D to the closest obstacle, i.e.,

dc(t) = ∇ D(c(t)) dt

where c(0) = qstart,

until it reaches a point on the GVD.

Equation (5.2) is a ﬁrst order differential equation implicitly deﬁning the the path

c : [0, 1] → Qfree. At any point c(t) ∈ Qfree, the tangent to the path is deﬁned by

the gradient of distance to the closest obstacle. The gradient ∇ D(q) points in the

direction

that

maximally

increases

distance.

The

tangent

of

the

curve

d c(t ) dt

is

“set”

2. Note that we could have written di (q) = d j (q) ≤ dh(q), but the “= d j (q)” is already implied by the q ∈ Si j .

Choset-79066 book February 22, 2005 17:53

120

5 Roadmaps

to the gradient of distance. By constantly following the distance gradient, a path is traced that maximally increases the distance.

LEMMA 5.2.1 (Accessibility of the GVD) In an obstacle-bounded environment, gradient ascent of D traces a path from any point in the free space to the GVD.

Proof Assume the robot starts at a point q that is not on the GVD. Let QOi be the

closest obstacle to q. Hence di (q) = D(q) and dh(q) > di (q) for all h. The robot

traces a path

dc(t) dt

=

∇di (c(t))

where c(0)

=

q.

Since the environment

is

bounded,

continuity of the distance function guarantees that there exists a t¯ ∈ R and a QO j ,

such that di (c(t¯)) = d j (c(t¯)).

We use the fact that the GVD is a deformation retract to ensure connectivity of the GVD. A deformation retract is the image of a continuous function called a deformation retraction R M such that
R M(q) = q, for all q in the GVD, R M(q) = q , for any q ∈ Qfree and q ∈ GVD.
We more formally deﬁne the deformation retraction in the next section. For the GVD, the gradient ascent accessibility procedure implicitly deﬁnes the
deformation retraction without explicitly doing so [340]. In other words, if q is on the GVD, then the image of q is q, i.e., R M(q) = q. If q is in the free space but not in the GVD, then the image q is the q in the GVD that is obtained by moving away from the closest point on the closest obstacle until encountering the GVD, i.e., RM(q) = q .
Connectivity of the GVD is then a consequence of continuity of the R M function. In other words, since R M is continuous, for each connected component of the free space there is a connected component of the GVD. Therefore, there exists a path that connects qstart and qgoal if and only if there exists a path in the GVD that connects qstart and qgoal where qstart = R M (qstart) and qgoal = R M (qgoal).
Departability is simply accessibility in reverse. However, there are other ways to achieve departability. It can be shown that all points in free space have at least one point on the GVD within line of sight, i.e.,
∀ q ∈ Qfree, ∃q ∈ GVD such that sq + (1 − s)q ∈ Qfree ∀s ∈ [0, 1].
This means that if the robot comes within line of sight of the goal, the robot can drive straight toward it. This approach to departability only makes sense if the robot can detect the goal using its on-board sensors.

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

121

5.2.3 Deformation Retract Deﬁnition
Before deﬁning the deformation retract, we deﬁne a weaker structure called a retract. For a manifold X , a retraction is a continuous function f : X → A such that A ⊂ X , and f (a) = a for all a ∈ A [410]. The subset A is the retract. Typically, the dimension of A is less than the dimension of X .
The set of deformation retracts is a subset of the set of retracts and hence the GVD is a retract also. However, the properties of a retract are not sufﬁcient to guarantee that the GVD is a roadmap. It is the fact that that GVD is indeed a deformation retract that makes it a roadmap. Essentially, a deformation retract inherits many topological properties from its ambient space, whereas a retract may not. One important property is that the number of “types” of closed paths in the free space is equal to the number of “types” of closed paths in the deformation retract of the free space.
Let’s return to the candy example from the beginning of this section. Although a retract can be a ring, it could also be a single point, a two-dimensional disk orthogonal to the ring, etc. We need to enforce additional properties on the retract so as to guarantee that it captures the topology of its free space and is still one-dimensional. Recall from chapter 3, section 3.4.1 that global diffeomorphisms are mappings that relate spaces that are “topologically similar.” Diffeomorphic spaces must have same dimension. Now, we consider spaces that are similar, but of different dimensions.
Let f : U → V and g : U → V where U and V are manifolds. A homotopy is a continuous function H : U × [0, 1] → V such that H (x, 0) = f (x) and H (x, 1) = g(x). An example of H is H (x, t) = (1 − t) f (x) + tg(x). If there exists such a continuous mapping that “deforms” f to g, then f and g are homotopic, and the resulting equivalence relation is denoted f ∼ g. We can also say that two paths f and g are path-homotopic, i.e., f ∼ g, if they can be continuously deformed into one another. This relation allows for the classiﬁcation of functions into equivalence classes termed path-homotopy classes and are denoted as
[c] = {c¯ ∈ C0 | c¯ ∼ c}.
where c is a representative element of the class. Let A ⊂ X and let f : X → A be a retraction. A deformation retraction is a
homotopy H : X × [0, 1] → X such that
H (x, 0) = x
H (x, 1) ∈ A
H (a, t) = a for a ∈ A and t ∈ [0, 1]

Choset-79066 book February 22, 2005 17:53

122

5 Roadmaps

In other words, H is a homotopy between a retraction and the identity map3. Note that all retractions are not necessarily homotopic to the identity map. The retract is now called a deformation retract.
We use deformation retractions to smoothly deform, without tearing or pasting X onto a lower, preferably one-dimensional subset A of X . So, as t varies from 0 to 1, a point in X continuously moves through X to a point in A. Moreover, a point y in a neighborhood of x also continuously moves through X to a point in A such that H (x, t) and H ( y, t) are close to each other as t varies from 0 to 1. Thefore, the deformation retraction preserves many topological properties of the free space. Thus, while a diffeomorphism preserves the structure of two spaces of the same dimension, a deformation retraction preserves the structure of two spaces of different dimension.
One of the key topological properties of deformation retracts is that they preserve the number of homotopically equivalent closed loops from the ambient space. The number of homotopy equivalence classes of closed loops is called the ﬁrst fundamental group, and is denoted as π1( X, x0) for loops in X passing through x0. Since this is a group, it has a group operator ( ) that simply concatenates paths. A set X is simply connected if the fundamental group associated with the set, π1( X, x0), contains only the identity element (e.g., the group only contains one element). If f is a deformation retraction with A as its deformation retract of X , then π1( X, x0) = π1( A, f (x0)). In other words, the ambient space X and the deformation retract A have the same number of homotopically equivalent closed loops.
Deformation retracts have the properties of connectivity, accessibility, and departability. For each connected component of X , A is a connected set because the image of a connected set under a continuous mapping is a connected set [9]. The deformation retraction determines a path from the start to the deformation retract, as well as a path from the goal to the retract. Let H be the deformation retraction and H (x, 0) = qstart. The path to the deformation retract is then deﬁned by H (x, ·) : [0, 1] → Qfree where H (x, 1) is an element of the deformation retract. Departability is shown in the same manner. Since the deformation retract is connected, there is a path between the retracted start and retracted goal conﬁgurations along the deformation retract. Hence, one-dimensional deformation retracts are roadmaps.
The GVD is a retract because the R M (equation (5.2.2)) has been shown to be continuous and maps all points on the GVD to the GVD. Since R M is continuous, the GVD is connected in a connected component of the free space because the image of connected set under a continuous function is a connected set. The GVD is a deformation retract because R M has been shown to be homotopic to the indentity
3. Sometimes, a deformation retraction is deﬁned as a retraction that is homotopic to the identity map [207] as opposed to the homotopy.

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

123

map. Therefore, R M smoothly deforms the free space onto a one-dimensional subset and deﬁnes the accessibility and departability criteria. Finally, since the GVD is a deformation retract, the number of closed-loop path equivalent classes in the GVD equals the number of closed-loop path equivalent classes in the free space because R M preserves the cardinality of the ﬁrst fundamental group. This makes the GVD a concise representation of the free space.
5.2.4 GVD Dimension: The Preimage Theorem and Critical Points
A key property of a roadmap is that it is one-dimensional. Actually, we show that in the plane, the GVD consists of one-dimensional manifolds. Before we can demonstrate this, we have to take a more careful look at the deﬁnition of the GVD. Recall that we are using the distance function di to deﬁne the GVD, but this function assumes that the obstacles are convex, which is unrealistic in most situations.
At ﬁrst, it seems to make sense to decompose nonconvex obstacles into convex pieces. This causes problems because there are many ways to construct such a decomposition, thereby resulting in different representations of the free space. Consider the obstacle in ﬁgure 5.10. Both decompositions are valid, but unfortunately they give rise to two different deﬁnitions of Si j , the set of points equidistant to two obstacles QOi and QOj . There are inﬁnitely many ways to decompose a nonconvex obstacle and hence the possibility for inﬁnitely many representations.

i
q1

i
q1

q3

q2

j

j

Figure 5.10 A nonconvex obstacle is divided into two pieces, QOi and QOj , but in two different ways. On the left, a diagonal forms the convex obstacles and on the right a vertical cut forms them. Note that in both left and right, the gradient vectors pointing away from the two closest obstacles are distinct at q1 but they are the same at q2 and q3.

Choset-79066 book February 22, 2005 17:53

124

5 Roadmaps

It would be nice to have a unique representation of the roadmap, so we reﬁne our deﬁnition of the GVD. In ﬁgure 5.10, note that there are two portions of Si j : the upper-right portion, which is “between” the two arms of the obstacle and the lower-left portion, which is on the other side of the obstacle. Note that for the portions between the two arms, the gradients to the two closest obstacles are distinct, e.g., ∇di (q1) = ∇d j (q1). However, for the other portions, the gradients line up, e.g., ∇di (q2) = ∇d j (q2) and ∇di (q3) = ∇d j (q3). Eliminating the portion of the two-equidistant surface with nondistinct gradient vectors yields a set termed the two-equidistant surjective surface denoted as
SSi j = {q ∈ Si j | ∇di (q) = ∇d j (q)}.
See ﬁgure 5.9(b) for an example of a two-equidistant surjective surface deﬁned by a nonconvex obstacle that has been divided into two convex pieces.
This deﬁnition of a two-equidistant surjective surface should be salient from a sensor-based perspective. Consider the planar case where distance and gradient vectors can be derived from a laser ranger or a sonar ring which approximates the saturated raw distance function. Recall that the saturated raw distance function corresponds to all of the rays emanating from a single point intersecting as can be seen in ﬁgure 5.11.

i

q1

j
q2

i

q1

j
q3

Figure 5.11 A robot is placed at different conﬁgurations q1, q2 and q3. It has range sensors radially distributed pointing in a full 360 degrees. The rays emanating from the points correspond to the range readings. Local minima correspond to distance to nearby obstacles. (Left) Use a diagonal cut to break the nonconvex obstacles into convex ones, but a robot cannot see the diagonal cut from q2 because there is no local minimum. (Right) Use a vertical cut to break the nonconvex obstacles into convex ones, but a robot cannot see the vertical cut from q3 because there is no local minimum.

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

125

On the “inside” of the concavity (at q1 in ﬁgure 5.11), there are two local minima in the raw distance function, whereas on the outside there is one at q2 and one at q3. In other words, a robot situated on the “outside” of the obstacle cannot determine from its sensor readings how the obstacle was cut. Another perspective is that on the “inside” of the nonconvex obstacle, the robot “sees” two obstacles and on the “outside,” it only “sees” one.
From here, the deﬁnition of the two-equidistant face Fi j is modiﬁed to be Fi j = {q ∈ SSi j | di (q) ≤ dh(q) ∀h}. So the GVD is the set of points equidistant to two obstacles such that the two obstacles are closest and have unique closest points on them.
We are now ready to show that the GVD is indeed one-dimensional. We do this by ﬁrst rewriting the equidistant relationship di (q) = d j (q) as di (q) − d j (q) = 0, which in turn can be written as (di − d j )(q) = 0. Intuitively, this one constraint in a twodimensional space deﬁnes a one-dimensional subspace. In other words, equidistance is the preimage of zero under the map (di − d j ) : Q → R. We use this reformulation to demonstrate that in the plane the GVD comprises one-dimensional manifolds by taking recourse to the preimage theorem [173].
THEOREM 5.2.2 (Preimage Theorem) Let M and N be manifolds. Let G : M → N ∈ C∞ and n ∈ N be a regular value of G. The set G−1(n) = {m ∈ M | G(m) = n} is a closed submanifold of M with tangent space given by Tm G−1(n) = ker DG(m). If N is ﬁnitely dimensional, then dim(G−1(n)) = dim( M) − dim( N ), i.e., dim(G−1(n)) = dim( M) − dim( N ).
The preimage theorem contains a lot of terminology and notation. A regular value is an n where for all m ∈ G−1(n), the differential DG(m) is surjective (e.g., has full rank). See section C.5.5 for a description of the differential. Next, Tm denotes the tangent space at m . So, Tm M is the tangent space at m on the manifold M and TpG−1(n) is the tangent space at p on the manifold G−1(n), which is a submanifold of M.
A critical point is a point where the differential is not surjective and hence loses rank. (For real-valued functions, it is a point where the ﬁrst derivative vanishes.) Let
(G) be the set of all critical points of G. For all q∗ ∈ (G), G(q∗) are critical values. Finally, all points q ∈ (G) where DG(q) is surjective are termed regular points with G(q) as their corresponding regular values.
To show that the GVD edges are indeed one-dimensional, we use the preimage theorem to show that they are one-dimensional manifolds. First let’s see how the preimage theorem is used to create manifolds. Consider the function f (x, y) = x2 + y2. The differential D f (x, y) = [2x, 2y]. For all f (x, y) = 91, 538, D f (x, y) = 0 and thus the preimage of 91,538 under f forms a one-dimensional manifold.

Choset-79066 book February 22, 2005 17:53

126

5 Roadmaps

With the GVD, G = (di − d j ), and the set of points equidistant to two obstacles is (di − d j )−1(0). However, for all points in the preimage to be regular, DG must be surjective. In other words, D(di − d j ) must not be equal to zero. Since in a Euclidean space, Ddi (q) = (∇di (q))T , this means ∇di (q) cannot be equal to ∇d j (q). However, we are fortunate to have the ∇di (q) = ∇d j (q) condition in the deﬁnition of SSi j . So, in actuality, the ∇di (q) = ∇d j (q) enforces the surjective condition
for the preimage theorem, hence the term surjective in the two-equidistant surjective
surface. So, by the preimage theorem, SSi j is one-dimensional in the plane. The set Fi j is a submanifold of SSi j . Therefore, the GVD comprises a set of one-dimensional
manifolds (ﬁgure 5.9).

5.2.5 Construction of the GVD
We discuss three methods for constructing the planar GVD: the ﬁrst uses sensor information allowing the robot to construct the GVD in an unknown space; the second assumes the world has polygonal obstacles in which case we can compute complexity information about the GVD; and the ﬁnal method assumes that the world is a grid allowing for efﬁcient computation.

Sensor-Based Construction of the GVD
Exploring with the GVD is akin to simultaneously generating and exploring a graph that is embedded in the free space. The GVD can be incrementally constructed because it is deﬁned in terms of distance information which is readily provided by range sensors onboard mobile robots. Using such line-of-sight data, the robot initially accesses the GVD and then begins tracing an edge until it encounters a meet point or a boundary point. When the robot encounters a new meet point, it marks off the direction from which it came as explored, and then identiﬁes all new GVD edges that emanate from it. From the meet point, the robot explores a new GVD edge until it detects either another meet point or a boundary point. In the case that it detects another new meet point, the above branching process recursively repeats. If the robot reaches an old meet point, the robot has completed a cycle in the GVD graph and then travels to a meet point with an unexplored edge associated with it. When the robot reaches a boundary node, it simply turns around and returns to a meet point with unexplored GVD edges. When all meet points have no unexplored edges associated with them, exploration is complete.
The robot accesses the GVD by simply moving away from the nearest obstacle until it is equidistant to two obstacles (ﬁgure 5.12). Once the robot accesses the GVD, it must incrementally trace the GVD using the same curve tracing technique from

Choset-79066 book February 22, 2005 17:53

5.2 Deformation Retracts: Generalized Voronoi Diagram

127

GVG

Sonar Ray

Local Min

Figure 5.12 The circular disk represents a mobile robot with some of its range sensor readings. The thick ray, labeled local min, corresponds to the smallest sensor reading, and hence the robot will move in the direction indicated by the black arrow to access the GVD, denoted by a dashed line between two nonparallel walls.

1

q1

GVD

q

1
TqGVD
q

2

q2

2

Figure 5.13 The tangent space to the GVD is orthogonal to the line that connects the two closest points on the two closest obstacles.

chapter 2, section 2.3.3, except G(q) = di (q) −d j (q) whose roots are the set of points where di (q) = d j (q). The tangent is the null space of ∇G(q), which corresponds to a line orthogonal to ∇di (q) − ∇d j (q). This is identical to passing a line through the two closest points and taking the vector perpendicular to the line to be the tangent (ﬁgure 5.13). A meet point is detected by looking for a sudden change in one of the two closest obstacles.

Polygonal Spaces
In a polygonal environment, obstacles have two features, vertices and edges, thereby making equidistance relationships easy to deﬁne. The set of points equidistant to two vertices is a line; the set of points equidistant to two edges is a line; and the set of points equidistant to a vertex and an edge is a parabola. Therefore, by breaking down

Choset-79066 book February 22, 2005 17:53

128

5 Roadmaps

1

B

A

C

2

Figure 5.14 GVD edge fragment for two polygonal obstacles.

the free space into regions with the appropriate pair of closest features, one can easily

build the GVD. In ﬁgure 5.14, regions A and C have a pair of edges as their respective

closest features, whereas region B has an edge and vertex as its closest obstacle.

In a polygonal environment with n obstacles and N obstacle vertices, the number

of

GVD

edges

falls

between

3(n + 1) 2

and

6N

+ 3n

− 3.

The

number

of

nodes

on

the

GVD

falls

between

n+5 2

and

4N

−

n

−

2.

See

[359]

for

details.

Grid Conﬁguration Spaces: The Brushﬁre Method
The method presented in chapter 4, section 4.3.2 can be readily adapted to construct the GVD in a discrete grid. Originally, the input for the brushﬁre method is a grid of zeros corresponding to free space and ones corresponding to an obstacle. The output of the brushﬁre method is a discrete map where each pixel in the grid has a value equal to the distance to the closest point on the closest obstacle (the closest pixel with a value of one).
We can view the brushﬁre method as a wave initially starting at the obstacles and propagating through the free space. As the wave front passes over a pixel, the method assigns a value to the pixel corresponding to how far the wave has traveled. The wave fronts collide at points where the distance to two different obstacles is the same. These are points on the GVD.
The brushﬁre algorithm can be readily updated to identify the pixels where these collisions occur. Essentially, as the wave propagates, each pixel in the wave front maintains a back pointer to the obstacle pixel from which the wave originated. When the updated brushﬁre algorithm attempts to assign a “free pixel” with two

Choset-79066 book February 22, 2005 17:53

5.3 Retract-like Structures: The Generalized Voronoi Graph

129

different back pointers, two wave fronts have collided and the current pixel belongs to the GVD.

5.3 Retract-like Structures: The Generalized Voronoi Graph
Now, we consider the case when Q = R3. In R3, the GVD is two-dimensional and therefore reduces the motion planning problem by a single dimension. We use ﬁgure 5.9(d) to show this. Imagine extruding the one-dimensional curves in ﬁgure 5.9(d) into two-dimensional surfaces in three dimensions; so the one-dimensional curves in ﬁgure 5.9(d) become cross sections of two-dimensional sheets. This makes sense because we have a three-dimensional space with one constraint resulting in a twodimensional subspace. The preimage theorem conﬁrms that the GVD actually comprises two-dimensional manifolds; the dimension of (di − d j )−1(0) is two because 3 − 1 = 2.
Just as two planes in R3 generically intersect on a line, two two-equidistant faces intersect and form a one-dimensional manifold. The union of these one-dimensional structures is termed the generalized Voronoi graph (GVG) [105,106]. See ﬁgures 5.15 and 5.16 for examples of the GVG in three dimensions.

Figure 5.15 The solid lines represent the GVG for a rectangular enclosure whose ceiling has been removed to expose the interior. Imagine a sphere rolling around touching the removed ceiling, ﬂoor, and side wall; the center of this sphere traces a GVG edge.

Choset-79066 book February 22, 2005 17:53
130

5 Roadmaps

Figure 5.16 The GVG for the International Space Station (in a bounding box). Note that a bounding box was used but is not displayed. Also note how complicated the GVG becomes.

5.3.1

GVG Dimension: Transversality

The GVG edges in R3 are the set of points equidistant to three obstacles such that the three obstacles are closest and have distinct gradients. Starting with triple equidistance, we deﬁne Si jk = {q | (di − d j )(q) = 0 and (di − dk)(q) = 0}. We do not need the additional (d j − dk)(q) = 0 constraint because di (q) = d j (q) and di (q) = dk(q) imply that d j (q) = dk(q). Just like before, we are interested in a subset of Si jk where the gradients are distinct, and thus

SSi jk = {q ∈ Si jk | ∇di (q) = ∇d j (q), ∇di (q) = ∇dk(q), ∇d j (q) = ∇dk(q)}

= SSij SSik SS jk

Note that the transitivity of di (q) = d j (q) and d j (q) = dk(q) implies that di (q) = dk(q), but it does not ensure that SSi jk = SSi j SSik because we require all three gradients to be distinct. To determine the dimension of the GVG edge, we look at G : R3 → R2
where

G(q) =

(di − d j ) (di − dk)

(q)

whose preimage G−1(0) is the set of points equidistant to three obstacles QOi , QOj , and QOk when the differential DG(q) is surjective, i.e., does not lose rank. The differential DG(q) can lose rank when either row of DG(q) is zero or the ﬁrst row is a scalar multiple of the second row in DG(q). We already know by deﬁnition that ∇di (q) =

Choset-79066 book February 22, 2005 17:53

5.3 Retract-like Structures: The Generalized Voronoi Graph

131

Figure 5.17 Three ways two lines in the plane can intersect, but only a point-intersection is transversal.

∇d j (q) and ∇di (q) = ∇dk(q), so all we need to show is that ∇(di − d j )(q) = α∇(di − dk) for all α ∈ R. In other words, we must show that the two rows of DG(q) do not depend upon each other.
We demonstrate this by making a “reasonable” assumption based on transversality, a property of how sets intersect. Let’s start with a simple example of two intersecting lines in the plane. These lines may intersect in one of three ways: not at all (parallel), at a point (generic), and on a line (overlap) (ﬁgure 5.17). The parallel and overlap cases can be viewed as “unstable” because if either line were perturbed a little bit, the intersection would change dimension. The point intersection can be viewed as stable in that if either of the lines were perturbed, a point-type intersection is preserved. We call stable intersections transversal and nonstable intersections nontransversal. Two lines in three dimensions can never intersect transversally because a generic perturbation can break the intersection to no intersection. In three dimensions, two planes transversally intersect on a line and a plane and a line transversally intersect at a point.
In actuality, transversality is a local property of manifolds. For example, we say that two manifolds may intersect transversally at a point. Since transversality is a local property, we look at the intersection of the tangent spaces, not of the manifolds themselves. If intersection of the tangent spaces is transversal at a point, then the manifolds intersect transversally at that point (ﬁgure 5.18). We know from the preimage theorem that the tangent space Tq G−1(0) is given by the set of vectors {v ∈ Tq Q | DG(q)v = 0}. We assume that surjective equidistant sheets intersect transversally at all points, i.e., Tq (di − d j )−1(0) and Tq (di − dk)−1(0) intersect transversally for all q ∈ SSi j SSik. If they do not intersect transversally, then after a small perturbation of one of the manifolds, the intersection of the two manifolds will be transversal. In any event, the transversal intersection means that for all q ∈ SSi j SSik, ∇(di − d j )(q) = α∇(di − dk)(q) for all α ∈ R. Therefore, DG(q) has full rank and we can use the preimage theorem to assure us that SSi jk is indeed a one-dimensional manifold. The GVG in R3 is then the union of Fi jk = {q ∈ SSi jk | di (q) ≤ dh(q) ∀h}, i.e.,

(5.3) GVG =

Fi jk .

i jk

Choset-79066 book February 22, 2005 17:53

132

5 Roadmaps

Structure GVD GVG

Dimension m −1 1

Codimension 1
m −1

Equidistance 2 m

Table 5.2 Comparison of the GVD and the GVG.

Symbol Fi1i2
Fi1 , ..., im

y
x C
A

B
Figure 5.18 The one-dimensional manifolds A and B intersect transversally at x whereas the intersection of B and C at y is not transversal because the tangent spaces at B and C are coincident at y.
In higher dimensions, one can deﬁne more equidistant sheets and intersect them to form a GVG. In Rm, the GVG is the set of points equidistant to m obstacles and has dimension one. In contrast, in Rm the GVD is the set of points equidistant to two obstacles and has dimension m − 1. Sometimes, an m − k-dimensional object lying in an m -dimensional space is said to have codimension k; therefore the GVD has codimension one, regardless of the space in which it is deﬁned. When m = 2, the GVG and the GVD coincide. For naming convention refer to the GVG as the “one-dimensional” roadmap structure and thus in the plane we will sometimes call it the planar-GVG. See table 5.2.
Now, let’s more formally deﬁne transversality. Let Mint be the intersection of two submanifolds M1 and M2 of M. The intersection is said to be transversal if Tx M1 + Tx M2 = Tx M for all points x ∈ Mint. Therefore, if M1 and M2 are ﬁnitely dimensional, transversality implies that codim(Tx M1 Tx M2) = codim(Tx M1) + codim(Tx M2) for all x ∈ Mint. For example, two lines in the plane each have codimension one and their intersection has codimension two, which means a zero-dimensional intersection which is a point. Two two-dimensional planes in R4 have codimension two and

Choset-79066 book February 22, 2005 17:53

5.3 Retract-like Structures: The Generalized Voronoi Graph

133

intersect at a point, which has codimension four in R4. The transversality assumption is a generalization of the general position assumption that is commonly assumed in the computational geometry literature.
5.3.2 Retract-like Structure Connectivity
Alas, unlike the case in ﬁgure 5.15, the GVG is typically not connected and thus is not a roadmap, as can be seen in the example shown in ﬁgure 5.19. Here, there is an outer GVG network of one-dimensional manifolds associated with the rectangular enclosure and there is an inner GVG edge associated with the interior box. We term this latter edge a GVG cycle which is a GVG edge that is homeomorphic to S1. In this section, we ﬁrst explain why the GVG is not connected and then introduce some techniques that can be used to connect disconnected components of the GVG. For a thorough explanation of these procedures, see [106].
The lack of connectivity of the GVG is not the fault of the GVG deﬁnition, but rather a consequence of using deformation retractions: in general, there cannot be a onedimensional deformation retract of a punctured three-or-more-dimensional space. In other words, whereas in the plane we were able to retract the free space onto the

Figure 5.19 A rectangular environment with its ceiling removed to expose a rectangularly shaped box in its interior. The GVG contains two connected components: an outer network similar to the one in ﬁgure 5.15 and an inner “halo-like” structure that surrounds the inner box.

Choset-79066 book February 22, 2005 17:53

134

5 Roadmaps

GVD with the H mapping (section 5.2.3), in a punctured R3 there is no continuous function that maps the free space onto a one-dimensional subset that is homotopic to the identity map [63]. The latter condition means that there is no map that “smoothly deforms” the free space onto the one-dimensional structure.
We address the lack of connectivity of the one-dimensional structure by ﬁrst looking at a connected two-dimensional structure, and then deﬁning one-dimensional structures on the two-dimensional structure to form a roadmap. In R3 the two-dimensional GVD is connected. In fact, the GVD is a two-dimensional deformation retract of the three-dimensional space. We can exploit this connectivity of the GVD to “patch together” the GVG. Notice that the GVG edges lie on the boundary of the GVD sheets where adjacent GVD sheets intersect. In other words, Fi jk = ∂Fi j ∂Fik ∂F jk. Therefore, if, and this is a big if, the boundaries of all two-equidistant sheets were connected, then the resulting GVG would be connected because the GVD is connected. This is the case in ﬁgure 5.15 where all two-equidistant faces have connected boundaries. This is not the case in ﬁgure 5.19 with the two-equidistant sheet associated with the ﬂoor and ceiling; it has a hole in the middle. The boundary of this hole is the GVG edge deﬁned by the ﬂoor, ceiling, and interior box. So, our goal now is to connect the boundaries of each of the two-equidistant sheets.
To connect the GVG edges (the boundaries of the two-equidistant faces), we deﬁne additional structures called higher-order GVG edges. A second-order GVG edge Fkl Fij is the set of points where QOi and QOj are the closest pair of equidistant obstacles and QOk and QOl are the second-closest, i.e.,

Fkl Fij = {q | di (q) = d j (q) ≤ dk(q) = dl (q) ≤ dh(q) ∀h = i, j, k, l,

(5.4)

such that ∇di (q) = ∇d j (q) and ∇dk(q) = ∇dl (q)}.

The ﬁrst line of equation (5.4) establishes the equidistance relationships: a pair of closest obstacles and a pair of second-closest obstacles. The second line of equation (5.4) ensures that the gradients are distinct, a condition necessary for the preimage theorem to assert that Fkl Fij is a one-dimensional manifold.
The second-order GVG edges are essentially planar-GVG edges but deﬁned on two-equidistant faces. The preimage theorem guarantees that these edges are onedimensional and terminate (and intersect) at second-order meet points, denoted as Fklp Fij (ﬁgure 5.20).
We call the union of the GVG and second-order GVG the hierarchical generalized Voronoi graph (HGVG), which by itself, as can be seen in ﬁgure 5.20, is not connected. However, there is a clue in the second-order GVG that directs the planner to “look for” a separate GVG-connected component. Notice in ﬁgure 5.20 that there is a network of second-order GVG edges that form a closed-loop path, which we term a period, that has a common second-closest obstacle — the box in the middle of the room.

Choset-79066 book February 22, 2005 17:53

5.3 Retract-like Structures: The Generalized Voronoi Graph

135

Figure 5.20 The same environment as ﬁgure 5.19. The GVG, consisting of the outer network and the “halo” surrounding the inner box, is drawn. The other lines represent the second order GVG edges, each drawn on two-equidistant faces. Observe that the second-order GVG edges form a period that surrounds the GVG cycle in the middle of the free space. Once the period is determined, a link can be made to the inner GVG cycle.
Once a period is detected, the planner can trace a path that maintains two-way equidistance between QOi and QOj while decreasing the distance to QOk. Such a path follows, in general, the negative gradient of dk because we start with dk(q) > di (q) = d j (q), and decreasing dk yields a conﬁguration where dk(q) = di (q) = d j (q). However, in order to maintain double equidistance between QOi and QOj , the negative gradient must be projected onto the two-equidistant face. Hence, the path is c˙(t) = −πTc(t)Fij ∇dk(c(t)) where the π operator is projection. Following the projected negated gradient −πTc(t)Fij ∇dk(c(t)) traces a path that terminates on a GVG edge where di (q) = d j (q) = dk(q) as long as πTc(t)Fij ∇dk(c(t)) does not vanish. If πTc(t)Fij ∇dk(c(t)) goes to zero, then no such GVG edge exists in which case the robot returns to the second-order period to continue exploration.
This is just the beginning of what is required for connectivity. Ensuring connectivity can be quite tedious and challenging. See [106] for details of connectivity of the HGVG. The HGVG is a type of retract-like structure because it is not a retract, but bears similarities to one.

Choset-79066 book February 22, 2005 17:53

136

5 Roadmaps

5.3.3 Lyapunov Control: Sensor-Based Construction of the HGVG
Exploration with the HGVG shares the same key steps as GVD exploration: (1) access the HGVG; (2) explicitly “trace” the HGVG edges; (3) determine the location of nodes; (4) explore the branches emanating from the nodes; and (5) determine when to terminate the tracing procedure. Accessing the GVG (and hence the HGVG) is still gradient ascent, but now it is a sequence of gradient ascent operations. The robot moves away from the closest obstacle until it is two-way equidistant. Then, while maintaining two-way equidistance, the robot increases distance until it is three-way equidistant.

GVG Edge Tracing

Once the robot accesses the GVG, it must incrementally trace GVG edges. Instead of using curve tracing techniques that have discrete steps and discrete corrections, we now derive a control law that smoothly traces the roots of the expression

G(q) =

d1 − d2 d1 − d3

(q) = 0,

where di is the distance to an object QOi , and thus if (d1 −d2)(q) = (d1 −d3)(q) = 0, the robot is equidistant to three obstacles and on the GVG. (Likewise, when Q = R2, G(q) = (d1 − d2)(q), which is zero when the robot is equidistant to two obstacles, a point on the GVD in the plane).
At a point q in the neighborhood of the interior of a GVG edge, the robot steps in
the direction

(5.5) q˙ = αv + β( DG(q))†G(q),

where α and β are scalar gains,

v ∈ Null( DG(q)), the null space of DG(q),

( DG(q))† is the Penrose pseudoinverse of ∇G(q), i.e., ( DG(q))† = ( DG(q))T ( DG(q)( DG(q))T )−1.
Note that when q is on the GVG, G(q) = 0 and thus q˙ = αv where v ∈ Null(∇G(q)) and is simply the tangent direction of the GVG, as prescribed by the preimage theorem. Since ∇G(q) is a function of distance gradients, the planner can compute ∇G(q) solely from range sensor information. This can be done by looking at the n -closest points on the n -closest obstacles, ﬁtting a codimension one plane

Choset-79066 book February 22, 2005 17:53

5.3 Retract-like Structures: The Generalized Voronoi Graph

137

through these points, and deriving the line orthogonal to this plane. The tangent vector

then points along this line.4 When q is not on the GVG, then (∇G(q))†G(q) = 0. This term corresponds to the

“correction” step which accommodates for curvature in the GVG. Again, this term

can easily be determined from sensor data. Whereas the α determines how quickly

the robot moves along the GVG, the β represents how aggressively the robot moves

back to the GVG, as if α and β were spring constants.

To determine stability of the control law, let

=

1 2

G

T

G

measure the distance a

point q is away from the GVG. We look at the ﬁrst derivative .

˙ (q) = GT (q) G˙ (q) = GT (q) DG(q) q˙ = GT (q) DG(q) (αNull( DG(q)) + β ( DG†(q)) G(q)) = β GT (q) DG(q) DG†(q) G(q) = β GT (q) DG(q) DGT (q) ( DG(q) DGT (q))−1 G(q) = β GT (q) G(q).

The function is a Lyapunov function [202] for the controller in equation (5.5).
Think of a Lyapunov function as an “error function” whose minimal value is zero. Since ( DG(q) DGT (q)) is invertible in a neighborhood of the GVG [108], if β < 0, then ˙ is negative. This assures that decreases to zero, meaning that equation (5.5)
directs the robot onto the GVG.

Meet Point Homing

While generating the GVG, the robot must precisely locate itself on the meet points.

A meet point homing algorithm can be used to stably converge onto the meet point

location [109]. The control law for homing onto a meet point is similar to the one for

generating GVG edges, except G is now deﬁned as





d1 − d2

G(q) = d1 − d3 (q) = 0.

d1 − d4

In the planar case, G(q) =

d1 − d2 d1 − d3

(q). Since it has already been shown to be

stable, we use the controller in 5.5 to determine the the path for the robot to home

4. Note that there are two choices for this vector, but the planner chooses the direction that directs the robot to continue in the “same” direction.

Choset-79066 book February 22, 2005 17:53

138

5 Roadmaps

onto a meet point. Since Null( DG(q)) = 0, the controller is q˙β( DG(q))†G(q). Geometrically, this means that when the robot is in the vicinity of the meet point, it draws a sphere through the four closest points on the four closest obstacles (in the planar case, it is a circle through the three closest points). The velocity vector points toward the center of this sphere.
Higher-Order GVG Control Laws
Naturally, by varying the G function, one can trace different structures. A secondorder GVG edge has G(q) = [di − d j , dk − dl ]T (q). Likewise, a second-order meet point has G(q) = [di − d j , dk − dl , dk − dp]T (q).

5.4 Piecewise Retracts: The Rod-Hierarchical Generalized Voronoi Graph
Essentially, the previous roadmaps were deﬁned for a point-robot in a workspace which has a Euclidean conﬁguration space. Now, we turn our attension to deﬁning a roadmap in a non-Euclidean conﬁguration space. Even when full knowledge of the workspace is available prior to the planning event, constructing non-Euclidean conﬁguration spaces can be quite challenging. However, what if the planner has no previous knowledge of the workspace, i.e., it cannot compute the conﬁguration space prior to the planning event? Instead, we deﬁne a roadmap for a robot using workspace information. This is of great use because sensors directly provide workspace information.
In this section, we deﬁne a roadmap for a line segment operating in the plane. Sometimes we call this line segment a rod (ﬁgure 5.21). To distinguish among previous roadmaps we have deﬁned, let the point-GVG and the point-HGVG be structures deﬁned for a point robot in a Euclidean conﬁguration space.
Since the conﬁguration space for the rod is S E(2), which is three-dimensional, it makes sense to look at the set of conﬁgurations equidistant to three obstacles. However, we measure distance in the workspace, not conﬁguration space. To do so, let R(q) ⊂ W be the set of points the rod occupies in the workspace when it is at conﬁguration q. At the risk of confusing notation, we re-use the di for distance to obstacle WOi for the rod robot, i.e.,
di (q) = min d(r, c).
r ∈R(q),c∈WOi

Choset-79066 book February 22, 2005 17:53

5.4 Piecewise Retracts

139

i
di(q) Q
P
Figure 5.21 The distance from the rod (thick black line) to an obstacle is the distance (dotted line) between the nearest point on the rod to the obstacle and the nearest point on the obstacle to the rod.
Using this notion of distance, a rod-two equidistant face RFi j is {q ∈ S E(2) | di (q) − d j (q) = 0 and ∇di (q) = ∇d j (q)}. Then the rod-GVG edge is RFi jk = RF i j RF ik RF jk [107].
Just like the point-GVG in R3, the collection of rod-GVG edges does not necessarily form a connected set. To produce a connected structure we introduce another type of edge, called an R-edge. An R-edge is the set of rod conﬁgurations that are tangent to the planar point-GVG. The rod-HGVG then comprises rod-GVG edges and R-edges (ﬁgure 5.22).
The rod-HGVG is a piecewise retract because it is formed by the union of deformation retracts of subsets of the conﬁguration space, the rod-GVG edges, which are then linked together with the R-edges to form a connected roadmap. To show that the rod-HGVG is indeed a piecewise retract, we ﬁrst consider deformation retraction Hrod : Qfree× [0, 1] → rod − GVG, which is implicitly deﬁned by a sequence of gradient ascent operations. First the rod is moved away from the closest obstacle, holding its orientation ﬁxed, until it becomes two-way equidistant. Then, while maintaining both two-way equidistance and the ﬁxed orientation, the rod moves until it becomes three-way equidistant, i.e., it arrives at a conﬁguration on the rod-GVG. Note that the orientation of the rod is unchanged by this operation, implying that θ (q) = θ ( Hrod(q, s)) for all s ∈ [0, 1], where θ (q) is the orientation of the rod at conﬁguration q.
Naturally, Hrod is not continuous over the entire conﬁguration space, but we can restrict ourselves to simple subsets of conﬁguration space that are associated with individual rod-GVG edges. Let RFi jk be the rod-GVG edge associated with obstacles

Choset-79066 book February 22, 2005 17:53
140

5 Roadmaps

(a1)

(a2)

(b1)

(b2)

(c1)

(c2)

Figure 5.22 Swept volumes (sampled placements) of the rod in a planar workspace and the conﬁgurations of the rod in conﬁguration space. (a1) Rod-GVG-edges: each of the clusters represents a set of conﬁgurations equidistant to three obstacles. (a2) The conﬁgurations of the rod that are equidistant to three obstacles in the workspace. (b1) R-edges: the rods are two-way equidistant and tangent to a planar point-GVG edge. (b2) The conﬁgurations of the rod that are tangent to the planar point-GVG in the workspace. (c1) Placements of the rod along the rod-HGVG. (c2) The entire rod-HGVG in S E(2).

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

141

WOi , WO j and WOk. It can be shown that H is continuous in the preimage of a connected component of the rod-GVG edge RFi jk [107]. This preimage, which we denote as a junction region Ji jk, is contractable and thus has as a retract RFi jk.5
Since, for each connected component of a junction region Ji jk, there is a connected component of RFi jk, motion planning within one junction region can be accomplished by using RFi jk as a roadmap. If the union of all the RFi jk’s form a connected set, then planning would be trivial again. However, in general, the RFi jk’s will not form a connected set in S E(2), so we use the R-edges to connect the roadmaps for the junction regions. Intuitively, one can view the rod-GVG edges as being analogous to the nodes of the planar point-GVG, which are connected by the edges of the planar point-GVG. The distinction is that now the nodes are themselves one-dimensional structures, capturing the complete set of rod orientations that are three-way equidistant from a speciﬁc set of obstacles (see [107] for a rigorous explanation). Essentially, the R-edges encode the adjacency of the rod-GVG edges by inheriting the correct topological relationships from the plane, allowing us to construct a roadmap of conﬁguration space using the connectivity of the workspace. See [107] for more details.
The rod-HGVG edges can be constructed in a sensor-based fashion using the control laws from section 5.3.3.

5.5 Silhouette Methods
In contrast to looking at equidistance, the silhouette approaches use extrema of a function deﬁned on a codimension one hyperplane called a slice6, which we denote by Qλ. The λ parameterizes the slice; varying the parameter λ has the effect of sweeping the slice through the conﬁguration space. As the slice is swept through the conﬁguration space, for each value of λ, the critical points of a function restricted to the slice are determined. The trace of the critical points as the slice is swept through the conﬁguration space does not necessarily form a connected set. Therefore, the silhouette methods look for another type of critical point and then recursively call the algorithm on a slice passing through these critical points. The resulting network of extremal points forms the roadmap.
5. Note that if the rod were “small,” RFi jk would have one connected component which would be homeomorphic to S1 (ﬁgure 5.22(a2)). 6. When the slice is one-dimensional, it can also be called a sweep line (section 5.1).

Choset-79066 book February 22, 2005 17:53

142

5 Roadmaps

5.5.1 Canny’s Roadmap Algorithm
Roadmap theory in motion planning begins with Canny’s work [90]. In addition to developing the roadmap, Canny’s work established fundamental complexity bounds using roadmap theory. For an environment populated by obstacles whose boundaries can be represented as p polynomials of maximum degree w for some positive w in conﬁguration space, any navigation path-planning problem can be solved in pn(log p)w (O(n4)) time using his roadmap algorithm, where n is the degrees of freedom of the robot (the dimension of the conﬁguration space). The derivation of this result is beyond the scope of this book. See [91, 92] for details.
In this method, the choice of initial sweep direction is arbitrary, but for the sake of discussion, let’s choose the q1-direction. As the slice is swept in the q1-direction, “extremal points” in the q2-direction are determined in each slice. The extremal points in the q2-direction are extrema of the projection function π2 : Rm −1 → R where π2(q) = q2. The extremal points of π2 for all of the slices are the silhouette curves.
In general, the silhouette curves are not guaranteed to be connected, and hence may not form a roadmap. However, we can look at the slices where the number of silhouette curves changes. These slices are called critical slices, and the λ values that parameterize critical slices are critical values. The points on the silhouette curves where the silhouette curves are tangent to the critical slices are termed critical points.
On the critical slices, the silhouette algorithm is recursively invoked where the new swept slice now has one less dimension than the critical slice, i.e., it has codimension two in the ambient space and codimension one in the critical slice. This slice is swept in the q2-direction. The new silhouette comprises the trace of extremal points in the q3-direction. These silhouette curves may not be connected either, so this procedure is recursively invoked on lower-dimensional critical slices until there are no more critical points or the slice has one dimension. In the latter case, the one-dimensional slice is the silhouette; in other words, the roadmap of a one-dimensional set is the set itself. Finally, the union of the resulting silhouette curves forms the roadmap.
Accessibility and departability of the roadmap are achieved by treating the slices that contain qstart and qgoal as critical (m − 1)-dimensional slices of the initial sweep. The algorithm simply forms a silhouette network on these slices, possibly reinvoking itself on lower-dimensional slices. Connectivity is proved via an inductive argument [90]. See [189] for details on an example of an implementation of Canny’s roadmap.
Figure 5.23 contains an example of a two-dimensional conﬁguration space with a slice being swept through it. The silhouette curves trace the boundary of the environment. Critical points occur when the slice is tangent to the roadmap (and hence the obstacle boundary), as can be seen in ﬁgure 5.23. The resulting roadmap is drawn in ﬁgure 5.24. A path between a start and goal conﬁguration is determined by ﬁrst

Choset-79066 book February 22, 2005 17:53

extrema points slice

5.5 Silhouette Methods

q2

q2

1

2

143

1

2

q1

q1

Figure 5.23 Bounded two-dimensional environment with two obstacles QO1 and QO2. The left ﬁgure contains a single slice, represented by a dashed line, and a partially constructed silhouette. The right ﬁgure contains the complete silhouette and slices passing through all critical points.

q2

qstart

1

2
qgoal

q1
Figure 5.24 Complete silhouette curves traced out with solid lines. A path from start to goal is denoted as a thin curve.
passing a slice through the start and goal, and then including the slice in the roadmap, as can be seen in ﬁgure 5.24.
Figure 5.25 contains an example of a two-dimensional surface embedded in R3. It is an ellipsoid with a hole drilled partially down and then up again. The slice is swept from left to right and extrema are with respect to the in and out of page direction. The silhouette curves comprise an “equator” for the ellipsoid, the perimeter of the holes on the surface and the two curves along the side of the hole. Figure 5.26

Choset-79066 book February 22, 2005 17:53
144 Slice
Extrema on slice

Silhouette curve

5 Roadmaps

Ellipsoid
Figure 5.25 Silhouette curves for an ellipsoid with a hole drilled through it that goes down and then bends up.

1

2

3

4

Cp2

Cp3

Cp1

Cp4

Figure 5.26 Slices passing through the critical points, which are points where the roadmap changes connectivity and is tangent to the slice. Note that the leftmost and rightmost points on the ellipsoid also are critical points but are not displayed.

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

145

Figure 5.27 The intersection of the slice as it is swept through the ellipsoid with a hole in it displayed in ﬁgure 5.26. Starting from the top row on the left, the ﬁrst two panels (a and b) display the intersection immediately before and after the slice passes through the critical point C p1. The next two panels (c and d) display the intersection as the slice passes through critical point C p2. The left pair of panels on the bottom row (e and f) correspond to critical point C p3 and the right pair (g and h) to C p4.
displays the critical slices and critical points for the ellipsoid. Figure 5.27 shows the intersection of the slice and the ellipsoid, immediately before and immediately after, the critical points. Starting from the left in the top row, the ﬁrst two panels show the intersection just as the slice encounters the ﬁrst hole. The next two panels show the intersection as the slice ﬁnishes passing through the hole. At this critical point, the intersection changes connectivity. Finally, ﬁgure 5.28 shows the silhouettes on the two-dimensional slices and the ﬁnal path for this example between qstart and qgoal.
Critical Points and Morse Functions
In this section, we deﬁne the silhouette curves in terms of critical points of a function. The function has to be Morse [315], as described in chapter 4, section 4.6. The slices themselves are also deﬁned in terms of a function. Originally, Canny suggested that a slice be the preimage of the projection operator π1. Recall that π1 projects a point onto its ﬁrst coordinate, i.e., π1(q) = q1. We denote a slice as Qλ = {x ∈ Q | π1(q) = λ} where λ = q1 ∈ R. Varying λ has the effect of sweeping the slice through the conﬁguration space and λ Qλ = Q. On each Qλ, we look for extrema of π2, i.e.,

Choset-79066 book February 22, 2005 17:53

146

1

2

3

4

Cp1

Cp2

Cp3 Cp4

qstart

5 Roadmaps qgoal

Figure 5.28 (Left) Silhouettes on the two-dimensional slices. (Right) Determining a path with a given start and goal position.
we look for extrema of π2|Qλ , where π2|Qλ is the projection operator restricted to the slice. Also, recall that π2(q) = q2.
To determine the extrema, we need some machinery to calculate extrema of functions restricted to manifolds. The Lagrange multiplier theorem, stated below, can be used to determine the extrema of real-valued functions restricted to manifolds, which themselves are deﬁned by the preimage of real-valued functions.
LEMMA 5.5.1 (Lagrange Multiplier [410]) Let S be an n -manifold in Rn + 1, S = f −1(c) where f : Rn + 1 → R is such that ∇ f (q) = 0 for all q ∈ S. Suppose h : Rn + 1 → R is a smooth function and p ∈ S is an extremal point of h on S. Then, there exists a real number µ such that ∇h( p) = µ∇ f ( p) (the number µ is called the Lagrange multiplier). In other words, ∇ f ( p) is parallel to ∇h( p) at an extremum p of h on S.
For example, let’s look for extrema of h = π1 on a sphere deﬁned by the preimage of any positive scalar under the map f (q) = q12 + q22 + q32 − 51,141. The gradients are ∇h(q) = [1, 0, 0]T and ∇ f (q) = [2q1, 2q2, 2q3]T . These two vectors are parallel when q2 = q3 = 0 and the only points on f −1(0) that satisfy this condition are on the left-most and right-most points on the sphere (which are in the q1 − q2 plane).

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

147

We could assume that the free space is deﬁned by the preimage of a function f , but there is no guarantee that this function will be real-valued. To determine extrema of a function restricted to such manifolds, Canny generalizes the Lagrange multiplier theorem to handle vector-valued functions.

(5.6)

LEMMA 5.5.2 (Generalized Lagrange Multiplier Theorem [91]) Let M be the preim-

age of f : Rm → Rp and h : Rm → Rn. The point x is a critical point of h|M if

and only if the following matrix loses its rank [91],

D(f,

h)q

=

 

∂ f1 ∂ q1

(q ...

)

∂ fn ∂ q1

(q

)

∂ ∂

h1 q1

(q ...

)

··· ... ···
··· ...

∂∂qfm1 ...(q

∂mn ∂ qm

(q

∂∂qhm1...(q

)
) )

 

.

∂hq ∂ q1

(q

)

···

∂hp ∂ qm

(q

)

Clearly, if f and h are real-valued functions (i.e., n = p = 1), then lemma 5.5.2 reduces to the Lagrange multiplier theorem because the above two-row matrix only loses rank when one row is a scalar multiple of the other. In other words, the two vectors corresponding to each row are parallel.
Canny introduces one more result, termed the slice lemma. The notation can be a bit cumbersome, so let’s review it before introducing the slice lemma. Let π12 be the projection operator onto the ﬁrst two coordinates, e.g., π12(q) = (q1, q2). Then, π12|S is the projection operator restricted to the set S. Finally, (π12|S) is the set of critical points of the projection operator restricted to S. The slice lemma then states that the set of critical points of π12|S is the union of the critical points of π2 on each of the slices, i.e.,

(π12|S) =
λ

π2|π1−1(λ) .

Therefore, the silhouette is the critical set of π12.

With the slice lemma and Canny’s generalization in hand, one can produce silhou-

ette curves. Consider again the example of a sphere embedded in R3. Here, S = f −1(0)

where f (q) = q12 + q22 + q32 − 62,370. We sweep in the q1-direction and extremize

in the q2-direction, i.e., h(q) = π12(q1, q2, q3). Applying lemma 5.5.2,





2q1 2q2 2q3

D(f, h) =  1 0 0  ,

010

Choset-79066 book February 22, 2005 17:53

148 TxS2 x

5 Roadmaps

y TyS2

1(TxS2)

1(TyS2)

Figure 5.29 The tangent spaces of of S2 at x and y are projected down to a plane. Tx S2 projects to a two-dimensional space whereas Ty S2 does not, making y a critical point.

which loses rank on S only when q3 = 0, which corresponds to the unit circle in the q1 − q2-plane, which is the “equator” of the sphere (ﬁgure 5.29). This is the silhouette of the sphere.

Connectivity Changes at Critical Points
Canny’s roadmap has two types of critical points: those that deﬁne the silhouette itself, as described above, and those that are used to bridge disconnected silhouette curves. We now describe the latter. In particular, we relate the concepts of a “ﬁrst derivative” vanishing to connectivity changes in the silhouettes.
First, let’s consider a planar example. We are now looking for extrema of the slice function h = π1, but restricted to the silhouette, which are extrema of π1| (π12). Figure 5.30 depicts two sample critical points, C p1 and C p2, which are located on the boundaries of the obstacles, ∂QO1 and ∂QO2, respectively. Again, in twodimensions, the silhouettes essentially trace out the boundaries of the free space (and obstacles) and thus (π1| (π12)) = (π1|∂Qfree ).
We can intuitively show that C p1 and C p2 are indeed critical points, i.e., π1| (π12) takes its local extrema at C p1 and C p2. The function π1(q) can be viewed as measuring the distance between a point q ∈ Q and the q2-axis. Therefore, consider a path on ∂QO1 that passes through C p1, as depicted in ﬁgure 5.30. Moving along the path toward C p1 decreases the value of π1| (π12). After passing through C p1, the value

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

149

q2 Cp1
1

Cp2
2

1 ( 12)(Cp1)

1 ( 12)(Cp2)

q1

Figure 5.30 The restriction of the slice function h = π1 to the silhouette takes a local minimum at C p1 and a local maximum at C p2. The values π1| (π12)(C p1) and π1| (π12)(C p2) are plotted on the bottom.

increases. In other words, C p1 is a local minimum of π1| (π12). Likewise, C p2 is a local maximum of π1| (π12).
Now, let’s return the discussion to Rm. Now, we demonstrate that a critical point
is indeed a point on the roadmap where the tangent to the roadmap lies in the slice. This is actually a direct result of lemma 5.5.2. Recall that q is a critical point of π1 restricted to the manifold deﬁned by the preimage of f if D(f, π )(q) loses rank. Here,
we would like to deﬁne the roadmap as the preimage of f , but cannot do so. Instead, we can reason about the differential of f , which is an m − 1-by-m matrix. The null space of this matrix is the tangent to the roadmap and the m − 1 row vectors of the same matrix form a plane orthogonal to the tangent. Call this plane T ⊥. Finally, this matrix forms the top m − 1 rows of D(f, h). The slice function π1 has a gradient [1, 0, . . . , 0]T and forms the bottom row of D(f, π1)(q). When the tangent lies in the slice plane, the slice plane and T ⊥ are orthogonal to each other. This means that ∇π1(q) lies in T ⊥ which immediately implies that ∇π1(q) can be written as a linear combination of the ﬁrst m − 1 rows of D(f, π )(q). In other words, D(f, π1)(q) loses rank because its bottom row can be written as a linear combination of the top m − 1
rows. Therefore q is a critical point.
This can also be seen in three dimensions. Consider the torus in ﬁgure 5.31. Here
two slices are drawn, one before a critical point and one after. Before the critical point, the intersection of the slice and the torus is diffeomorphic to S1 and after the intersection it is diffeomorphic to two copies of S1. In ﬁgure 5.32, it can be seen that
before the critical point, the roadmap is singly connected and after the intersection it
has two connected components.

Choset-79066 book February 22, 2005 17:53
150

5 Roadmaps

Figure 5.31 Torus with two slices drawn, before and after a critical point.
Figure 5.32 Silhouette curves on the torus. Let’s formalize the immediately “before” and “after” statements. Since a realvalued Morse function has a one-dimensional range which can be ordered, the critical values of the Morse function can be ordered as well. Assuming only one critical point per slice, adjacent critical points are those whose critical values are “next” to each other. In other words, let be the set of all critical values. The critical values

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

151

h

h

Critical points

Critical points

Points on the silhouette curve

Figure 5.33 The number of silhouette fragments (open circles) changes as the slice passes through critical points (black circles) and remains constant between adjacent critical points.

λ1, λ2 ∈ are adjacent if for all critical values in there does not exist a critical value λ¯ such that λ1 < λ¯ < λ2.
Morse theory asserts that between adjacent critical points of a Morse function,

the topology of the manifold on which the Morse function is deﬁned does not

change [315]. In the context of the slice function, Morse theory states that there

exists φ (π1 |

a diffeomorphism φ such ), (π1−21(λ2)) where λ∗ and λ∗

that for all λ1, λ2 ∈ (λ∗, λ∗), are adjacent critical values of a

φ (π1| ) (π1−21(λ1)) = real-valued Morse

function (ﬁgure 5.33).

5.5.2 Opportunistic Path Planner
The opportunistic path planner (OPP) generalizes Canny’s original roadmap algorithm by tracing the local maxima of any potential function that is Morse on a ﬂat slice as the slice is swept through the conﬁguration space. Canny and Lin [93] suggest that the distance function D evaluated on the slice be used as the potential function. Local maxima on the slice of the distance function are points on the OPP roadmap. The traces of the local maxima as the slice is swept through the workspace or conﬁguration space are termed freeways.
The algorithm works as follows: First, a ﬁxed slice direction is chosen. The algorithm initially traces a path from the start to the roadmap by performing gradient ascent on the distance function in the slice that contains the start. Likewise, a path is traced from the goal to the freeway via slice-constrained gradient ascent. These two actions correspond to accessibility and departability.

Choset-79066 book February 22, 2005 17:53

152

5 Roadmaps

Slice Freeway Curve (local maxima)

Bridge Curve

Interesting Critical Point

Channel

Figure 5.34 Schematic of the OPP planning scheme.

From the point at which the planner accesses the OPP roadmap, the algorithm sweeps a slice through the conﬁguration space tracing local maxima of D constrained to the slice. These local maxima form a freeway. If the start and goal freeways are connected, then the algorithm terminates. In general, the set of freeways will not be connected, and paths between neighboring freeways must be found.
The OPP method uses a slightly different approach from Canny’s original roadmap to ensure connectivity of its roadmap. The OPP freeways are connected via bridge curves. The bridge curves are constructed in the vicinity of interesting critical points. Interesting critical points occur when channels (ﬁgure 5.34) join or split on slices whose connectivity changes in the free space. Bridge curves are also built when freeways terminate in the free space at bifurcation points (where traces of local maxima and local minima meet). A bridge curve is built leading away from a bifurcation point to another freeway curve.
This procedure is repeated until the start and goal freeway curves are connected, or all interesting critical points and bifurcation points have been explored, in which case there does not exist a path between the start and the goal. The union of bridge and freeway curves, sometimes termed a skeleton, forms the one-dimensional roadmap.

Connectivity and Critical Points
Instead of looking for connectivity changes in the roadmap, the OPP method looks for connectivity changes in the slice in the free conﬁguration space. Again, these

Choset-79066 book February 22, 2005 17:53

5.5 Silhouette Methods

153

q2 i = {(q1,q2) | f (q1,q2) = 0}
h (q)

f (q) q
slice

q =

q1 q2

h (q)

q1

Figure 5.35 At the critical point q, the gradient of the slice function ∇h(q) is parallel to surface normal of the obstacle ∇ f (q). Also, the slice is tangent to the boundary of the obstacle QOi at the critical point q.

connectivity changes correspond to a slice function taking on extremal values. This can be seen in ﬁgure 5.30, except now we are looking at the slice function π1 restricted to the boundary of the free space, as opposed to being restricted to the silhouette (both of which coincide in the plane).
Again, D(f, h) loses rank at the critical points. Here, the f function can be used to deﬁne the boundaries of the obstacles. In other words, we assume that the boundaries of the obstacles can be represented as the preimage of 0 under the f mapping. Therefore, for q ∈ ∂QOi , ∇ f (q) is the surface normal to QOi at q. Now, D(f, h) has two rows and loses rank only when ∇ f (q) is parallel to ∇h(q) which means that the slice gradient is parallel to the surface normal of the obstacle. (Note that we could have used the original Lagrange multiplier theorem here.) See ﬁgure 5.35.
Morse theory [315] assures that the topology of the intersection of the boundary and the slice remains constant between critical points, i.e., there exists a diffeomorphism φ such that for all λ1, λ2 ∈ (λ∗, λ∗), φ (h|∂Qfree −1(λ1)) = φ (h|∂Qfree −1(λ2)), where λ∗ and λ∗ are adjacent critical values of a real-valued Morse function. Therefore, we are assured that we only need to look for critical points to connect disconnected components of the roadmap.

Choset-79066 book February 22, 2005 17:53
154

5 Roadmaps

d

Slice

p

d~i(p; )

i

Figure 5.36 The dashed line represents a slice that is hovering above obstacle QOi . The
solid line above the slice is the graph of the distance to the obstacle, but restricted to the slice, i.e., d˜i .

Nonsmooth Functions

It should be noted that the distance function is nonsmooth. Consider the distance function constrained to a slice Qλ = {q | π1(q) = λ}. Decompose the conﬁguration space coordinates q into “slice coordinates” p and the “sweep coordinate” λ such that q = [λ, p]T . The single object distance function constrained to a slice is the distance

between a point that is in a slice Qλ and a set QOi , i.e.,

(5.7) d˜i ( p ; λ) = di (q)

where π1(q) = λ and p ∈ π1−1(λ).

See ﬁgure 5.36 for an example of the distance function plotted along a slice. At each slice point, d˜i is computed to the closest point of the obstacle.
Typically, a robot’s environment is populated with multiple obstacles, and thus we
deﬁne a distance function for multiple obstacles. The multi-object distance function constrained to a slice measures the distance between a point in a slice Qλ and the closest obstacle to that point, i.e.,

(5.8) D˜ ( p ; λ) = min d˜i ( p ; λ).
i
Even when all of the obstacles are smooth and convex, D˜ is not necessarily smooth at the local maxima. For example, in ﬁgure 5.37 distance D(q) is plotted along a horizontal slice. On the left-hand side of the slice, since QO1 is the closest obstacle, D(q) = d1(q). Likewise, on the right-hand side of the slice, D(q) = d2(q). When d1(q) = d2(q), D is nonsmooth, but for all other points, D(q) is smooth because it inherits the smoothness properties of the single object distance function for convex

Choset-79066 book February 22, 2005 17:53

D(q)

Problems
d1(q) = D(q)

155
d2(q) = D(q) slice

1

2

Figure 5.37 Distance function D plotted along a horizontal slice. The slice is represented as a dashed line. The graph of D is overlaid on top of the slice. Note D becomes nonsmooth when d1(q) = d2(q), and hence there is not a unique closest obstacle.

sets. Therefore, the gradient vector is either ∇d1(q) or ∇d2(q) depending upon which obstacle is the unique closest one. However, at the point q∗ where D is nonsmooth,
the gradient is no longer unique. In fact, it is the set formed by the convex hull of ∇d1(q∗) and ∇d2(q∗). This gradient is termed a generalized gradient [114] and is denoted as

∂ D(q∗) = Co{∇di (q∗) | i ∈ Z (q∗)}

=

µi ∇di (q∗) where

µi = 1 and µi > 0,

i ∈ Z (q ∗ )

i ∈ Z (q ∗ )

where Co is the convex hull operator and Z (q∗) is the set of integers that correspond to the indices of the closest obstacles to q∗, i.e., Z = {i | for all i where di (q∗) < dh(q∗) for all h}.

With this notion of a generalized gradient, we can establish a calculus for character-

izing extrema of a function by looking at the convex hull of the generalized gradient of D [104]. Let 0 be the origin if the tangent space Tq∗ Rm. If 0 ∈ ∂ D(q∗), then q∗ is a local maximum. Likewise, if 0 = ∂ D(q∗), then q∗ is a local minimum. It is worth

noting that we never had to perform an additional differentiation but were able to

characterize the generalized gradient from ﬁrst-order information.

Problems
1. Prove that the visibility graph is connected. 2. Show an example for which the visibility graph does not produce the shortest path in R3.

Choset-79066 book February 22, 2005 17:53

156

5 Roadmaps

3. How can the visibility graph method be augmented so as to yield the shortest path in R3?
4. How can the visibility graph in the plane be adapted to handle curved obstacles.
5. Write a program to compute the visibility graph. The program should take as input from a ﬁle a list of polygons, which are in turn represented by a list of vertices. The user can input from the keyboard the start and goal conﬁgurations. The program then computes the visibility graph and then determines a path from start to goal.
6. Let S be the unit circle deﬁned by the preimage of zero under f (x, y) = x2 + y2 − 1. Let g(x, y) = ax2 + 2bx y + cy2 where a, b, c ∈ R. List the points where g is extremized on S. Draw a picture.
7. Draw the Canny roadmap for the surface conﬁguration space in ﬁgure 5.38.
8. Do connectivity changes in the free space in a slice imply connectivity changes in the original Canny roadmap? In the OPP roadmap?
9. What are the beneﬁts of using only the local maxima (and not the other extrema) in the OPP method?
10. The HGVG contains a lot of structure which seemingly can be deleted. Suggest a method to prune this structure.
11. What are the tradeoffs between using roadmaps and pixel-based maps?
12. Prove that for any slice direction, OPP is a subset of the GVG.
13. For the OPP and point-GVG, both in the plane and in R3, there are useless spokes. If we eliminate them in the planar case, do we still have a topological map? How could we eliminate spokes online?

Figure 5.38 A cylinder with a hole drilled through it.

Choset-79066 book February 22, 2005 17:53

Problems

157

14. Use the brushﬁre implementation to compute the planar point-GVG. Beware of jagged edges.
15. The planar point-GVG is deﬁned using a Euclidean distance function and consists of straight line and parabolic segments. One way of thinking of the planar point-GVG is the locus of the centers of circles whose perimeters are tangent to obstacles at two or more points. For the environment below, sketch the GVD using the circle analogy.
16. The deﬁnition of the planar point-GVG can be generalized to any convex distance function. Instead of a circle, consider a convex distance function deﬁned by a square (rotated by 45 degrees). For the environment in ﬁgure 5.39, sketch the point planar-GVG using both the circle and the square analogy.
17. State at least two advantages and two disadvantages of using potential functions as a sensor-based planner.
18. Consider the real-valued function
f (x, y, z) = x2 + y2 − z2.
Use the preimage theorem to state the values of c for which f −1(c) is a manifold. For the values of c for which f −1(c) is a manifold, state the dimension of f −1(c). State the values of c for which f −1(c) is connected. Draw pictures of the manifolds for different values of c.
19. Prove that di is a convex function when QOi is convex.
20. Prove that the generalized Voronoi region is connected in a connected free space.
21. Verify that ﬁgure 5.6 contains the reduced visibility graph for ﬁgure 5.4.
22. Assume the boundaries of the two-equidistant faces are connected. Prove or disprove that the GVG is connected in R3.
23. Implement exploration of an unknown workspace using the incremental construction procedures described in this chapter (a) Rotate the robot so that the sensor with the smallest sensor reading is pointing “backward.” You may use a lookup table here. (b) Drive the robot away from the closest obstacle until it is two-way equidistant.

Choset-79066 book March 22, 2005 10:1
158

Obstacle

Obstacle
Defining Shape Obstacle
Defining Shape
Figure 5.39 Photocopy the above ﬁgures to draw planar point-GVG’s but with different distance metrics.

Choset-79066 book February 22, 2005 17:53

Problems

159

(c) Rotate the robot so that it lies in the tangent space of the GVD. You may use a lookup table here.
(d) Drive the robot forward a small distance and test to see if the robot still lies on the GVD (falls into a dead zone that is centered on the GVD).
(e) Rotate the robot by 90 degrees and drive it forward or backward until it is on the GVD and then reorient the robot back into the tangent space.
(f) Trace a GVD-edge until encountering a meet point. (g) Depart a meet point on a GVD-edge. (h) Implement the graph data structure for the GVD.
24. Use a local mapping routine to improve upon the exploration procedure described above.

