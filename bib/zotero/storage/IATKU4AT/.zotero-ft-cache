IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 16%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
UAS Flight Path Planning using Numerical Potential Fields in Dense Non-segregated Airspace
Publisher: IEEE
Cite This
PDF
  << Results   
Sajid Ahamed M A ; Satya Prakash K ; Shuvrangshu Jana ; Debasish Ghose
All Authors
View Document
133
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Definition
    III.
    Methodology
    IV.
    Simulation Results
    V.
    Conclusion

Authors
Figures
References
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper addresses the problem of Urban aerial mobility (UAM), which refers to an air transportation system wherein unmanned aircraft systems (UAS's) are utilized to de... View more
Metadata
Abstract:
This paper addresses the problem of Urban aerial mobility (UAM), which refers to an air transportation system wherein unmanned aircraft systems (UAS's) are utilized to deliver small payloads on-demand by safely maneuvering in the known urban infrastructure occupied by dynamic air traffic. A multilevel framework is proposed that provides a solution for UAM in the non-segregated airspace. The proposed method takes advantage of a prediction-based zone partitioning algorithm that minimizes high-density traffic encounters. Numerical potential fields are used for global path planning as they provide optimum standoff clearance from obstacles and high-density traffic present in the environment. In the event of low-density traffic, a simple but effective octant-based local collision avoidance strategy is used.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20902152
DOI: 10.1109/ICUAS51884.2021.9476791
Publisher: IEEE
Conference Location: Athens, Greece
Funding Agency:
Contents
SECTION I.
Introduction

Unmanned aircraft systems (UAS) are increasingly being used for the transport of small payloads over short distances. UAS deployed in an urban scenario for such tasks must be capable of navigating through densely populated urban airspace, avoid potential collisions, and deliver payload at the site on-demand. Implementations and safety concerns associated with such traffic call for a controlled air transportation network facilitating urban aerial mobility (UAM). The concept of operations for such a network was proposed by NASA under its ambitious research initiative, UTM (Unmanned aircraft system traffic management) [1] , wherein the focus was on enabling large scale visual line of sight (VLOS) and autonomy beyond the visual line of sight (BVLOS) UAS operations in low altitude urban airspace. With the advancement of UTM technical capability level to TCL-4 [2] , addressing BVLOS safe flying in low altitude (below 400 ft) highly populated urban environments, many governments and private entities have come forward with different modular architectures having core functionalities of collision detection and avoidance, geofence based conflict detection and resolution, and global path planning [3] – [4] [5] [6] [7] .

While [2] – [3] [4] [5] , [7] propose a multilayer air traffic management model that restricts UAS traffic to segregated airspace associated with pre-planned routes of specified volume, generally devoid of obstacles, and allocated for exclusive use to a specific user by imposing geofence constraints; the present paper focuses on UAS path planning in nonsegregated airspace, which is dense in both obstacles and air traffic for applications such as door-to-door delivery. Also, air space can be utilized better with traffic planning in nonsegregated airspace.

Path planning in non-segregated airspace is reported in the literature using methods such as A ∗ search [8] , Rapidly-exploring random trees (RRT) [9] , Probabilistic road maps methods with ant colony optimisation [10] , combination of A ∗ and artificial potential field [11] .

In [8] , a risk cost matrix considering various factors such as weather, operational constraints, network cost is accounted for in developing path planning algorithm using A* method; however, the formulation doesnot handle dynamic obstacles. In [9] , sampling-based chance constrained RRT algorithm is used to obtain probabilistic guaranteed feasible path in the presence of uncertain obstacles. Sampling-based probabilistic algorithm will have less computational load; however, considering the safety requirement in UAM application, the trajectories should be safe in all cases. Path is chosen probabilistically using a centralized task planner in [10] . The problem with static algorithms like A* or its variations is that they need to replan their path from scratch if there is a change in environment, which could be infeasible in airspace with multiple dynamic objects [11] . To improve the limitations of the static path planning algorithms, path planning is made in a multilevel architecture to handle the dynamic environment. In [11] , path planning is performed initially with A* algorithm, and local collision avoidance is handled using an artificial potential function. Path planning algorithms based on artificial potential methods are not suitable for planning globally due to the presence of local minima [12] . In order to solve the issues of local minima, different variations of modeling the potential force profile are reported in the literature, such as harmonic potential functions [13] – [14] [15] [16] . In [16] , global path planning is formulated using harmonic functions, Kalman filter, and Markov Decision Process (MDP) for handling static obstacle avoidance, high traffic density region prediction, and dynamic obstacles in vicinity. Obstcale avoidance methods based on the analytical potential function donot ensure a optimum clearance from static obstacles. In the case of UTM applications, the map of the environment will be known to UAVs. Thus, instead of harmonic potential fields, using numerical potential fields concepts, we can ensure UAS path to have optimum clearance from static obstacles. Numerical potential field techniques are capable of handling local minima and are applicable to robots having multiple degrees of freedom [17] .

In this paper, path planning architecture for UTM applications is proposed using the concept of numerical potential field, dynamic zone partitioning, and octant determination-based local collision avoidance strategy. The path is generated to maintain optimum clearance from the static obstacle using numerical potential field, and dynamic obstacles are handled using dynamic zone partitioning of the environment and an octant-based collision avoidance strategy. On the predicted traffic density, the paper proposes a formalized binary sequence algorithm for dynamic zone partitioning of the environment. There is significant literature on collision avoidance with dynamic obstacles [16] , [18] – [19] [20] . Collision avoidance strategy is developed using the position and velocity information of dynamic obstacles [18] , software defined networking (SDN) system [19] , visual predictive control scheme [20] , Markov Decision Process using visual information [16] . Clearly, existing strategies are based on complex network or algorithms which requires large sensor information and computational load. Our approach is based on position information of dynamic obstacles. It is simple, and the computational load requirement is less compared to the above strategies.
SECTION II.
Problem Definition

In this paper, we address the problem of urban air mobility (UAM) application, wherein several UAS coexist, and each UAS has to maneuver in a dynamically changing environment, reach a destination, duly avoiding collision with static obstacles such as buildings, other dynamic elements such as other UAS present in the environment.
A. Workspace Definition

Depending on the allowable aerial mobility in the given environment and ground height restrictions being imposed, the workspace W is defined as the cuboidal enclosure of points x ∈ R 3 in the serviceable jurisdiction as shown in Fig. 1 . With W being a bounded set in R 3 , by dividing each axis of the bounded set into N segments of length δ l ,   l = 1 , 2 , 3 along respective axes, W is decomposed into finite set of cells. Further, by mapping each cell to an element in a 3 dimensional matrix W – – – indexed by the tuple n ∈ W = { ( n 1 , n 2 , n 3 )   |   n 1 , n 2 , n 3 ∈ [ 1 , N ] ∩ Z } ;   W is modeled as a 3D bitmap array. The reason for referring to it as a bitmap is that each element in { ε n   |   ε n ∈ W – – – ,     n ∈ W } is either 1 or 0; where 1 represents cells occupied by static obstacles or intersected by W boundary and 0 represents those which are empty, resembling a 3D bitmap image.

We formally define a cell and its neighbourhood as follows. Say w n is the cell mapped to element ε n ∈ W – – – indexed by n = ( n 1 , n 2 , n 3 ) ∈ W . Then, this cell w n is defined as the set of points x ∈ W whose coordinates x d ∈ [ ( n d − 1 ) δ d ,   n d δ d ] ,   d = 1 , 2 , 3 . The d -neighbourhood of this cell N d ( w n ) , d = 1 , 2 , 3 is defined as the subset of cells in { w n ′   |   n ′ ∈ W } whose tuples differ from n by 1 in at-most d coordinates. For example, 1-neighbourhood of cell has six neighbours w n ′ ∈ N 1 ( w n ) whose tuples n ′ differ from n by 1 in at-most 1 coordinate, given as n ′ ∈ { ( n 1 − 1 , n 2 , n 3 ) , ( n 1 + 1 , n 2 , n 3 ) , ( n 1 , n 2 − 1 , n 3 ) , ( n 1 , n 2 + 1 , n 3 ) , ( n 1 , n 2 , n 3 − 1 ) , ( n 1 , n 2 , n 3 + 1 ) } . Similarly, N 2 has eighteen and N 3 has twenty-six neighbours. Based on each neighbourhood definition, we form connected graphs d G W with tuples n as nodes, that would serve as grid map facilitating cell to cell transition in { w n   |   n ∈ W } .
Fig. 1:

Workspace environment for UAM

Show All
Fig. 2:

Cell and its d -neighborhood definition.

Show All

The UAS, for which path planning from start to a goal point in the workspace is being undertaken, shall be continued to be referred to as UAS. However, from the viewpoint of this UAS, all other UAS will be referred to as known intruders (for which it is assumed that their underlying dynamics are known). All other dynamic elements in the environment are referred to as unknown intruders. Though 6-DOF quadrotor dynamics have been considered for UAS, it is assumed that the UAS would never encounter scenarios such as passage through narrow gaps, wherein it would be forced to perform roll, pitch, and yaw constrained maneuvers for avoiding a collision. This assumption allows the UAS to be treated as a 3DOF spherical robot (smallest sphere enclosing the quadrotor), with configuration space C being three dimensional ( R 3 ).

For a given configuration q ∈ C , A ( q ) ⊂ W denotes the set of points occupied by the UAS in W at that configuration.

The position coordinates ( x ∈ W ) of each of these points p ∈ A ( q ) and the cell w n that encloses this position can be determined by the following geometric maps, known as forward kinematic map X and forward quantization map Q .
X : A × C     →     W ;   ( p , q )     ↦     x Q : A × C     →     W ;   ( p , q )     ↦     n = X ( p , q ) = Q ( p , q ) (1) (2)
View Source \begin{align*} X:\mathcal{A}\times \mathcal{C}\ \ \rightarrow\ \ \mathcal{W}; \ (p, q)\ \ \mapsto\ \ x &=X(p, q)\tag{1}\\ Q:A\times \mathcal{C}\ \ \rightarrow\ \ \mathfrak{W}; \ (p, q)\ \ \mapsto\ \ n &=Q(p, q) \tag{2} \end{align*}

Speaking of what could be a good choice for resolution of the cell w n , lower the resolution, lower would be the computation and time complexity of the planning process. Keeping this in mind, while quantization, the cell with the largest dimension that encloses the spherical UAS but still retains a path in 3 G W corresponding to the paths existing between static obstacles in W is considered. If such resolution is feasible, then it is sufficient to model A as point mass. In general, the spherical UAS is modeled as a finite set of selected points known as control points p i ∈ P ⊂ A ,   i = 1 , 2 , … , s , depending on the application (see Fig. 3 ). In this paper we address path planning in those applications where model can be restricted to one control point p i ∈ P ,   i = 1 .
Fig. 3:

(a) UAS is modeled as one control point where yaw at goal is not important, (b) The UAS is desired to dock with a port mounted to a station, hence modeled as set of two control points, one at its center and other at the port terminal.

Show All

With respect to this control point, every cell in the empty part of the workspace is associated with a numerical potential V_{p_{i}} known as W-potential, that drives this control point to its respective desired goal cell w_{g_{i}} . \begin{align*} &V_{p_{i}}\ \ : \ \ \{w_{n}\ \vert\ n\in \mathfrak{W}\ \text{and}\ \varepsilon_{n}=0\}\ \ \mapsto\ \ \mathbb{Z}_{\geq 0} \tag{3}\\ &\qquad w_{g_{i}}\ =\ \arg \min\limits_{w_{n}}\quad V_{p_{i}} \tag{4} \end{align*}
View Source \begin{align*} &V_{p_{i}}\ \ : \ \ \{w_{n}\ \vert\ n\in \mathfrak{W}\ \text{and}\ \varepsilon_{n}=0\}\ \ \mapsto\ \ \mathbb{Z}_{\geq 0} \tag{3}\\ &\qquad w_{g_{i}}\ =\ \arg \min\limits_{w_{n}}\quad V_{p_{i}} \tag{4} \end{align*}

SECTION III.
Methodology

The proposed path planner has the following multistage architecture for generating a path from a start to a goal configuration in real-time with sub-modules 1) zone determination based on traffic density 2) local collision avoidance of dynamic obstacles 3) global path planning based on numerical potential field techniques. The local collision avoidance strategy is based on the sectorization of the neighborhood around UAS, followed by the identification of octants occupied by threats (known intruders or unknown intruders or both). The flow diagram for the proposed method is given in Fig. 4 .
Fig. 4:

Flow diagram for proposed path planner

Show All

A. Prediction and Zone Determination

This brings us to the first sub-module in the proposed planner, which refers to the ‘Prediction of intruder state’ and ‘Zone determination’ blocks of Fig 4 . This sub-module is invoked every t=kT_{p} instant, \forall\ k\in \mathbb{Z}_{\geq 0} , where T_{p} is a user-defined time period. At this instant, the entire workspace is partitioned into Z=2^{r} zones, wherein a binary sequence of r bit-length can be used to keep track of zones and retrieve the boundaries of each zone simultaneously. Every successive bit in the binary sequence indicates a partitioning action to improve zone resolution about (X, Y) coordinate axes alternatively (see Fig. 5 ).
Fig. 5:

Workspace partitioned into 2 1 , 2 2 , 2 3 zones. The 1 st and 3 rd bits correspond to partition action along X axis. The 2 nd bit corresponds to partition action along Y axis. Further inclusion of a 4 th at the LSB would mean partitioning \mathcal{W} into 2 4 zones by partitioning along Y axis.

Show All

The intention is to predict zones in \mathcal{W} that would be dense in known intruder traffic, T_{p} seconds ahead in time, and treat these zones as static obstacles until that future instant. By predicting the position of all known intruders T_{p} seconds ahead, we label each 2^{r} zones as a sparse zone, if atmost one intruder is in that zone and as a dense zone otherwise, as follows. \begin{equation*} \mathcal{W}=\begin{cases} Zone_{sparse} & (D=0,1)\\ Zone_{dense} & (D > 1) \end{cases} \end{equation*}
View Source \begin{equation*} \mathcal{W}=\begin{cases} Zone_{sparse} & (D=0,1)\\ Zone_{dense} & (D > 1) \end{cases} \end{equation*} where, D is the predicted number of known intruders in the zone, at an instant T_{p} seconds ahead in the future. The information of present state p_{t}=(x\ y\ z)^{\mathrm{T}},\ v_{t}=(v_{x}\ v_{y}\ v_{z})^{\mathrm{T}} , acceleration a_{t} of all known intruders are assumed to be available to UAS using which their position and velocity could be computed T_{p} seconds ahead by propagating the linear discrete-time noise model given below. \begin{equation*} \begin{bmatrix} p_{t+1}\\ v_{t+1} \end{bmatrix}=\begin{bmatrix} 1 & \Delta t\\ 0 & 1 \end{bmatrix}\begin{bmatrix} p_{t}\\ v_{t} \end{bmatrix}+\begin{bmatrix} \Delta t^{2}/2\\ \Delta t \end{bmatrix}a_{t}\ +\ \nu_{t} \tag{5} \end{equation*}
View Source \begin{equation*} \begin{bmatrix} p_{t+1}\\ v_{t+1} \end{bmatrix}=\begin{bmatrix} 1 & \Delta t\\ 0 & 1 \end{bmatrix}\begin{bmatrix} p_{t}\\ v_{t} \end{bmatrix}+\begin{bmatrix} \Delta t^{2}/2\\ \Delta t \end{bmatrix}a_{t}\ +\ \nu_{t} \tag{5} \end{equation*} where, \nu_{t} is noise in prediction, dependent on T_{p} . Thus, uncertainty in \nu_{t} imposes restriction on users choice of T_{p} .

Fig. 6:

Workspace partitioning and identification of zones as dense zone (depicted in red) and sparse zone (depicted in blue) based on predicted known intruder traffic density.

Show All

By planning a path for UAS avoiding the dense zones, we ensure that at any instant up to the next T_{p} seconds, the number of known intruders likely to be encountered by UAS in \mathcal{W} is at most 1. Collision with this one leftover known intruder when encountered while traversing in the sparse zone can be handled using a local collision avoidance scheme.

The number of zones Z into which \mathcal{W} is to be partitioned is dictated by the present position and the goal position of UAS, along with predicted positions of all known intruders. The zone determination algorithm continuously partitions \mathcal{W} into 2^{1}, 2^{2}, \ldots, 2^{N_{r}} zones, simultaneously identifying them as dense and sparse zones depending on the predicted intruder traffic density until the conditions given below are satisfied.

    The zone which encloses the present position of UAS must be a sparse zone.

    If the distance between the present and goal position of UAS is within a certain threshold then the zone that encloses the goal position must be a sparse zone.

    Both zones which enclose the present and goal positions of UAS must be connected via sparse zones.

The connectivity condition is to ensure that a path still exists between the present position and goal position though some portions of \mathcal{W} are being removed and this can be verified by forming a grid map connecting midpoints of sparse zones and then performing a breadth-first search for the zone that encloses the goal position. If the above conditions are satisfied for some r bit length, then the corresponding bit sequences associated with each dense zone (except the zone that encloses the goal position) are stored in a list, which is referred to as dense_zone_definition .

At t=0 , entire \mathcal{W} is considered as dense zone. Further, \mathcal{W} is also modeled as \underline{\mathcal{W}} . The cells corresponding to \{n\ \vert\ n\in \mathfrak{W},\ \varepsilon_{n}=0\} are occupied by static obstacles or intersected by \mathcal{W} boundary. These n are stored in an array, referred to as \mathcal{BM}space . Though zone determination submodule is invoked every t=kT_{p} seconds, k\in \mathbb{Z}_{\geq 0} , the dense_zone_definition may or may not change (any change in elements of the list or bit length) depending on the predicted position of known intruders and above conditions related to UAS. But, whenever there is a change, the workspace potential generation sub-module is invoked, which refers to ‘Update obstacle Bitmap set’ and ‘Generate W-potential’ blocks of Fig 4 . This is a computation heavy module, so having bigger zones as the outcome of zone partitioning is favorable as then change in definition every T_{p} seconds is less likely. It begins with computing half-plane boundaries of each dense zone in the dense_zone_definition using a binary search algorithm. Say X_{min}\leq x\leq X_{max} and Y_{min}\leq y\leq Y_{max} are half-plane boundaries of \mathcal{W} . For a dense zone, if the binary sequence was 01101, identify even position bits (X1X0X) and odd position bits (0Y1Y1) in the binary sequence. Evaluate the binary sequence following algorithm in Fig. 7 .
Fig. 7:

Algorithm - evaluation of binary sequence

Show All

Once the boundaries of the dense zones are obtained, they are treated as static obstacles. This update of the static obstacle set is achieved with the help of \mathfrak{W} . All such n\ \in \mathfrak{W} corresponding to cells that are occupied by the dense zones along with \mathcal{BM}space are collectively stored in an array referred to as \mathfrak{W}_{occupied} , with \mathcal{GW}_{occupied} being the underlying connected grid map. The cells in the empty space of \mathcal{W} can then be computed by the set difference of array \mathfrak{W} and \mathfrak{W}_{occupied} , referred to as \mathfrak{W}_{empty} with \mathcal{GW}_{empty} being the underlying grid map. This sets the stage for the generation of W-Potential [17] in the empty space, which serves as the foundation for global path planning.
B. Workspace Potential Generation

Consider the L^{1} distance between n, n^{\prime} \in \mathfrak{W}_{empty} corresponding to cell w_{n} and any cell in its 1-Neighbourhood w_{n^{\prime}}\in \mathcal{N}_{1}(w_{n}) , to be 1. Starting at cell w_{n} , initialised with some distance value V(w_{n}) , the process of assigning all cells in \{w_{n^{\prime}}\ \vert\ n^{\prime}\in \mathfrak{W}_{empty}\} a distance value V(w_{n^{\prime}})=V(w_{n})+ L^{1} distance between n^{\prime} and n following {{}^{1}\mathcal{GW}}_{empty} grid map is referred to as wave propagation with cell w_{n} as origin (refer algorithm in Fig. 8 ). During wave propagation, the list of cells w_{n^{\prime}} that have maximum distance, among the cells that had their distance value modified by the propagation is referred to as wave-front ( \mathcal{L}_{0} list in algorithm of Fig. 8 ).
Fig. 8:

Algorithm - wave propagation, origin at w_{n}

Show All

Each cell must be assigned a potential such that its negated gradient should pull the control point \mathcal{P} to a cell corresponding to its goal configuration, also staying as far as possible from the static obstacles. This is achieved by first extracting a subset \mathcal{S} in \mathfrak{W}_{empty} such that \{w_{n}\ \vert\ n\in \mathcal{S}\} serves a similar purpose as the generalised Voronoi diagram of \{w_{n}\ \vert\ n\in \mathfrak{W}_{empty}\} for L^{1} distance [17] , and is referred to as workspace skeleton. By starting simultaneous wave propagations from each cell in \{w_{n^{\prime}}\ \vert\ w_{n^{\prime}}\in \mathcal{N}_{1}(w_{n}), \ n\in \mathfrak{W}_{occocpied}, n^{\prime}\in \mathfrak{W}_{empty}\} as their origin, we observe that wave-fronts of wave propagations which originated from different cells meet each other while propagating (refer algorithm in Fig. 9 ). The set of all such cells where the wave-fronts met is the W-Skeleton.

As every cell in the W-skeleton was a part of wavefront of some propagation at the instant they met, these cells have maximum distance from the cells \{w_{n}\ \vert\ n\in \mathfrak{W}_{occupied}\} than any other cell in \{w_{n}\ \vert\ n\in \mathfrak{W}_{empty}\} . Thus, if \mathcal{P} moves along \mathcal{S} then it is guaranteed that it stays as far as possible from the static obstacles and \mathcal{W} boundary, thus justifying the notion of optimum clearance from the static obstacles. Let \{w_{g_{i}}\ \vert\ g_{i}\in \mathfrak{W}_{empty},\ i=1\} denote the cell that encloses goal position associated with this control point p_{i}\in \mathcal{P},\ i= 1 . This cell may or may not lie in \{w_{n}\ \vert\ n\in \mathcal{S}\} . If it does not lie then we need to explicitly connect this g_{i} to \mathcal{S} and form an augmented skeleton.
Fig. 9:

Algorithm - workspace skeleton extraction

Show All

If we observe the distance values associated with the cells in \{w_{n}\ \vert\ n\in \mathfrak{W}_{empty}\} after \mathcal{S} has been extracted, it starts with 0 at cells \{w_{n^{\prime}}\ \vert\ w_{n^{\prime}}\in \mathcal{N}_{1}(w_{n}),\ n\in \mathfrak{W}_{occupied}\} , monotonically increasing as we approach the skeleton. For connecting w_{g_{i}} to the skeleton we utilize this property. From w_{g_{i}} , we search for cells with largest distance value in its neighborhood and store it in a queue, further repeating the same for successive neighbours until a cell in \{w_{n}\ \vert\ n\in \mathcal{S}\} is reached. By augmenting this queue with \mathcal{S} , we connect g_{i} with \mathcal{S} , thus connect goal cell to skeleton.

Each cell in \{w_{n}\ \vert\ n\in \mathfrak{W}_{empty}\} must be assigned a W-potential value which is associated with this control point p_{i}\in \mathcal{P} . To achieve this, for the given control point p_{i} (respective g_{i}\in \mathcal{S} ), w_{g_{i}} being the cell that encloses its goal position, we perform wave propagation with w_{g_{i}} as origin and V_{p_{i}}(w_{g_{i}})=0 as reference potential, proceed with assigning the L^{1} distance as potential to only the cells in \{w_{n}\ \vert\ n\in \mathcal{S}\} . Once all cells in the skeleton have been assigned a potential value, we perform simultaneous wave propagations with each cell in \{w_{n}\ \vert\ n\in \mathcal{S}\} as origin and V_{p_{i}}(w_{n}) being the respective reference potentials. The obtained W-Potential is \begin{align*} \{V_{p_{i}}(w_{n}): n\in \mathfrak{W}_{empty}/\mathcal{S}\} > \ \qquad\qquad &\\ \{V_{p_{i}}(w_{n}): n\in \mathcal{S}/\{g_{i}\}\} > \qquad &\\ \{V_{p_{i}}(w_{n}): n\in\{g_{i}\}\}&=0 \tag{6} \end{align*}
View Source \begin{align*} \{V_{p_{i}}(w_{n}): n\in \mathfrak{W}_{empty}/\mathcal{S}\} > \ \qquad\qquad &\\ \{V_{p_{i}}(w_{n}): n\in \mathcal{S}/\{g_{i}\}\} > \qquad &\\ \{V_{p_{i}}(w_{n}): n\in\{g_{i}\}\}&=0 \tag{6} \end{align*}

By performing gradient motion on the above generated W-Potential (no local minima guaranteed since monotonic increase of potential from goal cell), the spherical UAS would eventually be driven towards goal position avoiding static obstacles and all known intruders in the dense zones of \mathcal{W} .
C. Gradient Motion and Random Motion

The nature of W-Potential is such that wherever the control point lies in the empty space \{w_{n}\ \vert\ n\in \mathfrak{W}_{empty}\} , it would first be driven towards Workspace skeleton \{w_{n}\ \vert\ n\in \mathcal{S}\} , away from the static obstacles, then it would slide along the skeleton eventually reaching its goal cell w_{g_{i}} . This is illustrated in Fig 10 .
Fig. 10:

Gradient motion in \mathfrak{W} , the control point \mathcal{P} is attracted towards skeleton \mathcal{S} , then slides on the surface of \mathcal{S} eventually reaching goal \mathcal{G} .

Show All

The W-Potential is assigned only in empty space; hence the control point p_{i}\in \mathcal{P} is restricted to traverse in the empty space, along an underlying connected graph that connects the midpoint of cells according to {{}^{3}\mathcal{GW}}_{empty} grid map (maximum of twenty-six such neighbors can exist).

Say at t=kT_{p} seconds, the control point \mathcal{P} is at midpoint of w_{n} . Of the 26 possible neighbours of w_{n},\ \mathcal{P} searches for the cell w_{n^{\prime}}\in \mathcal{N}_{3}(w_{n}) that has least potential and then pushes its midpoint into a queue. From this cell w_{n^{\prime}} , it again searches for the cell that has the least potential in \mathcal{N}_{3}(w_{n^{\prime}}) and pushes its midpoint in the queue. This subroutine of negated gradient search by \mathcal{P} is referred to as ‘gradient motion’ (of Fig. 4 ) in respective spaces and is repeated until the desired number of cells to be traversed in T_{p} seconds (say 5) are stored in the queue.

Each midpoint stored in the queue is popped using a First In First Out (FIFO) strategy, each serving as a waypoint for generating minimum jerk trajectory [21] for time t:kT_{p}\rightarrow(k+1)T_{p} . It is at this stage, after which the UAS actually starts tracking the generated trajectory with the help of a tracking controller and is referred to as ‘waypoint navigation.’ Since quadrotor dynamics assumed for UAS are differentially flat, any smooth trajectory in \sigma(t)=(x(t), y(t), z(t), \psi(t)) can be followed by the UAS [22] .
D. Local Collision Avoidance

Performing the waypoint navigation, with midpoints of cells belonging to the skeleton of the sparse zone as way-points, the UAS is restricted to traverse in the sparse zones avoiding high traffic density regions. However, as the definition of the sparse zone (zone having at most one known intruder) suggests, the UAS may or may not encounter this one known intruder. In case this intruder or any sudden appearing unknown intruder comes in the vicinity of the UAS, then the ‘Local collision avoidance’ submodule of Fig. 4 will be invoked. The algorithm that we have proposed to handle such a scenario performs well in a sparse environment. The UAS and intruders have been assumed to be point objects.
Detection

Let a UAS, H moving along skeleton \mathcal{S} be equipped with some proximity sensor M such that it can sense the position and velocity of the intruder I . The velocity of I is assumed constant. Based on the position of intruders obtained from M ; Range ( R ), Octant of intruder O_{c}(I) , and its estimated trajectory T(I) is obtained. ( R ) is the the shortest distance ( L_{2} ) between H and I in a three dimensional space.
Fig. 11:

UAS with periphery P_{r}

Show All

In order to detect the intruder, the H is assumed to have a virtual periphery P_{r} of radius r_{p} around it ( Fig. 11 ). The range R is continuously monitored by H . When R\leq r_{p} , the periphery of UAS is said to be breached by I . The path T(I) and the octant O_{c}(I) is determined, and subsequently, the collision avoidance strategy is employed.
Collision Avoidance Strategy

The neighborhood of H is divided into eight virtual octants in a three-dimensional space. The H is situated at the origin of those octants. The octants are divided into two virtual hemispheres, namely Forward ( F_{h} ) and Backward ( B_{h} ) hemisphere. The set of four octants which are ahead of the UAS in the direction of motion lie in F_{h} , and rest of them belongs to B_{h} , see Fig. 12 , F_{h}=\{Oct3, Oct4, Oct7, Oct8\} and B_{h}\ = \{Oct1, Oct2, Oct5, Oct6\} .

Collision of H with I can be treated as a coplanar or non-coplanar engagement depending on the number of I in vicinity. In coplanar engagement with H at origin, the plane being divided into quadrants, I following a straight line trajectory not passing through origin, it may be noted the cardinality of set of quadrants through which the trajectory passes will be atmost three. Similarily in a non-coplanar engagement, three dimensional space being divided into octants with H as origin, an I moving along straight line trajectory not passing through origin, will pass through at most four octants.
Fig. 12:

Forward and backward hemisphere around H

Show All

The proposed collision avoidance strategy is based on this idea of the identification of vacant quadrant or octant in forward or backward hemisphere. Whenever an intruder I breaches the periphery through point q on P_{r} , its path is estimated within P_{r} , through (7) . \begin{equation*} \frac{x-a}{r}=\frac{y-b}{s}=\frac{z-c}{t} \tag{7} \end{equation*}
View Source \begin{equation*} \frac{x-a}{r}=\frac{y-b}{s}=\frac{z-c}{t} \tag{7} \end{equation*} where a, b, c are coordinates of point q and r, s, t are direction vectors \overrightarrow{d} such that d(r, s, t)\in \mathbb{R} . For example, in case \overrightarrow{d} is d(r, 0, t) , then (7) becomes, \frac{x-a}{r}=\frac{z-c}{t},\ y=b . The estimated trajectory of intruder T(I) within periphery P_{r} is examined for the octants O_{c}(I) through which it passes. The cardinality of the set of octants occupied by intruder \vert O_{c}(I)\vert \leq 4 . In order to escape the intruder a set of available vacant octant for H,\ V_{O}(H) , is inspected. It is preferred to have vacant octant from set F_{h} such that V_{O}(H)\cap F_{h}\neq\phi , so as to have shortest path for escape. The cardinality of set of forward hemisphere \vert F_{h}\vert =4 , so, T(I) can occupy maximum three quadrants in F_{h} . Hence, if there is one I within P_{r} , there exist a non-empty set W=V_{O}(H)\cap F_{h} such that \vert W\vert \geq 1 . This ensures that at-least one octant will be available in F_{h} for escape. If there are more than one threat (could be another UAS or intruder), let us say 2, then the following cases are possible.

    Breach from same Octant : In this case, both the threats breach P_{r} from the same octant simultaneously. Here, cardinality of occupied octants 1\leq\vert O_{c}(I)\vert \leq 7 , and so, the number of available vacant octants \vert V_{O}(H)\vert \geq 1 . Hence, it is guaranteed to have at-least one vacant octant for escape. But, set W may or may not be null. If W=\phi , then octant remaining at the backward hemisphere B_{h} is selected for escape.

    Breach from Different Octant : In this case, both the threats breach P_{r} from different octants simultaneously. Here, the cardinality of the set of occupied octants 2\leq\vert O_{c}(I)\vert \leq 8 and so, the number of available vacant octants \vert V_{O}(H)\vert \geq 0 . Hence, there is a possibility that \vert V_{O}(H)\vert =\phi . In such case the strategy given below is adopted,

        Sectorize the neighborhood of H into virtual pockets p of appropriate size in three-dimensional space, such that they can accommodate H , see Fig. 13 . This sectorization is denser than the previous one. The number of pockets required is proportional to,

            The number of possible imminent threats present in environment. Higher the number of threats, larger should be the number of pockets.

            The size of periphery P_{r} . A larger P_{r} require bigger pockets.

        Find a vacant pocket, preferably lying in F_{h} .

        Position the UAS within the vacant pocket until threats are out of P_{r} .

Fig. 13:

Virtual pockets around H

Show All

SECTION IV.
Simulation Results

The proposed path planner is tested over a miniature UAM simulation environment of dimension 300\ \mathrm{m}\times 300\ \mathrm{m}\times 120\ \mathrm{m} with static obstacles of varying dimensions. Obstacles that could be modeled by convex sets were considered for ease of simulation. However, it can be extended to semi-algebraic sets as well. Based on road traffic and altitude restrictions in UAM, the altitude of the workspace is restricted between 12 m - 100 m.
Fig. 14:

Simulation workspace environment with static obstacles and ground height restrictions.

Show All

The workspace \mathcal{W} is modeled as bitmap array by dividing each axis into N=30 segments, giving 27000 cells of dimension \delta=10\ \mathrm{m}\times 10\ \mathrm{m}\times 4\ \mathrm{m} . Each cell is addressed as w_{(n_{1}, n_{2}, n_{3})} where n_{1}, n_{2}, n_{3}\in[1, N] . The obstacles are modeled as convex sets. U sing \underline{\mathcal{W}} , we store the 3-tuple n of cells that are enclosed by the half-planes defining the boundaries of obstacles or intersected by boundaries of \mathcal{W} in the array \mathcal{BM}space .
Fig. 15:

Cells occupied by obstacles shown in yellow.

Show All

Eight constant velocity intruders were considered, each traversing along a straight line route, starting at some random position on the line, moving up or down the line with arbitrary velocity as illustrated in Fig. 16 .
Fig. 16:

Air map of known intruders and obstacles in the workspace environment. UAS is indicated in red circle.

Show All

A. Zone Determination

Figure 17 illustrates the zone determination algorithm wherein at instants t=kT_{p} seconds, T_{p}=10,\ k=0,1, \ldots , the position of intruders (depicted as yellow circle) are predicted T_{p} seconds ahead in time (depicted as red circle), and based on this predicted position, \mathcal{W} is partitioned in 2^{r} zones, starting with 2 1 partitions until all the conditions are satisfied. The goal is within the threshold limits of the present UAS position (shown in blue circle). At r=2 , all three conditions are violated. At r=3 , the zone enclosing the present position is still a dense zone. At r=4 , the sparse zones enclosing the present and goal position of UAS are not connected through sparse zones. Finally, at r=5 , all conditions are satisfied and the dense_zone_definition is updated in the obstacle set. The dense_zone_definition does not change for T_{p} seconds. In the next iteration, it may or may not change depending on the spread of zones.
Fig. 17:

Zone determination based on predicted intruder positions, yellow and red circles indicate intruder present and predicted positions, blue circle for UAS present position.

Show All

B. W-Potential Generation

Appending \mathcal{BM}space with n of cells occupied by dense zone, we get \mathfrak{W}_{occupied} from which \mathfrak{W}_{empty} can be obtained. For extracting W-skeleton \mathcal{S} , we begin wave propagation from cells in \{w_{n^{\prime}} \ \vert\ w_{n^{\prime}}\in \mathcal{N}_{1}(w_{n}),\ n\in \mathfrak{W}_{occupied},\ n^{\prime}\in \mathfrak{W}_{empty} at the origin following the algorithm in Fig. 9 . Figure 18 shows the snapshots of the W-skeleton as it is being extracted from the empty space. Once the W-skeleton is extracted, the goal cell is connected to the skeleton, followed by assigning potential by wave propagation with the origin at the goal cell. The W-potential so obtained resembles Equation 6 .
Fig. 18:

Snapshots of the W-skeleton, cells depicted in yellow, \mathcal{S} being extracted from \mathfrak{W}_{empty} space

Show All

C. Gradient Motion and Waypoint Navigation

The UAS is modeled as a single control point \mathcal{P} with midpoint of cell w_{g} being the goal position. The W-potential is generated with respect to w_{g} . Gradient motion is performed every T_{p}=10 seconds searching for at most c=3 desired cells in \{w_{n}: n\in \mathfrak{W}_{empty}\} whose midpoints could serve as waypoints for generating a minimum jerk trajectory given by Equation 8 , for time t: (t_{0}=kT_{p})\rightarrow(t_{f}=(k+1)T_{p}) . \begin{equation*} \sigma^{\ast}(t)=arg\min\limits_{\sigma(t)}\int\nolimits_{t_{0}}^{t_{f}}(\overset{\cdots}{\sigma_{1}}^{2}+\overset{\cdots}{\sigma_{2}}^{2}+\overset{\cdots}{\sigma_{3}}^{2}+\overset{\cdots}{\sigma_{4}}^{2})dt \tag{8} \end{equation*}
View Source \begin{equation*} \sigma^{\ast}(t)=arg\min\limits_{\sigma(t)}\int\nolimits_{t_{0}}^{t_{f}}(\overset{\cdots}{\sigma_{1}}^{2}+\overset{\cdots}{\sigma_{2}}^{2}+\overset{\cdots}{\sigma_{3}}^{2}+\overset{\cdots}{\sigma_{4}}^{2})dt \tag{8} \end{equation*} where \sigma(t) is piecewise continuous function given by \begin{equation*} \sigma_{n}(t)=\begin{cases} \sigma_{n}^{1}(t)=\sum\limits_{i=0}^{5}b_{n}^{(1,i)}t^{i},\ \ \ t_{0} < t < t_{1}\\ \qquad\cdots\\ \sigma_{n}^{c}(t)=\sum\limits_{i=0}^{5}b_{n}^{(c, i)}t^{i},\ \ \ t_{f-1} < t < t_{f} \end{cases} \end{equation*}
View Source \begin{equation*} \sigma_{n}(t)=\begin{cases} \sigma_{n}^{1}(t)=\sum\limits_{i=0}^{5}b_{n}^{(1,i)}t^{i},\ \ \ t_{0} < t < t_{1}\\ \qquad\cdots\\ \sigma_{n}^{c}(t)=\sum\limits_{i=0}^{5}b_{n}^{(c, i)}t^{i},\ \ \ t_{f-1} < t < t_{f} \end{cases} \end{equation*} subject to waypoint position and velocity constraints for ensuring the smoothness of trajectory. Figure 19 – 20 illustrates the waypoint navigation for a simulation time of 130 seconds with ‘zone determination’, ‘gradient motion’ submodules being invoked every T_{p}=10 seconds and ‘W-potential generation’ invoked when there is a change in dense_zone_definition .

Fig. 19:

Snapshots of UAS performing the way point navigation (black trajectory) from start (blue circle) to goal (green) in \mathcal{W} duly avoiding static obstacles (magenta) along with intruders (red circle) in the dense zones (red patch) of \mathcal{W} .

Show All

D. Local Collision Avoidance

The simulation for collision avoidance of host UAS with two threats when detected (a known and an unknown intruder) for both coplanar and non-coplanar engagement is shown with r_{p}=2.5\ \mathrm{m} , and velocity of UAS and intruder is < 0.5 m/s.
Fig. 20:

Waypoint navigation from start (blue circle) to goal maintaining optimum standoff distance from static obstacles.

Show All

1) Coplanar Collision Avoidance

In the case of coplanar collision avoidance, the UAS and the intruder move in the same plane. Figure 21 shows the motion of an intruder and two UAS with periphery at different instances of time, right from the beginning, to engagement and then separation. The trail shows the path traversed by moving objects. During motion, both the UAS avoid collision among themselves as well as with the intruder. Also, the selection of octants by the UAS is dynamic depending upon the position of imminent threat.
2) Non-Coplanar Collision Avoidance

In non-coplanar condition, the UAS and the intruder move in a different plane, and unlike coplanar engagements, here the collision avoidance strategy has been extended to all the eight octants space. Fig. 22 shows the motion of UAS and intruder in three-dimensional space, from initial to final positions of UAS along with the trails.
Fig. 21:

Coplanar collision avoidance. Positions of UAS-1 (cyan), UAS-2 (green) and intruder (red) at different instances.

Show All

The simulation results show that the local collision avoidance strategy discussed above has the capability to cater to imminent threats in three-dimensional space. The strategy works well, as long as the collision avoidance algorithm finds a vacant octant or pocket to escape at any instant of time. The order of complexity of this algorithm is \mathcal{O}(n) and in case of denser sectorization \mathcal{O}(\frac{np}{8}) where n is the number of approaching threats to UAS. The UAS moves along the skeleton S , formed using the numerical potential field. During avoidance of collision, they depart from the skeleton in order to find a safer place, but after threats have elapsed, the UAS returns back to the skeleton due to the nature of W-potential and then reaches the goal.
Fig. 22:

Non-coplanar collision avoidance. Positions of UAS-1 (cyan), UAS-2 (green) and intruder (red) at different instances.

Show All

SECTION V.
Conclusion

In this paper, the proposed planner for UAS flight paths is based on zone determination and numerical potential field which generates a safe path from start to goal, maintaining optimum standoff distance from the static obstacles as well as from dense, dynamic known intruder traffic. It is capable of detecting and avoiding any potential collision with known and unknown intruders while maneuvering in the densely populated urban environment. The proposed method is scalable in terms of handling a growing number of static obstacles and known intruders in the environment. The method proposed for local collision avoidance is simple but serves the purpose while cutting down the computation complexity. Also, with numerical potential fields, the algorithm has flexibility in handling UAS with very large degrees of freedom if an application demands sub-linear growth in time complexity. The simulation results successfully demonstrate the generation of a safe and efficient flight plan for achieving UTM TCL-4 urban aerial mobility in dense low altitude airspace.
ACKNOWLEDGMENTS

The authors acknowledge partial funding support from RBCCPS, IISc, and EPSRC-GCRF (EP/P02839/1). Authors also thank the members of the AE291 group for very useful discussions.

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Application of DDPG-based Collision Avoidance Algorithm in Air Traffic Control

2019 12th International Symposium on Computational Intelligence and Design (ISCID)

Published: 2019
Self synchronization based air traffic control and collision avoidance system

2011 IEEE/AIAA 30th Digital Avionics Systems Conference

Published: 2011
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
