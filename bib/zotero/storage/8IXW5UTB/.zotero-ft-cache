IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathMenu.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 IEEE International Confe...
Mapless-Planner: A Robust and Fast Planning Framework for Aggressive Autonomous Flight without Map Fusion
Publisher: IEEE
Cite This
PDF
  << Results   
Jialin Ji ; Zhepei Wang ; Yingjian Wang ; Chao Xu ; Fei Gao
All Authors
View Document
329
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Related Work
    III.
    Methodology
    IV.
    Experiments and Benchmarks
    V.
    Conclusion and future work

Authors
Figures
References
Keywords
Metrics
Media
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: Maintaining a map online is resource-consuming while a robust navigation system usually needs environment abstraction via a well-fused map. In this paper, we propose a ma... View more
Metadata
Abstract:
Maintaining a map online is resource-consuming while a robust navigation system usually needs environment abstraction via a well-fused map. In this paper, we propose a mapless local planner which directly conducts such abstraction on the unfused sensor data. A limited-memory data structure with a reliable proximity query algorithm is proposed for maintaining raw historical information. A sampling-based scheme is designed to extract the free-space skeleton. A smart waypoint selection strategy enables to generate high-quality trajectories within the resultant flight corridors. Our planner differs from other mapless ones in that it can abstract and exploit the environment information more efficiently. The online replan consistency and success rate are both significantly improved against conventional mapless methods.
Published in: 2021 IEEE International Conference on Robotics and Automation (ICRA)
Date of Conference: 30 May-5 June 2021
Date Added to IEEE Xplore : 18 October 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 21459770
DOI: 10.1109/ICRA48506.2021.9561460
Publisher: IEEE
Conference Location: Xi'an, China
Contents
SECTION I.
Introduction

The autonomous navigation of quadrotors develops rapidly as it plays an important role in real-world applications. For a robust navigation framework, it is essential to build a well-fused map for back-end modules [1] [2] [3] - [4] . Maintaining a consistent map online requires reliable localization and sufficient computation power. Such requirements can make limited onboard resources inadequate for high-level missions other than navigation. It is attractive if robust navigation can also be achieved by a lightweight mapless planner.

Although there are many computationally efficient mapless planners [5] [6] - [7] , most of them are trajectory-oriented. In other words, they focus on choosing a better feasible trajectory to accomplish collision avoidance. These planners do not extract the structure of the environment due to the lack of an informative map. Consequently, short-sighted planning occasionally occurs, thus easily leading the quadrotor to a dead end. Such planners are also sensitive to data noise, which can cause inconsistent replans. In comparison, the weaknesses are largely overcome in map-based planners such as [2] and [8] because the map fusion already accomplishes a large part of the environment abstraction. To get over these weaknesses, it is important to incorporate such a mechanism into a mapless planner without fusing the sensor data.
Fig. 1. - A framework of mapless planning for autonomous quadrotors. (a) An onboard intensity image, (b) Forward spanning tree, (c) Ball-shaped flight corridor, (d) Trajectory generated via smart waypoint selection.
Fig. 1.

A framework of mapless planning for autonomous quadrotors. (a) An onboard intensity image, (b) Forward spanning tree, (c) Ball-shaped flight corridor, (d) Trajectory generated via smart waypoint selection.

Show All

In this paper, we design a framework based on the above idea. Firstly, a limited-memory data structure is adopted for storing historical sensor information, following the basic idea of NanoMap. We further improve the reliability of query results and the compactness of un-fused data by redesigning a query algorithm. Secondly, a novel sampling-based scheme is utilized to accomplish the environment abstraction. It is able to extract the free-space skeleton and generate flight corridors simultaneously. Thirdly, a smart waypoint selection strategy is designed where our previous algorithm [9] serves as a submodule. The scheme smartly inserts intermediate waypoint to suppress a trajectory into a corridor while maintaining its dynamic performance. It generates high-quality local trajectories in a computationally efficient way. Our framework abstracts and exploits the environment information in a relative cheap way.

Summarizing our contributions as follows:

    We propose PicoMap, a limited-memory data structure to maintain historical sensor information. Adaptive downsampling and redesigned query interfaces are proposed for compact storage and accurate query.

    We propose Forward Spanning Tree, a sampling-based algorithm to extract free-space skeletons and generate safe flight corridors. All information in proximity query is exploited for the environment abstraction.

    We propose a lightweight yet effective trajectory generator which smartly selects waypoints to suppress a trajectory into a corridor. High-quality feasible trajectories are available with appropriate time allocation.

SECTION II.
Related Work
A. Data Structures for Mapless Planners

For mapless planners, the sensor data is not fused into a prior map in an inertial frame such as the occupancy map. Instead, two commonly-used data structures in mapless methods are k-d Tree and Safe Flight Corridor (SFC) for environment abstraction. K-d tree enables proximity queries in surrounding environments. Directly building a k-d tree from recently received depth data is proposed in both [5] and [6] for mapless motion planning. On the contrary, SFC describes the free region in configuration space through combinations of geometric primitives. Bucki et al. [7] propose pyramid-shape free corridors directly generated from depth data such that motion primitives can be efficiently checked and conducted. Gao et al. [10] propose a ball-shaped SFC directly generated from point clouds of LiDAR [11] .

RAPPIDS [7] is a novel memoryless method that partitions the free space with pyramids given a single depth image. Although the generation of pyramids and collision checks can be quickly carried out, it is still prone to fail in complex environments, just like other memoryless methods due to their inherent limitation. NanoMap [6] directly builds a k-d tree for each depth image. The history of k-d trees and their relative poses is utilized for proximity querying. It should be noted that the pose uncertainty is considered for queries in multiple k-d trees. However, its handling for occupied space and unknown space is not well designed, leading to inaccurate query results for corner cases. Moreover, the distance and direction information are not well utilized in the query results of k-d trees.
B. Trajectory Generation for Mapless Planners

Many mapless planners use motion primitives along with efficient feasibility checkers such as [12] and [13] . One main reason is that choosing feasible primitives only needs simple binary query results. Such kind of query has less restrictions on environment representation. Optimization-based planners enjoy high-quality trajectories while they require more abstraction on environments. SFC provides such abstraction so that convex formulations such as QP or QCQP are usually used in polynomial trajectory generation within SFC [1] , [10] , [14] [15] [16] - [17] . However, such methods cost more computation resources since the safety, dynamic limits, and smoothness should all be considered. For local trajectory generation, it is also not worthwhile to conduct trajectory optimization within an SFC with too many geometric primitives. Our previous work [9] provides an efficient way to optimize a trajectory with prescribed waypoints while maintaining its feasibility. The way it handles waypoints and safety constraints lacks flexibility, which needs to be further improved.
SECTION III.
Methodology
A. PicoMap

PicoMap gives further improvements over NanoMap [6] . It builds the 3D local data structure from each pair of the depth and intensity images. A proximity query algorithm is also designed for more reliable results.
Algorithm 1: PicoMap query algorithm
Table 1:- PicoMap query algorithm
Fig. 2. - The safe radius rsafe of the query point at the edge of FOV may be overestimated by NanoMap. (a) dobstacle > dedge ⇏ rsafe = dobstacle, (b) dobstacle < dedge ⇒ rsafe = dobstacle
Fig. 2.

The safe radius r safe of the query point at the edge of FOV may be overestimated by NanoMap. (a) d obstacle > d edge ⇏ r safe = d obstacle , (b) d obstacle < d edge ⇒ r safe = d obstacle

Show All
1) Building Algorithm:

There is no fusion procedure in the building stage. A finite-length list L maps is maintained in memory. The list consists of a series of kdTree i for all keyframes and transforms TF i for all pairs of consecutive keyframes. There are two key ideas in this stage:

    L maps is updated with a new keyframe only if a relative pose or relative time exceeds corresponding thresholds. This balances the coverage and the memory size of the limited historical sensor data.

    Adaptive down-sampling of the depth image is performed to build a compact k-d tree. More depth pixels are preserved if the corresponding region contains more textures in the intensity image.

2) Querying Algorithm:

Following NanoMap [6] , we also iteratively check whether the query point is in the FOV (IsInFov()) and estimate uncertainty of the query (EstimateS-tandardDeviation()) until we find it, as is shown in Algorithm 1 . Then, the nearest obstacle x obstacle is queried through k-d tree (NnSearch()).

For a query point near the boundary of FOV, NanoMap [6] checks the AABB of the 1- σ of the query point distribution. However, one circumstance in Fig. 2(a) may occur that the AABB lies in FOV but d obstacle > d edge . Then, d obstacle is overestimated considering the unseen x obstacle . Under such circumstance we should continue iteratively checking whether there is a more appropriate view ( d obstacle < d edge ) in L maps as Fig. 2(b) for instance. If the query point is never seen in any FOV, we regard x obstacle queried in the first frame as the nearest obstacle optimistically, avoiding problems from being occluded by very close objects.
Fig. 3. - (a) A branch falling into a dead end. (b) Score the leaf nodes according to the angle α between spanning direction and the nearest obstacle.
Fig. 3.

(a) A branch falling into a dead end. (b) Score the leaf nodes according to the angle α between spanning direction and the nearest obstacle.

Show All
Fig. 4. - Score (a) and prune (b) the forward spanning tree.
Fig. 4.

Score (a) and prune (b) the forward spanning tree.

Show All
B. Forward Spanning Tree

Due to the limited sensing range, a quadrotor seldom turns around in a single local replan if its intermediate goal is appropriately selected. We make such an assumption that a local trajectory is always inside-out, i.e., flying away from the current position. According this assumption, we propose an efficient sampling-based method to extract the skeleton of free spaces using SFCs.
1) Building Algorithm:

Inspired by fast marching tree (FMT) [18] , a batch of free samples is first generated using PicoMap. According to our assumption, all samples are firstly sorted by the distance from the root node (Sort() in Algorithm 2 ) and then inserted to the forward spanning tree (FST) one by one. The cost of each inserted node is calculated by the sum of the cost of its parent and the distance of the node from its parent. For each inserted node, in order to choose a reasonable parent node, a dynamic k-d tree [19] is maintained to provide the Knn() function. Among the n nearest neighbors which are able to be connected to the inserted data without collision, the node whose cost is lowest ( N p ) should be chosen as the parent of the inserted data. It should be noted that the time-consuming rewire operation is avoided by using Sort() based on our assumption.
Algorithm 2: Build and prune forward spanning tree
Table 2:- Build and prune forward spanning tree
2) Pruning Algorithm:

As is shown in Fig. 3(a) , the resultant tree contains redundant information on the environment, from which we wish to extract useful SFCs. We propose a two-stage scheme. In the scoring stage, we first score each leaf node based on its angle α between the spanning direction and the nearest obstacle. If an α is smaller than a prescribed threshold, the corresponding leaf is spanning forward to the obstacle. We set its score to 0. Otherwise, the leaf in Fig. 3(b) , whose α is larger than the threshold, is spanning along the skeleton of the fee space. We set the score of such a leaf to 1. The score of any non-leaf node is defined as the sum of its children’s. Following this rule, scoring the entire tree can be carried out by post-order traversal of FST as is given in Fig. 4(a) . In the pruning stage, the pruning weight w for each node is defined by its score divided by the max score of its siblings M. A branch is pruned from the tree if the weight of its root is lower than a prescribed prune factor. The pruning procedure can be carried out by the breadth-first traversal of FST, as is shown in Fig. 4(b) . As a result, the remaining branches are all spanning forward to free space.
Fig. 5. - (a) Generation of the ball-shaped SFC, (b) Intersection of the surfaces of adjacent two balls
Fig. 5.

(a) Generation of the ball-shaped SFC, (b) Intersection of the surfaces of adjacent two balls

Show All
3) Ball-shaped SFC Generation:

Provided with a goal, the nearest leaf node along its path from the root is generated from the pruned FST, which is the red line in Fig. 5(a) . Then, a ball-shaped SFC is generated along this path. Any ball is centered at the intersection of its predecessor and the path. All radii of these balls are obtained through safeRadiusQuery().
4) Dynamic Resampling:

In order to improve the consistency of two consecutive replans, we sample from a normalized weighted sum of Gaussian distributions generated from previous results. The weight, center, and covariance of each Gaussian distribution are determined by the volume, position, and radius of the free ball of a point in the previous frame. Such kind of dynamic resampling also improves the sampling rate.
C. Trajectory Generation

We denote by F the resultant SFC which consists of M sequentially connected balls B i , i.e., F = ∪ M i = 1 B i . We wish to generate an energy-time optimal trajectory p ( t ) : [0, T ] ↦ ℝ 3 confined by F :
min p ( t ) ∫ T 0 ∥ ∥ p ( 3 ) ( t ) ∥ ∥ 2 d t + ρ T , s . t .   p ( 0 ) = p o , p ( 1 ) ( 0 ) = v o , p ( 2 ) ( 0 ) = a o , p ( T ) = p f , p ( 1 ) ( T ) = v f , p ( 2 ) ( T ) = a f , ∥ ∥ p ( 1 ) ( t ) ∥ ∥ ≤ v m , ∥ ∥ p ( 2 ) ( t ) ∥ ∥ ≤ a m , ∀ t ∈ [ 0 , T ] , p ( t ) ∈ F , ∀ t ∈ [ 0 , T ] , (1) (2) (3) (4) (5)
View Source Right-click on figure for MathML and additional features. \begin{align*} & \mathop {\min }\limits_{p(t)} \int_0^T {{{\left\| {{p^{(3)}}(t)} \right\|}^2}} {\text{d}}t + \rho T,\tag{1} \\ & s.t.{\text{ }}p(0) = {p_o},{p^{(1)}}(0) = {v_o},{p^{(2)}}(0) = {a_o},\tag{2} \\ & p(T) = {p_f},{p^{(1)}}(T) = {v_f},{p^{(2)}}(T) = {a_f},\tag{3} \\ & \left\| {{p^{(1)}}(t)} \right\| \leq {v_m},\left\| {{p^{(2)}}(t)} \right\| \leq {a_m},\forall t \in [0,T],\tag{4} \\ & p(t) \in \mathcal{F},\forall t \in [0,T],\tag{5}\end{align*} where p ( t ) is a polynomial spline over [0, T ], ρ the weight for time regularization, v m and a m the dynamic limits. Solving such a problem is quite difficult and not worthwhile for local trajectories. Therefore, we design a heuristic procedure to approximate the optimal trajectory of the above problem.

To retain both efficiency and quality, we propose a smart waypoint selection strategy for trajectory generation within an SFC. The alternating minimization scheme in our previous work [9] is served as a sub-module of this scheme. Once all waypoints are given, this sub-module can generate a p ( t ) with appropriate time allocation and guaranteed feasibility. Our waypoint selection strategy borrows an idea from the Douglas-Peucker algorithm [20] . Intuitively, the maximal safety violation of a trajectory is taken as the highest priority, thus it is suppressed by a newly-added waypoint.
Fig. 6. - A trajectory generated based on our waypoint selection strategy.
Fig. 6.

A trajectory generated based on our waypoint selection strategy.

Show All

Firstly, each circle is generated by intersecting a pair of two adjacent balls. As is shown in Fig. 5(b) , we denote by C i its center and by R i its radius, as is shown in Fig. 5(b) . The initial trajectory is a one-piece 5-order polynomial calculated from the boundary condition. As is shown in Fig. 6 , the initial trajectory should be a straight line in a rest-to-rest case. The following iterations are conducted for safety constraints:

    Step 1: Calculate each distance d i from the i -th circle to the trajectory. If the trajectory crosses the circle, set the d i to zero.

    Step 2: Find the circle with the maximal d i . Add the closest point on the circle as a new waypoint of the trajectory.

    Step 3 : For the given boundary condition and waypoints, use the algorithm proposed in [9] to calculate the whole trajectory.

    Step 4 : Repeat Step 2 and Step 3 if there still exists a positive d i . Otherwise, the whole trajectory is already within the SFC.

During the flight, a newly generated trajectory is committed to the tracking controller if its distance to goal is smaller than the currently tracked one.
SECTION IV.
Experiments and Benchmarks
A. Simulation in Cluttered Environment

To validate the robustness of the proposed method, we conduct several simulations in randomly generated cluttered environments. The environments consist of 300 pillar-shaped obstacles and 120 ring-shaped obstacles in a 30 m ×30 m ×5 m field. In such scenes, RAPPIDS [7] cannot generate pyramids that describe the free space exactly. In comparison, our pruned FST precisely captures the skeleton of the free region as is shown in Fig. 7(a) . Based on the preferred path, an SFC is generated for subsequent trajectory optimization. Each ball in the SFC expanses as large as possible, showing the accurate query result of our PicoMap. In Fig. 7(b) , consistent trajectories are generated when the goal is changed online.
Fig. 7. - (a) Simulation in a cluttered environment. (b) The drone generates a consistent trajectory when the goal changes while flying.
Fig. 7.

(a) Simulation in a cluttered environment. (b) The drone generates a consistent trajectory when the goal changes while flying.

Show All
Fig. 8. - An outdoor experiment in a dense forest. The drone avoid the obstacles one by one rapidly with expected speed of 3m/s.
Fig. 8.

An outdoor experiment in a dense forest. The drone avoid the obstacles one by one rapidly with expected speed of 3m/s.

Show All
B. Real-world Experiments

To validate the practical performance of our method, we deploy it on a compact quadrotor platform whose configuration is detailed in [21] . The real-world experiment is conducted in a dense forest shown in Fig. 8 . A filter-based visual-inertial odometery [22] is utilized as the feedback for the trajectory tracking controller. The drone avoids the obstacles one by one rapidly with an expected speed of 3 m / s , showing its aggressiveness and robustness. In Fig. 8 , the pruned FST bypass all the trees, guiding the SFC into large free regions. The generated trajectory is also confined by the SFC with a few of waypoints inserted, which validates the smartness of our waypoint selection strategy.
C. Modular Tests of the Framework

In order to quantify the performance of each part of the framework, we set three different tests:

    For the generation of SFCs and trajectories, we record the distribution of the numbers of both balls and waypoints inserted to generate a feasible trajectory for 1272 tests, shown in Fig. 9(a) . Most of the flight corridors are of size 10 but only 7% of the number of waypoints inserted to the trajectories are larger than 3. Moreover, 80% of the trajectories are feasible by inserting no more than one additional waypoint. These statistics indicate the suitability of our trajectory generation method.

    For the FST, we test the performance of different sampling numbers in random 20 m × 40 m × 5 m environments for 100 times, as is shown in Fig. 9(b) . The arrival time decreases as we increase the size of batch sampling. When sampling size exceeds 200, the shortening of arrival time becomes insensitive. Thus the sampling size of 200 samples suffices for planning in such kinds of environments.

    We also record the average computation time of building a k-d tree from a depth image, obtaining a pruned FST and generating a trajectory by averaging over 2259 times on Intel i7-6700 CPU. Specifically, the resolution of depth and intensity image is 640 × 480. The sampling number of FST is 200. The average computation time of each part is 3.24 ms , 0.98 ms and 0.26 ms , respectively. It is worth noting that over half of the time is spent on image pixel accessing.

Fig. 9. - (a) Distribution of the number of balls and waypoints inserted. (b) Arrival time of different sampling data for FST in different environments.
Fig. 9.

(a) Distribution of the number of balls and waypoints inserted. (b) Arrival time of different sampling data for FST in different environments.

Show All
D. Benchmark

We evaluate the overall planner performance of our algorithm in terms of safety and aggressiveness. The benchmark is conducted using our method and some other state-of-the-art mapless approaches, i.e., RAPPIDS and NanoMap, as is shown in Fig. 10 .
Fig. 10. - A random 20m×40m enviroment for benchmark that consists of randomly placed pillars and circular rings. Compared to that RAPPIDS and NanoMap can only choose some open space to pass through, Ours can get to goal faster by flying through some narrow spaces aggressively.
Fig. 10.

A random 20m×40m enviroment for benchmark that consists of randomly placed pillars and circular rings. Compared to that RAPPIDS and NanoMap can only choose some open space to pass through, Ours can get to goal faster by flying through some narrow spaces aggressively.

Show All

Specifically, the onboard depth sensor provides depth and intensity images at 640 × 480 resolution, which is the same as is used in real-world experiments. The field of view (FOV) is set to 78 degrees horizontally and 64 degrees vertically. The real-time poses and images of the camera are provided by the simulator. Both sensors are simulated at 30Hz. The experiments are repeated for 100 times in randomly generated environments under different difficulty. The difficulty is quantified by the expected maximum flight velocity V max and the obstacle density I obs . These two parameters are chosen as V max = {2, 3, 4} m / s and I obs = {30, 60, 90} obstacles, for a total of 3 × 3 × 100 × 3 = 2700 simulation trials. The distance between the initial position and goal is 18 m. In each case, a timer is started when the quadrotor takes off and is stopped when a collision occurs or the goal is reached. One flight mission is considered to be successful only if the target is reached in a limited time.

The key metric for our comparison of these three methods is the collision-free success rate of trials and the average time to reach the goal in successful flights, which are presented in Fig. 11 and Fig. 12 . The results for RAPPIDS show its limitations on handling cluttered environments. For NanoMap, the average time is longer than our method by approximately 19%. As is mentioned in Section III , NanoMap may falsely evaluate d obstacle ignoring the blind spot. Such a flaw tends to be unsafe and leads a relatively low success rate. These results demonstrate the robustness and aggressiveness of our mapless planner in cluttered environments.
Fig. 11. - Comparison of number of successful collision-free flights for the different methods tested in our simulated quadrotor race.
Fig. 11.

Comparison of number of successful collision-free flights for the different methods tested in our simulated quadrotor race.

Show All
Fig. 12. - Comparison of the average time to goal for successful flights.
Fig. 12.

Comparison of the average time to goal for successful flights.

Show All
SECTION V.
Conclusion and future work

In this paper, we propose a robust and fast mapless planning framework for aggressive autonomous flight without map fusion, which is able to abstract and exploit the environment information efficiently for generating high-quality trajectories. Benchmark comparisons and real-world experiments validate that it is lightweight, robust, and highly efficient. In the future, we will improve our framework to fit it in smaller quadrotors with coarse localization.

Authors
Figures
References
Keywords
Metrics
Media
Footnotes
   Back to Results   
More Like This
Wavefront Method-Based Local-Path Planning for a Mobile Robot with a Vision System

2006 SICE-ICASE International Joint Conference

Published: 2006
Path planning and dynamic objects detection

2009 International Conference on Advanced Robotics

Published: 2009
Show More
References
1. J. Tordesillas, B. T. Lopez and J. P. How, "Faster: Fast and safe trajectory planner for flights in unknown environments", Proc. of the IEEE/RSJ Intl. Conf. on Intell. Robots and Syst , pp. 1934-1940, 2019.
Show in Context View Article Full Text: PDF (5085) Google Scholar
2. B. Zhou, F. Gao, L. Wang, C. Liu and S. Shen, "Robust and efficient quadrotor trajectory generation for fast autonomous flight", IEEE Robotics and Automation Letters , vol. 4, no. 4, pp. 3529-3536, 2019.
Show in Context View Article Full Text: PDF (3656) Google Scholar
3. H. Oleynikova, C. Lanegger, Z. Taylor, M. Pantic, A. Millane, R. Siegwart, et al., "An open-source system for vision-based microaerial vehicle mapping planning and flight in cluttered environments", Journal of Field Robotics , vol. 37, no. 4, pp. 642-666, 2020.
Show in Context CrossRef Google Scholar
4. X. Zhou, Z. Wang, C. Xu and F. Gao, "Ego-planner: An esdf-free gradient-based local planner for quadrotors", 2020.
Show in Context Google Scholar
5. B. T. Lopez and J. P. How, "Aggressive 3-d collision avoidance for high-speed navigation", 2017 IEEE International Conference on Robotics and Automation (ICRA) , pp. 5759-5765, 2017.
Show in Context View Article Full Text: PDF (1358) Google Scholar
6. P. R. Florence, J. Carter, J. Ware and R. Tedrake, "Nanomap: Fast uncertainty-aware proximity queries with lazy search over local 3d data", 2018 IEEE International Conference on Robotics and Automation (ICRA) , pp. 7631-7638, 2018.
Show in Context View Article Full Text: PDF (5927) Google Scholar
7. N. Bucki, J. Lee and M. W. Mueller, "Rectangular pyramid partitioning using integrated depth sensors (rappids): A fast planner for multicopter navigation", IEEE Robotics and Automation Letters , vol. 5, no. 3, pp. 4626-4633, 2020.
Show in Context View Article Full Text: PDF (1626) Google Scholar
8. F. Gao, Y. Lin and S. Shen, "Gradient-based online safe trajectory generation for quadrotor flight in complex environments", 2017 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 3681-3688, 2017.
Show in Context View Article Full Text: PDF (5136) Google Scholar
9. Z. Wang, X. Zhou, C. Xu, J. Chu and F. Gao, "Alternating minimization based trajectory generation for quadrotor aggressive flight", IEEE Robotics and Automation Letters , vol. 5, no. 3, pp. 4836-4843, 2020.
Show in Context View Article Full Text: PDF (2773) Google Scholar
10. F. Gao, W. Wu, W. Gao and S. Shen, "Flying on point clouds: Online trajectory generation and autonomous navigation for quadrotors in cluttered environments", Journal of Field Robotics , vol. 36, no. 4, pp. 710-733, 2019.
Show in Context CrossRef Google Scholar
11. "Velodyne VLP-16 product description", [online] Available: http://velodynelidar.com/vlp-16.html.
Show in Context Google Scholar
12. J. Zhang, C. Hu, R. G. Chadha and S. Singh, "Maximum likelihood path planning for fast aerial maneuvers and collision avoidance", 2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 2805-2812, 2019.
Show in Context View Article Full Text: PDF (5780) Google Scholar
13. V. K. Viswanathan, E. Dexheimer, G. Li, G. Loianno, M. Kaess and S. Scherer, "Efficient trajectory library filtering for quadrotor flight in unknown environments".
Show in Context Google Scholar
14. F. Gao, L. Wang, B. Zhou, X. Zhou, J. Pan and S. Shen, "Teach-repeat-replan: A complete and robust system for aggressive flight in complex environments", IEEE Transactions on Robotics , 2020.
Show in Context Google Scholar
15. S. Tang and V. Kumar, "Safe and complete trajectory generation for robot teams with higher-order dynamics", 2016 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 1894-1901, 2016.
Show in Context View Article Full Text: PDF (1706) Google Scholar
16. S. Liu, M. Watterson, K. Mohta, K. Sun, S. Bhattacharya, C. J. Taylor, et al., "Planning dynamically feasible trajectories for quadrotors using safe flight corridors in 3-d complex environments", IEEE Robotics and Automation Letters , 2017.
Show in Context View Article Full Text: PDF (1559) Google Scholar
17. F. Gao, W. Wu, Y. Lin and S. Shen, "Online safe trajectory generation for quadrotors using fast marching method and bernstein basis polynomial", 2018 IEEE International Conference on Robotics and Automation (ICRA) , pp. 344-351, 2018.
Show in Context View Article Full Text: PDF (1955) Google Scholar
18. L. Janson, E. Schmerling, A. Clark and M. Pavone, "Fast marching tree: A fast marching sampling-based method for optimal motion planning in many dimensions", The International journal of robotics research , vol. 34, no. 7, pp. 883-921, 2015.
Show in Context CrossRef Google Scholar
19. J. L. Bentley and J. B. Saxe, "Decomposable searching problems i. static-to-dynamic transformation", Journal of Algorithms , vol. 1, no. 4, pp. 301-358, 1980.
Show in Context CrossRef Google Scholar
20. D. H. Douglas and T. K. Peucker, "Algorithms for the reduction of the number of points required to represent a digitized line or its caricature", Cartographica: the international journal for geographic information and geovisualization , vol. 10, no. 2, pp. 112-122, 1973.
Show in Context CrossRef Google Scholar
21. J. Ji, X. Zhou, C. Xu and F. Gao, "Cmpcc: Corridor-based model predictive contouring control for aggressive drone flight", 2020.
Show in Context Google Scholar
22. K. Sun, K. Mohta, B. Pfrommer, M. Watterson, S. Liu, Y. Mulgaonkar, et al., "Robust stereo visual inertial odometry for fast autonomous flight", IEEE Robotics and Automation Letters , vol. 3, no. 2, pp. 965-972, 2018.
Show in Context View Article Full Text: PDF (718) Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
