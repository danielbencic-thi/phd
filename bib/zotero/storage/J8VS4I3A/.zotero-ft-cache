IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading web-font TeX/Size2/Regular

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2019 IEEE International Confe...
A Survey on Path Planning Algorithms for Mobile Robots
Publisher: IEEE
Cite This
PDF
Márcia M. Costa ; Manuel F. Silva
All Authors
View Document
8
Paper
Citations
1569
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Path Planning Algorithms
    III.
    Discussion
    IV.
    Conclusions and Future Work

Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: The use of mobile robots is growing every day. Path planning algorithms are needed to allow the coordination of several robots, and make them travel with the least cost a... View more
Metadata
Abstract:
The use of mobile robots is growing every day. Path planning algorithms are needed to allow the coordination of several robots, and make them travel with the least cost and without collisions. With this emerged the interest in studying some path planning algorithms, in order to better understand the operation of each one when applied in this type of robots. The objective of this paper is to present a state of the art survey of some algorithms of path planning for mobile robots. A brief introduction on mobile robots and trajectory planning algorithms is made. After, the basis of each algorithm is explained, their relative advantages and disadvantages are presented and are mentioned areas of application for each of them. This study was developed in order to implement some of these algorithms in the near future, with the objective to find out their relative advantages and disadvantages, and in which situations their implementation is more adequate.
Published in: 2019 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC)
Date of Conference: 24-26 April 2019
Date Added to IEEE Xplore : 10 June 2019
ISBN Information:
INSPEC Accession Number: 18740474
DOI: 10.1109/ICARSC.2019.8733623
Publisher: IEEE
Conference Location: Porto, Portugal
Contents
SECTION I.
Introduction

Mobile robots can be found in industry, military installations, security environments, and as consumer products, whether for entertainment or to perform some work, such as vacuum cleaning or cutting grass. They have the ability to move around their environments and are not attached to a physical location. According to the environment in which they move, they can be classified into three types: ( i ) terrestrial robots, usually have wheels, but some have legs, like humans, quadruped animals or arthropods; ( ii ) aerial, usually referred to as Unmanned Aerial Vehicles (UAV); and ( iii ) underwater, often referred as Autonomous Underwater Vehicles (AUV) or Remote Operated Vehicles (ROV) [1] .

The path planning algorithms for these autonomous vehicles can include aspects such as the planning of movements between obstacles and the coordination of movement with other mobile robots. Thus, these algorithms aim at choosing the route that usually takes less time and that presents less costs for the mobile robots to accomplish the intended tasks [2] .

This paper is organized as follows. Section II presents some path planning algorithms for different types of mobile robots. Section III discusses the studied algorithms, their advantages and disadvantages, and their application areas. The conclusions and future work are drawn in Section IV .
SECTION II.
Path Planning Algorithms

In this section, are described path planning algorithms that can be applied to mobile robots, the relative advantages and disadvantages of the analysed algorithms, as well as examples of some areas in which they have been applied.
A. A Star

The A star ( A ∗ ) is a search method that uses a heuristic function, h ( n ) , where n represents a node n . To each node n is associated an approximation h ( n ) of the cost of a path from n to a goal node, while h ∗ ( n ) corresponds to the real distance (cost) from n to a goal node. A heuristic h is consistent if and only if: ( i ) h ( n ) = 0 (if n is the goal node); and ( ii ) for all nodes and their successors n ′ , the estimated cost of moving from node n to the goal node is not greater than the cost of moving from node n to node n ′ plus the estimated cost of moving from node n ′ to the goal node, as can be seen in Equation 1 [3] .
h ( n ) ⩽ c ( n , n ′ ) + h ( n ′ ) (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*} h(n)\leqslant c(n, n^{\prime})+h(n^{\prime}) \tag{1} \end{equation*}

A heuristic h is admissible when h ( n ) underestimates h ∗ ( n ) , that is, it respects Equation 2 [3] . The heuristic to be used may be the straight line distance, or the euclidean distance [4] .
h ( n ) ⩽ h ∗ ( n ) (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*} h(n)\leqslant h^{\ast}(n) \tag{2} \end{equation*}

The other functions of this method are g ( n ) , that denotes the cost of the path from the start node to node n , and f ( n ) , which represents the estimated cost of the path passing through n to reach the goal node. f ( n ) is defined as the sum of g ( n ) with h ( n ) , as in Equation 3 [3] .
f ( n ) = g ( n ) + h ( n ) (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*} f(n)=g(n)+h(n) \tag{3} \end{equation*}

The main advantage of this algorithm results from the fact that using the heuristic, the algorithm can quickly converge [5] .
Fig. 1.

Temporal graphs (left) and AGV positions (orange circles) in each temporal layer of the TEA* algorithm (right) [9] .

Show All

The disadvantages include ( i ) not consider obstacles for preventing collisions [6] ; and ( ii ) be slow in searching speed and be of poor applicability in the large scale paths search [7] .

The A* algorithm has been applied in several areas, among which can be mentioned the areas of automation/robotics (for trajectory planning of AGV in Smart Park [5] ), medicine (for needle penetration during surgery procedures [6] ) and games (for determining the paths in games [7] , [8] ).
B. Time Enhanced A*

The Time Enhanced A* (TEA*) is an extension of the A*, used when there are multiple vehicles. It contains an additional component - time. This component allows a better prediction of the vehicles' movements during the run time [9] .

TEA* consists of an incremental algorithm that builds the path of each vehicle considering the movements of other mobile robots. This feature allows the algorithm to produce conflict free routes and, at the same time, deal with deadlock situations, since the paths are constantly recalculated and the map information is updated at each iteration. This way, the unpredictable events are considered in the input map, allowing to avoid the main challenges of any multi-robot approach, such as collisions and deadlocks [9] . Each node on the map has three dimensions: the Cartesian coordinates ( x ,   y ) and a representation of the discrete time. The time is represented through temporal layers, k = [ 0 ; T M a x ] , on which T M a x represents the maximum number of layers. Each temporal graph is composed of a set of free and occupied/obstacles nodes, as can be can see in Fig. 1 [9] .

The path for each robot is calculated during the temporal layers. In each temporal layer, the position of each vehicle is known and shared with the other vehicles. This way, it is possible to detect possible future collisions and avoid them at the beginning of the paths' calculation. Each robot can only start and stop in nodes and a node can only be occupied by one vehicle on each temporal layer [9] .

The operation of the TEA* algorithm is similar to A*, since for each AGV, during the path calculation, the next neighbor node analyzed depends on a cost function, f ( n ) , given by the sum of two terms: the distance to the initial vertex, g ( n ) , and the distance to the end point, h ( n ) . The main difference between the two algorithms is that time is considered in TEA*, resulting in two definitions, according to [9] :
•
Definition 1

“The neighbor vertices of a vertex j in the temporal layer k belong to the next temporal layer given by k + 1 ” ( Fig. 1 ), that is, the total number of temporal layers depends of the number of iterations required to reach the intended destination. The more complex the map, the more iterations are needed.
•
Definition 2

“The neighbor vertices of vertex j   ( v j a d j ) include the vertex containing the AGV current position, and all adjacent vertices in the next time component.”, that is, the set of neighboring nodes includes not only the adjacent nodes, but also the node corresponding to the position in analysis. This property allows a vehicle to maintain its position between consecutive time instants if no neighbour node is free. In this case, it is not considered a zero value for the euclidean distance; instead a constant heuristic value corresponding to the stopped movement is assigned.

Fig. 2.

Control diagram for each algorithm iteration in a multi-agv situation [9] .

Show All
Fig. 2 depicts the control diagram of the TEA* operation, for each iteration of the algorithm, in a multi-AGV context. The initial positions of the AGV are placed as obstacles, in the first time layer ( k = 0 ) , allowing a vehicle to consider the positions of the other vehicles as nodes occupied. In order to avoid deadlocks, those nodes are placed as obstacles only in k = 0 , 1 , that is, in the first two time layers. Next, is analyzed what the AGV has to do (missions) and the path for each of the vehicles is calculated using the TEA*. The coordinates of the next node, in the second time layer ( k = 1 ) , are transmitted to the respective AGV. Before moving to the next mission, the full path is converted as obstacle to the following missions and respective AGV. With this in mind, it is possible to coordinate the vehicles, while avoiding collisions [9] .

This algorithm is yet little explored. The only advantage reported is that it considers obstacles in order to avoid collisions, unlike A*. An example of its application is in AGV fleet management [9] .
C. Rapidly Exploring Random Tree

The Rapidly exploring Random Tree (RRT) algorithm incrementally constructs a search tree in the configuration space until the goal configuration can be connected to one of its nodes. The operation of the RRT, exemplified in Fig. 3 , involves the iterative execution of the following steps [10] :

    A random configuration, q r a n d , is sampled in the configuration space.

    The tree is searched for a configuration q n e a r , which is the nearest node in the tree to q r a n d .

    A new configuration q n e w is created by moving a predefined distance d from q n e a r in the direction of q_{rand} ·

    If q_{new} is a valid configuration that falls in C_{free} (unobstructed space), and if the local path between it and q_{near} is collision-free, then q_{new} is added to the tree as a new node and an edge is created between q_{new} and q_{near} . However, if q_{new} falls in C_{obs} (obstacle space), and if the local path between it and q_{near} has collisions, then is not created an edge between q_{new} and q_{near} .

Fig. 3.

Example of the RRT operation at an intermediate stage during its construction [10] .

Show All

These steps are repeated until the goal configuration can be connected to the tree or is reached a maximum number of iterations, or a given number of nodes in the tree, or a given running time [10] , [11] . That is, the goal is to execute the whole process from q_{init} (starting point) to q_{goal} (end point).

The most common metric for the nearest-neighbor selection is the Euclidean distance between points. In this case, the expansion pattern of the tree is modeled by the Voronoi diagram over the nodes within the tree. The probability of a node being expanded is directly proportional to the volume of its corresponding Voronoi region. Nodes that have a larger Voronoi region ( i.e. the portion of the space that is closer to the node than to other nodes of the tree) are more likely to be chosen for expansion and are referred to as major nodes. This way, the tree is pulled towards unexplored areas, spreading rapidly in the configuration space (as the Voronoi regions of samples become approximately equal in size, the exploratory behavior gradually shifts from expansion of the tree to refinement). In the case of the Euclidean metric, these nodes tend to lie on the outside of the tree during the initial exploration. Conversely, inner or minor nodes have smaller Voronoi regions and often lie on the inside of the tree. Once the tree has explored the state space, these become major nodes as the algorithm begins to fill in the space. This phenomenon of favoring some nodes over others is referred to as the Voronoi bias, and yields an initial preference towards the exploration of the state space [12] , [13] .

Summing up, the efficiency of RRT stems from the Voronoi bias property which promotes tree growth towards unexplored regions. Therefore, the key is the determination of the distance metric which computes the nearest-neighbour in the RRT algorithm [14] . In holonomic planning, the Euclidean distance is an ideal metric to generate a Voronoi bias because any node which is the closest from the sampled points can be expanded. If there exists differential constraints, however, which limit the evolution of the system states, the Euclidean distance measure fails to capture the true distance. Fig. 4 exhibits this problem. A state X r is drawn randomly in Fig. 4a . Here, Xs is an initial state of the system and X1\ldots X8 are existing nodes in the current tree. If Euclidean distance is used for the distance metric, X2 is chosen as the closest node from Xr as shown in Fig. 4b . However, this is not true for the system which has differential constraints. Instead, X4 is the closest node from Xr if the nonholonomic constraints are considered as in Fig. 4c . From this example, it can be seen that the true distance metric is extremely important to the RRT planner under differential constraints [14] .

The relative advantages of this algorithm are that it: ( i ) is successful at solving path-planning problems in high-dimensional spaces [15] ; ( ii ) can be implemented for real-time, online planning [16] ; and ( iii ) avoids wandering around in explored regions [17] . The disadvantages are that: ( i ) it is not appropriate when road planning involves narrow passages [18] ; and ( ii ) the solution obtained is sub-optimal, since the planning process is merely a random exploration of the space [9] .

The RRT algorithm has already been applied in various areas, such as, molecular biology ( [10] , [11] , [17] , [20] –), automation/robotics ( [12] , [21] ) including path planning for mobile robots ( [14] , [22] – [23] [24] [25] [26] [27] [28] [29] [30] [31] [32] [33] [34] [35] [36] [37] [38] [39] [40] [41] [42] , medicine (for steerable needles in 3D environments with obstacles [43] ) and human-system interaction [44] . The practical applications just referred are based on the RRT algorithm; however, they do not use their standard/basic version, but variants of this or the conjugation with other algorithms, in order to overcome their disadvantages and/or to be able to acquire characteristics that fit to each problem under consideration.
D. Time Windows

In dynamic routing a calculated path depends on the number of currently active AGV missions and their priorities. The Time Windows (TW) method allows to determine the shortest path using time windows ( Fig. 5 ). This method checks the mission candidate paths by using the time windows to verify if certain paths are feasible. Viability of a particular path is evaluated by a time windows insertion followed by a time windows overlap (conflict) test. In the case of conflict, the algorithm iteratively reinserts time windows until conflicts disappear or an overlap is present only on the paths origin arc, indicating that the candidate path is not feasible. The procedure is repeated for all candidate paths and the result is a set of executable paths. The final task of the algorithm is to choose the shortest one among executable paths in terms of a time required for a vehicle in mission to get from the origin to the destination arc. When a new mission is requested at a given time, is searched a idle vehicle to assign it to that mission (with an initial mission priority). As a goal of dynamic routing is to determine the shortest path for certain mission under the current state of the system, all candidate paths should be checked for feasibility [45] .

The applications areas for Time Windows encompass AGV (for dynamic routing in multi-AGV systems [45] ), logistics (in vehicle routing problem [46] – [47] [48] [49] [50] [51] [52] [53] [54] [55] [56] [57] [58] , pickup and delivery problems [59] , [60] , Home Health Care (HHC) [61] , [62] and petrol station replenishment problems [63] ).
Fig. 4.

A state Xr is drawn randomly where Xs is an initial state of the system and X1\ldots X8 are existing nodes in the current tree (a), the Euclidean distance is a ideal metric to generate Voronoi bias in holonomic planning but it does not incorporate differential constraints of the system (b) and in nonholonomic planning, a new distance metric which incorporates limitations of the system is needed to compute the real distance (c) [14] .

Show All
Fig. 5.

Example of time windows in a vector form [45] .

Show All
Fig. 6.

Example of the orderly numbered grid environment representation [64] .

Show All

According to what was described above, it is possible to verify that the Time Windows algorithm is applied in various vehicle routing problems in order to be able to optimize the solution to those problems.
E. Genetic Algorithms

Genetic Algorithms (GA) are a parallel and global search technique that emulates natural genetic operators. As it simultaneously evaluates many points in the parameter space, it is more likely to converge to the global optimal [64] .

Many path planning methods use a grid-based model to represent the environment space, leading to two possible representations: ( i ) through an orderly numbered grid, as shown in Figure 6 , or ( ii ) through the (x,y) coordinates plane [64] .
Fig. 7.

Decimal coded genes of a chromosome [64] .

Show All

A chromosome represents a candidate solution for the path planning problem. A chromosome representing a path encodes a starting node, a target node and the nodes through which the mobile robot travels. These nodes, or steps, in the path are called genes of the chromosome. A valid path consists of a sequence of grid labels which begins at the starting node and ends at the target node, as shown in Figure 7 [64] .

The initial population is generally generated randomly. Thus, some of the generated chromosomes may include infeasible paths intersecting an obstacle. An optimal, or near optimal, solution can be found by genetic operators, even though the initial population includes infeasible paths. However, this reduces the search capability of the algorithm and increases the time to find the solution. Additionally, crossover of two infeasible chromosomes may generate new infeasible paths. To solve this problem, each chromosome must be checked whether it intersects an obstacle, when generating the initial population. If it does, the intersected gene on the chromosome is changed randomly, until a feasible one is found [64] .

The optimal path may be the shortest one, or the one requiring the least time or less energy to be traversed. Generally, in path planning problems, the objective function is considered as the shortest path. In [64] , the objective function value of a chromosome used in the GA is given by Equations 4 and 5: \begin{align*} f= & \begin{cases} \sum_{i=1}^{n-1}d(p_{i},p_{i+1}), & \text{for feasible paths}\\ \sum_{i=1}^{n-1}d(p_{i},\ p_{i+1})+penalty, & \text{for infeasible paths} \end{cases} \tag{4}\\ & \quad d(p_{i},p_{i+1})=\sqrt{(x_{(i+1)}-x_{i})^{2}+(y_{(i+1)}-y_{i})^{2}} \tag{5} \end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} f= & \begin{cases} \sum_{i=1}^{n-1}d(p_{i},p_{i+1}), & \text{for feasible paths}\\ \sum_{i=1}^{n-1}d(p_{i},\ p_{i+1})+penalty, & \text{for infeasible paths} \end{cases} \tag{4}\\ & \quad d(p_{i},p_{i+1})=\sqrt{(x_{(i+1)}-x_{i})^{2}+(y_{(i+1)}-y_{i})^{2}} \tag{5} \end{align*} being, f the fitness function, p_{i} the i th gene of the chromosome, n the length of the chromosome, d the distance between two nodes, x_{i} and y_{i} the robot current position, and x_{(i+1)} and y_{(i+1)} the robot next position. The direction of the robot path is given by equation 6 [64] : \begin{equation*} \alpha=\tan^{-1}\frac{(y_{(i+1)}-y_{i})}{(x_{(i+1)}-x_{i})} \tag{6} \end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*} \alpha=\tan^{-1}\frac{(y_{(i+1)}-y_{i})}{(x_{(i+1)}-x_{i})} \tag{6} \end{equation*}

Fig. 8.

Single-point crossover [64] .

Show All

The objective function value is defined as the sum of distances between each node in a path. If there is an obstacle in the robot path, a penalty is added to the objective function value. The penalty value should be greater than the maximum path length on the environment. In order to find an optimal path, the algorithm searches for the chromosome with the least value for the objective function [64] .

The main principle of the GA is that the best genes on the chromosomes should survive and be transferred to new generations. A selection procedure needs to be done to determine the best chromosomes. This process consists in the following three steps [64] :

    Objective function values of all chromosomes are computed.

    Fitness values are assigned to chromosomes according to their objective function values. In [64] , the rank based fitness assignment is used instead of the proportional assignment method. This prevents a few better chromosomes to be dominant in the population.

    Chromosomes are selected according to their fitness values and then placed into a mating pool to produce new chromosomes.

Normally, crossover combines the features of two parent chromosomes to form two offsprings. In Fig. 8 , single-point crossover operator is illustrated, and the genes of the two “parent” chromosomes after the crossover point are changed [64] .

All candidate chromosomes in the population are subjected to the random mutation after the crossover operation. This is a random bit-wise binary complement operation or a random small change in a gene, depending on the coding of chromosomes, applied uniformly to all genes of all individuals in the population, with a probability equal to the mutation rate. The mutation operation increases the diversity of the population and avoids the premature convergence. It expands the search space to regions that may not be close to the current population, thus ensuring a global search [64] .

In conventional GA, random mutation is the most commonly used operator. However, random mutation can cause generation of infeasible paths. Even though a chromosome is feasible before the mutation operation, the new node changed by the mutation may have an obstacle and therefore it constitutes an infeasible path (see Fig. 9 ). This makes the optimization slower and increases the number of generations [64] .
Fig. 9.

Infeasible path [64] .

Show All

To overcome this problem, several studies concerned with the improvement of mutation operation have been done in the literature. The authors of those studies, as well as the method proposed by each author, are described in [64] .

GA have been applied in mobile robots ( [64] – [65] [66] [67] [68] [69] [70] ), timetabling problems ( [71] – [72] [73] ), sensor networks ( [74] ), building trade systems ( [75] ), logistics ( [76] , [77] ), automobile industry ( [78] ) and cloud computing ( [79] – [80] [81] [82] [83] ). Among the mentioned references, what is often referred to is that to increase the speed of convergence of GA and to apply them with modifications that help the case study in question.
SECTION III.
Discussion

Table I summarizes the application areas of each algorithm considered in this contribution. All studied algorithms are applied to mobile robots path planning, and there are other areas of application common to them. It is also seen that GA are used in more areas, followed by A* and RRT, and finally the TW and TEA*.

According to this survey, it was noticed that the most used algorithms for mobile robots path planning are A*, RRT, TW and AG. On the other hand, the least studied one is the TEA*, since only one case study was found in the literature ( [9] ).

Regarding their relative advantages and disadvantages, the TEA* presents advantages in relation to the A*, since it allows the planning of routes in multiple mobile robots systems. In the remaining algorithms it is difficult to ascertain their relative advantages and disadvantages, since each case study presents specific and different characteristics; however, all are adequate to solve problems of path planning in mobile robots.

According to what has been presented, it is possible to realize that the standard algorithms are often used. Typically, they are used after some improvement or in conjunction with another algorithm, according to the needs of each case study. For instance, throughout the research on GA were found cases that reconciled this type of algorithm with Time Windows ( [49] , [52] , [54] , [84] –- [85] [86] [87] [88] [89] ) and A* ( [90] ).
Table I Application areas of the algorithms

SECTION IV.
Conclusions and Future Work

This paper presented some algorithms used in the path planning of mobile robots. For each one, its operation was briefly described, some of its advantages and disadvantages were analyzed, and were presented some of its possible application areas. It was possible to conclude that there are several modifications that can be made to make each of these algorithms more efficient, and they can be associated with other algorithms to solve particular problems, as exemplified in several of the referred case studies. Next is planned to implement some of these algorithms in AGV fleets, to find out their relative advantages and disadvantages and in which situations their implementation is more adequate.

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
A Deterministic Improved Q-Learning for Path Planning of a Mobile Robot

IEEE Transactions on Systems, Man, and Cybernetics: Systems

Published: 2013
Hybrid Path Planning Algorithm Based on Membrane Pseudo-Bacterial Potential Field for Autonomous Mobile Robots

IEEE Access

Published: 2019
Show More
References
References is not available for this document.
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
