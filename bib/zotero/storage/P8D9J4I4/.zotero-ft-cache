2020 16th International Conference on Control, Automation, Robotics and Vision (ICARCV) December 13-15, 2020. Shenzhen, China
Bidirectional Homotopy-Guided RRT for Path Planning
Zhen Lin1, Yanjun Li2, Ji Xiang1, Gui Ling2,3 and Feiyang Suo2,3

Abstract— As a popular robot path planning algorithm, RRT (Rapid-exploring Random Tree) and various RRT-based extensions have achieved remarkable results. However, existing algorithms rely too much on randomness and often do not make use of known map information, this makes the growth of trees too blind. To this end, we introduce Bidirectional HomotopyGuided RRT (BH-RRT) that combines Bidirectional RRT (Bi-RRT) with information obtained from obstacle contours. Compared with the previous methods, BH-RRT can reﬂect most of the map’s information with a small number of feature points, and then form a set of points. This set can provide a better local goal point in each iteration, so that the tree can grow in a more favorable direction, rather than only being affected by the goal point. Experimental results show that BH-RRT outperforms RRT, HRRT and Bi-RRT in the success rate within a limited time.
I. INTRODUCTION
In the past two decades, considerable progress has been made in the ﬁeld of mobile robot. Path planning, as one of the prolonged topic for mobile robot research and development, widely used in various industrial ﬁelds, such as transportation [1], [2], game design [3], [4], and industrial robots [5]– [7]. The path planning algorithm of the robot is actually according to the constraints to ﬁnd an optimal or suboptimal collision-free path in the reachable area from the starting point to the end point. The efﬁciency of path planning algorithm will signiﬁcantly affect the performance of robots in completing tasks.
Path planning problems are commonly solved by gridbased searches or stochastic searches algorithms. Graphbased searches such as A* [8] and Dijkstra [9] has been studied for a long time, which can discretely ﬁnd the best solution if a solution exists, otherwise returns failure. But these graphbased algorithms do not scale well to the problem of large state space, due to memory space and computation time grow exponentially. Stochastic searches, such as Rapid-exploring Random Tree (RRT) [10], Probabilistic Roadmap (PRM) [11], use sample-based methods to avoid discretization of state space and provide a weaker form of completeness.
*This work is supported by the Key R&D Program of Zhejiang Province (2019C02002), the Fundamental Research Funds for the Central Universities (2018XZZX001-06).
1College of Electrical Engineering, Zhejiang University, Hangzhou 310027, China
2School of Information and Electrical Engineering, Zhejiang University City College, Hangzhou 310015, China
3College of Control Science and Engineering, Zhejiang University, Hangzhou 310027, China
Emails: 21910136@zju.edu.cn, liyanjun@zucc.edu.cn, jxiang@zju.edu.cn, 21932101@zju.edu.cn, 21932116@zju.edu.cn.Ji Xiang is the corresponding author.

Among these sampling-based path planning algorithms, the RRT algorithm is one of the most representative, and its variants [12]–[15] achieve efﬁcient search and planning in various applications.
Utilizing the information of known obstacles to drive the growth of RRT has made some progress. Voronoi-graph based method is widely used [16]–[19], which divides the obstacle space into many connected sub-regions. Given a starting point and an ending point, the subregion to which they belong can be determined and collision free paths can be quickly planned along the constructed edges. However, it needs a lot of extra time to generate and reprocess the Voronoi graph, and the generated paths sometimes introduce excessive additional costs due to its heavy reliance on obstacle information. In [20], [21], the topological constraints contained in homotopy information are used to limit the growth of the tree, and the reference frames that segment different homotopy classes are used to restrict the tree to belong to the same homotopy class as the pre-input path, thus reducing the sampling range and speeding up the search. However, these methods can only be carried out in the case of pre-input, too dependent on human participation.
In this paper, we present an efﬁcient path planning method called Bidirectional Homotopy-Guided RRT (BH-RRT) that combines Bidirectional RRT (Bi-RRT) [22]–[26] and information obtained from obstacle contours. BH-RRT uses homotopy information to determine an invalid triangle area, and the feature points on the obstacles are used to perform sampling bias. Different from some previous methods, BHRRT introduces points on obstacles to guide the tree to avoid the nearest obstacle, instead of simply using the goal point to guide the growth of the tree. Such a design makes the node more likely to explore the local optimal path, thereby reducing the number of nodes.
The remainder of this paper is organized as follows. In section II, we introduce the speciﬁc contents of RRT algorithm and Bi-RRT algorithm, which are both the basis of the proposed BH-RRT algorithm. Section III introduce proposes a new method to improve search efﬁciency, and introduces the concept of feature points. Section IV introduces the algorithm of BH-RRT and some details. Section V conducts experiments on different complex environments, and compares the results of different algorithms. Finally, in Section VI, we summarize this paper and put forward the prospect of future path planning.

978-1-7281-7709-0/20/$31.00 ©2020 IEEE

333

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

Fig. 1. Node generation using generic RRT

this is depicted in Fig. 2. The two trees Ta and Tb (starting from xinit and xgoal respectively) are maintained at all times until they become connected and a solution is found.
Algorithm 2 depicts the algorithmic of the steps involved in Bi-RRT. In each iteration, we select a random point xrand, and the nearest neighbor from the Ta to xrand is termed as xnearest. Then xnew generated according to xrand and xnearest, and if collision check is false, added to Ta. The nearest neighbor from the Tb to xnew is termed as xnearest1. After that xnearest1 is going to keep expanding towards where xnew is until connected or encounter obstacles. At the end of each iteration, the tree with more nodes becomes Tb in the next iteration, and the other tree becomes Ta.

II. BACKGROUND
We brieﬂy review RRT algorithm and its bi-directional structure in this section.
A. RRT Algorithm
Standard RRTs algorithm constructs a tree using random sampling in search space, the tree starts from the initial point xinit, and expands to ﬁnd the collision-free path toward the goal point xgoal, as shown in Fig. 1. Algorithm1 presents its pseudo code. In the initialization, xinit is stored in the vertices set V , and the edges set E is set as empty, V and E together constitute tree T . Further detail of some major functions is described as the following:
RandomSample : For a given space conﬁguration X, randomly select a point xrand in the obstacle-free state space Xf ree .
N earest : Find the nearest node xnearest to xrand in the tree T according to a cost function.
Steer : Return a control input in the direction from xnearest towards xrand at an increment distance ∆q.
Collosion f ree : Determine whether the given path from xnearest towards xrand passes through obstacle region Xobs or not.
InsertN ode : Add the node xnew to vertices set V and add the edge that connect it with its parent xmin to edges set E, where V and E both in tree T .

Algorithm 1 Basic RRT(xinit)

1: V ← {xinit}; E ← ∅; T ← (V, E)

2: for k = 0 to K do

3: xrand ← RandomSample() 4: xnearest ← N earest(xrand, T )

5: xnew ← Steer(xrand, xnearest)

6: if Collision f ree(xnew) then

7:

T ← InsertN ode(xnew, T )

8:

if xnew == xgoal then

9:

break

10: return T

Fig. 2. Bidirectional RRT

Algorithm 2 Bidirectional RRT(xinit)

1: Va ← {xinit}; Ea ← ∅; Ta ← (Va, Ea)

2: Vb ← {xgoal}; Eb ← ∅; Tb ← (Vb, Eb) 3: for k = 0 to K do

4: xrand ← RandomSample()

5: xnearest ← N earest(xrand, Ta) 6: xnew ← Steer(xrand, xnearest) 7: if Collision f ree(xnew) then

8:

Ta ← InsertN ode(xnew, Ta)

9:

xnearest1 ← N earest(xrand, Tb)

10:

xnew1 ← Steer(xnew, xnearest1)

11:

if Collision f ree(xnew1) then

12:

InsertN ode(xnew1, Tb)

13:

while not xnew1 == xnew do

14:

xnew2 ← Steer(xnew, xnew1)

15:

xnew1 = xnew2

16:

if Collision f ree(xnew1) then

17:

InsertN ode(xnew1, Tb)

18:

else break

19:

if xnew1 == xnew then

20:

return Ta

21: if len(Va) > len(Vb) then

22:

Swap(Ta, Tb)

B. Bidirectional RRT
The Bidirectional RRT (Bi-RRT) algorithm starts by growing two RRTs, one from xinit and another from xgoal , and

III. HOMOTOPY BIAS
This section mainly discusses how to use homotopy information for sampling range analysis, and only the two dimensional state space is taken into considered.

334

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

xinit. The obstacle Xojbs which contain the points obsj1, obsj2 is our direct obstacle, where pj ∈ L(obsj1, obsj2). According to the symmetry, we can also select the direct obstacle Xoibs

of xgoal. Therefore, XS can be regarded as composed of

XS1 xinit

,aonbdsj1XaSn2d,

owbhsej2r,eanXdSX1 iSs2

a triangular area composed of is a triangular area composed

of xgoal, obsi1 and obsi2. Then we can ﬁnd the optimal feature

points obs∗1, obs∗2, obs∗3 and obs∗4 on the obstacles through

the approach proposed in III-A.

Fig. 3.

A. Single obstacle
Fig. 3 describes a path planning problem with known positions of starting point xinit, ending point xgoal, and the only one obstacle Xobs in the plane space. Then the coordinate system with the midpoint xctr of xinit and xgoal as the origin is set up, where the direction pointing to xgoal is the positive direction of the x-axis. Let obs1 and obs2 be two points arbitrarily taken on an obstacle. If there is a solution, let Pr(·) be the probability of getting the point on the optimal path in any homotopy class through random sampling in the plane space. Then we can get the following:

P r(Xfree − S ) = Xfree ≥ 1,

(1)

P r(Xfree)

Xfree − S

where S be the set of all points in the area XS formed by xinit, xgoal, obs1 and obs2. Since the plane space is uniformly distributed, the size of point set S is proportional
to XS . XS can be calculated by

1

XS = 2 d(xinit, xgoal)|y(obs1) − y(obs2)|,

(2)

where y(·) is the value of the point in the y-axis direction
of the coordinate system.
Since our goal is to maximize the effect shown in (1), we need to maximize XS . The optimal feature points on the obstacle that maximize and minimize y(·) can be found as obs∗1 and obs∗2, then obs1 and obs2 are replaced by them respectively.

B. Multiple obstacles
More general, we extend this method to the state space with multiple obstacles Xobs = {Xo1bs, Xo2bs, ..., Xonbs}, as shown in Fig. 4. First, randomly take two points obsi1, obsi2 on each obstacle Xoibs ∈ Xobs. Then, the intersection I can be obtained by
I = {∀Xoibs ∈ Xobs, L(obsi1, obsi2) ∩ L(xinit, xgoal)}. (3)
where L(·, ·) be the line segment between two points. There may be many elements in I, but in order to simplify subsequent calculations, we will select a point pj ∈ I closest to

Fig. 4.
IV. BI-DIRECTIONAL HOMOTOPY-GUIDED RRT
For path planning based on the bidirectional tree, in each iteration, the starting point of local path xinit and the target point of local path xgoal are different, and it requires a lot of calculation to constantly update the optimal feature points on each obstacle that maximize XS given in (2) as the coordinate system is constantly changing. However, it can be seen from (1) that even if the two feature points are randomly selected, it can have a certain effect. Therefore, we only select the optimal feature points on each obstacle in the initial stage, as is shown in Fig. 5.
More details here are shown about how to select a better local goal point xgoal by Algorithm 3. According to the method in III-B, we can get the obstacle Xocbs in the direction from the starting point to the target point, where {obsc1 ,obsc2} ∈ Xocbs (Obs Algorithm 3), and Xocbs is likely to be the obstacle closest to the starting point xinit of the local path. How to use obstacle Xocbs to determine the more reasonable local goal point xgoal is a key point, and in this paper we simply choose among obsc1 ,obsc2 and xgoal. This idea is the core part of the method in this paper.
Algorithm 3 New Goal 1: Input:xinit, xgoal 2: Output:xinit, xgoal 3: while Obs(xinit, xgoal) = ∅ do 4: obsc1, obsc2 ← Obs(xinit, xgoal) 5: xgoal, ch ← Best(obsc1, obsc2, xgoal) 6: if ch == 1 and P2(xgoal) == 2 then 7: xgoal ← N earest(xinit, Tb) 8: xinit ← N earest(xgoal, Ta) 9: xgoal ← xgoal

335

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

Fig. 5. Feature points select and priority setting of BH-RRT. The feature
points (yellow) are all selected in the initial stage according to the xinit and xgoal, which may not be consistent with the optimal feature points when the starting and ending points of the local path are xinit and x1. Each black bracket contain the initial priority of the feature point for Ta and Tb respectively, while the red one shows the priority change caused by the Tb’s growth and proximity to the feature point C.

As shown in Fig. 5, we providing an initial priority for each feature point, and it is a critical step. For feature points that are not close to boundaries or other obstacles, set its priority to 0 to indicate the highest priority, otherwise, the priority of the feature points that will lead the tree to the narrow channel is set to 1. Here we set the relative distance that can be considered close to the boundary and other obstacles to within 2 steps. If a feature point is approached by the node which lead by itself, i.e. the distance between the two is within a predetermined range, the priority of the feature point is reduced to 2. While the lowest priority 3 is set for those feature points that are already on the boundary and do not have the possibility to guide the growth of Bidirectional tree.
Now we will explain how to choose a new goal point xgoal for the local path planning. A heuristic cost function Cost(·) is introduced to calculate the heuristic cost of obsc1 and obsc2:

Cost(p) = d(xnew, p) + d(xnearest1, p)

(4)

The lower cost point is denoted as L and another point
is denoted as H. Then xgoal is updated according to the following Table I:

TABLE I

P1 (H ) 0 1 2
3

P1(L) 0 1
LH LL LL LL

2
H H xgoal xgoal

3
H H xgoal xgoal

If xgoal remains unchanged, ch = 0, otherwise ch = 1 (Best Algorithm 3). And P1(·) be the priority of the feature point for the tree. It should be pointed out that for
bidirectional trees, each side of the tree has its own priority.
In the bidirectional tree structure, in order to improve efﬁciency, xinit and xgoal are usually the closest points on the two trees to each other. And we use the method proposed

Algorithm 4 Bi-directional Homotopy-Guided RRT(xinit)

1: Input:R, xinit, xgoal, Xobs, max

2: Output:Ta, Tb

3: Va ← {xinit}; Ea ← ∅; Ta ← (Va, Ea)

4: Vb ← {xgoal}; Eb ← ∅; Tb ← (Vb, Eb)

5: for k = 0 to max do

6: xrand ← RandomSample()

7: xnearest ← N earest(xrand, Ta)

8: xnew ← Steer(xrand, xnearest)

9: if Collision f ree(xnew) then

10:

Ta ← InsertN ode(xnew, Ta)

11:

xnearest1 ← N earest(xnew, Tb)

12:

xnew, xnearest1 ←N ew Goal(xnearest1, xnew)

13:

xnew1 ← Steer(xnew, xnearest1)

14:

if Collision f ree(xnew1) then

15:

InsertN ode(xnew1, Tb)

16:

while not xnew1 == xnew do

17:

xnew2 ← Steer(xnew, xnew1)

18:

xnew1 = xnew2

19:

if Collision f ree(xnew1) then

20:

InsertN ode(xnew1, Tb)

21:

else break

22:

if xnew1 == xnew then

23:

if xnew in R then

24:

P2(xnew) = 2

25:

else

26:

return Ta,Tb

27: Swap(Ta, Tb)

above to update xgoal, so this will also cause xinit to update. We just update xinit to the point closest to xgoal on the tree where it is located, and after the loop structure, the ﬁnal xinit is denoted as xinit.
The BH-RRT algorithm starts by growing two RRTs, looks like Bi-RRT in Section II-B, one from xinit and another from xgoal. Two trees Ta and Tb (starting from xinit and xgoal respectively) are maintained at all times until they become connected and a solution is found.
The BH-RRT has presented in Algorithm 4. HRRT is a single-tree version of BH-RRT, and the speciﬁc algorithm can be derived according to Algorithm 4, it would not be discussed in detail here.
V. SIMULATION RESULTS
BH-RRT and HRRT were compared to RRT and Bi-RRT on a variety complex path planning problems Fig. 6, and we show the performance of different algorithms in three scenarios, and from the top row to the bottom row are Scenario 1, Scenario 2, Scenario 3, respectively. And the results obtained by each algorithm are in a separate column, for the bidirectional tree algorithm, we use different colors to distinguish the trees.
In Table II, the details corresponding to the three scenarios considered are captured.
For each scenario, above algorithms are executed to determine the success rate within the time limit, and the trees

336

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

Fig. 6. Planning results of different algorithms(The red box indicates that this is the algorithm we proposed). The black dots represent the starting and ending points, and for the bidirectional versions, we use red and blue to represent different trees. Most of these results are selected from the samples where the algorithms successfully implement the path planning, but due to time constraints, the RRT algorithm has a high probability of not being able to plan the results in these scenarios.

(a) Scenario 1

(b) Scenario 2 Fig. 7.

(c) Scenario 3

(d)

TABLE II DETAILS OF THE TEST SCENARIOS

Sl. No Scenario 1 Scenario 2 Scenario 3

Start Point (x,y) (0,300) (0,100) (1100,50)

Target Point (x,y) (1200,300) (1200,100) (200,500)

Step Size 5 5 5

generated by different algorithms. The size of scenarios is 1200×600. We set a maximum iteration limit of 50000 and the bias towards the goal was set to 0.5. The maximum time for a single run is 150 seconds. On this basis, the results of RRT, HRRT, Bi-RRT and BH-RRT algorithms are compared.

In Fig. 6, the results of Scenario 1 corresponding to above algorithms are presented. Note that, compared with RRT, HRRT makes use of feature points on obstacles to enable its tree to expand to most areas of the map faster, while BiRRT makes use of information interaction between the two trees to achieve efﬁcient synchronous promotion of nodes. BH-RRT combines the advantages of these two, so that the generated tree will neither rely on random search or continuous approach along the wall when encountering large obstacles like Bi-RRT, nor generate a large number of nodes in unnecessary areas like HRRT. The results corresponding to Scenario 2 and Scenario 3 are presented in Fig. 6, which are similar to the result of Scenario 1.

337

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

Fig. 7 depicts the relationship between the success rate of each algorithm and the running time in three scenarios. We notice that the results are different in each scenario, HRRT and Bi-RRT under different scenarios each have advantages, but BH-RRT and RRT were basically the best and the worst, respectively. In Scenario 3, as shown in Fig. 7(c), when there are many obstacles but no narrow channels, the HRRT performance is even close to BH-RRT, because despite the introduction of feature points, HRRT still has a strong randomness, which is very important in this kind of environment. And the performance of Bi-RRT in Scenarios 2 is better, as shown in Fig. 7(b), this is because in between the two trees don’t have many large obstacles bidirectional search can greatly improve efﬁciency.
VI. CONCLUDE
In this paper, we proposed an efﬁcient path planning method. The proposed method estimates a better local goal point from feature points generated from the contours of obstacles and original local goal point. Because of the property of RRT, the probability completeness of the planned path are guaranteed. Experimental results demonstrate that our method outperforms other methods and can have a high success rate in a short period of time. Extending our method into a higher dimensional space and taking semantic context of the environment into consideration are our future works.
REFERENCES
[1] A. M. de Souza, R. S. Yokoyama, G. Maia, A. Loureiro and L. Villas, ”Real-time path planning to prevent trafﬁc jam through an intelligent transportation system,” 2016 IEEE Symposium on Computers and Communication (ISCC), Messina, 2016, pp. 726-731.
[2] Hyeonbeom Lee, Hyoin Kim and H. J. Kim, ”Path planning and control of multiple aerial manipulators for a cooperative transportation,” 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Hamburg, 2015, pp. 2386-2391.
[3] G. Foderaro, A. Swingler and S. Ferrari, ”A model-based cell decomposition approach to on-line pursuit-evasion path planning and the video game Ms. Pac-Man,” 2012 IEEE Conference on Computational Intelligence and Games (CIG), Granada, 2012, pp. 281-287.
[4] Qingchun Meng et al., ”Game strategy based on fuzzy logic for soccer robots,” Smc 2000 conference proceedings. 2000 ieee international conference on systems, man and cybernetics. ’cybernetics evolving to systems, humans, organizations, and their complex interactions’ (cat. no.0, Nashville, TN, 2000, pp. 3758-3763 vol.5.
[5] Z. Doulgeri and T. Matiakis, ”A web telerobotic system to teach industrial robot path planning and control,” in IEEE Transactions on Education, vol. 49, no. 2, pp. 263-270, May 2006.
[6] So¨ren Larsson, J.A.P. Kjellander, Path planning for laser scanning with an industrial robot, Robotics and Autonomous Systems, Volume 56, Issue 7, 2008, Pages 615-624, ISSN 0921-8890.
[7] Bing Fu, Lin Chen, Yuntao Zhou, Dong Zheng, Zhiqi Wei, Jun Dai, Haihong Pan, An improved A* algorithm for the industrial robot path planning with high success rate and short length, Robotics and Autonomous Systems, Volume 106, 2018, Pages 26-37, ISSN 09218890.
[8] P. E. Hart, N. J. Nilsson, and B. Raphael, “A formal basis for the heuristic determination of minimum cost paths,” TSSC, 4(2): 100–107, Jul. 1968
[9] Dijkstra, E. W. 1959. A note on two problems in connexion with graphs. Numerische Mathematik 1:269–271.
[10] Karaman, S. and Frazzoli, E. (2011) ‘Sampling-based algorithms for optimal motion planning’, The International Journal of Robotics Research, 30(7),
[11] L. E. Kavraki, P. Svestka, J.-C. Latombe, and M. H. Overmars, ”Probabilistic roadmaps for path planning in high-dimensional conﬁguration spaces”, TRA, 12(4): 566–580, 1996.

[12] J. J. Kuffner and S. M. LaValle, ”RRT-connect: An efﬁcient approach to single-query path planning,” Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065), San Francisco, CA, USA, 2000, pp. 995-1001 vol.2.
[13] Y. Abou El Majd, H. E. Ghazi and T. Nahhal, ”PaRRT: Parallel rapidly exploring random tree (RRT) based on MapReduce,” 2017 International Conference on Electrical and Information Technologies (ICEIT), Rabat, 2017, pp. 1-5.
[14] C. Moon and W. Chung, ”Kinodynamic Planner Dual-Tree RRT (DTRRT) for Two-Wheeled Mobile Robots Using the Rapidly Exploring Random Tree,” in IEEE Transactions on Industrial Electronics, vol. 62, no. 2, pp. 1080-1090, Feb. 2015.
[15] L. Ma, J. Xue, K. Kawabata, J. Zhu, C. Ma and N. Zheng, ”A fast RRT algorithm for motion planning of autonomous road vehicles,” 17th International IEEE Conference on Intelligent Transportation Systems (ITSC), Qingdao, 2014, pp. 1033-1038.
[16] S. Garrido, L. Moreno, M. Abderrahim and F. Martin, ”Path Planning for Mobile Robot Navigation using Voronoi Diagram and Fast Marching,” 2006 IEEE/RSJ International Conference on Intelligent Robots and Systems, Beijing, 2006, pp. 2376-2381.
[17] S. R. Lindemann and S. M. LaValle, ”Incrementally reducing dispersion by increasing Voronoi bias in RRTs,” IEEE International Conference on Robotics and Automation, 2004. Proceedings. ICRA ’04.
[18] A. Shkolnik and R. Tedrake, ”Path planning in 1000+ dimensions using a task-space Voronoi bias,” 2009 IEEE International Conference on Robotics and Automation, Kobe, 2009, pp. 2061-2067.
[19] D. Kim, J. Lee and S. Yoon, ”Cloud RRT*: Sampling Cloud based RRT*,” 2014 IEEE International Conference on Robotics and Automation (ICRA), Hong Kong, 2014, pp. 2519-2526.
[20] V. Narayanan, P. Vernaza, M. Likhachev and S. M. LaValle, ”Planning under topological constraints using beam-graphs,” 2013 IEEE International Conference on Robotics and Automation (ICRA), Karlsruhe, 2013, pp. 431-437.
[21] D. Yi, M. A. Goodrich and K. D. Seppi, ”Homotopy-aware RRT*: Toward human-robot topological path-planning,” 2016 11th ACM/IEEE International Conference on Human-Robot Interaction (HRI), Christchurch, 2016, pp. 279-286.
[22] J. A. Starek, J. V. Gomez, E. Schmerling, L. Janson, L. Moreno and M. Pavone, ”An asymptotically-optimal sampling-based algorithm for Bidirectional motion planning,” 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Hamburg, 2015, pp. 20722078.
[23] A. H. Qureshi et al., ”Adaptive Potential guided directional-RRT,” 2013 IEEE International Conference on Robotics and Biomimetics (ROBIO), Shenzhen, 2013, pp. 1887-1892.
[24] C. Moon and W. Chung, ”Kinodynamic Planner Dual-Tree RRT (DTRRT) for Two-Wheeled Mobile Robots Using the Rapidly Exploring Random Tree,” in IEEE Transactions on Industrial Electronics, vol. 62, no. 2, pp. 1080-1090, Feb. 2015.
[25] J. J. Kuffner and S. M. LaValle, ”RRT-connect: An efﬁcient approach to single-query path planning,” Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065), San Francisco, CA, USA, 2000, pp. 995-1001 vol.2.
[26] D. Ghosh, G. Nandakumar, K. Narayanan, V. Honkote and S. Sharma, ”Kinematic Constraints Based Bi-directional RRT (KB-RRT) with Parameterized Trajectories for Robot Path Planning in Cluttered Environment,” 2019 International Conference on Robotics and Automation (ICRA), Montreal, QC, Canada, 2019, pp. 8627-8633.

338

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on August 11,2022 at 08:44:04 UTC from IEEE Xplore. Restrictions apply.

