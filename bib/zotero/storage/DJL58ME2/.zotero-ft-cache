IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 100%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
Exact Reactive Receding Horizon Motion Planning for Aerial Vehicles
Publisher: IEEE
Cite This
PDF
  << Results   
Indrajeet Yadav ; Herbert G. Tanner
All Authors
View Document
75
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Overview of the Approach
    III.
    Quadrotor Dynamics and Control
    IV.
    The Global Planner
    V.
    The Local Planner

Show Full Outline
Authors
Figures
References
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This article presents a motion planning strategy that integrates a reactive receding horizon local trajectory generation methodology with a navigation function based glob... View more
Metadata
Abstract:
This article presents a motion planning strategy that integrates a reactive receding horizon local trajectory generation methodology with a navigation function based global planner to guarantee that a quadrotor type mav navigating in partially-known cluttered environment can reach its goal. The environment is partially known in the sense that there can be obstacles which are not a priori known to be included in the navigation function construction and used by the global planner. These obstacles are avoided reactively at the level of the local planner, which reacts to sensing information within the Field of View (fov) of the onboard sensors and keeps generating dynamically feasible safe trajectories along the segments generated by the global planner. The proposed motion planning strategy combines the advantages of global and reactive aerial navigation, producing locally optimal (in a minimum-jerk sense) vehicle motion. The effectiveness of the planner is demonstrated through realistic ros-Gazebo simulations.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20902088
DOI: 10.1109/ICUAS51884.2021.9476806
Publisher: IEEE
Conference Location: Athens, Greece
Funding Agency:
Contents
SECTION I.
Introduction

Research advances over the last decade have enabled the use of quadrotor-type micro aerial vehicless ( mav s) in various application areas where accessibility of terrain or complexity of the environment pose challenges to the kind of device that can be successfully deployed. The agility, affordability and currently available onboard computation capability make modern quadrotors an attractive choice in applications ranging from surveillance, mapping, precision agriculture, environmental monitoring, and security. The industry standard at this time in terms of autonomous mav navigation capabilities is the capacity to track a set of predefined trajectory waypoints without, however, any particular attention to the surrounding workspace. A priori information about the vehicle's workspace can be used to make a map and thus help the vehicle navigate in constrained environments. Environment topology information, however, is often incomplete. Recent relevant research literature focuses on building (or updating) a local environment map of this workspace using an onboard perception stack [7] , [17] .

A reactive local trajectory generation, integrated within a receding horizon scheme, has been shown to permit safe mav navigation in unknown environments [24] . State of the art trajectory generation and control algorithms that can be used for this purpose are based on the idea of generating piece-wise polynomial in time trajectories [14] , [18] , which can then be faithfully followed using a differential-geometric trajectory tracking control design [10] . Still, there are several implementation issues which can compromise navigation mission success, and ensuring both convergence and safety requires addressing several open research questions [2] .

Motion planners for mav s, particularly those applicable to deployments in unknown environments, often compute using a grid-based representation of the environment [7] , [16] . Such planners attempt to compensate for the incomplete environment information through onboard sensors like a 3D LiDAR, to generate a safe corridors through the environment and force the mav to stay within that corridor [6] . One way to navigate to configurations outside the mav sensor range, is to use a sequence of predefined waypoints. One such approach uses knowledge of obstacle location and geometry, and locally decomposes the available free space into convex polyhedra, amongst which a safe path is drawn [9] . Variants of such approaches [12] consider workspace representations in the form of a 3D grid map with uniform voxels, and create a convex safe flight corridor ( sfc ). Recent reactive motion planning algorithms include lightweight egospace-based techniques extended to capture the mav configuration dynamics [4] , and approaches that reactively sample safe trajectories in the fov of the mav , thus decoupling local obstacle avoidance from global guidance [20] .

Concerns related to most grid or sampling-based motion planning algorithms is that no guarantees for convergence to the navigation goal can be provided, and that on-line map building does not scale well computationally as the size of the workspace increases. Receding horizon planning schemes circumvent the latter limitation by building only a local map. Still, however, it is not clear if convergence can be guaranteed at all using purely local and reactive planning. Some algorithms empirically demonstrate convergence [24] , without, however, any formal guarantee.

Navigation functions [19] present an closed-loop motion planning and control strategy which offers formal and deterministic guarantees of convergence and safety. The methodology has been extended to cover cases of moving destinations [11] and obstacles [3] . Parallel notable extensions along a reactive navigation direction include methodologies for online construction and update of the navigation function based on sensory input [1] , [22] , including approaches utilizing deep neural networks for the identification of previously unknown obstacles. Such approaches have been successfully tested on fully actuated or differential drive robots at relatively low speeds; their applicability to and fast moving mav s, which have underactuated and high order dynamics, remains to be demonstrated. There is some early and preliminary work on mav motion planning and flight control using navigation functions [23] but safe autonomous flight in partially known environments remains an open.

This paper attempts to close this gap. While receding horizon based local planners [24] do not furnish any provable guarantee of the convergence or the completeness (or even exactness) and are prone to get trapped in local minima due to lack of knowledge of the environment, a navigation function-based reactive planning [23] can compensate despite not being designed for higher dimensional systems such as those of quadrotors. Under the assumption that some key, high-level, features of the environment topology which can typically allow a local planner to fail are known, the paper, as its key contribution, presents a cascaded mav motion planning approach in which a navigation function-based global planner repeatedly generates a high level motion plan, which is then executed at the low-level by a model predictive control ( mpc )-type local planner that fully incorporates the nonlinear vehicle dynamics [24] . The local planner utilizes a 3D point-cloud generated by an onboard rgb-d camera to select a (probabilistically optimal) safe path within the field of view and then fits a minimum jerk trajectory to it. The key advantage of this approach is that it combines the best of reactive and deliberate motion planning; the navigation function-based global planner closes the planning loop and guarantees convergence as long as unknown obstacles represent local and isolated environmental features, while the local planner fully incorporates the nonlinear dynamics and reactively accounts for local collision avoidance. The algorithm have been tested in realistic ros-gazebo simulations using RotorS package [5] .
SECTION II.
Overview of the Approach

Figure 1 illustrates the architecture of the motion planning and control system. The arrows indicate the direction of information flow. Point-cloud data from the rgb-d sensor are utilized to frame the obstacle-free portion of the workspace and encode it as a set of rays cast from the rgb-d sensor's focal point to the edge of its fov .
Fig. 1: - Block diagram of the motion planning and control architecture.
Fig. 1:

Block diagram of the motion planning and control architecture.

Show All

The computation steps involved in the reported cascaded planning approach are (i) A priori information about the mav 's workspace is used to construct a navigation function; (ii) the local planner operating at 15Hz takes the pointcloud information from rgb-d sensor and shares the mav 's current location and desired global goal with the global planner; (iii) the global planner receives this information and uses the gradient of the navigation function to construct a segment of a feasible path connecting current mav configuration to the global goal (assuming no unknown obstacles are on that path); (iv) the local planner receives the path segment and generates a dynamically feasible minimum-jerk trajectory that fits on it tightly; and finally, (v) a small initial component of that minimum-jerk reference trajectory is faithfully tracked by a provably stable differential-geometric tracking controller operating at 100Hz, which starts steering the quadrotor along its way to the path segment in the fov . Once this process is completed, the cycle closes and repeats from step (ii).

In a typical receding horizon fashion, before the end of that initial segment is reached, the global planner uses updated quadrotor position to construct a new path segment and the local planner collects the updated point-cloud information to complete the generation of new trajectory, and transitions smoothly between reference trajectory segments. The replanning and trajectory tracking process repeats until the final static destination is reached. On board state estimation runs independently of the planners and supplies the position information to the mav at 100Hz.
SECTION III.
Quadrotor Dynamics and Control

The quadrotor is modeled as a rigid body evolving in SE(3). Let m and J denote its mass and moment of inertia, respectively, and x = ( x , y , z ) T and v = x denote its 3d position and velocity in the inertial frame. Let R be the rotation matrix from the body-fixed frame to the inertial frame, and Ω be the mav 's angular velocity in the body-fixed frame. We denote ⋅ ^ the skew symmetry operation, and write the gravitational acceleration vector and the unit vector along the inertial vertical as g = ( 0 , 0 , g ) T , and e 3 = ( 0 , 0 , 1 ) T , respectively. The control inputs to the quadrotor are the (scalar) thrust f and the (vector) moment M, both of which are bounded (cf. [15] ). the constraint on the latter, can be shown to translate to a bound on angular velocity:
f min ≤ f ≤ f max ∥ Ω ∥ ≤ Ω max (1a) (1b)
View Source Right-click on figure for MathML and additional features. \begin{align*} &f_{\min}\leq f\leq f_{\max}\tag{1a}\\ &\Vert\Omega\Vert\leq \Omega_{\max}\tag{1b} \end{align*}

With these in place, the dynamics of the mav are
x ˙ = v , R ˙ = R Ω ^ , m   v ˙ = f R   e 3 − m   g J Ω ˙ + Ω × J Ω = M (2a) (2b)
View Source Right-click on figure for MathML and additional features. \begin{align*} \dot{\mathrm{x}}=\mathrm{v},\quad &m\ \dot{\mathrm{v}}=f\, \mathbf{R}\ \mathrm{e}_{3}-m\ \mathrm{g}\tag{2a}\\ \dot{\mathbf{R}}=\mathbf{R}\, \hat{\Omega},\quad&\mathbf{J}\, \dot{\Omega}+\Omega\times \mathbf{J}\, \Omega=\mathrm{M}\tag{2b} \end{align*}

The control law for this system is designed based on a (differential) geometric method [10] with minor modifications. To examine the control strategy in more detail, consider a smooth position reference trajectory x d ( t ) ∈ R 3 . From here one can construct [10] the desired rotation matrix R d and angular velocity Ω d ; here, however, we select for the yaw angle ψ the direction b 1 d = ( cos ψ , sin ψ , 0 ) T , perpendicular to the stabilizing direction. The tracking errors in position e x , velocity e v , orientation e R , and angular rate e Ω are
e x e R = x − x d   e v = x ˙ − x ˙ d = 1 2 ( R T d R − R T R d ) e Ω = Ω − R T R d Ω d
View Source Right-click on figure for MathML and additional features. \begin{align*} \mathrm{e}_{\mathrm{x}}&=\mathrm{x}-\mathrm{x}_{d}\qquad\qquad\qquad\ \quad\mathrm{e}_{\mathrm{v}}=\dot{\mathrm{x}}-\dot{\mathrm{x}}_{d}\\ \mathrm{e}_{R}&=\frac{1}{2}(\mathbf{R}_{d}^{\mathrm{T}}\mathbf{R}-\mathbf{R}^{\mathrm{T}}\mathbf{R}_{d})\qquad \mathrm{e}_{\Omega}=\Omega-\mathbf{R}^{\mathrm{T}}\mathbf{R}_{d}\Omega_{d} \end{align*}

Picking positive control gains k x ,   k v ,   k R and k Ω , the control inputs can be constructed as
f M = − k x e x − k v e v + m g + m x ¨ d , = k R e R + k Ω e Ω + Ω × J Ω
View Source Right-click on figure for MathML and additional features. \begin{align*} f&=- k_{x}\mathrm{e}_{\mathrm{x}}- k_{v}\mathrm{e}_{\mathrm{v}}+m\mathrm{g}+m\ddot{\mathrm{x}}_{\mathrm{d}},\\ M&= k_{R}\mathrm{e}_{\mathrm{R}}+ k_{\Omega}\mathrm{e}_{\Omega}+\Omega\times \mathbf{J}\Omega \end{align*} allowing one to achieve exponentially stable tracking behavior for initial attitude error less than π 2 , and almost global exponential stability otherwise [10] .

SECTION IV.
The Global Planner

A navigation function [19] is a real-valued map V : F → R , constructed on the mav 's free configuration space F that when tuned appropriately has a unique minimum at the desired goal configuration and is uniformly maximal over the boundary of F . The global planner used in this paper utilizes a navigation function where known obstacles are represented as rounded parallelepipeds (aka squircles) [11] . Since in the context of this method, the mav is to be represented by a point x in F , the volume of the mav is taken into account in planning by inflating the known obstacles by an appropriate safety margin.

Let x ( t ) denote the position of the mav in the map's inertial frame and x g ( t ) that of the (possibly moving) target at time t , both assumed in the interior of the free space F . For the purposes of constructing the navigation function, x ( t ) and x g ( t ) are assumed known; the mav configuration x ( t ) is made available through an onboard state estimation algorithm, while the target configuration x g ( t ) is assumed at this time to be supplied explicitly.

In this variant of navigation functions [11] the vehicle is not supposed to collide or overlap with its target, but rather to track it from a selected desired distance r . In this light, we take r to be the radius of the spherical bubble around the target x g and define the goal region for navigation as the area minimizing the time varying goal function
J ( x , x g ) = ∥ x − x g ∥ 2 − r 2 (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*}J(\mathbf{x},\mathbf{x}_{g})=\Vert \mathbf{x}-\mathbf{x}_{g}\Vert^{2}-r^{2}\tag{3}\end{equation*}

It has been shown [11] , [21] that for a suitably selected obstacle function β ( x ) and a suitably large parameter λ ∈ R + , there exists a positive number N such that ∀ κ ≥ N ,
φ ~ ( x , x g ) = J ( x , x g ) [ J ( x , x g ) κ + λ β ( x ) ] 1 / κ (4)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\tilde{\varphi}(\mathbf{x},\mathbf{x}_{g})=\frac{J(\mathbf{x},\mathbf{x}_{g})}{[J(\mathbf{x},\mathbf{x}_{g})^{\kappa}+\lambda\, \beta(\mathbf{x})]^{1/\kappa}}\tag{4}\end{equation*} has navigation function properties—with the only difference being that destination configurations are degenerate—in sphere worlds [21] as well as sphere worlds [11] . The parameter λ ≠ 1 has been utilized [21] to facilitate tuning.

Assume now that the (known) obstacle collection in the configuration space of the mav is a forest of squircles. Then a diffeomorphism h λ sq : F → S parameterized by a suitably chosen positive parameter \lambda_{\text{sq}}\in \mathbb{R}_{+} , allows the composition \varphi=\tilde{\varphi}\circ h_{\lambda_{\text{sq}}}(\mathbf{x},\mathbf{x}_{g}) to become a navigation function on \mathcal{F} [11] : for any position of the target satisfying some reasonable topological conditions, all (unstable) critical points outside the destination manifold are nondegenerate saddles with attraction regions of measure zero.

A properly tuned navigation function ensures that a gradient descent using its negated gradient converges to the goal from almost everywhere in the free workspace—less the attraction regions of the saddles, which are sets of measure zero. This provides the basis for a robust navigation feedback strategy that can reasonably account for estimation and model inaccuracies. Aggressive maneuvering at user-defined maximum speeds v_{\max} is achieved by prescribing a desired mav velocity vector field as \begin{equation*}\mathbf{v}_{d}(\mathbf{x})\ {\buildrel \triangle\over=}\ -\frac{\nabla_{\mathbf{x}}\varphi}{\Vert\nabla_{\mathbf{x}}\varphi\Vert}\cdot v_{\max}\tag{5} \end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*}\mathbf{v}_{d}(\mathbf{x})\ {\buildrel \triangle\over=}\ -\frac{\nabla_{\mathbf{x}}\varphi}{\Vert\nabla_{\mathbf{x}}\varphi\Vert}\cdot v_{\max}\tag{5} \end{equation*}

It should be noted at this point that (5) does not take into account the (high-dimensional and nonlinear) dynamics of the mav . Nonetheless, through forward integration (5) can produce safe reference trajectories which the mav can closely track using appropriate nonlinear control loops. The closure of such control loops, in a way that actually guards against collisions with unknown obstacles, is described in the next section.
SECTION V.
The Local Planner

The local planner utilizes a receding horizon planning strategy in which the quadrotor continuously takes input from the onboard rgb-d sensor to generate feasible, safe, and locally optimal trajectories. In this way, the mav reactively avoids previously unknown obstacles within its fov while making progress toward the navigation goal specified by the global planner [24] . This section presents a brief description of the approach followed.

The mav dynamics are differentially flat [14] , at least to some extent, and that allows one to express system inputs and states as a function of the four (flat) outputs associated with the vehicle's 3D position and yaw. We can bundle these flat outputs into a vector \mathrm{x}=[x, y, z, \psi]^{\mathrm{T}} , and noting that the yaw angle \psi is kinematically decoupled from x and y , we may restrict our analysis on constructing smooth reference trajectories in x and y , knowing that \psi can be set independently afterwards. Local planner trajectories which satisfy (2) and (1) will be referred to as dynamically feasible . The local planner iterates cycles of computation, updating each time the mav 's reference trajectory which attempts to track the navigation function's currently generated path segment. The end point of this path segment is referred to as the intermediate point .

Suppose that at time t the planner is at cycle N , generating a reference trajectory segment of duration \delta t , and the following cycle N+1 produces another segment ranging from time instant t+\delta t to t+2\delta t . Such reference trajectory segments are represented as extended vectors of desired position, velocity, acceleration and jerk; for cycles N and N+1 will look like: \begin{align*} &\quad X_{N}(t, t+\delta t)=[\mathrm{x}_{N}^{\mathrm{T}}\quad \dot{\mathrm{x}}_{N}^{\mathrm{T}}\quad\ddot{\mathrm{x}}_{N}^{\mathrm{T}}\quad \overset{\ldots}{\mathrm{x}}_{N}^{\mathrm{T}}]^{\mathrm{T}}\\ &X_{N+1}(t+\delta t, t+2\delta t)=\left[\mathrm{x}_{N+1}^{\mathrm{T}}\quad\dot{\mathrm{x}}_{N+1}^{\mathrm{T}}\quad\ddot{\mathrm{x}}_{N+1}^{\mathrm{T}}\quad\overset{\ldots}{\mathrm{x}}_{N+1}^{\mathrm{T}}\right]^{\mathrm{T}} \end{align*}
View Source Right-click on figure for MathML and additional features. \begin{align*} &\quad X_{N}(t, t+\delta t)=[\mathrm{x}_{N}^{\mathrm{T}}\quad \dot{\mathrm{x}}_{N}^{\mathrm{T}}\quad\ddot{\mathrm{x}}_{N}^{\mathrm{T}}\quad \overset{\ldots}{\mathrm{x}}_{N}^{\mathrm{T}}]^{\mathrm{T}}\\ &X_{N+1}(t+\delta t, t+2\delta t)=\left[\mathrm{x}_{N+1}^{\mathrm{T}}\quad\dot{\mathrm{x}}_{N+1}^{\mathrm{T}}\quad\ddot{\mathrm{x}}_{N+1}^{\mathrm{T}}\quad\overset{\ldots}{\mathrm{x}}_{N+1}^{\mathrm{T}}\right]^{\mathrm{T}} \end{align*}

The objective of the planner is to produce dynamically feasible reference trajectories that stay in \mathcal{F} and are compatible in the sense that for any two consecutive cycles N and N+1 it holds that X_{N}(t+\delta t)=X_{N+1}(t+\delta t) .

We assume that the fov of the rgb-d sensor is contained in a rectangular pyramid, having its apex at the base frame attached to the sensor, its depth direction is aligned with the local x mav axis. The height of this fov pyramid if determined by the sensor's range. We discretize this volume to reduce it to a grid of fixed resolution. A ray is then cast from the apex to each point on the grid. Any ray, including its end point, that passes sufficiently close to a point within the sensor's rgb-d point cloud is discarded, on the basis that this line of sight is likely obscured by some (unknown) obstacle. These type of discrete query and selection operations can be implemented efficiently using kd -tree data structures [24] .
Fig. 2: - Checking for collisions. Triads mark the mav's initial configuration, its current center of gravity (cog), its local goal in its fov, and its global goal. Black dots mark representative discretization points in the mav's fov. Rays in the fov intersecting with obstacles reflected in point cloud data (red) are marked red and considered discarded. Green rays represent collision-free motion directions.
Fig. 2:

Checking for collisions. Triads mark the mav 's initial configuration, its current center of gravity ( cog ), its local goal in its fov , and its global goal. Black dots mark representative discretization points in the mav 's fov . Rays in the fov intersecting with obstacles reflected in point cloud data (red) are marked red and considered discarded. Green rays represent collision-free motion directions.

Show All

An optimal among all possible collision-free rays should strike an acceptable balance between safety and aggression while converging to the global goal. The latter is assessed based on how close to the navigation function-generated path segment. To strike such a balance we weigh each of the collision-free rays based on a linear combination of two cost factors: (a) a collision cost factor that penalizes a ray depending on how close it brings the mav to any of the obstacles in the fov , and (b) a convergence cost factor that penalizes a ray based on the distance between its end point and the intermediate point. (Given the receding horizon nature of the control scheme, we found that this singular end-point comparison was adequate for implementation purposes.)

Denote p the total number of collision-free rays, and d_{i} the Euclidean distance between the end point of the i^{\text{th}} ray and the intermediate point. Set d_{\max}\ {\buildrel \triangle\over=}\ \max\nolimits_{i}d_{i} , and let \hat{r}\geq r be an additional safety margin (added to the radius around detected obstacles). Letting \rho_{i} be the minimum distance to the nearest obstacle out of all interior points on ray i , the collision cost for ray i is measured as \begin{equation*}c_{\text{coll}_{i}}=\begin{cases} \frac{1+\hat{r}^{4}}{\hat{r}^{4}}\cdot \frac{[(\rho_{i}-r)^{2}-\hat{r}^{2}]^{2}}{1+[(\rho_{i}-r)^{2}-\hat{r}^{2}]^{2}} &\text{if}\ \ \rho_{i}-r\leq\hat{r}\\ 0 &\text{otherwise}\end{cases} \end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*}c_{\text{coll}_{i}}=\begin{cases} \frac{1+\hat{r}^{4}}{\hat{r}^{4}}\cdot \frac{[(\rho_{i}-r)^{2}-\hat{r}^{2}]^{2}}{1+[(\rho_{i}-r)^{2}-\hat{r}^{2}]^{2}} &\text{if}\ \ \rho_{i}-r\leq\hat{r}\\ 0 &\text{otherwise}\end{cases} \end{equation*}

Then for the positive scalar weights k_{1}\in(0,1)\ni k_{2} , the total cost associated with ray i\in[0,\ldots, p] is (see Fig. 3 ) \begin{equation*}c_{i}=k_{1} \frac{d_{i}}{d_{\max}}+k_{2}c_{\text{coll}_{i}}\end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*}c_{i}=k_{1} \frac{d_{i}}{d_{\max}}+k_{2}c_{\text{coll}_{i}}\end{equation*}

The end point of the ray that has the lowest total cost is named the local goal (because it is within the fov ) of the local planner. With the local goal in the fov selected, the problem now reduces to generating a dynamically feasible and locally optimal reference trajectory from the mav current 3D position to the local goal, tracing the optimal ray. The reference trajectory thus involves the first three flat outputs of the dynamics, namely the Cartesian position coordinate vector \mathrm{x}=[x, y, z]^{\mathrm{T}} .

The duration of the segment of the reference trajectory that runs from the mav 's location segment from the starting state (position, velocity, acceleration, jerk) \mathrm{x}_{0}=[\mathrm{x}_{0}^{\mathrm{T}},\dot{\mathrm{x}}_{0}^{\mathrm{T}},\ddot{\mathrm{x}}_{0}^{\mathrm{T}},\overset{\ldots}{\mathrm{x}}_{0}^{\mathrm{T}}]^{\mathrm{T}} to the local goal state \mathrm{x}_{\mathrm{T}}=[\mathrm{x}_{T}^{\mathrm{T}},\dot{\mathrm{x}}_{T}^{\mathrm{T}},\ddot{\mathrm{x}}_{T}^{\mathrm{T}},\overset{\ldots}{\mathrm{x}}_{T}^{\mathrm{T}}]^{\mathrm{T}} is set to a predetermined planning horizon denoted T . The optimal ray is now divided into n_{p} equal segments, the endpoints of which now define way points for the reference trajectory to be generated. Let \Delta t_{j} denoting the time difference between two successive waypoints on the reference trajectory, (x_{j-1}, y_{j-1}, z_{j-1})^{\mathrm{T}} and (x_{j}, y_{j}, z_{j})^{\mathrm{T}} ; naturally, T= \sum\nolimits_{i=1}^{n_{p}}\Delta t_{i} . The reference trajectory for planning cycle N can now be defined as a solution of the following minimum jerk optimization problem over the planning horizon [14] , [18] , \begin{equation*}\begin{cases} \arg\min\nolimits_{\mathrm{x}_{i}}\sum\nolimits_{i=0}^{n_{p}}\int\nolimits_{0}^{\Delta t_{i}}\left\Vert\frac{d^{3}\mathrm{x}_{i}}{dt^{3}}\right\Vert^{2}\mathrm{d}t\\ \text{subject to}\\ \frac{\mathrm{d}^{k}\mathrm{x}_{i}}{\mathrm{d}t^{k}}\vert_{\Delta t_{i}}=\frac{\mathrm{d}^{k}\mathrm{x}_{i+1}}{\mathrm{d}t^{k}}\vert_{0}\quad k=0,\ldots, 3\\ \mathrm{x}(0)=\mathrm{x}_{0},\ \ \mathrm{x}(T)=\mathrm{x}_{\mathrm{T}} \end{cases}\tag{6} \end{equation*}
View Source Right-click on figure for MathML and additional features. \begin{equation*}\begin{cases} \arg\min\nolimits_{\mathrm{x}_{i}}\sum\nolimits_{i=0}^{n_{p}}\int\nolimits_{0}^{\Delta t_{i}}\left\Vert\frac{d^{3}\mathrm{x}_{i}}{dt^{3}}\right\Vert^{2}\mathrm{d}t\\ \text{subject to}\\ \frac{\mathrm{d}^{k}\mathrm{x}_{i}}{\mathrm{d}t^{k}}\vert_{\Delta t_{i}}=\frac{\mathrm{d}^{k}\mathrm{x}_{i+1}}{\mathrm{d}t^{k}}\vert_{0}\quad k=0,\ldots, 3\\ \mathrm{x}(0)=\mathrm{x}_{0},\ \ \mathrm{x}(T)=\mathrm{x}_{\mathrm{T}} \end{cases}\tag{6} \end{equation*}

Problem (6) is converted to a quadratic program (QP) and efficiently solved using standard solvers (see [8] , [18] ). Once a reference trajectory is generated, it is checked to ensure that the nominal thrust and angular velocity conforms to the dynamic constraints (1) . In case they do not, the trajectory completion time is dilated thus reducing the average speed of the mav . Once the output reference trajectory is finalized, an initial portion of it of time duration T_{c}\ll T (called the control horizon) , is then tracked by the mav utilizing a variation [24] of a differential-geometric motion controller (cf. [10] ). An illustrative example of this receding horizon planning method for the relatively simple test scenario of Fig. 2 , is presented in Fig. 3 .

Notice that the reference trajectory generated as a solution of the minimum-jerk optimization problem involves only the 3D Cartesian coordinates of the mav and their derivatives. The fourth flat output \psi , the mav yaw angle, is kinematically decoupled and can be presecribed independently. To construct a smooth reference trajectory for the yaw angle, we fit a third order time polynomial between initial yaw state \psi(0)=\psi_{0},\ \dot{\psi}(0)=\dot{\psi}_{0} and final yaw state (at the local goal) \psi(T)=\psi_{T} , and \dot{\psi}(T)=\dot{\psi}_{T} , of the form \psi(t)=a_{1}+a_{2}t+a_{3}t^{2}+a_{4}t^{3} . When realizing this, and for any planning cycle, we kept the yaw rate \dot{\psi}(T) at zero, and set \psi_{T} so that the mav 's onboard camera always faced the local goal at time T . On the other hand, \psi_{0} and \dot{\psi}(0) are set by the preceding planning cycle.
Fig. 3: - Trajectory generation. Dashed magenta lines show generated reference trajectories while solid green curve is the trajectory of the mav as it tracked the trajectory segments consecutively.
Fig. 3:

Trajectory generation. Dashed magenta lines show generated reference trajectories while solid green curve is the trajectory of the mav as it tracked the trajectory segments consecutively.

Show All

SECTION VI.
Results

This section outlines the steps toward the integration of the two planners through a 2.5D example. Consider a workspace with one nonconvex \Pi -shaped obstacle, designed and positioned in a way that could potentially trap the mav ( Fig. 4(a) ). The workspace has a 15\mathrm{m}\times 15\mathrm{m} horizontal footprint, and in it, the mav is supposed to reach (x, y, z)=(12,0,0)\ \mathrm{m} , starting from (−14, 1, 0) m. If no prior information is utilized about the \Pi -shaped obstacle, a purely reactively navigating mav would encounter the interior wall and most likely be trapped inside. A navigation function incorporating this obstacle, however, can inform the mav to safely maneuver around it ( Fig. 4(b) ).

The global planner utilizes the navigation function in a receding horizon manner: it regenerates a path toward the global goal and updates the navigation plan from whatever configuration the mav finds itself in the beginning of each replanning cycle. This iterative process is reflected in the path of Fig. 4(b) , in the different colors used to mark the different segments of the path to the goal: each segment is generated as part of a different planning cycle. The end point of each such segment defines the intermediate point for the local planner ( Section IV ). The local planner then iteratively generates dynamically feasible jerk-minimizing reference trajectories, reactively avoiding previously unknown obstacles detected in the mav 's fov . The differential-geometric controller subsequently tracks these collision-free reference trajectories to steer the mav toward the global goal.

While true that during trajectory tracking the mav can deviate slightly from the navigation function path, safety is never compromised because of the reactive nature of the local planner. Even if the local planner steers the mav away from the nominal path as it attempts to reactively avoid obstacles, the global planner regenerates a feasible path to the global goal at 15Hz (only a small selection of these segments are shown in Fig. 4(b) for clarity). As long as the unknown obstacles are isolated, local (much smaller in scale compared to the workspace topology features encoded in the navigation function), and disjoint from the navigation function's domain boundaries, the global planner is guaranteed to produce a new global navigation solution (cf [13] ).

Figures 5 and 6 illustrate how the local and global planners work in tandem to account for unforeseen obstacle encounters. In Figure-5, four obstacles were placed along the path that the mav would normally follow from its initial configuration to the final goal. The mav initially follows the path originally generated by the global planner faithfully (black path in Fig. 6 ), until the unknown obstacles emerge in its fov . At this stage, the local planner reactively generates avoidance maneuvers, which the global planner adapts to by reconstructing a high-level navigation plan to the final goal (purple path Fig. 6 ). GAZEBO and RVIZ simulation can be found at https://youtu.be/MCIX7E7qX28 .

The mav successfully avoids long wall-like obstacles (e.g. the \Pi -shaped obstacle in the current setup) if they are known and captured by the navigation function. If not included, such obstacles may obstruct the entire fov of the mav and trigger an emergency stop policy that brings the mav to a halt (see [24] for a more detailed discussion).

Parameters controlling the density of grid points as well as incoming point cloud can be adjusted depending upon the computational resources available for real-time local planning. Our experience points to these parameters as the main contributors to computation overhead. Additional mitigation measures include the frequency of the global planner, which is the same frequency as that of the local planner by default (15Hz), but can be slightly reduced depending upon the user constraints. A detailed discussion on the computational efficiency of the local planner [24] is beyond the scope of this particular paper.

Among other issues that affect the performance of the planner is the inclusion of key environmental features (e.g. obstacles that can trap the mav ) in the global planner, and the proper tuning of the navigation function so that it is free of local minima. The latter is typically achieved with higher values for \kappa that lead to more direct paths to the goal and a relatively more aggressive maneuver around obstacles. In any case, the motion plans generated cannot come with any guarantees of optimality, especially since the total length of the trajectory depends on a number of unknown environmental features.
SECTION VII.
Conclusions

As parallel and independent work in literature has started to demonstrate, deliberate and reactive robot navigation can be integrated in ways that combine the best aspects of both approaches. This paper reports on a new integrated end-to-end planning and control approach, in the spirit of receding horizon control, which is tailored to mav navigation in partially known static environments. It is thus possible to steer an mav in such environments with guarantees on safety against collisions and on convergence to the navigation goal, despite uncertainty about the existence of scattered isolated obstacles. What is particularly notable in the reported approach is that it is computationally light for autonomous onboard calculations, and relies exclusively on inexpensive and lightweight sensor payloads, allowing for mav navigation and flight at relatively high speeds. It should also be noted that although the approach is demonstrated here in 2.5D environments, it can be fully implemented in three dimensions in a straightforward way.
Fig. 4: - The mav's known workspace and the global planner's path. The path from the start point to the global goal (in blue region) is generated by the navigation function's gradient. The multiple colored segments indicate the portions produced at different cycles of the global planner.
Fig. 4:

The mav 's known workspace and the global planner's path. The path from the start point to the global goal (in blue region) is generated by the navigation function's gradient. The multiple colored segments indicate the portions produced at different cycles of the global planner.

Show All
Fig. 5: - Workspace with 3 pillars and one tree previously unknown to the global planner. These obstacles are avoided reactively by the local planner as they become visible in the fov of the camera.
Fig. 5:

Workspace with 3 pillars and one tree previously unknown to the global planner. These obstacles are avoided reactively by the local planner as they become visible in the fov of the camera.

Show All
Fig. 6: - Quadrotor trajectories. Black curve shows the trajectory generated by global planner when none of the additional obstacles (pillars and tree) are known to it. Magenta curve shows the actual trajectory followed by the quadrotor.
Fig. 6:

Quadrotor trajectories. Black curve shows the trajectory generated by global planner when none of the additional obstacles (pillars and tree) are known to it. Magenta curve shows the actual trajectory followed by the quadrotor.

Show All

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Path Planning Based on Ant Colony Algorithm and Distributed Local Navigation for Multi-Robot Systems

2006 International Conference on Mechatronics and Automation

Published: 2006
Self-navigation of multi-robot system using artificial bee colony algorithm

11th IEEE International Conference on Control & Automation (ICCA)

Published: 2014
Show More
References
1. Omur Arslan and Daniel E Koditschek, "Sensor-based reactive navigation in unknown convex sphere worlds", The International Journal of Robotics Research , vol. 38, no. 2–3, pp. 196-223, 2019.
Show in Context CrossRef Google Scholar
2. C. Cadena, L. Carlone, H. Carrillo, Y. Latif, D. Scaramuzza, J. Neira, et al., "Past present and future of simultaneous localization and mapping: Toward the robust-perception age", IEEE Transactions on Robotics , vol. 32, no. 6, pp. 1309-1332, Dec 2016.
Show in Context View Article Full Text: PDF (812) Google Scholar
3. Chuchu Chen, Caili Li and Herbert G. Tanner, "Navigation functions with non-point destinations and moving obstacles", Proceedings of the American Control Conference , pp. 2532-2537, 2020.
Show in Context View Article Full Text: PDF (410) Google Scholar
4. Anthony T. Fragoso, Cevahir Cigla, Roland Brockers and Larry H. Matthies, "Dynamically feasible motion planning for micro air vehicles using an egocylinder" in Field and Service Robotics, Cham:Springer International Publishing, pp. 433-447, 2018.
Show in Context CrossRef Google Scholar
5. Fadri Furrer, Michael Burri, Markus Achtelik and Roland Siegwart, "Robot Operating System (ROS): The Complete Reference (Volume 1)" in chapter RotorS—A Modular Gazebo MAV Simulator Framework, Cham:Springer International Publishing, pp. 595-625, 2016.
Show in Context Google Scholar
6. F. Gao and S. Shen, "Online quadrotor trajectory generation and autonomous navigation on point clouds", Proceedings of the IEEE International Symposium on Safety Security and Rescue Robotics , pp. 139-146, Oct 2016.
Show in Context View Article Full Text: PDF (2389) Google Scholar
7. Hornung Armin, Kai M. Wurm, Maren Bennewitz, Cyrill Stachniss and Wolfram Burgard, "Octomap: an efficient probabilistic 3d mapping framework based on octrees", Autonomous Robots , vol. 34, no. 3, pp. 189-206, Apr 2013.
Show in Context Google Scholar
8. Gurobi Optimizer Reference Manual , 2014, [online] Available: http://www.gurobi.com.
Show in Context Google Scholar
9. B. Landry, R. Deits, P. R. Florence and R. Tedrake, "Aggressive quadrotor flight through cluttered environments using mixed integer programming", Proceedings of IEEE International Conference on Robotics and Automation , pp. 1469-1475, May 2016.
Show in Context View Article Full Text: PDF (5551) Google Scholar
10. T. Lee, M. Leoky and N. H. McClamroch, "Geometric tracking control of a quadrotor uav on se(3)", Proceedings of 49th IEEE Conference on Decision and Control , pp. 5420-5425, 2010.
Show in Context View Article Full Text: PDF (1179) Google Scholar
11. C. Li and H. G. Tanner, "Navigation functions with time-varying destination manifolds in star worlds", IEEE Transactions on Robotics , vol. 35, no. 1, pp. 35-48, 2019.
Show in Context View Article Full Text: PDF (2947) Google Scholar
12. S. Liu, M. Watterson, K. Mohta, K. Sun, S. Bhattacharya, C. J. Taylor, et al., "Planning dynamically feasible trajectories for quadrotors using safe flight corridors in 3-D complex environments", IEEE Robotics and Automation Letters , vol. 2, no. 3, pp. 1688-1695, July 2017.
Show in Context View Article Full Text: PDF (1559) Google Scholar
13. Savvas G. Loizou, Herbert G. Tanner, Vijay Kumar and Kostas Kyriakopoulos, "Closed loop motion planning and control for mobile robots in uncertain environment", Proceedings of the IEEE Conference on Decision and Control , pp. 2926-2931, 2003.
Show in Context View Article Full Text: PDF (391) Google Scholar
14. D. Mellinger and V. Kumar, "Minimum snap trajectory generation and control for quadrotors", Proceedings of IEEE International Conference on Robotics and Automation , pp. 2520-2525, May 2011.
Show in Context View Article Full Text: PDF (1980) Google Scholar
15. M. W. Mueller, M. Hehn and R. D'Andrea, "A computationally efficient motion primitive for quadrocopter trajectory generation", IEEE Transactions on Robotics , vol. 31, no. 6, pp. 1294-1310, Dec 2015.
Show in Context View Article Full Text: PDF (1006) Google Scholar
16. H. Oleynikova, M. Burri, Z. Taylor, J. Nieto, R. Siegwart and E. Galceran, "Continuous-time trajectory optimization for online UAV replanning", Proceedings of IEEE/RSJ International Conference on Intelligent Robots and Systems , pp. 5332-5339, Oct 2016.
Show in Context View Article Full Text: PDF (2218) Google Scholar
17. H. Oleynikova, Z. Taylor, M. Fehr, R. Siegwart and J. Nieto, "Voxblox: Incremental 3D euclidean signed distance fields for on-board MAV planning", Proceedings of IEEE/RSJ International Conference on Intelligent Robots and Systems , pp. 1366-1373, Sep. 2017.
Show in Context View Article Full Text: PDF (1000) Google Scholar
18. Charles Richter, Adam Bry and Nicholas Roy, "Polynomial trajectory planning for aggressive quadrotor flight in dense indoor environments" in Robotics Research volume 114 of Springer Tracts in Advanced Robotics, Cham:Springer International Publishing, pp. 649-666, 2016.
Show in Context Google Scholar
19. E. Rimon and D. E. Koditschek, "Exact robot navigation using artificial potential functions", IEEE Transactions on Robotics and Automation , vol. 8, no. 5, pp. 501-518, Oct 1992.
Show in Context View Article Full Text: PDF (1820) Google Scholar
20. M. Ryll, J. Ware, J. Carter and N. Roy, "Efficient trajectory planning for high speed flight in unknown environments", Proceedings of IEEE International Conference on Robotics and Automation , pp. 732-738, May 2019.
Show in Context View Article Full Text: PDF (3513) Google Scholar
21. Jianxin Sun and Herbert G. Tanner, "Constrained decision-making for low-count radiation detection by mobile sensors", Autonomous Robots , vol. 39, no. 4, pp. 519-536, 2015.
Show in Context CrossRef Google Scholar
22. V. Vasilopoulos, G. Pavlakos, S. L. Bowman, J. D. Caporale, K. Daniilidis, G. J. Pappas, et al., "Reactive semantic planning in unexplored semantic environments using deep perceptual feedback", IEEE Robotics and Automation Letters , vol. 5, no. 3, pp. 4455-4462, 2020.
Show in Context View Article Full Text: PDF (2431) Google Scholar
23. I. Yadav and H. G. Tanner, "Mobile radiation source interception by aerial robot swarms", International Symposium on Multi-Robot and Multi-Agent Systems , pp. 63-69, Aug 2019.
Show in Context View Article Full Text: PDF (718) Google Scholar
24. I. Yadav and H. G. Tanner, "Reactive receding horizon planning and control for quadrotors with limited on-board sensing", Proceedings of IEEE/RSJ International Conference on Intelligent Robots and Systems , pp. 7058-7063, 2020.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
