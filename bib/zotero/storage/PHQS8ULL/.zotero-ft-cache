Zotero automatically redirected your request to ieeexplore.ieee.org through the proxy at thi.idm.oclc.org. Don’t Proxy This Site Proxy Settings ✕
IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2019 IEEE/RSJ International C...
Volumetric Tree: Adaptive Sparse Graph for Effective Exploration of Homotopy Classes
Publisher: IEEE
Cite This
PDF
Donghyuk Kim ; Mincheul Kang ; Sung-Eui Yoon
All Authors
1
Paper
Citation
61
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Algorithmic Background
    III.
    Algorithm
    IV.
    Experiment
    V.
    Conclusion

Authors
Figures
References
Citations
Keywords
Metrics
Media
Abstract:
We present volumetric tree * , a hybridization of sampling-based and optimization-based motion planning. Volumetric tree * constructs an adaptive sparse graph with volumetric vertices, hyper-spheres encoding free configurations, using a sampling-based motion planner for a homotopy exploration. The coarse-grained paths computed on the sparse graph are refined by optimization-based planning during the execution, while exploiting the probabilistic completeness of the sampling- based planning for the initial path generation. We also suggest a dropout technique probabilistically ensuring that the sampling- based planner is capable of identifying all possible homotopies of solution paths. We compare the proposed algorithm against the state-of-the-art planners in both synthetic and practical benchmarks with varying dimensions, and experimentally show the benefit of the proposed algorithm.
Published in: 2019 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)
Date of Conference: 03-08 November 2019
Date Added to IEEE Xplore : 28 January 2020
ISBN Information:
ISSN Information:
INSPEC Accession Number: 19298730
DOI: 10.1109/IROS40897.2019.8967728
Publisher: IEEE
Conference Location: Macau, China
SECTION I.
Introduction

Path and motion planning problem is a fundamental research area in robotics and has been widely studied for autonomous systems with mobility and manipulability. Among various categories of planning algorithms, sampling-based approaches have attracted considerable attention thanks to its probabilistic completeness [1] , [2] and almost-sure asymptotic optimality [3] . Their key concept is to construct a random geometric graph or tree to identify the connection of feasible motions in the configuration-free (C-free) space. It has been well-known that when applied to practical problems, sampling-based motion planners require a considerable amount of computation cost to check collision for vertices and edges, especially for computing the optimal solution in high dimensions [4] , [5] . To this end, there have been a plethora of researches to alleviate the overhead of collision checking. Hauser [4] proposed a lazy collision checking with DSPT (Dynamic Shortest Path Tree [6] ) to delay the explicit checking until it is necessary, while preserving the asymptotic optimality and anytime properties. Bialkowski et al. [5] presented a graph associated with safety certificates, i.e., a set of collision-free balls to reduce the amortized complexity of collision checking. Gammell et al. [7] combined sampling-based motion planning and Lifelong Planning A * (LPA * ) with a batch sampling technique. Their approach expands the graph using LPA*-style incremental search techniques, performing graph expansion and collision checking on a partial subset of graph components.

Meanwhile, optimization-based planners and the hybridization of sampling and optimization also has been suggested to get synergy in various manner. CHOMP (Covariant Hamiltonian optimization for Motion Planning) [8] , its variants [9] , [10] and TrajOpt [11] formulate the trajectory optimization as a convex problem to minimize the local approximation of the objective function sequentially.

Fig. 1:

A heatmap-style visualization of the vertex set V , constructed by a conventional planner (top, | V | = 14384) and that of volumetric tree* (bottom, | V | =540) in the same time budget. We can observe the volumetric tree* constructs a sparse graph, while capturing the samples around narrow passages or boundaries. The vertices close to the obstacles are encoded red; otherwise blue.

Show All

As a hybridization of sampling and optimization, Choudhury et al. [12] suggested RABIT* (Regionally Accelerated Batch Informed Trees), where a sampling-based planner runs as a global planner, and an optimization-based planner takes over the local planning. Kim et al. [13] proposed a similar hybridization, Dancing PRM*, whose obstacle potential computation is solely done in the configuration space. It directly approximates the C-free space by utilizing the empirical collisions found during the execution. Kuntz et al. [14] presented another hybrid algorithm, which locally refines solution paths using lazy interior point optimization to compute high-quality solutions quickly.

When it comes to a scalability issue, recent researches have also pointed out the significance of nearest-neighbor search [15] , [16] . Kleinbort et al. [15] analyzed the asymptotic computational bottleneck in sampling-based motion planning. To be specific, the complexity of collision detection is proportional to that of the given workspace, while nearest-neighbor search asymptotically dominates the entire computation time as the number of samples goes to infinity. Varricchio and Frazzoli [16] proposed pruning techniques for the k -d tree to reduce the computational cost of nearest neighbor search.

Main Contributions . In this work, we present Volumetric Tree*, a hybridization of sampling-based and optimization- based motion planning for effectively exploring the homotopy class of solution paths and identifying local optimums in each homotopy class ( Sec. III-A ). In volumetric tree*, the role of a sampling-based motion planner is used for a homotopy exploration. To be specific, it is designed to construct an adaptive sparse graph, where wide-open areas are covered by a fewer number of volumetric vertices (hyperspheres) while maintaining fine-grained vertices around a boundary of free space or narrow passage ( Sec. III-B ), instead of constructing a dense graph. On top of that, we can represent a set of paths homotopic to each other into a sequence of volumetric vertices as a compact representation. To complement the coarse-grained paths computed on the sparse graph, we combine an optimization-based motion planner ( Sec. III-C ) to refine the solution paths with a dedicated shortest path computation technique, dropout ( Sec. III-D ). As a result, volumetric tree *efficiently identifies initial paths in multiple homotopy classes in a sampling-based manner for the optimization-based planning by complementing each other.

According to conducted experiments, we observe up to 3 times speedup over other tested methods in terms of convergence to the optimum on rigid body and manipulation planning problems ( Sec.IV ). These results are mainly obtained by the adaptive sparse graph integrated with the optimization-based planning, which allows volumetric tree* to explore the configuration space efficiently.
SECTION II.
Algorithmic Background

We first formulate the problem we would like to address and review preliminaries of sampling-based motion planning.
A. Problem Definition

Let X = R d be the configuration space, where d is the dimension of a given problem. Let the configuration-obstacle (C-obs) space be X o b s , which is a set of states in collision with obstacles. The complement of X o b s , X f r e e ( = X ∖ X o b s ) , becomes the configuration-free (C-free) space. For a given pair of an initial and goal configurations, x init and x g o a l ∈ X f r e e , respectively, let σ ∈ Σ : [ 0 ,   1 ] → X f r e e be a feasible (e.g., collision-free) path, where Σ is a set of all possible paths satisfying σ ( 0 ) = x i n i t and σ ( 1 ) = x g o a l .

Fig. 2:

The left Figure illustrates two solution paths, shown red and blue solid lines, in two different homotopy classes with their local optimal paths (dotted). The right Figure shows a solution path (solid black) covered by a sequence of collision-free balls and paths homotopic to the solution path (red and blue). These observations suggest that such a coarse-grained graph can be a sufficient representation if we can optimize each path toward the local optimum.

Show All

The optimal motion planning problem then can be formulated as:

σ ∗ = argmin σ ∈ Σ ( c ( σ ) ) (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\sigma^{{\ast}}=\underset{\sigma \in \Sigma}{\operatorname{argmin}}(c(\sigma)) \tag{1}\end{equation*}

where c is a cost function such that c : Σ → R ≥ 0 .

For a sampling-based planner, it is said to be almost-sure asymptotic optimal if the probability that a path computed by the planner at an iteration number i , σ i , converges to the optimal path is 1, as the number of iteration goes to infinity:

P [ lim i → ∞ ( c ( σ i ) = c ( σ ∗ ) ) ]   = 1 (2)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\displaystyle \mathbb{P}[\lim_{i\rightarrow\infty}(c(\sigma_{i})=c(\sigma^{{\ast}}))]\ =1 \tag{2}\end{equation*}

B. Sampling-based Motion Planning

There have been proposed various optimal sampling-based motion planning algorithm such as R R T ∗ , PRM * [3] , and BIT * [7] . They sample a set of configurations, X s a m p l e ∈ X , to construct a search graph G = { V , E } , where each vertex v ∈ V represents a collision-free configuration and e = ( v , w ) ∈ E is a feasible motion for a pair of configurations v and w ∈ V . V is initialized with { x i n i t , x g o a l } and E is set to empty, then we sample a random configuration at each iteration until the termination condition is satisfied, e.g., time limit or a maximum number of iterations.

For a sample configuration x sample , the edge connection process is done with its near neighbors found by Near Near ( x ) returns a set of near vertices in V such that those vertices lie inside of an implicit ball centered at x with a connection radius r . This type of NN search is also called ε -NN search. k -nearest neighbor search can be used alternatively; in either case, both connection radius r and k are determined proportionally to the cardinality of V to achieve the almost-sure asymptotic optimality [3] . Each vertex and edge is then checked for a collision, and only valid components are inserted into G for the graph expansion. Finally, a path connecting x init and x goal becomes a discrete solution path σ ∈ Σ , and its cost c ( σ ) can be computed by summing up the cost of all edges over the path.
SECTION III.
Algorithm
A. Motivations

We would like to explain motivations of volumetric tree * , a hybridization of sampling and optimization-based planning, with the following two aspects. Firstly, Fig. 2(a) shows two exemplar paths shown in the solid lines that connect x init and x goal in different homotopy classes. Once a solution path is computed, we can apply a local optimal planner such as an iterative optimization-based planners [8] to refine the path toward the local optimal path (dotted lines in Fig. 2(a) ) in the same homotopy class. Based on this observation, we suggest using a sampling-based motion planner, which guarantees probabilistic completeness, for a homotopy exploration to identify solution paths in all possible homotopy classes. On top of that, an optimization-based planner then locally optimizes the initial paths computed by the sampling-based planner toward the local optimum.

Once we realize the hybridization of sampling-based and optimization-based approaches, it is unnecessary to construct a dense graph. This is mainly because the cost of an initial path is not that important for the optimization-based planning. Instead, it is more important to find different homotopic classes of initial paths. Moreover, constructing such a dense graph would require a massive computational cost due to graph manipulation operations such as NN-search. As a result, the sparse representation of the given space can be a reasonable choice for our objective.

In particular, we associate each vertex of a graph with a collision-free hyper-sphere volume for locally representing the C-free space, while rejecting samples inside volumes, resulting in a sparse graph. The idea of using the hypersphere volume is inspired by the previous literature [5] , [13] , [17] , [18] . Fig. 2(b) shows an exemplar solution path over a sparse graph constructed in the proposed manner, where a set of collision-free hyper-spheres are associated with vertices. We then utilize the following observation. For a collision- free hyper-sphere S , we can assume that any two given configurations located within S can be connected directly without having any collision. More importantly, it implies that for a given discrete path σ = { v 0 ,   v n − 1 } ∈ Σ , associated with collision-free hyper-spheres S v i , centered at v i , we can then expect any path through the same sequence of vertices located in the hyper-spheres, σ ′ = { v ′ 0 ∈ S v 0 ,   v ′ n − 1 ∈ S v n − 1 } is homotopic to σ . We can hence represent plenty of paths homotopic to each other into a single path over the adaptive sparse graph. Our volumetric tree * utilizes this observation for creating a sparse graph and computes the optimal paths with the graph. Fig. 1 shows two different types of graphs, a dense graph computed by the conventional approach and ours in an example scene.
B. Adaptive Sparse Tree Construction

Volumetric tree * constructs a random geometric graph G = { V , E } , where a vertex v ∈ V also encodes a collision- free configuration; depending on the context, we can just use v to denote its configuration, and at that case, v ∈ X f r e e . An edge e = ( v ∈ V , w ∈ V ) ∈ E represents a continuous motion connecting two configurations. We also define S v ( ∀ v ∈ V ) to represent a hyper-sphere centered at a configuration v , associated with a radius of r v , a distance to the closest empirical collision 0 v ∈ X o b s . They are additionally stored in each v .

Algorithm 1:

Volumetric Tree *

Show All

Our hyper-sphere based representation is designed for approximately encoding X f r e e , and its construction is inspired by the approximate C-free representation proposed in [13] . The main idea of C-free approximation is to associate each vertex with the closest empirical collision found during the execution, resulting in a set of approximate collisionfree hyper-spheres, reducing the approximation error over iterations probabilistically.

For Near , we use a distance function specialized for considering radii of vertices to measure a distance between two hyper-spheres associated with those two vertices:

d i s t N N ( v ∈ V , w ∈ V ) = ∥ v − w ∥ − r v − r w , (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*}dist_{NN}(v\in V,w\in V)=\Vert v-w\Vert-r_{v}-r_{w}, \tag{3}\end{equation*}

where is the Euclidean norm of a vector. The reason why we use a specialized dist NN is to enable a vertex with a large radius to be better connected to other samples for Near , either r-NN or k-NN, during the graph expansion.

Note that the cost of an edge e = ( v , w ) is still defined as conventional, i.e., c ( e ) = ∥ v − w ∥

We can recognize that dist NN violates non-negativity and triangle inequality, which should be held for the metric space. For this reason, the conventional k -d tree or GNAT [19] can show sub-optimal performance for near neighbor search in volumetric tree * . We hence use NMSlib [20] , a proximity-graph based approximate near neighbor search library for generic non-metric spaces for efficient performance. Fig. 1 shows an example of the constructed graph. We can observe that the volumetric tree * covers X f r e e adaptively with a fewer number of vertices, while the conventional planner maintains a set of tremendous vertices in the same time budget. We further discuss the comparison of the cardinality of graph components in Sec. IV with Table I .

We also maintain a subset of G , τ = { V T , E T ⊂ E } for the shortest path computation, where e ∈ E T is a set of edges on the shortest paths to all v ∈ V T from x init that is constructed by DSPT (Dynmic Shortest Path Tree) [6] . The search tree T consisting of volumetric vertices V T in the end contains the solution path we are seeking, and is also used for the homotopy exploration with the dropout technique explained in Sec. III-D .

Overall process . The overall process is depicted in Alg. 1 . The proposed volumetric tree * is based on Dancing PRM * [13] in terms of the graph construction and configuration-free space approximation. To be specific, volumetric tree * inherits the lazy collision checking with DSPT and witness propagation with radius compensation from Dancing PRM * for the precomputation-free approximation. Accordingly, we allow G to have edges in collision to reduce unnecessary edge collision checkings and check lazily if they are necessary.

During the iteration in Alg. 1 , a collision-free x sample is checked for a inclusion test with its near neighbor set V near , not to fall inside of the hyper-sphere volumes associated with V ( Alg. 1 , Line: 6). On the other hand, for a x s a m p t e ∈ X o b s , we exploit the sample to improve the configuration-free approximation ( Alg. 1 , Line: 13-14). In UpdatecFreeSpace , we update r v n e a r if ∥ v n e a r − x s a m p l e ∥ is smaller than r v n e a r to trim the volumes by updating 0 x s a m p l e . Likewise, PropagateCFreeSpace initializes r x s a m p l e to be arg min v ∈ V n e a r ( ∥ 0 v − x s a m p l e and then updates r v to be min ( ∥ 0 x s a m p l e − v n e a r ∥ ,   r v n e a r ) for all v ∈ V n e a r to propagate the empirical collision information locally. For the details, refer to the original work [13] .

UpdateShortestPath updates T to maintain shortest paths for all possible destinations, i.e., ( v ∈ V T , x g o a l ) dynamically. Finally, BetterPathFound ( Alg. 1 , Line: 15) checks whether the cost of the best-so-far path c ( σ n e w ) is updated in UpdateDSPT at this iteration. If so, we lazily check the feasibility of σ n e w and then OptimizePath (Alg 1, Line: 16) refines the σ n e w towards the local optimal path, which is discussed in the subsequent subsection.
C. Path Optimization

Our path optimization is based on CHOMP [8] , which uses gradient descent techniques to optimize a motion trajectory iteratively.

The original objective function related to the obstacle cost, f obs , contains so-called obstacle potential terms, which can be expressed as a vector to the closest obstacle or the obstacle proximity, usually obtained by the Euclidean distance transformation in the workspace. It however requires additional precomputation and model simplification such as swept-sphere technique and kinematic Jacobian [8] . For this reason, our objective function is designed to be free from such dependencies to achieve a higher applicability and seamless integration with existing sampling-based planners. At a high level, our objective function used for volumetric tree * is identical to the original form [8] :

U ( ξ ) = f p r i o r ( ξ ) + f o b s ( ξ ) , (4)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\mathcal{U}(\xi) = fprior (\xi)+fobs (\xi), \tag{4}\end{equation*}

where ξ : [ 1 ,   n ∈ N ] → X is a discrete path consisting of n equidistant intermediate configurations along σ n e w , i.e., ξ ∈ R n × d , and fprior is a sum of squared derivatives, i.e., 1 2 ξ T A ξ + ξ T b . A ∈ R n × n and b ∈ R n × d are available in [8] . The obstacle cost for our work is formulated as follows:

f o b s ( ξ ) = ∑ i = 1 n ω ( ∥ ξ ∗ ( i ) − ξ ( i )   ∥ d d t ξ ( i ) ∥ , (5)
View Source Right-click on figure for MathML and additional features. \begin{equation*}f_{obs}(\displaystyle \xi)=\sum_{i=1}^{n}\omega(\Vert\xi^{\ast}(i)-\xi(i)\ \Vert\frac{d}{dt}\xi(i)\Vert, \tag{5}\end{equation*}

where ω is a user-defined weighting function; we simply use the identify function ω ( x ) = x and ξ ∗ ( t ) is the last configuration of ξ ( i ) without collision. Unlike the problem CHOMP and its variants aim to solve, we can assume that the given initial path σ n e w is collision-free, and thus that ξ ∗ ( i ) exists by initializing ξ ∗ as σ n e w during the iteration; therefore, ξ ∗ ( i ) can be considered as the closest empirical collision-free state of ξ ( i ) .

The update rule follows the iterative quasi-Newton approach like CHOMP, which can be written as:

ξ i + 1 = ξ i − ∇ U ( ξ i ) , (6)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\xi_{i+1}=\xi_{i}-\nabla \mathcal{U}(\xi_{i}), \tag{6}\end{equation*}

where ∇ U ∈ R n × d is:

∇ U ( ξ ) = η A − 1 ( λ ( A ξ + B ) + ∇ f o b s ( ξ ) ) . (7)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\nabla \mathcal{U}(\xi)=\eta A^{-1}(\lambda(A\xi+B)+\nabla f_{obs}(\xi)). \tag{7}\end{equation*}

In the above equation, η is a user-defined convergence rate, set to be 1, ( A ξ + B ) is ∇ f p r i o r in the expanded form, and λ is a trade-off parameter for the smoothness against the obstacle avoidance, set to be n 2 , where n = 50 is the number of intermediate nodes. The number of iterative optimization of Eq. 6 is fixed to 50 in our implementation. Lastly, ∇ f o b s is formulated as:

∇ f o b s ( ξ ( i ) ) = ∥ ξ ( i ) ′ ∥ ( I − ξ ( i ) ′ ˆ ξ ˆ ( i ) T − ∥ ξ ( i ) ∗ − ξ ( i ) ∥ κ , T ) ( ξ ( i ) ∗ − ξ ( i ) ) (8)
View Source Right-click on figure for MathML and additional features. \begin{align*} \nabla f_{o b s}(\xi(i))=\left\|\xi(i)^{\prime}\right\|\left(I-\widehat{\xi(i)^{\prime}} \widehat{\xi}(i)^{T}\right.&\left.^{T}\right)\left(\xi(i)^{*-\xi}(i)\right) \\ -\left\|\xi(i)^{*}-\xi(i)\right\| \kappa , \tag{8}\end{align*}

where ξ ( i ) ′ is the derivative of ξ ( i ) , ξ ( i ) stands for the normalizing function, i.e., x ^ = ξ ( i ) ∥ ξ ( i ) ∥ , and κ is the curvature of ξ at ξ ( i ) . We also replace the obstacle potential terms used for CHOMP with a function of ξ ( i ) ∗ − ξ ( i ), accordingly to Eq. 5 . The underlying meaning of Eq. 8 is that when ξ ( i ) ∈ X o b s , we push ξ ( i ) with collision toward its last empirical C-free state ξ ( i ) * as a roll-back. In CHOMP, this type of approach is not applicable since a given initial path is assumed in collision, which demands a local workspace obstacle analysis in advance, e.g., the signed distance field, to compute the obstacle potentials efficiently. Our approach, therefore, gets rid of such dependencies and makes the optimization process even intuitive, while combining sampling- based and optimization-based planning seamlessly. Note that ξ ( i ) ∈ X f r e e makes ∇ f o b s = 0 .

Fig. 3:

Naive shortest path computation can miss to explore a solution path even homotopic to the optimal solution path (the blue dotted one), due to a sparse graph structure. We address this issue by using the dropout of vertices in solution paths observed during the execution. The dotted-filled ball in the right Figure stands for an excluded vertex, v dropout . The search tree constructed without V dropout allows our approach to find other solution paths (the blue dotted one) that can be homotopic to the optimal solution, the solid black line.

Show All

For feasibility of the updated path, it is necessary to check ξ for collision and update ξ ∗ prior to performing the gradient update in Eq. 6 at each iteration. For each ξ ( i ) ∈ X o b s found during the optimization process is also used to improve our configuration-free space approximation ( Sec. III-B ). For a set of vertices along the path, i.e., V σ = { v | v ∈   σ } , we perform UpdateCFreeSpace ( V σ ,   ξ ( i ) ) ( Alg. 1 , Line: 14), which assures that each 0 v\in\sigma is set to the closest empirical collision found locally.
D. Shortest Path Computation with Dropout

As the number of iteration increases, volumetric tree * attempts to optimize multiple best-so-far paths as this method is also based on the sampling-based approach. Nonetheless, we found a technical challenge that arises due to the sparse graph structure with hyper-sphere volumes.

The left Figure in Fig. 3 shows two different paths; one containing a vertex associated with a large volume, σ b l u e (dotted blue), and the other, σ r e d (dotted red), with a relatively lower cost, i.e., c ( σ r e d ) < c ( σ b l u e ) . If the σ r e d is found prior to the σ b l u e , UpdateDSPT ( Alg. 1 , Line: 14) can fail to return σ b l u e , which is homotopic to the optimal solution path (the solid black line).

To ensure that volumetric tree*finds all possible homotopy classes of solution paths given the aforementioned challenge, we propose to use a path optimization with dropout , which is a randomized vertex exclusion procedure. The core concept is motivated by the Yen’s algorithm [21] designed for finding the loop-less k-th shortest path for a graph.

Our dropout technique is summarized as follows:

    Whenever a solution path σ n e w is to be optimized in OptimizePath ( Alg. 1 , Line: 16), insert σ n e w to Σ n e w , a set of all solution paths found so far, and insert all vertices in σ n e w to V Σ n e w , a set of all vertices in Σ n e w .

    In UpdateDSPT ( Alg. 1 , Line: 11), compute a set of excluded vertices, V d r o p o u t ⊂ V , at a probability ( Eq. 9 ) from V prior to updating T .

    Update T with V ∖ V d r o p o u t to compute a new shortest path, σ ′ n e w from x init to x goal .

    With dropout, BetterPathFound ( Alg. 1 , Line: 15) behaves differently; it returns true if σ ′ n e w has not been observed previously, i.e., σ ′ n e w ∉ Σ n e w .

    Empty V dropout and repeat the iteration.

Note that our approach is to find a solution paths in unrevealed homotopy classes, while the original Yen’s algorithm is for finding the next, i.e., k+1-th shortest path by excluding an edge in k-th shortest path.

Fig. 3(b) shows an example of the shortest path computation with dropout. Suppose that a vertex associated with the dotted-filled ball is excluded out by dropout, which allows the planner to find σ n e w as the blue dotted path. Consequently, volumetric tree * with dropout is capable of finding a solution path homotopic to the optimum even with the coarse-grained search graph G .

To realize the dropout approach, we record vertices that have been involved in any σ n e w previously found, and then randomly exclude recorded ones, followed by updating our search tree T with remaining vertices, The dropout probability for a vertex v can be defined as follows:

P [ v ∈ V d r o p o u t ] = { c d r o p o u t 1 | V Σ n e w | 0 i f   v ∈ V Σ n e w , o t h e r w i s e , (9)
View Source Right-click on figure for MathML and additional features. \begin{equation*}\mathbb{P}[v\in V_{dropout}]=\begin{cases} c_{dropout\frac{1}{|V_{\Sigma_{new}}|}} & \mathrm{i}\mathrm{f}\ v\in V_{\Sigma_{new}},\\ 0 & \mathrm{o}\mathrm{t}\mathrm{h}\mathrm{e}\mathrm{r}\mathrm{w}\mathrm{i}\mathrm{s}\mathrm{e}, \end{cases}\tag{9}\end{equation*}

where c dropout is a user-tuned dropping-out parameter and set to be 1.

As an alternative to our dropout approach, one can consider prioritizing a candidate path σ over G . However, this alternative is difficult to be realized, since for an arbitrary vertex v ∈ V , both cost-to-come from x init and cost-to-go to x goal are unknown in advance. Moreover, using an admissible estimator, e.g., the Euclidean distance in the simplest form, can require an excessive amount of computations due to its weak bound.
SECTION IV.
Experiment

We compare the performance of volumetric tree * against the other almost-sure asymptotic optimal sampling-based planners: RRT * [1] , Lazy PRM * [4] , BIT * [7] , and Dancing PRM * [13] . Volumetric tree * is implemented using OMPL (Open Motion Planning Library) [22] including CHOMP-based path optimizer and DSPT (Dynamic Shortest Path Tree). Volumetric tree * uses NMSlib [20] for nearest neighbor search ( Sec. III-B ). Other planners use G-NAT [19] , which is available in OMPL.

We test our method with a 2-DoF rigid body planning ( Fig. 4 ) and 6-DoF manipulation problem ( Fig. 5 ) using VREP simulator [23] . We also perform evaluations in two synthetic environments ( R 2 and R 8 ) shown in Fig. 6 to illustrate different behaviors clearly, and a real robot experiment using Hubo with 7-DoF Manipulator [24] , which can be found in the video attachment to show the practical benefits.

Fig. 4:

A 2-DoF mobile robot planning problem in a conference room with narrow passages under the chairs, resulting in difficult-to-sample homotopies and surrounding wide-open areas. x init and x goal are depicted in the green and red boxes, respectively.

Show All

Fig. 5:

A 6-DoF manipulation planning problem. x goal (in the red box) is a pose of grasping the cup in the middle of the table, avoiding the other cups and the ceiling from x init (in the green box).

Show All

Our results are averaged over 30 trials and the time budgets are set to 5, 30, 1 and 10 seconds for 2-DoF rigid body, 6DoF manipulation problem, R 2 , and R 8 , respectively. The detail of the problem settings can be seen in the attached video.

Fig. 4 and 5 show 2-DoF rigid body and 6-DoF manipulation planning problems, respectively. In these scenes, planners spend much time, 20% to 80% of the total computation, on collision checking. For our method, collision checking takes about 30% to 50% of the total computation time. For the 2-DoF rigid body problem, the computation time on optimization, T ( OPT ), becomes the major computation bottleneck in volumetric tree* due to a number of explicit collision checkings during the optimizations. On the other hand, for the 6-DoF manipulation problem, collision checking, T ( CC ), becomes the main computation bottleneck for all the planners, which is caused by the higher complexity of workspace, i.e., the number of triangles.

Volumetric tree * , nevertheless, outperforms the other planners by reducing the number of vertices ( | V | ) by an order of magnitude. It can be interpreted as that our adaptive sparse graph efficiently captures the homotopy of solution paths, while achieving a better quality of solution paths by the integration with optimization-based planning.

In 6-DoF manipulation planning ( Fig. 5 ), the computational portion of T ( NN ) becomes comparable to T ( CC ) in both Lazy PRM* and Dancing PRM*, which also use lazy collision checking. On the other hand, volumetric tree* achieves a noticeable improvement with the fewer number of vertices and the reduced overhead of NN , despite its higher T ( OPT ). It is because that volumetric tree*efficiently exploits the solution path using optimization-based planning rather than constructing a dense graph to explore the configuration space. Its benefit is expected to go higher as we have a higher dimensional problem since it is required to have denser graphs in that higher space for other methods. Discussion . We also provide results with synthetic scenes for in-depth analysis. The synthetic benchmarks are designed to have the narrow passage with multiple homotopy classes of the solution path. It can also be considered NN-sensitve [15] ; the computational cost of nearest neighbor search is not negligible, since that of collision checking is relatively lighter due to the simple geometry. In both R 2 and R 8 , x i n i t and x goal are set to [ − 1 ,   − 1 ] d and [ 1, 1 ] d , respectively, in a hyper-cube of width 2, and the narrow gaps are equidistantly located in the middle wall; the gap has a height of 1 6 and i-th obstacle is defined by two diagonal points, [ − 0.15 , i ( g a p + g a p 10 ) , − 1 , ⋯ , − 1 ] and [ 0.15 ,   i × ( g a p + g a p 10 ,   1 ,   ⋯ ,   1 ) ] ∈ R d .

Fig. 6:

2D synthetic benchmark with 10 narrow gaps located in the middle of the hyper-cube. In the left figure, green squares indicate the obstacles and the black lines are the optimal solution path. The right Figure shows intermediate configurations (colored differently) during the optimization iterations. The dots indicate vertices of our sparse graph, colored according to their radii (red for smaller values).

Show All

Fig. 7 shows the solution cost as a function of computation time measured in synthetic benchmarks and the corresponding statistics are organized in Table I . In R 2 , we can observe some of the other planners outperform volumetric tree * While volumetric tree* identifies the homotopy class of the optimal solution path and optimizes solution paths toward a local optimum within the finite number of optimization iterations, it may result in near-optimal paths depending on the optimizer parameters, yet the performance gap is <1% in terms of the final solution cost. This issue can show a slowdown for our method, especially for simple, lower dimensional problems. Adopting advanced optimization techniques or automatically tuning the parameters depending on the problem are left for future work.

For the case of R 8 , volumetric tree * shows exceptional performance improvement. As we can observe in Table I , volumetric tree * checks more vertices (| VC |), which can provide a better understanding of the given space, while keeping a fewer number of vertices thanks to our adaptive sparse graph construction with C-free approximation. Furthermore, the hybridization with optimization-based planning allows volumetric tree * not to rely only on sampling for the convergence of solution paths, resulting in a better performance, especially in a higher dimensional problem.
SECTION V.
Conclusion

In this work, we have presented a hybridization of sampling-based and optimization-based planning named volumetric tree * Our approach constructs a random geometric graph, where each vertex is associated with a hypersphere volume with the C-free approximation, while rejecting other samples falling into the space occupied by the existing volumes, resulting in a sparse graph. Volumetric tree* identifies all possible homotopy classes of solution paths with the dropout technique and refines solution paths found during the execution toward the local optimum using optimization-based planning. Our experiment results have shown meaningful performance improvement in most tested environments, showing higher robustness compared to the other tested methods.

Fig. 7:

Performance comparison over computation time for different algorithms in synthetic benchmarks.

Show All

There are many interesting research directions. When it comes to sampling, volumetric tree * simply relies on the sample rejection for the adaptive sparse graph construction, which can be inefficient, especially in a higher dimensional space [25] . For this reason, it is worth studying to design a dedicated sampler that explores a promising area efficiently.

Table I Statistics of Experiment Results.

ACKNOWLEDGMENT

We appreciate the anonymous reviewers for constructive comments and insightful suggestions, and the researchers whose contributions have inspired our work. This work was supported by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIT, No. 2019RlA2C3002833).

Authors
Figures
References
Citations
Keywords
Metrics
Media
More Like This
Middle Node Optimization algorithm for global optimal path planning

2016 2nd International Conference on Control, Automation and Robotics (ICCAR)

Published: 2016
Path Planning of Inspection Robot Based on Ant Colony Optimization Algorithm

2010 International Conference on Electrical and Control Engineering

Published: 2010
Show More
References
1.
J. Kuffner and S.M. LaValle, "RRT-connect: An efficient approach to single-query path planning", IEEE Int’l. Conf. on Robotics and Automation , pp. 995-1001, 2000.
Show in Context View Article
Google Scholar
2.
LE Kavraki, P Svestka, J-C Latombe and MH Overmars, "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", IEEE Transactions on Robotics and Automation , vol. 12, no. 4, pp. 566-580, 1996.
Show in Context View Article
Google Scholar
3.
Sertac Karaman and Emilio Frazzoli, "Sampling-based algorithms for optimal motion planning", Int’l. Journal of Robotics Research , vol. 30, no. 7, pp. 846-894, 2011.
Show in Context CrossRef Google Scholar
4.
Kris Hauser, "Lazy collision checking in asymptotically-optimal motion planning", IEEE Int’l. Conf. on Robotics and Automation , 2015.
Show in Context View Article
Google Scholar
5.
Joshua Bialkowski, Michael Otte, Sertac Karaman and Emilio Frazzoli, "Efficient collision checking in sampling-based motion planning via safety certificates", Int’l. Journal of Robotics Research , vol. 35, no. 7, pp. 767-796, 2016.
Show in Context CrossRef Google Scholar
6.
Daniele Frigioni, Alberto Marchetti-Spaccamela and Umberto Nanni, "Fully dynamic algorithms for maintaining shortest paths trees", Journal of Algorithms , vol. 34, no. 2, pp. 251-281, 2000.
Show in Context CrossRef Google Scholar
7.
Jonathan D Gammell, Siddhartha S Srinivasa and Timothy D Barfoot, "Batch informed trees (BIT*): Sampling-based optimal planning via the heuristically guided search of implicit random geometric graphs", IEEE Int’l. Conf. on Robotics and Automation , pp. 3067-3074, 2015.
Show in Context View Article
Google Scholar
8.
Matt Zucker, Nathan Ratliff, Anca D Dragan, Mihail Pivtoraiko, Matthew Klingensmith, Christopher M Dellin, et al., "CHOMP: Covariant hamiltonian optimization for motion planning", Int’l. Journal of Robotics Research , vol. 32, no. 9, pp. 1164-1193, 2013.
Show in Context CrossRef Google Scholar
9.
Mrinal Kalakrishnan, Sachin Chitta, Evangelos Theodorou, Peter Pastor and Stefan Schaal, "STOMP: Stochastic trajectory optimization for motion planning", IEEE Int’l. Conf. on Robotics and Automation , pp. 4569-4574, 2011.
Show in Context View Article
Google Scholar
10.
Chonhyon Park, Jia Pan and Dinesh Manocha, "ITOMP: Incremental trajectory optimization for real-time replanning in dynamic environments", Int’l. Conf. on Automated Planning and Scheduling , 2012.
Show in Context Google Scholar
11.
John Schulman, Jonathan Ho, Alex X Lee, Ibrahim Awwal, Henry Bradlow and Pieter Abbeel, "Finding locally optimal collision-free trajectories with sequential convex optimization", Robotics: science and systems , 2013.
Show in Context CrossRef Google Scholar
12.
Sanjiban Choudhury, Jonathan D Gammell, Timothy D Barfoot, Siddhartha S Srinivasa and Sebastian Scherer, "Regionally accelerated batch informed trees (RABIT*): A framework to integrate local information into optimal path planning", IEEE Int’l. Conf. on Robotics and Automation , vol. 2016, pp. 4207-4214.
Show in Context View Article
Google Scholar
13.
Donghyuk Kim, Youngsun Kwon and Sung-Eui Yoon, " Dancing PRM * : Simultaneous planning of sampling and optimization with configuration free space approximation ", IEEE Int’l. Conf. on Robotics and Automation , pp. 7071-7078, 2018.
Show in Context View Article
Google Scholar
14.
Alan Kuntz, Chris Bowen and Ron Alterovitz, "Fast anytime motion planning in point clouds by interleaving sampling and interior point optimization", Int’l. Symposium on Robotics Research , 2017.
Show in Context Google Scholar
15.
Michal Kleinbort, Oren Salzman and Dan Halperin, "Collision detection or nearest-neighbor search? on the computational bottleneck in sampling-based motion planning", Int’l. Workshop on the Algorithmic Foundations of Robotics , 2016.
Show in Context Google Scholar
16.
Valerio Varricchio and Emilio Frazzoli, "Asymptotically optimal pruning for nonholonomic nearest-neighbor search", IEEE Conf. on Control and Decision , pp. 4459-4466, 2018.
Show in Context View Article
Google Scholar
17.
A. Shkolnik and R. Tedrake, "Sample-based planning with volumes in configuration space", arXiv preprint arXiv:1109.3145 , 2011.
Show in Context Google Scholar
18.
Sean Quinlan and Oussama Khatib, "Elastic bands: Connecting path planning and control", IEEE Int’l. Conf. on Robotics and Automation , pp. 802-807, 1993.
Show in Context View Article
Google Scholar
19.
Sergey Brin, "Near neighbor search in large metric spaces", International Conference on Very Large Data Bases , 1995.
Show in Context Google Scholar
20.
Leonid Boytsov and Bilegsaikhan Naidan, "Engineering efficient and effective non-metric space library", Int’l Conf. on Similarity Search and Applications , pp. 280-293, 2013.
Show in Context CrossRef Google Scholar
21.
Jin Y Yen, "Finding the k shortest loopless paths in a network", management Science , vol. 17, no. 11, pp. 712-716, 1971.
Show in Context CrossRef Google Scholar
22.
A. Şucan Ioan, Mark Moll and Lydia E. Kavraki, "The Open Motion Planning Library", IEEE Robotics & Automation Magazine , vol. 19, no. 4, pp. 72-82, 2012, [online] Available: http://ompl.kavrakilab.org.
Show in Context Google Scholar
23.
M. Freese, E. Rohmer and S. P. N. Singh, "V-REP: a versatile and scalable robot simulation framework", IEEE/RSJ Int’l. Conf. on Intelligent Robots and Systems , 2013.
Show in Context Google Scholar
24.
M. Lee, Y. Heo, J. Park, H. Yang, P. Benz, H. Jang, et al., "Fast perception planning and execution for a robotic butler: Wheeled humanoid m-hubo", IEEE/RSJ Int’l. Conf. on Intelligent Robots and Systems , 2019.
Show in Context Google Scholar
25.
Jonathan D Gammell, Siddhartha S Srinivasa and Timothy D Barfoot, " Informed RRT * : Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic ", IEEE/RSJ Int’l. Conf. on Intelligent Robots and Systems , pp. 2997-3004, 2014.
Show in Context View Article
Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
