Zotero automatically redirected your request to ieeexplore.ieee.org through the proxy at thi.idm.oclc.org. Don’t Proxy This Site Proxy Settings ✕
IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close

Skip to Main Content

Scheduled Maintenance: IEEE Xplore will be unavailable on Saturday, September 17 from 9:00am-noon ET (1-4pm UTC) and Sunday, September 18 from 9:00-11:00am ET (1-3pm UTC). We apologize for any inconvenience.

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
ADVANCED SEARCH
Conferences > 2020 IEEE International Confe...
Multi-Robot Path Deconfliction through Prioritization by Path Prospects
Publisher: IEEE
Cite This
PDF
Wenying Wu ; Subhrajit Bhattacharya ; Amanda Prorok
All Authors
5
Paper
Citations
407
Full
Text Views

    Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Description
    III.
    Decentralized Planning
    IV.
    Prioritization Based on Path Prospects
    V.
    Evaluation

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
Abstract:
This work deals with the problem of planning conflict-free paths for mobile robots in cluttered environments. Since centralized, coupled planning algorithms are computationally intractable for large numbers of robots, we consider decoupled planning, in which robots plan their paths sequentially in order of priority. Choosing how to prioritize the robots is a key consideration. State-of-the-art prioritization heuristics, however, do not model the coupling between a robot's mobility and its environment. This is particularly relevant when prioritizing between robots with different degrees of mobility. In this paper, we propose a prioritization rule that can be computed online by each robot independently, and that provides consistent, conflict-free path plans. Our innovation is to formalize a robot's path prospects to reach its goal from its current location. To this end, we consider the number of homology classes of trajectories, which capture distinct prospects of paths for each robot. This measure is used as a prioritization rule, whenever any robots enter negotiation to deconflict path plans. We perform simulations with heterogeneous robot teams and compare our method to five benchmarks. Our method achieves the highest success rate, and strikes a good balance between makespan and flowtime objectives.
Published in: 2020 IEEE International Conference on Robotics and Automation (ICRA)
Date of Conference: 31 May 2020 - 31 August 2020
Date Added to IEEE Xplore : 15 September 2020
ISBN Information:
ISSN Information:
INSPEC Accession Number: 19987025
DOI: 10.1109/ICRA40945.2020.9196813
Publisher: IEEE
Conference Location: Paris, France
SECTION I.
Introduction

Technological advances are enabling the large-scale deployment of robots to solve various types of problems in logistics and transport [9] , [12] , [14] . The commonality of many of these applications is that they require methods that assign and guide individual robots to goal locations on collision-free paths. The challenge of providing fast, optimal and complete solutions to this problem is very current, as we continue to complexify the problem domain by considering increasingly large and heterogeneous robot teams in navigation-constrained, cluttered environments. In light of these developments, our work focuses on the coupling between a robot’s mobility traits and the built environment. In particular, we posit that a robot’s ability to reach its goal can be measured, and that by integrating this measure in planning routines, better joint path plans can be found.

Approaches to multi-robot path planning can generally be described as either centralized (assuming the existence of a central component that knows the state of the whole robot system) or decentralized (where no single component has the full picture, but cooperation must still be achieved). Centralized methods can be further categorized according to whether they are coupled or decoupled. Coupled approaches operate in the joint configuration space of all the robots, allowing for completeness (e.g., see [13] , [22] ). However, solving for optimality is NP-hard [23] , and although significant progress has been made towards alleviating the computational load, e.g., [11] , [18] , [22] , these approaches still scale poorly in environments with a high number of path conflicts. On the other hand, decoupled approaches plan for each robot separately, and solve conflicts between paths as they arise, to ensure that collisions with other robots are avoided. Approaches to decoupled planning include sequential programming [6] , vehicle prioritization [20] and velocity tuning [15] . These methods offer improved scalability, but often at the cost of completeness and optimality [2] .
Fig. 1:

An example problem where considering path diversity is important for the prioritization. The red robot has two possible paths, whereas the larger blue robot only has one. On the left, the red robot has first priority. It takes the shorter of its two paths, however this forces the blue robot to wait in place until it can follow. On the right, the blue robot, with lower path diversity, has first priority. The red robot is able to take its alternative path to avoid it, giving a faster overall solution.

Show All

Prioritized planning, first proposed in [10] as a centralized strategy, is a very efficient method because it allows robots to plan sequentially in space-time in order of priority, eschewing the combinatorial complexities of coupled approaches. In this approach, each robot plans a minimum-cost path to its goal that avoids the computed trajectories of any higher-priority robots. Clearly, the chosen priority order will affect the solution found. It is generally desirable to optimize metrics such as makespan (the time at which the last robot in the team arrives), flowtime (the sum of all robots’ travel times), or success rate (completion); targeting the optimization of either one of these objectives (but commonly not all simultaneously), researchers have proposed heuristics for choosing a planning order [2] , [16] , [20] , [21] .

The original prioritized planning idea in [10] used a fixed total priority ordering, and has been adapted in various papers to work in a decentralized manner (e.g., [5] , [21] ). However, choosing how to prioritize the team of robots still remains a key consideration. Moreover, as the operational conditions of the robots vary throughout time, and environments are in general not static, it is crucial to consider online (dynamic) priority schemes. Although several dynamic priority schemes have been considered thus far (e.g., [1] , [7] , [8] , [17] , [20] ), none of these schemes account for the coupling between robot mobility and the environment, and hence, may fail to find better solutions. Such a scenario is exemplified in Fig. 1 , which shows how considering a robot’s path diversity leads to a reduction of both flowtime and makespan.

In this work, we focus on how the coupling between the built environment and a robot’s mobility traits determines its path options to reach its goal. In specific, we propose a decentralized planning method that makes use of a novel prioritization rule based on an estimate of the robot’s path prospects. The key idea that underpins this method is that individual robots have distinct path prospects within the same environment, due to unique conditions arising from kinematic, dynamic, or environmental constraints. The purpose of this work is to provide a formal introduction to the concept of path prospects, and a demonstration of its utility in path planning for (potentially heterogeneous) multi-robot teams.

Contributions. In this work, we propose a novel prioritization heuristic that is based on the number of path prospects that represent a robot’s distinct path options to reach its goal. This prioritization rule that has two key components: ( 1 ) a method that computes the distinct number of path options a robot has to reach its goal, based on theory from algebraic topology, and ( 2 ), a method that defines the area of relevance , within which these path options are computed. We show how our prioritization rule is embedded in a decentralized, online planning algorithm to de-conflict robot trajectories between robots with potentially different mobility capabilities. We prove that this dynamic planning algorithm provides a partial ordering over the robot set, and hence, is cycle-free. Our results demonstrate that the planned solutions provide competitive makespan and flowtime performance, at very high success rates.
SECTION II.
Problem Description

We consider a D −dimensional workspace W ⊆ R D and a set of B static obstacles O = { o 1 , … , o B } with o i ⊂ W . A team of N robots ℛ = { r 1 ,…,r N } navigate in this workspace. The robot team may be heterogeneous in size; the effective space occupied by robot r n is ρ n .

Graph representation. Each robot travels along the edges of a directed graph G n = ⟨ V n , E n ⟩ , which allows only feasible motion. This graph can be arbitrarily dense, and can represent motion with high granularity (as such it can accommodate a wide range of motion); furthermore, it does not need to be fully represented in memory, but instead, can be generated online (e.g., by sampling motion primitives). In particular, a robot r n that travels along edges in G n cannot collide with any obstacles in O . The set V n is defined by vertices v i = 〈 x i ,t i 〉 with x i ∈ W and t i ∈ ℝ + . The set E n is defined by directed edges e ij : ℝ + ↦ ℝ D , between vertex v i and v j , such that e ij ( t i ) = x i , e ij ( t j ) = x j , and t i ≤ t j . In other words, the graph G n exists in a ( D +1)-dimensional space, where the last dimension represents time.

Labeled assignment. Robot r n is assigned a start location s n ∈ W (corresponding to vertex v i with x i = s n and t i = 0). Similarly, robot r n is assigned a goal location g n ∈ W (corresponding to a set of vertices v i with x i = g n and t i ∈ ℝ + ). A labeled assignment A is a set of tuples {〈 s 1 , g 1 〉 ,… ,〈 s N , g N 〉}, for all robots in ℛ.

Conflict-free trajectories. A robot r n has a trajectory τ n : R + ↦ W that represents a sequence of edges traversed in G n such that two consecutive edges share a common vertex. A trajectory π n is said to be satisfying if π n (0) = s n and there exists a time t f n such that π n ( t f n ) = g n . A robot r n navigating along this path defines a volume V ( π n ,ρ n ) that depends on its size. To coordinate the navigation in W , two robots r n and r m can share their path plans with each other if they are within communication range, i.e., if their positions are separated by a quantity less than c. We denote by N n the set of all robots within communication range of r n (including r n ). We make use of a function TRIM( G n ,ρ n ,V ( π m ,ρ m )) that removes all unfeasible paths in G n that would collide with the volume defined by robot r m . Any path in the graph returned by TRIM is ensured to be conflict-free with the path π m of robot r m .

In order to facilitate the definition of a given robot’s configuration space, we define the notion of an effective obstacle , which is a set of original obstacles in O , such that no trajectories in a given graph passes between them (see Figure 6 ). Specifically, a robot r n has a set of effective obstacles O ~ n = { o ~ 1 , … , o ~ B ~ } , B ~ ≤ B , with o ~ i ⊆ O and ∪ i o ~ i = O and ∩ i o ~ i = ∅ .

Figure 2 shows a labeled assignment for two robots that must plan minimum-cost trajectories from their start positions to their goal positions. Figure 3 demonstrates how robot r 2 circumnavigates the path plan of robot r 1 , after execution of Trim( G 2 ,ρ 2 ,V ( π 1 ,ρ 1 )).

Assumptions. We assume that a robot is able to check for collisions between its own planned path and another robot’s. To facilitate this, we assume all their clocks are synchronized. Messaging delay and clock misalignment can be accommodated (e.g., through time-stamps), however, the deviations must be negligible with respect to robot dynamics (i.e., the speed at which the motion graph is traversed). We assume that robot detections are always mutual (when they come into communication range).

Objective. Our goal is to find a method that has a high success rate and that strikes a good balance between minimizing the mean flowtime ( ∑ n t f n / N ) and minimizing the makespan ( max n t f n ) , such that each robot r n follows a satisfying trajectory π n which is conflict-free with all other robots’ paths. We note that, in general, makespan and flowtime objectives demonstrate a pairwise Pareto optimal structure, and cannot be simultaneously optimized [23] .
SECTION III.
Decentralized Planning

Our decentralized path planning algorithm can be broken down into two components: coordination , where we consider how robots communicate and negotiate a priority ordering; and local planning , where we consider how an individual robot plans a trajectory to its goal given the plans of other robots within communication range. We make use of the following definitions.

Definition 1 (Priority ordering). A priority ordering ≺ is such that a robot r n ∈ ℛ with priority ξ n is of higher priority than robot r m with priority ξ m iff ξ n ≺ ξ m .
Fig. 2:

Planar workspace with two robots, r 1 and r 2 , and their respective start and goal positions. Robot r 2 has an effective size ρ 2 that is twice that of robot r 1 . The minimum-cost paths would result in a collision.

Show All
Fig. 3:

On the left, we plot the space-time graph G 1 with a minimum-cost trajectory π 1 for robot r 1 . On the right, we see how trajectory π 2 sweeps a volume V ( π 2 ,ρ 2 ) that does not intersect with V ( π 1 ,ρ 1 ).

Show All

Definition 2 (Ordered robot set). Given a priority ordering ≺ on a set of robots ℛ , the pair (ℛ,≺) is a strict partially ordered robot set.

Definition 3 (Ordered robot neighborhood). Given a priority ordering ≺ , for a given robot r n , H n = { r m | ξ m ≺ ξ n and r m ∈ N n } is the set of robots with higher priority, and L n =   { r m | ξ m ≻ ξ n and  r m ∈ N n } is the set of robots with lower priority. The neighborhood of robot r n defined as N n is strongly connected (by symmetry of communication). By definition, the robot neighborhood N n is an ordered robot set ( N n ,≺).
Algorithm 1: Dynamic Prioritized Path Planning
Algorithm 2: Re-plan trajectory
A. Coordination Strategy

Our coordination strategy is detailed in Algorithm 1 , and is based on two main elements, described as follows:

Computation of an ordered robot neighborhood : Each robot is able to detect other robots when they come into the communication range c , and when they leave it. A robot r n has a priority score ξ n , which it can compute locally by a function ComputePriority (see Section IV ). Each robot r n maintains two lists of robots currently in its range: H n contains the robots with higher priority whilst L n contains the robots with lower priority. In a dynamic priority scheme, r n recomputes ξ n whenever a new robot comes into range. It then broadcasts this updated priority value to ensure all robots within range (i.e., in its neighborhood) have a consistent plan.

Re-planning : Re-planning is triggered for r n in three cases: (i) when a new robot comes into range that has a higher priority, (ii) when an updated plan is received from a higher priority robot, or (iii) , when a robot r m broadcasts a new priority ξ m . When r n re-plans, it calls a function ComputeNewPlan that takes into account the planned trajectories of robots with higher priority (in H n ). The robot then communicates its new plan to robots in L n .

Proposition 1. Algorithm 1 is deadlock-free.

Proof. Since each robot r n in ℛ executes Alg. 1 , the result is a collection of ordered robot neighborhoods N n , ∀ n. If two robot neighborhoods N n and N m share a common robot r j , then, by transitivity, there must be a partial ordering in N n ∪ N m , since Algorithm 1 ensures that robot r j can only have one priority score ξ j that is broadcast. Hence, Algorithm 1 constructs an ordered robot set (ℛ,≺). Since partial orderings are acyclic, no planning deadlocks can arise. □
B. Local Planning

Each robot handles the computation of its own minimum-cost trajectory from its current location to its goal location g n (see function ComputeNewPlan). The resulting trajectory avoids the static obstacles in the environment as well as the planned paths of any higher-priority robots. In our implementation, all robots use the HCA* algorithm proposed in [19] which applies A* search to a space-time map, and uses a reservation table to record the trajectories of other robots to be avoided. This effectively implements the function TRIM. The complexity of TRIM is O (| π m | log | E n |) assuming the usage of a fast spatial lookup structure, such as a quadtree. When the spatial lookup can be done in constant time, the complexity becomes O (| π m |). The complexity of Plan-PathFromCurrentPosition is O (| E n | + | V n | log | V n |), or, when V n ∝ E n , O (| V n | log | V n |)). Hence, the complexity of Alg. 2 is O ( | N n | | π m | l o g | E n | + | E n | + | V n | l o g | V n | ) .

This local planning approach is general, in that any path planning algorithm that is able to avoid dynamic obstacles with known trajectories can be used; indeed, it is even possible for different robots to use different algorithms, so long as an implementation of the function TRIM, which reconciles heterogeneous space-time graphs, can be embedded into the planning function.
SECTION IV.
Prioritization Based on Path Prospects

During navigation, when robots come within communication range, they enter negotiations to deconflict their path plans. To facilitate this negotiation, we implement a rule that prioritizes robots with fewer path options. Our prioritization rule has two key components: ( 1 ) a method that estimates the number of options a robot has to reach its goal, and ( 2 ), a method that defines the area within which these path options are computed. The following paragraphs detail our approach.
A. Homology Classes of Trajectories

To develop a method for ( 1 ) above, we build on theory from algebraic topology. For a particular robot, we consider the trajectories in different homology classes as the path prospects for the robot. Homology classes (of trajectories) in an environment represent topologically distinct classes of trajectories ( Figure 5 ). For example, each homology class can be thought to be capturing the width of a passage or separation between two obstacles, and depending on the size/kinematic capabilities of a robot, that passage (and hence the corresponding homology class) may or may not be available to the robot. This gives an effective means of designing a prioritization heuristic without having to consider the set of all possible paths in the discrete domain that the robots can physically take to reach their respective goals.

Two trajectories connecting the same start and goal points on a planar domain are said to be in the same homology class if the closed loop formed by the two trajectories are null homologous , i.e., it forms the oriented boundary of a two-dimensional obstacle-free region [4] . The homology class of a loop, in turn, can be quantified by winding numbers around the connected components of effective obstacles, with the null homologous class having zero winding number around every obstacle. Thus, in a planar domain with z connected components of effective obstacles, the homology invariant of a loop is given by a vector of integers, [ h 1 , h 2 , ⋯ , h z ] ∈ Z z , where h i is the winding number around the i th obstacle.

However, there are infinitely many homology classes since a trajectory can loop/wind around the same obstacle multiple times, and for every different number of windings the class assigned to the loop is different. In order to prevent the separate counting of the multi-looping homology classes, one can compute the homology invariants in the "mod 2" coefficient [3] , Z 2 = Z / 2 Z = { 0 , 1 } . Simply put, the homology invariant in the Z 2 coefficients become [ h 1 ,h 2 ,⋯ ,h z ] mod 2 ∈ Z z 2 . Doing so identifies all the even winding numbers to 0 and all the odd winding numbers to 1, thus preventing the creation of separate homology classes for loops that wind around obstacles multiple times ( Figure 4 ). Z z 2 is a finite set, and in fact has 2 z elements. Thus, the number of Z 2 coefficient homology classes in a planar domain with z connected components of effective obstacles is 2 z , which we use in the construction of heuristics in the path prospect algorithm.
Fig. 4:

Homology classes of trajectories. τ 2 and τ ′ 2 are in different classes in regular homology, but map to the same class in Z 2 -coefficient homology.

Show All
B. Path Prospect Algorithm

We use the number of Z 2 coefficient homology classes in an area with z effective obstacles to return an estimate of a robot r n ’s path prospects P ( t ) n at time t in that area. Next, we develop a method for computing a relevant area (and its associated vertices), to define the component ( 2 ), above.

A robot r n ’s path prospects P ( t ) n are an indicator of the number of distinct paths to goal g i from its current location at time t. This can be estimated by counting the effective obstacles O ~ n which r n will likely come across as it moves towards its goal g n from its current position. Specifically, we do not wish to count any effective obstacles that lie behind the robot, given g n and its current location. To achieve this, we define a set of forwards vertices F ( t ) n ⊆ V n and count only the effective obstacles whose areas intersect the area in W containing all vertices in F ( t ) n and the edges that link them.

To define F ( t ) n , we use the notion of true distance as proposed in [19] . The true distance of a vertex v ∈ V n is the length of the shortest satisfying path in G n from v to g n . We define F ( t ) n ⊆ V n to be the set of vertices that are reachable from r n ’s location at time t by only transitioning from a vertex v i to a vertex v j , if v j can still lead to paths that are shorter than the estimated longest true distance of the robot team. Note that the longest true distance can be estimated locally by broadcasting TrueDistance( s n , g n ) (this value is time-invariant) along with priority ξ n in Algorithm 1 . Upon receiving such a message, each robot can update its estimate by taking the maximum between the current estimate and the value of the message. The set of forwards vertices can be computed using a variant of Dijkstra’s algorithm (see Algorithm 4 ), with a complexity of (| E n | + | V n | log | V n |).
Fig. 5:

Illustration of path prospects for a robot navigating to its goal, computed for two different moments in time. In (a), only 4 representative paths out of 8 are shown, for clarity.

Show All
Fig. 6:

Example where two robots with different sizes have different path prospects. In (b), the two central obstacles merge into a single effective obstacle. The lighter borders around each obstacle depict their inflation by the robots radius ρ n , which is one method for computing effective obstacles.

Show All

Figure 5 illustrates the path prospects for a robot navigating towards its goal, at two consecutive moments in time.
C. Prioritization Heuristic

We use the path prospect algorithm ( Algorithm 3 ) to prioritize robots with conflicting paths. For robots r n and r m , we define the ordering ≺ such that
P ( t ) n < P ( t ) m ⇔ ξ n ≺ ξ m . (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*} P_n^{(t)} < P_m^{(t)} \Leftrightarrow {\xi _n} \prec {\xi _m}.\tag{1}\end{equation*}

Priority orderings are negotiated through Algorithm 1 . By prioritizing robots that have fewer path prospects, we force those robots that have more options to deviate from their preferred (best) plans, and to give way to the robots that have fewer options. Figure 6 illustrates how different robot sizes affect the available path prospects (and hence the priority ordering).
SECTION V.
Evaluation

We implement our method in grid-worlds. This allows us to easily create valid graphs G n for all robots, implement the corresponding TRIM function, and create a set of effective obstacles O ~ n for any robot r n by inflating original obstacles in O by ρ n . We note that this dilation can be done more generally by applying Minkowski addition.

We evaluate the performance of our method in two experiments. The first experiment ( S1 ) tests the performance of our method in a large environment with a large number of robots. We produce a map of size 150×150 and use a team of 100 robots of size ranging from 1 to 4, in equal proportion, with a communication range of 50. We generate 500 problems and record the performance of all seven algorithms. The second experiment ( S2 ) tests the methods across different types of environment. We generate six different cluttered grid-worlds, depicted in Figure 7 , of size 75×75. We use a team of 10 robots of five different sizes, with two robots per size, and sizes ranging from 1 to 5. For each base environment, we generate 500 problems (random assignments), and record the performance of the solutions provided by our algorithm (with two alternative tie-break options to guarantee strict orderings), as well as by five additional benchmark algorithms (described below). We solve each problem across communication ranges c that vary between 30 and 50.
Algorithm 3: Path Prospects
Algorithm 4: Compute Set of Forwards Vertices
A. Benchmarks

In order to test the efficacy of our prioritization method, we perform an ablation analysis. The aim of this ablation study is to identify the efficacy of our proposed path prospects heuristic by isolating its two key components: (i) the spatial area within which it is applied, and (ii) the consideration of the robot-environment coupling. To this end, we implement seven variant schemes for online decentralized prioritization; we focus our experimental analysis to comparable methods that scale at most linearly with the number of neighboring robots. Four of these schemes incorporate state-of-the art heuristics, two of the schemes represent our proposed method, and the final scheme incorporates a random rule:
Fig. 7:

Examples of path solutions (blue lines) for the six maps used in our problem sets. In each problem, 10 robots (blue squares) of five different sizes are assigned random start and goal positions.

Show All
(1) Naive Surroundings (NS)

This prioritization heuristic follows the idea in [7] , whereby robots with the most cluttered surrounding workspace are prioritized. Our implementation of this method counts the number of original obstacles in O within a range z = 30 (which corresponds to the best performing range found via grid-search). This variant does not consider the coupling between robot mobility and the environment, and we term it naive. We break ties by prioritizing robots with longest remaining paths. (2) Coupled Surroundings (CS): This prioritization heuristic also follows [7] , yet we adapt it to consider the coupling between robot mobility and the environment, whereby effective obstacles in O ~ are counted (instead of original obstacles). When robot priorities are equal, we tie-break by giving a higher priority to the robot that has the longest remaining path. (3) Longest First (LF): This method prioritizes the robot that has the longest remaining path to its goal, which corresponds to the heuristic used in [20] . When robot priorities are equal, we tie-break by giving a random priority order. (4) Forwards Looking (FL): We consider a naive approach that disregards the coupling of robot mobility and the environment. It is naive in that it uses original obstacles in O instead of obstacles in O ~ to compute the number of path options. The number of path options is considered in the area that contains paths with a cost less than the cost of the currently longest path known, as specified by Alg. 4 . We tie-break this method by prioritizing robots with the longest remaining paths. (5) Path Prospects (PP-R): This method implements our path prospect algorithm. We tiebreak randomly. (6) Path Prospects (PP-LF): This method implements our path prospect algorithm. We tie-break with longest-first. (7) Random (R): Finally, we also implement a prioritization rule that randomly assigns the priority order.
B. Results

We evaluate the seven algorithm variants by computing two performance metrics: we consider the percent increase in makespan and flowtime, over the ideal makespan and flowtime, respectively, that assumes a collision-free world without robot interactions.

Figure 8 shows results for the large map used in experiment S1. Our two proposed methods PP-R and PP-LF lie on the empirical Pareto front (i.e., lowest values over both dimensions). Numerical results for experiment S2 show that our two proposed methods PP-R and PP-LF lie on the empirical Pareto front (i.e., lowest values over both dimensions) across different environments. Compared to LF , our method provides a valuable trade-off when flowtime is important. When comparing PP-R and LF to CS , CS incurs a loss of performance in makespan or flowtime performance, or both. This indicates that the area within which path options are considered is important. Overall, our two methods consistently outperform the naive variant, FL , which uses the same area for computing path prospects (i.e., forwards vertices), but disregards the robots’ mobility within this area. This demonstrates the importance of considering the coupling between the robot and its environment.
Fig. 8:

Experiment S1 obtained on a large map of size 150×150 with 100 robots. Percentage increase over the ideal flowtime and ideal makespan, for the seven variant prioritization heuristics. We show a 95% confidence interval. Blue nodes correspond to path prospect heuristics, red nodes represent the alternate benchmarks.

Show All

We also compute the success rates for the seven algorithms, averaged over all environments. The highest success rates are achieved by our two methods, PP-R at 95.7% and PP-LF at 94.1%, with all other methods in the range 82%-93%.
SECTION VI.
Conclusion

We presented a method for online prioritized path planning for teams of robots. Our decentralized, decoupled planning algorithm provides a deadlock-free means of negotiating path plans among robots, and uses a prioritization heuristic that is based on Z 2 coefficient homology classes, which quantifies a robot’s number of available path options. The usage of algebraic topology gives an effective means of designing the prioritization heuristic without having to consider the set of all possible paths in the discrete domain that the robots can physically take to reach their respective goals. We compared our method to five alternate heuristics to show that it provides an interesting alternative to other prioritized, scalable methods by operating on a different point of the Pareto front; in most environments test, our method provides the only point on the Pareto front.
ACKNOWLEDGEMENT

We gratefully acknowledge the support of ARL grant DCIST CRA W911NF-17-2-0181. This work incorporates results from the research project Co-Evolving Built Environments and Mobile Autonomy for Future Transport and Mobility funded by the Centre for Digital Built Britain, under InnovateUK grant number RG96233.

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
Path Planning of Multi-Robot Systems With Boolean Specifications Based on Simulated Annealing

IEEE Robotics and Automation Letters

Published: 2022
An Improved Real-Time Path Planning Method Based on Dragonfly Algorithm for Heterogeneous Multi-Robot System

IEEE Access

Published: 2020
Show More
References
1.
K. Azarm and G. Schmidt, "Conflict-free motion of multiple mobile robots based on decentralized motion planning and negotiation", Robotics and Automation 1997. Proceedings. 1997 IEEE International Conference on , vol. 4, pp. 3526-3533, 1997.
Show in Context View Article
Google Scholar
2.
M. Bennewitz, W. Burgard and S. Thrun, "Finding and optimizing solvable priority schemes for decoupled path planning techniques for teams of mobile robots", Robotics and autonomous systems , vol. 41, no. 2-3, pp. 89-99, 2002.
Show in Context CrossRef Google Scholar
3.
S. Bhattacharya, R. Ghrist and V. Kumar, "Persistent homology for path planning in uncertain environments", IEEE Transactions on Robotics (T-RO) , vol. 31, no. 3, pp. 578-590, March 2015.
Show in Context View Article
Google Scholar
4.
S. Bhattacharya, M. Likhachev and V. Kumar, "Topological constraints in search-based robot path planning", Autonomous Robots , vol. 33, no. 3, pp. 273-290, October 2012.
Show in Context CrossRef Google Scholar
5.
M. Cáp, P. Novák, M. Seleckỳ, J. Faigl and J. Vokffnek, "Asynchronous decentralized prioritized planning for coordination in multi-robot system", Intelligent Robots and Systems (IROS) 2013 IEEE/RSJ International Conference on , pp. 3822-3829, 2013.
Show in Context Google Scholar
6.
Y. Chen, M. Cutler and J. P. How, "Decoupled multiagent path planning via incremental sequential convex programming", Robotics and Automation (ICRA) 2015 IEEE International Conference on , pp. 5954-5961, 2015.
Show in Context View Article
Google Scholar
7.
C. M. Clark, T. Bretl and S. Rock, "Applying kinodynamic randomized motion planning with a dynamic priority system to multi-robot space systems", Aerospace Conference Proceedings 2002 , vol. 7, pp. 7-7, 2002.
Show in Context View Article
Google Scholar
8.
A. A. Deshpande and K. R. Nataraj, "A review: Priority based motion control of multiple robot systems", International Journal of Innovative Research in Science Engineering and Technology , vol. 2, no. 1, 2013.
Show in Context Google Scholar
9.
J. Enright and P. R. Wurman, "Optimization and coordinated autonomy in mobile fulfillment systems", Automated action planning for autonomous mobile robots , pp. 33-38, 2011.
Show in Context Google Scholar
10.
M. Erdmann and T. Lozano-Pérez, "On multiple moving objects", Algorithmica , vol. 2, no. 1-4, pp. 477, 1987.
Show in Context CrossRef Google Scholar
11.
C. Ferner, G. Wagner and H. Choset, "ODrM* optimal multirobot path planning in low dimensional search spaces", 2013 IEEE International Conference on Robotics and Automation , pp. 3854-3859, 2013.
Show in Context View Article
Google Scholar
12.
P. Grippa, D. A. Behrens, C. Bettstetter and F. Wall, "Job selection in a network of autonomous uavs for delivery of goods", Robotics: Science and Systems , 2017.
Show in Context CrossRef Google Scholar
13.
W. Hönig, T. S. Kumar, L. Cohen, H. Ma, H. Xu, N. Ayanian, et al., "Multi-agent path finding with kinematic constraints", Twenty-Sixth International Conference on Automated Planning and Scheduling , 2016.
Show in Context Google Scholar
14.
N. Hyldmar, Y. He and A. Prorok, "A fleet of miniature cars for experiments in cooperative driving", IEEE International Conference on Robotics and Automation (ICRA) , 2019.
Show in Context View Article
Google Scholar
15.
K. Kant and S. W. Zucker, "Toward efficient trajectory planning: The path-velocity decomposition", The international journal of robotics research , vol. 5, no. 3, pp. 72-89, 1986.
Show in Context CrossRef Google Scholar
16.
K. Okumura, M. Machida, X. Defago and Y. Tamura, "Priority inheritance with backtracking for iterative multi-agent path finding", IJCAI , 2019.
Show in Context CrossRef Google Scholar
17.
R. Regele and P. Levi, "Cooperative multi-robot path planning by heuristic priority adjustment", Intelligent Robots and Systems 2006 IEEE/RSJ International Conference on , pp. 5954-5959, 2006.
Show in Context View Article
Google Scholar
18.
G. Sharon, R. Stern, A. Felner and N. R. Sturtevant, "Conflict-based search for optimal multi-agent pathfinding", Artificial Intelligence , vol. 219, pp. 40-66, 2015.
Show in Context CrossRef Google Scholar
19.
D. Silver, "Cooperative pathfinding", Artificial intelligence and interactive digital entertainment , vol. 1, pp. 117-122, 2005.
Show in Context Google Scholar
20.
J. P. Van Den Berg and M. H. Overmars, "Prioritized motion planning for multiple robots", IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) , pp. 430-435, 2005.
Show in Context View Article
Google Scholar
21.
P. Velagapudi, K. Sycara and P. Scerri, "Decentralized prioritized planning in large multirobot teams", Intelligent Robots and Systems (IROS) 2010 IEEE/RSJ International Conference on , pp. 4603-4609, 2010.
Show in Context View Article
Google Scholar
22.
G. Wagner and H. Choset, "M*: A complete multirobot path planning algorithm with performance bounds", Intelligent Robots and Systems (IROS) 2011 IEEE/RSJ International Conference on , pp. 3260-3267, 2011.
Show in Context View Article
Google Scholar
23.
J. Yu and S. M. LaValle, "Structure and intractability of optimal multirobot path planning on graphs", AAAI , 2013.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
