Auton Robot (2012) 33:273–290 DOI 10.1007/s10514-012-9304-1
Topological constraints in search-based robot path planning
S. Bhattacharya · M. Likhachev · V. Kumar

Received: 7 September 2011 / Accepted: 5 June 2012 / Published online: 20 June 2012 © Springer Science+Business Media, LLC 2012

Abstract There are many applications in motion planning where it is important to consider and distinguish between different topological classes of trajectories. The two important, but related, topological concepts for classifying manifolds that are of importance to us are those of homotopy and homology. In this paper we consider the problem of robot exploration and planning in Euclidean conﬁguration spaces with obstaclees to (a) identify and represent different homology classes of trajectories; (b) plan trajectories constrained to certain homology classes or avoiding speciﬁed homology classes; and (c) explore different homotopy classes of trajectories in an environment and determine the least cost trajectories in each class. We exploit theorems from complex analysis and the theory of electromagnetism to solve the problem 2-dimensional and 3-dimensional conﬁguration spaces respectively. Finally, we describe the extension of these ideas to arbitrary D-dimensional conﬁguration spaces. We incorporate these basic concepts to develop a practical graph-search based planning tool with theoretical guaran-
Electronic supplementary material The online version of this article (doi:10.1007/s10514-012-9304-1) contains supplementary material, which is available to authorized users.
S. Bhattacharya ( ) · V. Kumar Department of Mechanical Engineering and Applied Mechanics, School of Engineering and Applied Science, University of Pennsylvania, Towne 229, 220 S. 33rd Street, Philadelphia, PA 19104, USA e-mail: subhrabh@seas.upenn.edu
V. Kumar e-mail: kumar@seas.upenn.edu
M. Likhachev Robotics Institute, Carnegie Mellon University, NSH 3211, 5000 Forbes Ave, Pittsburgh, PA 15213, USA e-mail: maxim@cs.cmu.edu

tees by combining integration theory with search techniques, and illustrate it with several examples.
Keywords Robot path planning · Topological constraints · Graph search · Homotopy · Homology
1 Introduction
1.1 Motivation: homotopy classes of trajectories
Homotopy classes of trajectories arise due to presence of obstacles in an environment. Two trajectories connecting the same start and goal coordinates are in the same homotopy class if they can be smoothly deformed into one another without intersecting any obstacle in the environment, otherwise they are in different homotopy classes. In many applications, it is important to distinguish between trajectories in different homotopy classes, as well as identify the different homotopy classes in an environment (e.g., trajectories that go left around a circle in two dimensions versus right). For example, in order to deploy a group of agents to explore an environment (e.g., for eliminating potential threats, searching for rewards/targets (Schwager et al. 2011), as well as for updating obstacle map of a partially known environment (Bourgault et al. 2002)), an efﬁcient strategy ought to be able to identify the different homotopy classes and deploy one robot in each homotopy class. One may also wish to determine the least cost path for each robot constrained to or avoiding speciﬁed homotopy classes. In many problems the notion of visibility is linked intrinsically with homotopy classes. In tracking of uncertain agents in an environment with dynamic obstacles, the ability to deal with occlusions during a certain time frame is important (Zhou et al. 2006).

274

Auton Robot (2012) 33:273–290

A knowledge of the possible homotopy classes of trajectories that a target can take in the environment when it is occluded can help more efﬁcient belief propagation.
Classiﬁcation of homotopy classes in two-dimensional workspaces has been studied in the robotics literature using geometric methods (Grigoriev and Slissenko 1998; Hershberger and Snoeyink 1991), probabilistic road-map construction (Schmitzberger et al. 2002) techniques and triangulation-based path planning (Demyen and Buro 2006). In two dimensions, topological information can be extracted using geometric methods by counting the number of times a trajectory intersects boundaries of the obstacles or rays emanating from the obstacles, or informed ways of dividing the free space into cells to keep track of the sequence in which a trajectory visits those cells. To the best of our understanding, none of these methods in literature satisfactorily extend to conﬁguration spaces of dimension higher than two. While in a 2-dimensional conﬁguration space such methods can be used for telling whether or not two trajectories belong to the same homotopy class, efﬁcient planning for least cost trajectories with homotopy class constraints is difﬁcult using such representations even in 2-dimensions. Neither is it possible to efﬁciently explore/ﬁnd optimal trajectories in different homotopy classes in an environment. To our knowledge, there has been no prior research on planning trajectories with topological constraints using search-based methods.
In this paper we propose a novel way of classifying and representing homology classes, a close analog of homotopy classes, in two and higher dimensional Euclidean conﬁguration spaces, which are the types of conﬁguration spaces we encounter most often in robot planning problems. For the 2-dimensional case we use theorems from complex analysis for developing a compact way of representing homology classes of trajectories, while for 3-dimensional conﬁguration spaces we exploit theorems from electromagnetism.1 Finally, we show that the formulae for 2 and 3 dimensional cases can in fact be extended to higher Ddimensional Euclidean conﬁguration spaces with obstacles (Bhattacharya et al. 2011a). This is illustrated with examples in a 4-dimensional conﬁguration space.
The novelty of our work lies in the fact that our proposed representation allows us to identify/distinguish trajectories in different classes and compute least-cost paths in non trivial conﬁguration spaces with topological constraints using graph search-based planning algorithms. The representation we propose is designed to be independent of the type of the environment, the discretization scheme or cost function. Our proposed representation can also be used in conﬁguration spaces with additional degrees of freedom that do not effect
1Parts of this paper have appeared elsewhere—the 2-dimensional case was introduced in Bhattacharya et al. (2010) and the 3-dimensional case was analyzed in Bhattacharya et al. (2011c).

homotopy classes of the trajectories (e.g. for unicycle modes of mobile robots, the conﬁguration space consists of variables X, Y and θ . But the last variable, θ , does not effect the homotopy classes of trajectories. Only the projection of the x–y plane is enough to capture the topological information).
Using such a representation we show that topological constraints can be seamlessly integrated with graph search techniques for determining optimal paths subject to constraints. We also discuss how this method can be used to explore multiple homotopy classes in an environment using a single graph search.
1.2 Capturing topological information in search-based planning
In search-based planning algorithms one typically starts by discretizing a given environment to create a graph G = (V, E). Starting form an initial vertex, vs ∈ V, a typical graph-search algorithm expands the nodes of the graph by traversing the edges. Values are maintained and associated with each expanded node that capture the metric information (distance/cost) of shortest path leading to the expanded node from vs . For example, A* search algorithm maintains two functions g, f : V → R. g(v) is the cost of the current path from the start node to node v, and f (v) = g(v) + h(v) is an estimate of the total distance from start to goal going through v. The algorithm maintains an open set, the set of nodes to be expanded. Each time it expands a node v, it updates the values of g(v ) for each neighbor v of v, by adding to g(v) the cost of the edge c(vv ) (the update happens only if the newly computed value is lower than the previous value). This process continues until a desired vertex vg ∈ V is reached (Hart et al. 1968).
The fact that the value of g(v ) can be computed from g(v) + c(vv ) is due to the fact that the cost function is additive (i.e. if α and β are two curves that share a common end point, then c(α β) = c(α) + c(β), where “ ” indicates the disjoint union, and represent the total curve formed by the two curves together). This is because the metric information about the underlying space is captured using a differential 1-form (‘quantities’ that can be integrated over 1dimensional manifolds, the trajectories (Bott and Tu 1982; Talpaert 2000)), namely the inﬁnitesimal length/cost, dl. The cost of an edge, e, of the graph is then computed as an integral of the form c(e) = e J (l)dl (with some scaling function J ). This implies, in an arbitrary graph search algorithm, during the expansion of the vertices of the graph, the cost of the shortest path up to a vertex that is being expanded can simply be computed by adding to that of its parent (in terms of sequence of expansions) the cost of the edge connecting to it. This additive property of length/cost is key in developing such graph search algorithms.

Auton Robot (2012) 33:273–290

275

While the differential 1-form, J (l) dl, yields metric information, there are other differential 1-forms that can incorporate other information about the underlying space and can be used for guiding the search algorithm. The main idea in this paper is to determine a differential 1-forms that encodes topological information about the space and let us guide the search accordingly.

1.3 H -signature as class invariants for trajectories

We consider a very general differential 1-form in a given D-dimensional conﬁguration space C. If x1, x2, . . . , xD are the coordinate variables describing the conﬁguration space, a general differential 1-form can be written as dh := f1(x)dx1 + f2(x)dx2 + · · · + fD(x)dxD. Thus, for any given trajectory/curve, τ , in this conﬁguration space, one can compute H(τ ) = τ dh. We call this the H -signature of τ . In Sects. 3.2 and 4.2.2 we will design the differential 1-forms, and hence the H -signature of a trajectory, for the 2- and 3-dimensional conﬁguration spaces respectively, such that they are invariants for homology classes of trajectories.
We want to design the 1-form dh and the H -signature of a trajectory such that it is an invariant across trajectories in the same homotopy class. However, because we use 1-forms and their integrals along closed curves to classify trajectories, we naturally obtain invariants for homology classes of trajectories (Hatcher 2001; Rotman 1988; Bott and Tu 1982). But in most practical robotics problems the notion of homology and homotopy of trajectories can be used interchangeably, especially when ﬁnding the least cost path. This is discussed in greater detail with examples in Sects. 5.1 and 6.
2 Homotopy and homology classes of trajectories
Deﬁnition 1 (Homotopic trajectories) Two trajectories τ1 and τ2 connecting the same start and end coordinates, xs and xg respectively, are homotopic iff one can be continuously deformed into the other without intersecting any obstacle.
Formally, if τ1 : [0, 1] → C and τ2 : [0, 1] → C represent the two trajectories (with τ1(0) = τ2(0) = xs and τ1(1) = τ2(1) = xg), then τ1 is homotopic to τ2 iff there exists a continuous map η : [0, 1] × [0, 1] → C such that η(α, 0) = τ1(α) ∀α ∈ [0, 1], η(β, 1) = τ2(β) ∀β ∈ [0, 1], and η(0, γ ) = xs, η(1, γ ) = xs ∀γ ∈ [0, 1]. Alternatively, in the notation of Hatcher (2001), τ1 and τ2 are homotopic iff τ1 −τ2 belongs to the trivial class of the ﬁrst homotopy group of C, denoted by π1(C). That is, [τ1 −τ2] = 0 ∈ π1(C).
Deﬁnition 2 (Homologous trajectories) Two trajectories τ1 and τ2 connecting the same start and end coordinates, xs and

Fig. 1 Illustration of homotopy and homology equivalences. In this example τ1 and τ2 are both homotopic as well as homologous
xg respectively, are homologous iff τ1 together with τ2 (the later with opposite orientation) forms the complete boundary of a 2-dimensional manifold embedded in C not containing/intersecting any of the obstacles.
Formally, in the notation of Hatcher (2001), τ1 and τ2 are homologous iff τ1 −τ2 belongs to the trivial class of the ﬁrst homology group of C, denoted by H1(C). That is, [τ1 −τ2] = 0 ∈ H1(C).
A set of homotopic trajectories form a homotopy class, while a set of homologous trajectories form a homology class.
At an intuitive level the above two deﬁnitions may appear equivalent. For example, in Fig. 1(a), τ1 is homotopic to τ2 since one can be continuously deformed into the other via a sequence of trajectories marked by the dashed curves. As a consequence, the area swept by this continuous deformation, A, forms a 2-dimensional region in the free conﬁguration space whose boundary is the closed loop τ1 −τ2. Indeed, the one-way implication is true as shown below.
Lemma 1 If two trajectories are homotopic, they are homologous.
Proof This follows directly from the Hurewicz theorem (Hatcher 2001) that guarantees the existence of an homomorphism from the homotopy groups to the homology groups of an arbitrary space.
The converse of Lemma 1 does not always hold true. There are subtle difference between homology and homotopy in spite of their similar notions, and one can create examples where two trajectories are not homotopic in spite of being homologous.

276

Auton Robot (2012) 33:273–290

Fig. 2 Examples where the trajectories are homologous, but not homotopic
Homotopy equivalence arises naturally in many robotics problems. On the other hand, homology is less natural. However, it is much simpler to compute homologies. One can establish direct correspondence between homology groups of trajectories and differential 1-forms whose integrals yield homology class invariants for trajectories via the De Rham theorem (Bott and Tu 1982). Since, according to the discussion of Sect. 1.2, we desire such differential forms, the rest of the paper will be developed with homology classes of trajectories under consideration rather than their homotopy classes. The assumption will be that in many of the practical robotics problems where homotopy classes of trajectories are of greater signiﬁcance, homology classes of trajectories will serve as a fair analog. We will justify this claim in Sect. 5.1 and through experimental results (Sect. 6).
To clarify the distinction between homotopy equivalence and homology equivalence of trajectories, we present two examples where homology is not same as homotopy. The ﬁrst example is in 2-dimensions. In Fig. 2(a) we observe that the trajectories τ1 and τ2 are not homotopic, but they are homologous (since their H -signatures, as deﬁned in Sect. 3.2, are equal). This is seen perhaps more easily by considering the interior deﬁned by the union of the areas marked by A1 and A2 which indeed forms the boundary for τ1 −τ2. In Fig. 2(b), one can observe that the two trajectories are not homotopic. However, they are homotopic if we only consider S1 or S2 but not both. Hence their H-signatures are the same (i.e. they are homologous). Thus, if we were exploring different homotopy classes in this environment using the described method, we would be ﬁnding one trajectory for these two homotopy classes.
3 H -signature in 2-dimensional Euclidean conﬁguration space
We consider a 2-dimensional subset of R2 as the conﬁguration space. The obstacles are thus punctures or discontinuities in that subset. The approach for designing a H signature for such a 2-dimensional conﬁguration space is based on theorems from Complex Analysis, speciﬁcally the Cauchy Integral theorem and Residue theorem.

Fig. 3 Cauchi Integral Theorem and Residue Theorem

3.1 Background: complex analysis

Cauchy Integral Theorem The Cauchy Integral Theorem states that if f : C → C is an holomorphic (analytic) function in some simply connected region R ⊂ C, and γ is a closed oriented (i.e. directed) contour completely contained in R, then the following holds,

f (z)dz = 0

(1)

γ

Moreover, if z0 is a point inside the region enclosed by γ , which has an anti-clockwise (or positive) orientation, then for the function F (z) = f (z)/(z − z0) with a simple pole at z0, the following holds

γ

f (z)dz z − z0

= 2π if (z0)

(2)

The Residue Theorem A direct consequence of the Cauchy Integral Theorem, the Residue Theorem, states that, if F : R → C is a function deﬁned in some simply connected region R ⊂ C that has simple poles at the distinct points a1, a2, . . . , aM ∈ R, and holomorphic (analytic) everywhere else in R, and say γ is a closed positively oriented Jordan curve completely contained in R and enclosing only
the points ak1 , ak1 , . . . , akm out of the poles of F , then the following holds,

m

γ

F (z)dz

=

2π i

l=1

lim (ξ
ξ →akl

−

akl

)F

(ξ )

(3)

The scenario is illustrated in Fig. 3(b). It is important to note that in both the Cauchy Integral
Theorem and the Residue Theorem the value of the integrals are independent of the exact choice of the contour γ as long as the mentioned conditions are satisﬁed (see Fig. 3(a)).

3.2 Designing a H -signature
We exploit the above theorems for designing a differential 1form that can be used to construct a homology class invariant for 2-dimensional conﬁguration space.

Auton Robot (2012) 33:273–290

277
the vector function H2 : C1(C) → CN

H2(τ ) = F (z)dz
τ
where C1(C) is the set of all curves/trajectories in C.

It is to be noted that the value of the H -signature of a trajectory in the 2-dimensional conﬁguration space is simply a vector of N complex numbers.

Lemma 2 Two trajectories τ1 and τ2 connecting the same points in the described 2-dimensional conﬁguration space are homologous if and only if H2(τ1) = H2(τ2).

Fig. 4 Two trajectories in same and different homotopy classes

We start by representing the 2-dimensional conﬁguration space as a subset of the complex plane C. Thus a point in the conﬁguration space, (x, y) ∈ C, is represented as x + iy ∈ C. The obstacles are assumed to be simply-connected regions in C and are represented by O1, O2, . . . , ON .

Construction 1 (Representative points) We deﬁne one “representative point” in each connected obstacle such that it lies in the interior of the obstacle. The exact location of the representative points is not of particular signiﬁcance as long as they each lie inside the respective obstacles. Thus we deﬁne the points ζl ∈ Ol, ∀l = 1, . . . , N . Figure 4(a) shows such representative points inside three obstacles.

Deﬁnition 3 (Obstacle Marker Function) For a given set

of “representative points”, we deﬁne the “Obstacle Marker Function” function F : C → CN as follows,

⎡ f1(z) ⎤

F (z)

=

⎢⎢⎢⎢⎢⎣

z−ζ1
f2(z) z−ζ2
...

⎥⎥⎥⎥⎥⎦

(4)

fN (z) z−ζN

where fl, l = 1, 2, . . . , N are analytic functions over entire C such that fl(ζl) = 0, ∀l. Typical examples of such fl are polynomials in z.

Thus, F is a complex vector function, the lth component of which has a single simple pole/singularity at ζl.

Deﬁnition 4 (H -signature in 2-dimensional conﬁguration space) For the given conﬁguration space and set of obstacles, we deﬁne the obstacle marker function as described above, and hence deﬁne the H -signature of a trajectory τ

Proof We note that by changing the orientation of a path over which an integration is being performed, we change the sign of the integral. If τ is a path, its oppositely oriented path is represented as −τ . Thus, as we see from Fig. 4(a), τ1 along with −τ2 forms a positively oriented closed loop.
If τ1 and τ2 are in the same homology class, the area enclosed by τ1 and τ2 does not contain any of the “representative points”, ζi , hence rendering the function F analytic in that region. Hence from the Cauchy Integral Theorem we obtain,

F (z)dz = 0
τ1 −τ2

⇒

F (z)dz + F (z)dz = 0

τ1

−τ2

⇒

F (z)dz = F (z)dz

τ1

τ2

where the 0 in bold implies that it is a N -vector of zeros.
If τ1 and τ2 are in different homology classes, we can easily note that the closed positive contour formed by τ1 and −τ2 will enclose one or more of the obstacles, and hence their corresponding “representative points”. This is illus-
trated in Fig. 4(b). Let us assume that enclosed “represen-
tative points” are ζκ1 , ζκ2 , . . . , ζκn . Moreover we note that at least one component of the vector function F has a simple pole at ζl for each l = 1, 2, . . . , N . Thus, by the Residue Theorem and Deﬁnition 3,

F (z)dz + F (z)dz

τ1

−τ2

⎡ f1(ξ ) ⎤

=

2π i

n
lim (ξ
u=1 ξ →ζκu

−

ζκu ) ⎢⎢⎢⎢⎢⎣

ξ −ζ1
f2(ξ ) ξ −ζ2
...

⎥⎥⎥⎥⎥⎦

fN (ξ ) ξ −ζN

278
⇒

⎡ ··· ⎤

F (z)dz −
τ1

τ2

F

(z)dz

=

⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣

fκ1 fκ2 fκn

(ζκ1 ...
(ζκ2 ...
(ζκn

) ) )

⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎦

=

0

···

Hence proved.

Auton Robot (2012) 33:273–290
k’s. Thus, the lth component of H2(e) is computed as,
Al ln |z2 − ζl| − ln |z1 − ζl| + i absmink∈Z arg(z2 − ζl) − arg(z1 − ζl) + 2kπ
where absmink∈Z G(k) returns the value of G(k) that has the minimum absolute value (i.e. closest to 0) over all k ∈ Z. Typically, we can get away with checking a few values of k around 0 and picking the local minimum, since the value of arg(z2 − ζl) − arg(z1 − ζl) + 2kπ is monotonic in k.

We have hence shown that H2 gives a homology invariant for trajectories in 2-dimensional Euclidean conﬁguration space with obstacles.

4 H -signature in 3-dimensional Euclidean conﬁguration space

3.3 Computation for a line segment

As discussed earlier in Sect. 1.2, and will be discussed later in Sect. 5, we discretized the given conﬁguration space and create a graph out of it. In many practical implementations we assume that every edge in the graph is a line segment. Thus it is for those line segments that we really need to compute the H -signatures. Thus it is important that we are able to do so efﬁciently. In this section we will show how to compute the H -signature for a small line segment in a 2-dimensional conﬁguration space using a closed-form formula.
Given a line segment e connecting points z1 and z2, we can parametrize the segment using the variable z = (1 − λ)z1 + λz2, where λ ∈ [0, 1] is the parameter. Thus we have,

H2(e) = F (z)dz
e

1

= F (1 − λ)z1 + λz2 (z2 − z1)dλ

(5)

0

For computing the H -signature of e = {z1 → z2} analytically, we assume that fl are chosen to be constants. Let fl = Al (const.) for all l = 1, 2, . . . , N .
Now, a standard integration result gives for the lth com-
ponent of H2(e)

1 0

(1

−

Al λ)z1 +

λz2

−

ζl

(z2

−

z1)dλ

= Al ln(z2 − ζi ) − ln(z1 − ζl)

While in the two-dimensional case, theoretically any ﬁnite obstacle on the plane can induce multiple homotopy and homology classes for trajectories joining two points, the notion of homotopy/homology classes in three dimensions can only be induced by obstacles with genus2 one or more, or with obstacles stretching to inﬁnity. Figure 6 shows some examples of obstacles that can or cannot induce such classes for trajectories. A sphere or a solid cube, for example, cannot induce multiple homotopy classes in an environment.
4.1 Background: electromagnetism
Biot-Savart law Consider a single hypothetical currentcarrying curve (a current conducting wire) embedded in a 3-dimensional space carrying a steady current of unit magnitude (Fig. 5(a)). There is no source for the current nor any sink—only a steady ﬂow persisting inside the conductor due to absence of any dissipation. It is to be noted that such a steady current is possible iff the curve is closed (or open, but extending to inﬁnity, where we close the curve using a

However we note that the logarithm of a complex number does not have an unique value. For any z ∈ C, ln(z ) = ln(|z |ei(arg(z )+2kπ)) = ln(|z |) + i(arg(z ) + 2kπ ), ∀k = 0, ±1, ±2, . . . (where arg(x + iy) = atan2(y, x)). Hence, following the assumption that e is a small line segment, we
choose the smallest of all the possible values over different

Fig. 5 Theorems from electromagnetism, and their application in deﬁning H -signature in 3-dimensions
2The genus of an obstacle refers to the number of holes or handles (Munkres 1999).

Auton Robot (2012) 33:273–290

279

Fig. 6 Examples of obstacles in 3-D. (a)–(e) induce homotopy classes, (f) does not

Fig. 7 Illustration of Constructions 2 and 3

loop at inﬁnity. See Fig. 7(a) and Construction 2). We denote the curve by S. Then, according to the Biot-Savart Law (Grifﬁths 1998), the magnetic ﬁeld B at any arbitrary point r in the space, due to the current ﬂow in S, is given by,

B(r) = μ0 4π

(x − r) × dx S x−r 3

(6)

where, x, the integration variable, represents the coordinate of a point on S, and dx is an inﬁnitesimal element on S along the direction of the current ﬂow.

Ampere’s law While Biot-Savart law gives a recipe for computing the magnetic ﬁeld from a given current conﬁguration, Ampere’s Law (Grifﬁths 1998), in a sense, gives the inverse of it. Given the magnetic ﬁeld B at every point in the space, and a closed loop γ (Fig. 5(a)), the line integral of B along γ gives the current enclosed by the loop γ . That is,

Ξ (C) := B(l) · dl = μ0Iencl

(7)

γ

where, l, the integration variable, represents the coordinate of a point on γ , and dl is an inﬁnitesimal element on C.
In Biot-Savart Law and Ampere’s Law one can conveniently choose the constant μ0 to be equal to 1 by proper choice of units. Moreover, by choice, the value of the current ﬂowing in the conductor is unity. Thus, for any closed loop γ , the value of Ξ (γ ) is zero iff γ does not enclose

the conductor, otherwise it is ±1 (the sign depends on the direction of integration performed on γ ). Thus in Fig. 5(a), Ξ (γ1) = 1 and Ξ (γ2) = 0.
Deﬁnition 5 (Simple Homotopy-Inducing Obstacle in 3dimensional Conﬁguration Space) A Simple HomotopyInducing Obstacle (SHIO) is a bounded obstacle of genus 1, for example a torus (Figs. 6(a), 6(b)) or a knot (Fig. 6(e)).
4.2 Designing a H -signature
For the 2-dimensional case, each obstacle on the plane that induces the notion of multiple homotopy classes was assigned a representative point. Analogously, for the 3dimensional case, we need to deﬁne a skeleton for every SHIO. Intuitively, a skeleton of a 3-dimensional obstacle is a 1-dimensional curve that is completely contained inside the obstacle such that the surface of the obstacle can be “shrunk” onto the skeleton in a continuous fashion without altering the topology of the surface of the obstacle. Formally, we deﬁne the skeleton of an obstacle in terms of homotopy equivalence.
Deﬁnition 6 (Skeleton) A 1-dimensional manifold, S, is called a skeleton of a SHIO, O, iff S is homeomorphic to S1 (a circle), S is completely contained inside O, and if S and O are homotopy equivalent.
Thus, the fact that τ1 and τ2 are of the same or of different homotopy/homology classes is not altered by replacing O by S.
In the literature, algorithms for constructing skeletons of solid objects is a well-studied (Blum 1967; Jain 1989). However in the present context we have a much relaxed notion of skeleton. While we can adopt any of the different existing algorithms for automated construction of skeleton from a 3-dimensional obstacles, this discussion is out of the scope of the present work. Figure 6(a) demonstrates skeletons for several genus 1 obstacles.
4.2.1 Conversion of generic obstacles into SHIOs
Given a set of obstacles in a three-dimensional environment, we perform the following two constructions/reduction on

280

Auton Robot (2012) 33:273–290

the obstacles so that the only kind of obstacle we have in the environment are Simple Homotopy-Inducing Obstacles.

Construction 2 (Closing inﬁnite, unbounded obstacles) In most of the problems that we are concerned with, the domain in which the trajectories of the robots lie is ﬁnite and bounded. This gives us the freedom of altering/modifying the obstacles or parts of obstacles lying outside that domain without altering the problem. One consequence of this freedom is that we can close inﬁnite and unbounded obstacles (e.g. Fig. 6(d)) at a large distance from the domain of interest (Fig. 7(a)).

Construction 3 (Decomposing obstacles with genus >1) After closing all inﬁnite, unbounded obstacles in an environment according to Construction 2, if there is an obstacle with genus k (e.g. Fig. 6(c)), we can decompose/split it into k obstacles, possibly overlapping and touching each other, but each with genus 1 (Fig. 7(b)). This does not change the obstacles or the problem in any way. This construction just changes the way we identify obstacles and construct their skeletons. For example in Fig. 7(b) the original obstacle O with genus 2 is realized as two obstacles O1 and O2, each with genus 1 and overlapping each other. The decomposition of obstacles into SHIOs allows us deﬁne k skeletons for each obstacle of genus k and simplify computations of h-signatures of trajectories.

Note that in this paper we do both constructions manually —the automation of these steps is beyond the scope of this paper.

4.2.2 Skeleton of SHIOs as current carrying curves for H -signature construction

Construction 4 (Modeling skeleton of a SHIO as a current carrying manifold) Given m obstacles in an environment, O1, O2, . . . , Om, with genus k1, k2, . . . , km respectively, we can construct M = k1 + k2 + · · · + km skeletons from M SHIOs (obtained using Constructions 2 and 3), namely S1, S2, . . . , SM . Each Si is a closed, connected, boundaryless 1-dimensional manifold. We model each of them as a current-carrying conductor carrying current of unit magnitude (Figs. 6(a), 7(a)). The direction of the currents is not of importance, but by convention, each is of unit magnitude.

Deﬁnition 7 (Virtual Magnetic Field due to a Skeleton) Given Si , the skeletons of a Simple Homotopy-Inducing Obstacle, we deﬁne a Virtual Magnetic Field vector at a point r in the space due to the current in Si using Biot-Savart Law as follows,

1 (x − r) × dx

Bi (r) = 4π Si x − r 3

(8)

where, x, the integration variable, represents the coordinates of a point on Si , and dx is an inﬁnitesimal element on Si along the chosen direction of the current ﬂow in Si .

Deﬁnition 8 (H -signature in 3-dimensional Conﬁguration Space) Given an arbitrary trajectory, τ , in the 3dimensional environment with M skeletons, we deﬁne the H-signature of τ to be the function H3 : C1(R3) → RM ,

H3(τ ) = h1(τ ), h2(τ ), . . . , hM (τ ) T

(9)

where, C1(R3) is the space of all curves/trajectories in R3, and

hi(τ ) = Bi(l) · dl

(10)

τ

is deﬁned in an analogous manner as the integral in Ampere’s Law. In deﬁning hi , Bi is the Virtual Magnetic Field vector due to the unit current through skeleton Si , l is the integration variable that represents the coordinate of a point on τ , and dl is an inﬁnitesimal element on τ .

It is to be noted that the value of the H -signature of a trajectory in the 3-dimensional conﬁguration space is simply a vector of M real numbers.

Lemma 3 Two trajectories τ1 and τ2 connecting the same points in the described 3-dimensional conﬁguration space are homologous if and only if H3(τ1) = H3(τ2).
Proof Since τ1 and τ2 connect the same points, τ1 −τ2, i.e. τ1 and −τ2 together (where −τ indicates the same curve as τ , but with the opposite orientation) form a closed loop in the 3-dimensional environment (Fig. 5(b)). We replace the obstacles O1, O2, . . . , Om in the environments with the skeletons S1, S2, . . . , SM .
Consider the presence of just the skeleton Si . By the direct consequence of Ampere’s Law and our construction in which a unit current ﬂows through Si , the value of

hi (τ1 −τ2) =

Bi(l) · dl

τ1 −τ2

is non-zero if and only if the closed loop formed by τ1 −τ2 encloses the current carrying conductor Si (i.e. there does not exist a surface not intersecting Si , the boundary of which is τ1 −τ2). For example, in Fig. 5(b), hp(τ1 −τ2) = 1 and hq (τ1 −τ2) = 0. Now, by the deﬁnition of line integration we have the following identity,

hi (τ1 −τ2)

=

Bi(l) · dl

τ1 −τ2

Auton Robot (2012) 33:273–290

281

= Bi (l) · dl − Bi (l) · dl = hi (τ1) − hi (τ2) (11)

τ1

τ2

Thus, hi(τ1) = hi(τ2) if and only if the closed loop formed by τ1 and τ2 does not enclose Si (i.e. homologous in presence of Si ).
Now in presence of skeletons S1, S2, . . . , SM the same argument extends for each skeleton individually. Thus τ1 and τ2 are homologous if an only if H3(τ1) = H3(τ2).

Hence we have shown that the proposed formula for H signature is a homology class invariant for trajectories in 3-D.

4.3 Computation for a line segment

Once again, we are interested in efﬁcient computation of

the H -signature for small line segments since those are

the ones that will make up edges of the graph formed

by discretization of the environment. For all practical ap-

plications we assume that a skeleton of an obstacle, Si ,

is made up −→ −→ {s1i s2i , s2i s3i , .

of ..,

s−ﬁin−ni−−it−1es→niniu,m−sni−bi→se1ir}(n(Fi )igo. f8l(ian)e).

segments: Thus, the

Si = inte-

gration of (8) can be split into summation of ni integrations,

1 ni

(x − r) × dx

Bi(r) = 4π
j =1

−−→ sji sji

x−r 3

(12)

where j ≡ 1 + (j mod ni). It is to be noted that a skeleton of an unbounded obstacle created from Construction 2 can
be made up of ﬁnite and few line segments. The only fea-
ture of such a skeleton might be that some of the points that make up the line segments (sji ) might be located at a large distance from the domain of interest, which is used to close
the skeleton.
One advantage of this representation of skeletons is that −−→
for the straight line segments, sji sji , the integration can

be computed analytically. Speciﬁcally, using a result from (Grifﬁths 1998) (also, see Fig. 8(b)),

(x − r) × dx

−−→ sji sji

x−r 3 =

1 d

sin α

− sin(α) nˆ

=

1 d2

d×p − d×p

p

p

(13)

where, d, p and p are functions of sji , sji and r (Fig. 8(b)), and can be expressed as,

p = sji − r,

p = sji − r,

d = (sji − sji ) × (p × p ) (14) sji − sji 2

We deﬁne and write (sji , sji , r) for the RHS of (13) for notational convenience. Thus we have,

Bi (r)

=

1 4π

ni

sji , sji , r

(15)

j =1

where, j ≡ 1 + (j mod ni). Given a small line segment, e, we can now compute the
H-signature, H(e) = [h1(e), h2(e), . . . , hM (e)]T , where,

1

ni

hi (e) = 4π e j=1

sji , sji , l · dl

(16)

can be computed numerically. For the numerical integration, in all our experimental results we used the GSL (GNU Scientiﬁc Library), which has a highly efﬁcient implementation of adaptive integration algorithms with desired precision. We used a cache for storing the H -signature of edges that has been computed in order to avoid re-computation.

4.4 ‘Looping’ and ‘non-looping’ trajectories

“Looping” of a trajectory around an obstacle (Fig. 9(a)) is similar in essence to non-Jordan curves on two-dimensional

Fig. 8 Closed-form, analytic computation of virtual magnetic ﬁeld

vector

Fig. 9 Looping vs. non-looping trajectories

282

Auton Robot (2012) 33:273–290

planes. However in three dimensions their precise deﬁnition is difﬁcult. In fact, the notions of looping and non-looping is imprecise when the skeleton of the obstacle is complex as a knot (Fig. 9(b)). However, equipped with the deﬁnition of H -signature, we propose the following deﬁnition. A more elaborate discussion on this can be found in Bhattacharya et al. (2011b).

Deﬁnition 9 (Non-looping trajectory w.r.t. Si ) A trajectory τ is said to be non-looping w.r.t. Si if hi(τ ) ∈ (−1, 1). The value is in [0, 1) if the trajectory goes around Si in accordance with the right-hand rule with thumb pointing along the direction of the current in Si . If the direction is opposite, the value lies in (−1, 0].
This deﬁnition, in many cases, conform to our general intuition of non-looping trajectories. A natural consequence of this deﬁnition is the notion of a trajectory that is in a “Complementary Class” of a non-looping trajectory, i.e. one that goes on the opposite side of every obstacle.
Deﬁnition 10 (Complementary Homotopy Class) Given a trajectory τ that is non-looping w.r.t. all the skeletons in the environment (i.e. hi(τ ) ∈ (−1, 1) ∀i = 1, 2, . . . , M), we deﬁne the Complementary Homotopy Class of the homotopy class of τ to be the one for which the h-signature is H(τ ) − sign(H(τ )), where sign(·) gives the vector of signs of the elements of its input vector.
5 H -signature augmented graph
Once we have the means of computing H-signature for each edge (small line segments), we introduce the concept of Hsignature augmented graph. Typically, a graph G = {V, E} is created for the purpose of graph-search based planning by discretization of an environment, placing a vertex at each discretized cell, and by connecting the neighboring cells with edges (see Fig. 10 for an example in 2-dimensional conﬁguration space). In the following discussion we perform a construction without distinguishing between 2 and 3-dimensional conﬁguration spaces explicitly, once we have discretized the environment, and perform a general treatment with the graph G. For H -signature trajectories or line segments we use the generic function H, which we understand to be H2 or H3 depending on the dimensionality of the conﬁguration space.
Let vs be the start coordinate in the conﬁguration space, and vg be the goal coordinate. By Lemma 2 or 3, any two trajectories from vs to v that belong to the same homology class will have the same H-signature. The H-signature can assume different, but discrete values corresponding on the class of the trajectory. We also write P(vs, v) to denote the set of all trajectories from vs to v, and vsv ∈ P(vs, v) to denote a particular trajectory in that set.

Fig. 10 Graph formed by uniform discretization of conﬁguration space, followed by placing nodes in the accessible cells and connecting each node with its neighbors. Dark cells are the inaccessible ones occupied by obstacles

Deﬁnition 11 (Allowed and Blocked Homology Classes) Suppose it is required that we restrict all our search for trajectories connecting vs and vg to certain homology classes, or not allow some other. We denote the set of allowed Hsignatures of trajectories leading up to vg by the set A, and the set of blocked H-signatures as B. A and B are essentially complement of each other (A ∪ B = U , where the universal set, U , is the set of the H-signatures of all the classes of trajectories joining vs and vg), and B can be an empty set when all classes are allowed.

We deﬁne the H-signature augmented graph of G as the graph GH (G) = {VH , EH }, such that each node in this new graph has the H-signature of a trajectory leading up to the coordinate of the node from vs appended to it. That is, each node in this augmented graph is given by {v, H(vsv)}, for some vsv ∈ P(vs, v). Thus, corresponding to a given v ∈ V, since there are discrete homology classes of trajectories from vs to v, there are a discrete number of the augmented states, {v, h} ∈ VH , where h is a M-vector of reals (M being the number of representative points or the number of SHIOs depending on whether it’s a 2 or 3-dimensional conﬁguration space) and assumes the values of the H-signatures corresponding to the discrete homology classes. Thus, we deﬁne the H-signature augmented graph of G as follows,

GH = {VH , EH }

where,

1.

⎧

⎫

⎪⎪⎪⎪⎨

v h

∈ V, and, = H(vs v)

for

some

trajectory

⎪⎪⎪⎪⎬

VH = ⎪⎪⎪⎪⎩{v, h}

vsv ∈ P(vs, v), and, h ∈ A (equivalently, h ∈/ B)
when v = vg

⎪⎪⎪⎪⎭

Auton Robot (2012) 33:273–290

283

5.1 Uses of the H -signature augmented graph

Fig. 11 The topology of the augmented graph, GH (right), compared against G (left), for a cylindrically discretized 2-dimensional conﬁguration space around a circular obstacle
2. An edge {{v, h} → {v , h }} is in EH for {v, h} ∈ VH and {v , h } ∈ VH , iff i. The edge {v → v } ∈ E, and, ii. h = h + H(v → v ), where, H(v → v ) is the Hsignature of the edge {v → v } ∈ E.
3. The cost/weight associated with an edge {{v, h} → {v , h }} is same as that associated with edge {v → v } ∈ E.
The consequence of point 3 in the above deﬁnition is that an admissible heuristics for search in G will remain admissible in GH . That is, if f (v, vg) was the heuristic function in G, we deﬁne fH ({v, h}, {vg, h }) = f (v, vg) as the heuristic function in GH for any h ∈ A.
The consequence of augmenting each node of G with a H-signature is that now nodes are distinguished not only by their coordinates, but also the H-signature of the trajectory followed to reach it. Typically we use graph search algorithms like A* (or variants like D* or D*-lite) where nodes in the graph GH are expanded starting from the node {vs, 0} (where by 0 we mean a M-dimensional vector of zeros).
The topology of this augmented graph for a 2-dimensional case is illustrated in Fig. 11. A goal state vg is the same in G irrespective for the path (τ1 or τ2) taken to reach it. Whereas in the H -signature augmented graph, the states are differentiated by the additional value of hg. We can perform a graph search in the augmented graph, GH , using any standard graph search algorithm starting from the state {vs, 0}. The goal state (i.e. the state, upon expansion of which we stop the graph search) is potentially any of the states {vg, hg} for any hg ∈ A (or hg ∈/ B if B is provided instead of A). We can use the same heuristic that we would have used for searching in G, i.e. fH (v, h) = f (v). It is to be noted that GH is essentially an inﬁnite graph, even if G is ﬁnite. However the search algorithm needs to expand only a ﬁnite number of states. Since for a given v, the states {v, h} can assume some discrete values of h (corresponding to the different homology classes). To determine if {v, hg} and {v, hg} are the same states, we can simply compare the values of hg and hg.

There are primarily two distinct but related ways we would like to use the H -signature augmented graph with search algorithms:
i. Exploration of environment for different homotopy classes of trajectories connecting vs and vg: For this problem, whenever we expand a state {vg, h˜ } ∈ VH , for some h˜ ∈/ B, we store the path up to that node, and continue expanding more states until the desired number of classes are explored. Although H -signature is a homology class invariant, and not a homotopy class invariant, by Lemma 1, two trajectories are homotopic implies that they are homologous. Thus, two trajectories that are homotopic will be in the same homology class, and hence their H -signatures will be the same. Thus, in such problems where we ﬁnd least cost trajectories with different H -signatures in a conﬁguration space using the said method, we are always guaranteed to obtain trajectories in distinct homotopy classes as well.
ii. Planning with H -signature constraint: For searches with H -signature constraint, we stop upon expansion of a goal coordinate {vg, h˜ } for some h˜ ∈/ B (or equivalently, h˜ ∈ A).
5.2 Theoretical analysis
Theorem 1 If P∗H = {{v1, h1}, {v2, h2}, . . . , {vp, hp}} is an optimal path in GH , then the path P∗ = {v1, v2, . . . , vp} is an optimal path in the graph G satisfying the H-signature constraints speciﬁed by A and B.
Proof By construction of GH , the path {v1, v2, . . . , vp} satisﬁes the given H-signature constraints. Moreover by definition, P∗H is a minimum cost path in GH . Since the cost function in GH is the same as the one in G and does not involve hj , it follows that the projection of P∗H on G given by P∗ = {v1, v2, . . . , vp} is an optimal path in the graph G satisfying the constraints deﬁned in GH .
6 Results
The method described in this paper was implemented in C++ and MATLAB. In the sections below we present results in 2, 3 and 4-dimensional conﬁguration spaces.
6.1 Two-dimensional conﬁguration space
6.1.1 Path prediction by homotopy class exploration
Figure 12(a) shows a large 1000 × 1000 discretized environment with circular and rectangular obstacles. We explore

284

Auton Robot (2012) 33:273–290

trajectories in different classes in order of their path costs using the method ‘i.’ described in Sect. 5.1. The implementation was done in C++ running on an Intel Core 2 Duo processor with 2.1 GHz clock-speed and 4 GB RAM. All the

different trajectories in different homotopy classes were determined in a single run of graph search on GH as described earlier.
As discussed earlier, in such exploration problems, although we use the H -signature as the class invariants in the search algorithms, since non-homologous trajectories are guaranteed to be non-homotopic, we are guaranteed to obtain trajectories in different homotopy classes.
We also constructed 10 such environments using random circular and rectangular obstacles. Figure 12(c) demonstrate the efﬁciency of the searches. The time indicates the cumulative time during the search until a shortest-path trajectory in a particular homotopy class is found. This is relevant to problems of tracking dynamic entities, such as people, where one often needs to predict possible paths in order to bias the tracker or to deal with occlusion by anticipating where the dynamic entity will appear. Since people can choose different paths to their destinations, we need to be able to predict least cost paths that lie in different homotopy classes.

6.1.2 H -signature constraint: H -signature deﬁned by key-points

Figure 13(a) demonstrates an example where we deﬁne homology classes using a sample (suboptimal) trajectory speciﬁed by key-points. One can then compute the H -signature for such a trajectory. It can then be used to search GH for an optimal path in the same class (or different) as the sample trajectory (Fig. 13(b)).
Although technically we have imposed homology class constraint by imposing the H -signature constraint, we observe that the optimal trajectory that we obtain is in fact in the same homotopy class as the key-point generated trajectory. In fact we observe that in most robotics planning problems imposing H -signature constraints indeed impose the corresponding homotopy class constraint as well.

Fig. 12 Exploring homotopy classes in 1000 × 1000 discretized environments to ﬁnd least cost paths in each

Fig. 13 Homotopy class constraint determined using suboptimal keypoint generated trajectory

Auton Robot (2012) 33:273–290

285

6.1.3 Multiple robot visibility problem
The problem of path planning for multiple robots with visibility constraints can also make use of our approach. If one robot needs to plan its path such that it is never obstructed from the view of another robot by some obstacle, we can apply the technique of planning with H -signature constraint to obtain the desired trajectories. In Fig. 14(a)–(c) two robots plan trajectories to their respective goals. The robot on the right needs to plan a trajectory such that it is in the “visibility” of the robot on the left, whose trajectory is given. Thus, in order to determine the H -signature of the desired homotopy class it ﬁrst constructs a suboptimal path by connecting its own start and goal points to the start and goal of the left

robot, such that the trajectory of the left robot is completely contained in it (Fig. 14(b)) as key points. The H -signature of this path gives the desired homology class, thus re-planning with that class as the only allowed class gives the desired optimal plan (Fig. 14(c)).
The natural constraint in this situation is that of homotopy. But we once again observe that even imposing the H signature constraint we do obtain trajectory in the desired homotopy class.
6.1.4 Arbitrary cost functions
Our method is not limited to Euclidean length cost functions. It can deal with arbitrary cost functions. For example,

Fig. 14 100 × 100 discretized environment with 2 representative points on the central large connected walls

286
Fig. 15 Planning with non-Euclidean length as cost as well as homotopy class constraint

Auton Robot (2012) 33:273–290

in Fig. 15 there are two large obstacles and a communication base to the left of the environment marked by the bold dotted line, x = 0. An agent is supposed to plan its path from the bottom to the top of the environment, while minimizing a weighted sum of the length of the trajectory and the distance of the trajectory from the communication base. Thus, in this case, besides the transition costs of the states in G, each state, z = x + iy ∈ G, is assigned a cost w · x, the penalty on separation from the communication base. Thus the net penalized cost of the trajectory, τ , that is being minimized is of the form c = τ ds + w τ x(s)ds, where x is the x-coordinate of the points on the trajectory, parametrized by s, the length of the trajectory. The trajectories in Figs. 15(a) and (b) with penalty weights w = 0 and w = 0.01 respectively have H -signature of h0. Blocking this class, but having a small penalty over distance from communication base gives the trajectory in Fig. 15(d) that passes close to the communication base.

6.1.5 Implementation using visibility graph
To demonstrate the versatility of the proposed algorithm we implemented it using a Visibility Graph as the state graph, G. Figure 16 shows the visibility graph generated in an environment with polygonal obstacles and the shortest paths in 9 homotopy classes that we explore. Obstacles were inﬂated in order to incorporate collision safety and circular obstacles were approximated by polygons. Representative points were placed only on the large obstacles (i.e., relevant obstacles that contribute towards the practical notion of homotopy classes, and not, for example, ones created by sensor noise—determined by threshold on diameter and marked by blue circles in the ﬁgure) and visibility graph was constructed. A* search was used for searching the H -signature augmented graph. The implementation was made in MATLAB. The average run-time of the search until the 9th homotopy class was explored was 0.4 seconds and about 100 states were expanded.

Auton Robot (2012) 33:273–290

287

Fig. 16 Exploring homotopy classes using a Visibility Graph

6.2 Three-dimensional conﬁguration space

The ﬁrst 3-dimensional domain in which we implement the planning algorithm is the space of 3 spatial dimensions, X, Y and Z. We also demonstrate the algorithm in the 3dimensional space of X, Y and time, i.e. an environment with planar dynamic obstacles (Sect. 6.2.5).
For a problem in 3 spatial dimensions, the domain of interest is bounded by upper and lower limits of the 3 coordinates. The domain is then uniformly discretized into cubic cells and a node of G is placed at the center of each cell. Connectivity is established between a node and its 26 neighbors (all cells that share at least one corner, edge or face with it). Each edge is bi-directional and its cost is the Euclidean length.

Fig. 17 Exploring homotopy classes in X–Y –Z space
each window according to Construction 3. The trivial shortest path from the given start to goal conﬁguration goes outside the room (the dark violet trajectory). Trajectories in other homotopy classes pass through the room.

6.2.1 Simple environments with bounded obstacles

6.2.2 Environment with unbounded pipes

Figure 17(a) demonstrates a simple environment, 20 × 20 × 18 discretized, with two torus-shaped obstacles. The skeleton of each obstacle is made up of line segments passing through the central axis of the cylindrical segments. Here we restrict search to non-looping trajectories (see Bhattacharya et al. 2011b for a precise deﬁnition). That is, we set B = {h = [h1, h2]T | |h1| > 1 or |h2| > 1}. We search for 4 homotopy classes of trajectories connecting a given start and goal coordinate. As shown in Fig. 17(a), the algorithm ﬁnds four such trajectories: (i) going through hoops 1 and 2; (ii) going through hoop 1 but not through hoop 2; (iii) going through hoop 2 but not through hoop 1; and (iv) not going through either hoops. According to Theorem 1 each path is the least cost one in the graph and in its respective homotopy class.
Figure 17(b) shows the exploration of 4 homotopy classes in and around a room with windows on each wall. The skeletons for this obstacle are deﬁned as loops around

Figure 18(a) shows a more complex environment consisting of 7 pipes stretching to inﬁnity. The workspace of choice is 44 × 44 × 44 discretized, with the start and goal coordinates at two opposite corners of the discretized space. In Fig. 18(a) we ﬁnd the least cost paths in 10 different homotopy classes.
6.2.3 Planning with H -signature constraint
Figure 18(b) demonstrates a planning problem with H signature constraint. The darker trajectory is the global least cost path found from a search in G for the given start and goal coordinates. The H-signature for that trajectory was computed, and hence we computed the signature of the complementary class (i.e. the class corresponding to the trajectory that passes on the other side of every SHIO—see Bhattacharya et al. (2011b) for a precise deﬁnition), and put only that in A. The lighter trajectory is the one planned with that A as the set of allowed H-signature. This trajectory goes on

288

Auton Robot (2012) 33:273–290

Fig. 19 Cumulative time taken and number of states expanded while searching GH for 10 homotopy classes in the problem of Fig. 18(a)

Fig. 18 An environment with 7 unbounded pipes
the opposite side of each and every pipe in the environment as compared to the darker trajectory.
We note that in this example the notion of complementary homology class concurs with that of complementary homotopy class.
6.2.4 Search speed and efﬁciency
We now present the running time for the case in Fig. 18(a). The environment, as described earlier, is 44 × 44 × 44 discretized, and hence G contains 85184 nodes. Due to each node being connected to 26 of its neighbors, there are almost 13 times as many edges in G. The program was run on a Intel Core 2 Duo processor with 2.1 GHz clock-speed and 3 GB RAM. We ﬁrst compute the values of H(e) for all edges e ∈ E and store them in a cache, which takes about 2273 s. Then we perform the A* search in GH , using the values from the cache whenever required. By doing so we eliminate the requirement of re-computing the h-signatures of the edges every time we perform a search, even with changed start and goal coordinates. The search for the 10 homotopy classes in Fig. 18(a) took about 30s and expansion of 521692 nodes in GH . Figure 19 shows the cumulative time required and the number of nodes in GH expanded.

6.2.5 Planning in 2-dimensional plane with moving obstacles
The next 3-dimensional domain that we experiment with is that of the two-dimensional plane, but with dynamic entities. Thus the variables of interest are X, Y and time. The node set was formed by uniform discretization of the domain of interest. The connectivity of the graph is such that the time variable can increase only in the positive direction (each node connected to 9 neighboring nodes in next time step, including the same x & y). The cost of an edge, e, with differences in the coordinates of its end points x, y and t is computed as c(e) = x2 + y2 + t2, where
is a small value for avoiding zero cost edges in GH . The skeleton of the moving obstacles are the curves traced by their centers (yellow dots on the oscillating rectangles in Online Resource 1) in the X–Y –Time space. The skeletons are closed outside and far from the discretized domain (Construction 2). Note that in doing so, segments of the skeleton may point along negative time. However that does not effect the planning since the X–Y –Time space itself can be treated no differently from R3.
The ﬁrst supplementary video (Online Resource 1) shows the exploration of 4 homotopy classes in X–Y –Time domain. The environment is 40 × 40 discretized in X and Y directions, and have 100 discretization cells in time. There are two dynamic rectangular obstacles, that undergo a known oscillatory motion inside a narrow passage between other static obstacles. The 4 different trajectories in the different homotopy classes are marked by different colors as well as different numbers at their current locations. The blue trajectory (3) passes above both the obstacles. The red trajectory (2) passes above the right obstacles, but not the left one. The light blue-gray trajectory (1) passes above the obstacle on the left, but not one on the right. The dark gray trajectory (0) is the trivial shortest path. The trajectories in the nontrivial homotopy classes go behind the obstacles, a region that would otherwise not be visited by the least cost path without any H -signature consideration.

Auton Robot (2012) 33:273–290

289

6.3 Four-dimensional conﬁguration space
A natural extension of the example provided in Sect. 6.2.5 would be to explore homotopy classes of trajectories in a 3-dimensional space with moving obstacles. However that makes the conﬁguration space a 4-dimensional one consisting of the coordinates X, Y , Z and Time. So far we have developed representations of H -signature for 2 and 3 dimensional conﬁguration spaces. While doing so we have noticed the similarity in the approach of both. In fact it is possible to unify the formulae and generalize it to arbitrary dimensional conﬁguration space using certain concepts from algebraic and differential topology. We discuss the derivation of such a formula in Bhattacharya et al. (2011a), where we use exterior calculus and the Stokes theorem (Talpaert 2000; Flanders 1989; Svec 2001) to design differential 1-forms in arbitrary D-dimensional conﬁguration spaces, the integration of which serve as the desired H -signature in such spaces. This analysis is reminiscent of a more general treatment that we are currently investigating (Bhattacharya et al. 2012).
Thus we present a result in a X–Y –Z–Time conﬁguration space. The second supplementary video (Online Resource 2) shows the exploration of 3 homotopy classes in a 4-dimensional conﬁguration space consisting of a dynamic obstacle in 3-dimensions. The loop-shaped obstacle is rotating about an axis. The blue axes are the X, Y and Z axes. The apparent rotation of the axes themselves is due to movement of the camera for viewing the trajectories from different angles. As we observe in the video, trajectories numbered 0 and 1 take off from the start coordinate (green dot) and move towards the “center” of the loop. They wait there while 2 takes a different homotopy class to reach the center later. From there 0 and 2 head together towards the goal (red dot), while 1 wait to take a different trajectory to the goal. Thus the 3 trajectories are in different homotopy classes.
7 Conclusion
In this paper we have proposed a novel and efﬁcient way of representing topological information of trajectories for robot motion planning. We have shown that this representation is well suited for use with graph search techniques for ﬁnding least cost paths respecting given homology class constraints as well as for exploring different homotopy classes in an environment. The method is independent of the discretization scheme, cost function or the search algorithm used. We have demonstrated the efﬁciency, applicability and versatility of the method in our results with examples in two, three and four dimensions.

Acknowledgements We gratefully acknowledge support from the ONR Antidote MURI project, grant no. N00014-09-1-1031; ONR Grants N00014-08-1-0696 and N00014-09-1-1052; and NSF Grant IIP-0742304.
We would like to thank Prof. Robert Ghrist and Dr. David Lipsky, University of Pennsylvania, for providing valuable insights on homology theory.
We would like to thank Mr. Dimitar Simeonov and Mr. Michael Fleder, Computer Science and Artiﬁcial Intelligence Laboratory, MIT, for providing us with the example described in Fig. 2(a) that illustrates the distinction between the equivalence of homotopy and that of homology classes of trajectories in 2-D.
References
Bhattacharya, S., Kumar, V., & Likhachev, M. (2010). Search-based path planning with homotopy class constraints. In Proceedings of the twenty-fourth AAAI conference on artiﬁcial intelligence, Atlanta, Georgia, 11 July 2010.
Bhattacharya, S., Likhachev, M., & Kumar, V. (2011a). H-signature for general euclidean spaces. Technical report, The University of Pennsylvania. See, https://ﬂing.seas.upenn.edu/~subhrabh/ cgi-bin/wiki/index.php?SFile=HSignatureHigherDim.
Bhattacharya, S., Likhachev, M., & Kumar, V. (2011b). H-signature of a non-looping trajectory with respect to an inﬁnite straight line skeleton. Technical report, The University of Pennsylvania. See, https://ﬂing.seas.upenn.edu/~subhrabh/cgi-bin/wiki/index. php?SFile=HSignatureNonLooping.
Bhattacharya, S., Likhachev, M., & Kumar, V. (2011c). Identiﬁcation and representation of homotopy classes of trajectories for searchbased path planning in 3d. In Proceedings of robotics: science and systems, 27–30 June 2011.
Bhattacharya, S., Likhachev, M., & Kumar, V. (2012). A homotopy-like class invariant for sub-manifolds of punctured euclidean spaces. Technical report, University of Pennsylvania. See, https://ﬂing. seas.upenn.edu/~subhrabh/cgi-bin/wiki/index.php?WPage= chihomotopy.
Blum, H. (1967). A transformation for extracting new descriptors of shape. In W. W. Dunn (Ed.), Models for the perception of speech and visual form (pp. 362–380). Cambridge: MIT Press.
Bott, R., & Tu, L. W. (1982). Differential forms in algebraic topology. In Graduate texts in mathematics. Berlin: Springer.
Bourgault, F., Makarenko, A. A., Williams, S. B., Grocholsky, B., & Durrant-Whyte, H. F. (2002). Information based adaptive robotic exploration. In Proceedings IEEE/RSJ international conference on intelligent robots and systems (IROS) (pp. 540–545).
Demyen, D., & Buro, M. (2006). Efﬁcient triangulation-based pathﬁnding. In AAAI’06: proceedings of the 21st national conference on artiﬁcial intelligence (pp. 942–947). Melno Park: AAAI Press.
Flanders, H. (1989). Differential forms with applications to the physical sciences. New York: Dover.
Grifﬁths, D. J. (1998). Introduction to electrodynamics (3rd ed.). Redwood-City: Benjamin-Cummings.
Grigoriev, D., & Slissenko, A. (1998). Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane. In ISSAC ’98: proceedings of the 1998 international symposium on symbolic and algebraic computation, New York, NY, USA (pp. 17–24). New York: ACM.
Hart, P. E., Nilsson, N. J., & Raphael, B. (1968). A formal basis for the heuristic determination of minimum cost paths. IEEE Transactions on Systems, Science, and Cybernetics, 4(2), 100–107.

290

Auton Robot (2012) 33:273–290

Hatcher, A. (2001). Algebraic topology. Cambridge: Cambridge University Press.
Hershberger, J., & Snoeyink, J. (1991). Computing minimum length paths of a given homotopy class. Computational Geometry, 4, 331–342.
Jain, A. K. (1989). Fundamentals of digital image processing. Upper Saddle River: Prentice-Hall.
Munkres, J. (1999). Topology. New York: Prentice Hall. Rotman, J. J. (1988). An introduction to algebraic topology. Berlin:
Springer. Schmitzberger, E., Bouchet, J. L., Dufaut, M., Wolf, D., & Husson,
R. (2002). Capture of homotopy classes with probabilistic road map. In International conference on intelligent robots and systems (Vol. 3, pp. 2317–2322). Schwager, M., Dames, P., Kumar, V., & Rus, D. (2011). Multi-robot mapping and exploration of environments with hazards. In RSS 2011 workshop on 3D exploration, mapping, and surveillance with aerial robots. Svec, A. (2001). Global differential geometry. Berlin: Springer. Talpaert, Y. (2000). Differential geometry with applications to mechanics and physics. Boca Raton: CRC Press. Zhou, Y., Hu, B., & Zhang, J. (2006). Occlusion detection and tracking method based on bayesian decision theory. In L.-W. Chang & W.-N. Lie (Eds.), Lecture notes in computer science: Vol. 4319. Advances in image and video technology (pp. 474–482). Berlin: Springer.
S. Bhattacharya is a doctoral candidate in the Department of Mechanical Engineering and Applied Mechanics of University of Pennsylvania. He received his B.Tech from Indian Institute of Technology, Kharagpur in 2006. His primary areas of research involves application of geometric and topological techniques in graph-search based robot motion planning.

M. Likhachev is an assistant research professor at the Robotics Institute and National Robotics Engineering Center (NREC) at Carnegie Mellon University. Maxim has received his Ph.D. in Computer Science from Carnegie Mellon University in 2005 for his dissertation on Search-based Planning for Large Dynamic Environments. Maxim is interested in planning for deterministic and probabilistic domains, with applications to robotics. His current research thrust is in solving complex planning problems with simple-to-use and theoretically well-grounded graph search methods. He develops planning methods for single and multi-agent robotic systems that can be used in real-time, can be analyzed theoretically and are general. In his research, Maxim tries to bridge the gap in between pure AI research on graph searches and more physically-grounded research on planning in robotics. This research resulted in over ﬁfty publications in AI and robotics journals and major conferences, several awards, and the selection for co-chairing SoCS’11 conference, the main international venue for researchers working in the area of heuristic search.
V. Kumar is the UPS Foundation Professor and the Deputy Dean for Education in the School of Engineering and Applied Science at the University of Pennsylvania. He received his Ph.D. in Mechanical Engineering from The Ohio State University in 1987. He has been on the Faculty in the Department of Mechanical Engineering and Applied Mechanics with a secondary appointment in the Department of Computer and Information Science at the University of Pennsylvania since 1987. He is a Fellow of the American Society of Mechanical Engineers (ASME) and the Institution of Electrical and Electronic Engineers (IEEE).

