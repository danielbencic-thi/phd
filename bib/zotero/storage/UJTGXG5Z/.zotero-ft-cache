IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading web-font TeX/Caligraphic/Regular

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2019 18th European Control Co...
Homotopy aware kinodynamic planning using RRT-based planners
Publisher: IEEE
Cite This
PDF
Basak Sakcak ; Luca Bascetta ; Gianni Ferretti
All Authors
View Document
1
Paper
Citation
142
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Definition
    III.
    Homotopy Class Identification
    IV.
    Homotopy Aware Kinodynamic Rrt*
    V.
    Numerical Example

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper introduces a method for kinodynamic planning with homotopy class constraints, and proposes a homotopy class identifier that establishes a geometric relation be... View more
Metadata
Abstract:
This paper introduces a method for kinodynamic planning with homotopy class constraints, and proposes a homotopy class identifier that establishes a geometric relation between a trajectory and a union of convex partitions of the 2D robot workspace. The proposed identifier is shown to be invariant with respect to the trajectories that belong to the same homotopy class, in such a way that each class has its own unique signature. Furthermore, we show that the proposed homotopy class identifier can be easily incorporated in a RRT-based planner, without changing the planning algorithm, while restricting the solution trajectories to a designated homotopy class.
Published in: 2019 18th European Control Conference (ECC)
Date of Conference: 25-28 June 2019
Date Added to IEEE Xplore : 15 August 2019
ISBN Information:
INSPEC Accession Number: 18906664
DOI: 10.23919/ECC.2019.8796259
Publisher: IEEE
Conference Location: Naples, Italy
Contents
SECTION I.
Introduction

Planning with topological constraints has gained an increasing attention in recent years. In fact, besides obtaining a collision free trajectory that minimizes a selected objective, one might be interested in how the resulting trajectory avoids obstacles. This problem is relevant in a number of different robotics and autonomous vehicle applications, ranging from avoiding dangerous zones and coordinating multiple agents for better exploration, to imposing rules on how to avoid obstacles. Furthermore, it is also a useful tool to decompose an otherwise complex problem into simpler sub-problems.

A homotopy class in the context of trajectory planning is the set of all trajectories that can be morphed to each other without any discontinuity. In other words, trajectories that belong to the same class avoid obstacles in the same way. The introduction of this concept into the planning scenario has gained an increased interest in the last decade. Most of the works that fall into this class are focused on returning paths that are different in how they avoid obstacles. The main idea is to represent the environment in an abstract form, determine a graph representation, and traverse the graph to obtain a number of different paths using a homotopy invariant. Examples of homotopy invariants include the winding angle of the path [1] , or a topology equivalence function based on Complex Analysis ([2], [3] ). These approaches couple the identification of the homotopy class with motion planning; in other words, the algorithm has to explore all possible paths before returning k-best solutions.

In most of the robotic applications, finding a collision free path in the robot workspace does not guarantee its feasibility, this is indeed the case when the robot at hand is differentially constrained. In order to overcome this issue some motion planners focus on kinodynamic planning [4] , which combines the search for a collision-free path with the underlying dynamics of the system. Including also the homotopy-awareness within the kinodynamic planning problem, in [5] the authors decompose the space using triangulation, and obtain a series of linear constraints that can be included in a Model Predictive Control (MPC) framework to ensure feasibility while satisfying the homotopy class constraints. Similarly, Park et al. [6] enforce the trajectory to a homotopy class by means of cell sequences, and use Mixed Integer Quadratic Programming (MIQP) to compute trajectories for a corresponding dynamical system that follow the cell sequence and avoid obstacles.

Sampling-based algorithms, such as Rapidly-exploring Random Tree (RRT) [7] , are one of the most popular approaches in solving the kinodynamic planning problem owing to their practicality and scalability for higher dimensions. With the increased concern on the quality of the resulting trajectory RRT * [8] was proposed, which achieves asymptotic optimality.

Sampling based planners that take into account homotopy class constraints exist as well, like for example H-RRT [9] that partitions the search space similarly to the reference frame method [10] , preliminarily obtaining the homotopy class invariant in terms of a sequence of boundary crossings. This information is then embedded in the RRT framework to enforce that the planned trajectory belongs to the homotopy class. Note that, RRT builds a tree whose edges do not change once they are added to the tree. On the other hand, the asymptotic optimality property of RRT * requires some edges to be removed and new ones to be added, i.e., rewiring the tree, at each iteration. Keeping track of a homotopy identifier in terms of boundary crossings is then problematic due to the dynamic nature of the built tree.

The main contribution of this paper is a homotopy class invariant which is based on the union of convex cells used to partition the 2D robot workspace. It can then be easily embedded in a RRT-based algorithm, without any additional change. We explicitly describe this case using the example of RRT*, for which keeping track of a homotopy identifier can be challenging. We also show that using a preliminary information on the topology of the robot workspace some informed decisions can be made that improve the convergence of the algorithm to a lower cost solution.
SECTION II.
Problem Definition

In this work, we consider dynamic systems with state vector s\in S\subset \mathbb{R}^{d} and control input u\in U\subset \mathbb{R}^{m} , where d\geq 2 and m\geq 1 , governed by the following state transition equation \begin{equation*} \dot{s}(t)=f(s(t),\ u(t)) \tag{1} \end{equation*} s ˙ ( t ) = f ( s ( t ) ,   u ( t ) ) (1) View Source Right-click on figure for MathML and additional features. \begin{equation*} \dot{s}(t)=f(s(t),\ u(t)) \tag{1} \end{equation*} where f is continuously differentiable as a function of both arguments, and S and U are compact sets. The state s(t) is assumed to include the vehicle position \pi(t) , defined with respect to an absolute reference frame.

A trajectory \sigma : [0,\tau]\rightarrow S is defined as a state evolution along the time interval [0,\tau] , where \tau is the duration of the trajectory, that satisfies the differential equation (1) for t\in[0, \tau] .

We assume that obstacles can be represented in a 2D space and any information about collision and obstacle avoidance can be retrieved using the projection of the robot state onto this 2D plane, i.e. the robot footprint. Let \mathcal{P}\subset \mathbb{R}^{2} define the portion of the 2D plane where the robot operates, and \mathcal{P}_{obs}\subseteq \mathbb{R}^{2} is the obstacle region. We can thus introduce the obstacle-free region, defined on this 2D plane as \mathcal{P}_{free}\: = \mathcal{P}\backslash \mathcal{P}_{obs} . Let \mu : S\rightarrow \mathbb{R}^{2} be a transformation that maps a state to its position in this 2D plane. Consequently, the free state space, S_{free} , is defined as the set of states that can be mapped to \mathcal{P}_{free} , i.e., S_{free}\: =\{s\in S\ \vert \mu(s)\in \mathcal{P}_{free}\} .

Let \phi(\lambda) : [0,1]\rightarrow \mathcal{P} , where \lambda\in[0,1] , be the geometric path that corresponds to the trajectory \sigma(t) with final time \tau , i.e., t\in[0,\tau] . Two trajectories \sigma and \sigma^{\prime} having the same initial and final positions, \pi_{0} and \pi_{f} , i.e., \phi(0)=\phi^{\prime}(0)=\pi_{0} and \phi(1)=\phi^{\prime}(1)=\pi_{f} , are homotopic if there exists a continuous mapping \psi : [0,1]\times[0,1]\rightarrow \mathcal{P}_{free} that can deform \phi into \phi^{\prime} . Furthermore, we can define a homotopy class, \Sigma_{\mathcal{H}} , as the set of all the trajectories which have the same initial and final positions, and their respective geometric paths can be deformed to each other using a continuous mapping function.

Based on the previous definitions, for a given homotopy class, \Sigma_{\mathcal{H}} , the solution of an optimal homotopic kinodynamic planning problem is the control input u(t)\in U for t\in[0, \tau] and the trajectory duration, \tau , which result in the trajectory \sigma(t)\in\Sigma_{\mathcal{H}} that is optimal according to a cost criterion J(s,u,\tau):\Sigma_{\mathcal{H}}\rightarrow \mathbb{R}_{\geq 0} that is expressed as \begin{equation*} J(s,u,\tau)=\int_{0}^{\tau}g(s(t),\ u(t))\text{d}t \tag{2} \end{equation*} View Source Right-click on figure for MathML and additional features. \begin{equation*} J(s,u,\tau)=\int_{0}^{\tau}g(s(t),\ u(t))\text{d}t \tag{2} \end{equation*} where g:S\times U\rightarrow \mathbb{R}_{\geq 0} is an instantaneous cost function.

Finally, the overall problem addressed here implies two different steps: first, given the representation of the obstacles in the 2D plane, a homotopy class invariant has to be identified; second, the homotopic kinodynamic planning problem has to be solved imposing the required topological characteristics on the solution trajectories.
SECTION III.
Homotopy Class Identification

Computing an identifier to determine if a trajectory belongs to an homotopy class is the first step of a planning algorithm with homotopy class constraints. This identifier should capture the topology of the environment, and has to be different for each homotopy class.

The topology of an environment can be easily defined as a union of partitions of the workspace, together with their connectivity rules. Thus, the first part of homotopy class identification refers to partitioning the free space, and obtaining the connectivity information. The second part is focused on determining a correspondence between a trajectory and the topology of the robot workspace. Furthermore, this correspondence should be invariant with respect to homotopic trajectories.

In this paper we use a convex cell decomposition to describe the topology of the free space, and we show that a geometric relation can be established between the trajectories that belong to the same homotopy class and the union of a subset of the convex partitions of the workspace. This will allow us to decouple the solution of the planning problem from imposing homotopy class constraints.
A. Free Space Partitioning

A convex polygonal decomposition [11] is a finite collection of convex polygons c_{i}\in\mathcal{C} , where each convex polygon c_{i} is called a cell, such that the union of the cells is equal to the closed interior of the obstacle free region, i.e., \bigcup\{c_{i}\in\mathcal{C}\}=cl(\mathcal{P}_{free}) ·

Once the free space is decomposed into convex cells, the topology information can be captured in the form of an adjacency graph . Two cells c and c^{\prime} are adjacent if c\cap c^{\prime} is a line segment of non-zero length. The associated non-directed graph, \mathcal{G} , is then formed such that each cell corresponds to a node in \mathcal{G} , and two nodes are connected by an edge if the corresponding cells are adjacent.

In this work, we use a common cell-decomposition approach, named trapezoidal decomposition [12] , which decomposes \mathcal{P}_{free} into a set of trapezoidal or triangular cells by extending rays normal to a decomposition direction from each of the vertices of the polygonal obstacles. Furthermore, we have applied the same strategy as in [13] , which decomposes the space along the direction of motion, i.e., the straight line connecting the initial and goal positions, by extending rays normal to this direction.
B. Homotopy Class Invariant

Recall that \phi(\lambda) is the geometric path which corresponds to the trajectory \sigma(t) , and denote the set of independent variables \lambda as \Lambda=\{\lambda_{i}\} where 0\leq\lambda_{i}\leq 1 . Then, there exists a convex cell, c_{i} , such that for \lambda\in(\lambda_{i-1},\ \lambda_{i}) the path \phi(\lambda) is confined in c_{i} , and for \lambda=\lambda_{i-1} and \lambda=\lambda_{i} the path intersects the boundaries shared with c_{i-1} and c_{i+1} , i.e., \phi(\lambda_{i-1})\in c_{i-1}\cap c_{i} and \phi(\lambda_{\text{i}})\in c_{i}\cap c_{i+1} . As a consequence, one can define a sequence of cells \mathcal{CS}=\{c_{0}\rightarrow c_{1}\cdots\rightarrow c_{f}\} that fully contains \phi(\lambda) .

The canonical representation of a cell sequence can be defined as its standard representation after eliminating the repetitive sub-sequences. For example, for the two trajectories shown in Figure 1(a) with their corresponding cell sequences, \mathcal{CS}_{1}=\{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\} (blue) and \mathcal{SC}_{2}=\{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\} (red), the canonical representations can be computed by eliminating the repetitions. Since \mathcal{SC}_{1} does not have any repetitive subsequences, it is already a canonical representation, while \mathcal{SC}_{2} can be reduced to its canonical representation \mathcal{CS}_{2}^{can}\: = \{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{3}\!\!\!\!{/}\rightarrow c_{5}\!\!\!\!{/}\rightarrow c_{4}\} . Finally, both trajectories share the same canonical representation.
Fig. 1. - (a) Two trajectories having different cell sequences that can be reduced into the same canonical representation. (b) The polygon that corresponds to the cell sequence $\{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\}$. (c) The polygon that corresponds to the union of two distinct loopless cell sequences $\{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\}$ and $\{c_{0}\rightarrow c_{1}\rightarrow c_{4}\}$ has a hole.
Fig. 1.

(a) Two trajectories having different cell sequences that can be reduced into the same canonical representation. (b) The polygon that corresponds to the cell sequence \{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\} . (c) The polygon that corresponds to the union of two distinct loopless cell sequences \{c_{0}\rightarrow c_{2}\rightarrow c_{3}\rightarrow c_{5}\rightarrow c_{4}\} and \{c_{0}\rightarrow c_{1}\rightarrow c_{4}\} has a hole.

Show All

Let \mathcal{P}^{\prime} denote the polygon induced by the union of the cells in a loop-less cell sequence \mathcal{CS} , i.e. \mathcal{P}^{\prime}=\bigcup\{c_{i}\in CS\} . The geometric paths of any two trajectories sharing the same canonical representation, \mathcal{CS} , are entirely confined in \mathcal{P}^{\prime} .

In the following, we show that the polygon \mathcal{P}^{\prime} is a homotopy class invariant.
Proposition 1

The set of all trajectories with the same initial and final positions, that share the same canonical representation corresponding to a loop-less cell sequence, are homotopic .
Proof

Let \mathcal{P}^{\prime} be the polygonal area corresponding to the cell sequence \mathcal{CS}^{\prime} , any path with the same canonical cell sequence representation would be confined in \mathcal{P}^{\prime} . Since the cell sequence does not have any loop, it does not encircle any obstacle, then the interior of \mathcal{P}^{\prime} does not have any hole ( Figure 1(b) ). Without loss of generality, we assume that the initial and goal cells are not adjacent otherwise the interior of \mathcal{P}^{\prime} might have a hole 1 .

By definition, \mathcal{P}^{\prime}\subset \mathcal{P}_{free} . Therefore, for the set of all the trajectories \Sigma^{\prime} that can be projected to a set of geometric paths \Phi^{\prime} with the same initial and final positions, and such that if \phi^{\prime}\in\Phi^{\prime} then \phi^{\prime}(\lambda)\in \mathcal{P}^{\prime} for \lambda\in[0,1] , then there exists a continuous mapping \psi : [0,1]\times[0,1]\rightarrow \mathcal{P}^{\prime} that deforms any \phi_{i}^{\prime}\in\Phi^{\prime} to any other \phi_{j}^{\prime}\in\Phi^{\prime}. \square

Note that, the above proposition refers to a region that can be used as a reference for a set of trajectories belonging to the same homotopy class, but it is not restricted to the one-to-one correspondence between a trajectory and its corresponding cell sequence. This means that the set of all trajectories that can be mapped to the same polygonal area defined as the union of cells in a loop-less cell sequence - in other words, the set of trajectories whose geometric path corresponds to a loop-less cell sequence in its canonical form - are homotopic if they share the same initial and final position.
Proposition 2

Two different sets of trajectories, having two different loop-less cell sequences as their canonical representations, belong to two distinct homotopy classes .
Proof

Let \mathcal{P}_{1} and \mathcal{P}_{2} denote the free space obtained as the union of convex cells in loop-less cell sequences \mathcal{CS}_{1} and \mathcal{CS}_{2} , i.e., \mathcal{P}_{1}=\bigcup\{c_{i}\in CS_{1}\} and \mathcal{P}_{2}=\bigcup\{c_{\text{i}}\in CS_{2}\} . Furthermore, let \mathcal{P}^{\prime} be the union of these two polygons, i.e., \mathcal{P}^{\prime}=\mathcal{P}_{1}\bigcup \mathcal{P}_{2} . Since the two cell sequences \mathcal{P}_{1} and \mathcal{P}_{2} are loop-less and different, there exists at least one cell in \mathcal{CS}_{1} that is not shared in \mathcal{CS}_{2} .

Assuming that the workspace is bounded, and workspace boundaries can be considered as boundaries of an obstacle, each convex cell has two boundaries with obstacles. For this reason, the polygon \mathcal{P}^{\prime} obtained as the union of convex cells in \mathcal{CS}_{1} and \mathcal{CS}_{2} has holes, and the space contained inside the outer boundary is not continuous (Figure 1 (\mathbf{c}) ). Therefore, a continuous mapping that deforms a trajectory with a geometric path \phi_{1}\in \mathcal{P}_{1} into another whose geometric path is \phi_{2} \in \mathcal{P}_{2} does not exist. This means that two trajectories having different loop-less cell sequences as their canonical representation belong to two distinct homotopy classes. \square

Proposition 2 states that the union of the convex cells in a loop-less cell sequence is a unique classifier for a homotopy class, therefore it can be used to distinguish different classes.
SECTION IV.
Homotopy Aware Kinodynamic Rrt*

The homotopy class invariant introduced in the previous section can be used within a RRT-based planning framework to impose the desired obstacle avoidance characteristic, while ensuring that the solution is feasible given a set of differential constraints (1) . In particular, an asymptotically optimal RRT-based planner, RRT * [8] , is used to obtain homotopically distinct (asymptotically) optimal trajectories,

Before introducing the proposed homotopy aware kinody-namic RRT*, we briefly recall the main steps of kinodynamic RRT * . The algorithm builds a tree T=(V,E) , whose nodes, V , are states of the dynamic system (1) , and edges, E , are optimal trajectories that connect two nodes solving a two point boundary value problem. The tree is initialized with V=\{s_{0}\} , where s_{0}\in S_{free} is the initial state, and E=\emptyset . Every node s\in V is connected to s_{0} via a single sequence of intermediate nodes s_{i}\in V, i=1, \ldots, n-1, n\leq N , and associated edges e_{i}=e_{s_{i},s_{i+1}}\in E, i=0,1, \ldots, n-1 , with s_{n}=s . One can then associate to this sequence a cost C(\rightarrow s_{n}) given by \begin{equation*} C(\rightarrow s_{n})=\sum_{i=0}^{n-1}C(e_{i}) \end{equation*} View Source Right-click on figure for MathML and additional features. \begin{equation*} C(\rightarrow s_{n})=\sum_{i=0}^{n-1}C(e_{i}) \end{equation*} where C(e_{i}) denotes the cost associated with edge e_{i}\in E , and computed as in (2) .

Tree expansion continues until a maximum number of iterations, N , defined by the user, is reached. At each iteration a random node, s_{rand} , is sampled from the free space, S_{free} to be connected to the tree. The parent node, s_{parent} , for s_{rand} is selected among a set of nodes within the local neighbourhood of s_{rand} , i.e., S_{near} . For each node s_{near}\in S_{near} , the optimal trajectory connecting s_{near} to s_{rand} is computed which minimizes the cost function (2) and satisfies the differential constraints (1) . Consecutively, the parent node, s_{parent}\in S_{near} , is the node in S_{near} that minimizes the cost Cost (\rightarrow s_{rand}) and for which the trajectory connecting s_{parent} with s_{rand} is collision-free. Every time a new node, s_{rand} , is added to the tree it is checked if existing nodes in the neighbourhood of s_{rand} can be connected to the tree through s_{rand} , and the nodes that satisfy this criteria are rewired , i.e., the previous edges that connect them are removed from the tree and new edges rooting from s_{rand} are added. Finally, the trajectory that reaches the goal with minimum cumulative cost is returned.
Fig. 2. - Feasible region for homotopy aware rrt*. (a) Homotopy class (blue region) defined as a union of a sequence of convex cells from the initial cell (containing blue star) to a final one (containing red star). The workspace is decomposed along the direction of motion (black solid line with arrowhead). (b) Corresponding feasible region (in the form of an occupancy grid) that correspond to the cell sequence, free space is shown in white.
Fig. 2.

Feasible region for homotopy aware rrt*. (a) Homotopy class (blue region) defined as a union of a sequence of convex cells from the initial cell (containing blue star) to a final one (containing red star). The workspace is decomposed along the direction of motion (black solid line with arrowhead). (b) Corresponding feasible region (in the form of an occupancy grid) that correspond to the cell sequence, free space is shown in white.

Show All

From Proposition 1 , it can be concluded that any two trajectories having the same initial and final positions, whose projections onto the 2D plane are confined in a polygonal region defined as a union of loop-less sequence of convex cells, are homotopic. This allows us to define a homotopy class constraint as a feasible region ( Figure 2 ), without explicitly tracking the corresponding sequence of cells passed for each node that is added to the tree. Any trajectory that can be projected onto this free space will be homotopic to the others, as long as they share the same initial and final positions, since they share the same canonical cell sequence. Once the feasible region that corresponds to the homotopy class is determined, RRT * can be modified to ensure that the tree built by the algorithm lies within it.

Given a loop-less cell sequence \mathcal{CS}=\{c_{0}\rightarrow c_{1}\rightarrow \ \cdots \rightarrow c_{f}\} , and the corresponding polygonal region, i.e. \mathcal{P}^{\prime}=\bigcup\{c_{i}\in\mathcal{CS}\} , the free space is defined as \begin{equation*} \mathcal{S}^{\prime}_{free}=\{s\in\mathcal{S}:\mu(s)\in \mathcal{P}^{\prime}\} \end{equation*} View Source Right-click on figure for MathML and additional features. \begin{equation*} \mathcal{S}^{\prime}_{free}=\{s\in\mathcal{S}:\mu(s)\in \mathcal{P}^{\prime}\} \end{equation*} which corresponds to the set that RRT * samples at each iteration to obtain a random state, s_{rand} , for expanding the tree. Furthermore, introducing this definition of the free space, the collision check ensures that the tree of trajectories lies entirely in the selected polygon, hence, the trajectory reaching the goal would lie in the selected homotopy class.
A. Topology Based Informed Sampling

The exact decomposition of the free space is also useful for making informed decisions during the sampling phase. In particular, the shortest geometric path can be used to sample in a restricted promising region. 1

In order to avoid confusion, in this section a shortest geometric path represents the shortest path connecting the initial position to the final one, neglecting system dynamics, in the polygon which corresponds to the homotopy class. Therefore, an approach similar to Theta*-RRT [14] - which first computes the shortest path in an environment using the Theta* algorithm [15] , and then draws samples in the vicinity of this path while solving for the kinodynamic planning problem using RRT - can be adopted in order to impose the full dynamics using RRT * framework while biasing the sampling using the shortest path.
Fig. 3. - Flow of the shortest geometric path. Solid black line at the center represents the shortest path found on the visibility graph (the sampleable zone around the shortest path is also shown). The sampling range allowed for orientations is shown with blue cones.
Fig. 3.

Flow of the shortest geometric path. Solid black line at the center represents the shortest path found on the visibility graph (the sampleable zone around the shortest path is also shown). The sampling range allowed for orientations is shown with blue cones.

Show All

In order to use an informed sampling approach based on the shortest path in a polygon, the shortest path that connects the initial position to a final one inside the polygonal region \mathcal{P}^{\prime} , which corresponds to the desired cell sequence \mathcal{CS} , is first computed. To this end, the visibility graph containing the line segments that are confined inside the designated polygonal zone is traversed using the \text{A}^{\ast} algorithm [16] .

Once the shortest path is found, it is possible to define a sampling set that restricts the states to be sampled to the ones that are in the vicinity of this path. Note that, no other restrictions are considered for the remaining states, e.g., on the velocity components or on the higher order derivatives. This results in a more focused set, that contains promising samples which can contribute to finding lower-cost trajectories. In particular, a samplable zone is designed such that the distance between the position component of any drawn sample and the shortest geometric path is not larger than a predefined threshold 2 , and the orientation of a sample is bounded by the limits determined by the flow of this shortest path ( Figure 3 ). For the samples that are in the vicinity of a line segment the orientation bounds are determined such that, \theta\in(\theta_{l}^{i}-\theta_{th},\ \theta_{l}^{i}+\theta_{th}) , where \theta is the orientation component of the state to be sampled, \theta_{l}^{i} is the orientation of the i^{th} line segment which is a part of the shortest geometric path, and \theta_{th} is a threshold that determines a cone of desired orientation. Furthermore, for the circular zone around the points that correspond to the intersection of two consecutive line segments, characterized by the radius equal to the distance threshold, the bounds are computed using the minimum and the maximum among the two limits determined by the two consecutive lines. The same is also performed for the initial and the final positions, using the initial and final states and the corresponding line segments.

The completeness of the algorithm is not compromised with the inclusion of this biased sampling assuming small-time locally controllable systems, such that a Euclidean ball centered at any state, s , contains a neighborhood of s , i.e., a d-dimensional set of states including s , that are reachable from s in time 0 < t\leq T, \forall T > 0 [17] . The completeness then follows from [8] , such that for any homotopy class which admits a trajectory with \epsilon -clearance from the obstacles, where \epsilon\geq 0 , the probability of the algorithm not finding a solution is 0 as the number of iterations tends to infinity. Note that, if the system at hand is not small-time locally controllable, for example a car-like robot with path curvature constraint, this decoupled approach may fail.
B. Multiple Distinct Trajectories

Beside constraining the solution to the selected homotopy class, homotopy aware RRT * can also be used to return homotopically distinct trajectories. Given a cell-sequence selection strategy a set of promising classes can be preliminarily identified, for example as in [13] that exploits a graph traversal algorithm adopting a Depth First Search (DFS) strategy to extract the branches (cell sequences) of the adjacency graph, \mathcal{G} , from an initial node to the final one, while imposing some constraints on their characteristics. In particular, the algorithm stops exploring a branch if it contains a duplicate of a node, or if the total number of nodes exceeds a threshold value.

Once a set of promising homotopy classes has been identified, each problem can be solved independently from the others. This also allows the overall problem of determining distinct trajectories to be solved in a parallel computing scheme.
SECTION V.
Numerical Example

In order to show the effectiveness of the algorithm, we provide a numerical example. A 4D state space is considered, representing a unicycle-like robot moving on a planar surface. The equations of motion are given by \begin{align*} & \dot{x}=v\cos\theta\qquad \dot{\theta}=\omega \tag{3}\\ & \dot{y}=v\sin\theta \qquad\dot{v}=\alpha \end{align*} View Source Right-click on figure for MathML and additional features. \begin{align*} & \dot{x}=v\cos\theta\qquad \dot{\theta}=\omega \tag{3}\\ & \dot{y}=v\sin\theta \qquad\dot{v}=\alpha \end{align*} where (x, y) and \theta are the robot position and orientation with respect to a global reference frame, v and w are the linear and angular velocities, and a is the linear acceleration. The model given in (3) is feedback linearized to obtain the following double integrator model \begin{align*} & \dot{x}=v_{x}\qquad \dot{v}_{x}=u_{1} \tag{4}\\ & \dot{y}=v_{y} \qquad \dot{v}_{y}=u_{2} \end{align*} View Source Right-click on figure for MathML and additional features. \begin{align*} & \dot{x}=v_{x}\qquad \dot{v}_{x}=u_{1} \tag{4}\\ & \dot{y}=v_{y} \qquad \dot{v}_{y}=u_{2} \end{align*} where v_{x}=v\cos(\theta) and v_{y}\ =\ v\sin(\theta) . We can then apply the approach in [18] to obtain the optimal trajectory connecting two states s_{i}=[x_{i},\ y_{i},\theta_{i},v_{i}]^{T} and s_{i+1}\ = [x_{i+1},\ y_{i+1},\theta_{i+1},v_{i+1}]^{T} considering the following cost function \begin{equation*} J(u)=\int_{0}^{\tau}(1+u^{T}Ru)dt \tag{5} \end{equation*} View Source Right-click on figure for MathML and additional features. \begin{equation*} J(u)=\int_{0}^{\tau}(1+u^{T}Ru)dt \tag{5} \end{equation*} which minimizes the total time, \tau , of the trajectory while penalizing the control input for the double integrator model, u=[u_{1},\ u_{2}]^{T} , using the weight R=0.25I_{2} .
Fig. 4. - For two different homotopy classes, $\Sigma_{H_{1}}, \Sigma_{H_{2}};(\text{a})$ cell sequence corresponding to $\Sigma_{H_{1}}$ (b) cell sequence corresponding to $\Sigma_{H_{2}}$ (c-d) the resulting tree and the best cost trajectory at $10{3}$ iterations for $\Sigma_{H_{1}}$ using uniform and informed sampling. (e-f) the resulting tree and the best cost trajectory at $10{3}$ iterations for $\Sigma_{H_{2}}$ using uniform and informed sampling.
Fig. 4.

For two different homotopy classes, \Sigma_{H_{1}}, \Sigma_{H_{2}};(\text{a}) cell sequence corresponding to \Sigma_{H_{1}} (b) cell sequence corresponding to \Sigma_{H_{2}} (c-d) the resulting tree and the best cost trajectory at 10{3} iterations for \Sigma_{H_{1}} using uniform and informed sampling. (e-f) the resulting tree and the best cost trajectory at 10{3} iterations for \Sigma_{H_{2}} using uniform and informed sampling.

Show All

The planning environment has the size 10 \times 10m and it is populated with 4 obstacles. The algorithm is constrained to return a solution that follows a selected homotopy class given as a sequence of convex cells that partition the robot workspace. With a slight abuse of the previously introduced definition of homotopic trajectories, we consider any trajectory having its final position inside a 0.1\times 0.1m sized region centered at the goal position as a solution.

Once the desired homotopy class is given in terms of a cell sequence from an initial cell to a final one, the algorithm starts computing the free region ( Figure 2 ). Figure 4 shows the trajectories computed after 10 3 iterations for the homotopy classes given in Figure 4(a,b) using different sampling techniques. Clearly, the homotopy class restrictions are satisfied since the corresponding occupancy grid for collision-detection assigns every cell other than those corresponding to the desired cell sequence as an obstacle.

Using the shortest path in the polygon representing the corresponding homotopy class allows us to explore a more restricted area focusing on the samples that can contribute to find a trajectory that solves the homotopic trajectory planning problem. Figure 5 shows the average solution cost for 10 independent simulations for the homotopy class given in Figure 4(a) as a function of the number of iterations for each of the sampling strategies (uniform and informed). It is clear that, using an informed sampling that accounts for the flow of the shortest path provides better solutions faster compared to sampling the complete free region. Furthermore, it also allows to find the first solution at a lower number of iterations. Though arguing for the optimality when such a sampling strategy is used is problem dependent and out of the scope of this work, we can conclude, based on the empirical results, that the proposed sampling strategy increases the convergence rate to lower cost solutions.
Fig. 5. - Solution cost as a function of the number of iterations for uniform sampling (red solid line) and for informed sampling (blue) strategies.
Fig. 5.

Solution cost as a function of the number of iterations for uniform sampling (red solid line) and for informed sampling (blue) strategies.

Show All

Note that, other than imposing certain rules on how a trajectory should avoid obstacles, identifying a number of homotopy classes is also beneficial for biasing the sampling along the shortest path for each of the classes. Especially for systems with dynamic constraints or with bounds on actuation as in these cases obtaining a shortest path in a homotopy class does not necessarily guarantee the existence of a feasible trajectory.
SECTION VI.
Conclusions

In this paper a homotopy aware variant of RRT * is presented, which restricts the tree growth to obtain solution trajectories that belong to a selected homotopy class. In particular, a homotopy class constraint based on the convex cell decomposition which can easily be included within the RRT-based planner scheme is proposed. Integration of the proposed constraint does not call for any modification in the original algorithm.

A theoretical analysis is also presented, to show that as long as loop-less cell sequences are considered, the homotopy class identifier is invariant with respect to trajectories that belong to same class, and unique to the designated class.
ACKNOWLEDGMENT

Published in the context of the project TEINVEIN: TEcnologie INnovative per i VEicoli Intelligenti, CUP (Codice Unico Progetto - Unique Project Code): E96D17000110009 - Call “Accordi per la Ricerca e l'Innovazione”, cofunded by POR FESR 2014–2020 (Programma Operativo Regionale, Fondo Europeo di Sviluppo Regionale - Regional Operational Programme, European Regional Development Fund).

Authors
Figures
References
Citations
Keywords
Metrics
Footnotes
More Like This
Dynamic target tracking using a four wheeled mobile robot with optimal path planning technique

2017 International Conference on Circuit ,Power and Computing Technologies (ICCPCT)

Published: 2017
Mobile robots path planning using ant colony optimization and Fuzzy Logic algorithms in unknown dynamic environments

2013 International Conference on Control, Automation, Robotics and Embedded Systems (CARE)

Published: 2013
Show More
References
1.
M. Kuderer, C. Sprunk, H. Kretzschmar and W. Burgard, "Online generation of homotopically distinct navigation paths", IEEE International Conference on Robotics and Automation , pp. 6462-6467, 2014.
Show in Context View Article
Google Scholar
2.
S. Bhattacharya, M. Likhachev and V. Kumar, "Topological constraints in search-based robot path planning", Autonomous Robots , vol. 33, no. 3, pp. 273-290, 2012.
CrossRef Google Scholar
3.
S. Bhattacharya, V. Kumar and M. Likhachev, "Search-based path planning with homotopy class constraints", Third Annual Symposium on Combinatorial Search , 2010.
Show in Context Google Scholar
4.
B. Donald, P. Xavier, J. Canny and J. Reif, "Kinodynamic motion planning", Journal of the ACM , vol. 40, no. 5, pp. 1048-1066, 1993.
Show in Context CrossRef Google Scholar
5.
S. J. Anderson, S. B. Karumanchi, K. Iagnemma and J. M. Walker, "The intelligent copilot: A constraint-based approach to shared-adaptive control of ground vehicles", IEEE Intelligent Transportation Systems Magazine , vol. 5, no. 2, pp. 45-54, 2013.
Show in Context View Article
Google Scholar
6.
J. Park, S. Karumanchi and K. Iagnemma, "Homotopy-based divide-and-conquer strategy for optimal trajectory planning via mixed-integer programming", IEEE Transactions on Robotics , vol. 31, no. 5, pp. 1101-1115, 2015.
Show in Context View Article
Google Scholar
7.
S. M. LaValle and J. J. Kuffner, "Randomized kinodynamic planning", The international journal of robotics research , vol. 20, no. 5, pp. 378-400, 2001.
Show in Context CrossRef Google Scholar
8.
S. Karaman and E. Frazzoli, "Optimal kinodynamic motion planning using incremental sampling-based methods", IEEE Conference on Decision and Control , pp. 7681-7687, 2010.
Show in Context View Article
Google Scholar
9.
E. Hernandez, M. Carreras and P. Ridao, "A comparison of homotopic path planning algorithms for robotic applications", Robotics and Autonomous Systems , vol. 64, pp. 44-58, 2015.
Show in Context CrossRef Google Scholar
10.
K. D. Jenkins, The shortest path problem in the plane with obstacles: A graph modeling approach to producing finite search lists of homotopy classes , 1991.
Show in Context Google Scholar
11.
J.-C. Latombe, Robot motion planning, Springer Science & Business Media, 2012.
Show in Context Google Scholar
12.
B. Chazelle, "Approximation and decomposition of shapes", Algorithmic and Geometric Aspects of Robotics , vol. 1, pp. 145-185, 1985.
Show in Context Google Scholar
13.
B. Sakcak, L. Bascetta and G. Ferretti, "An exact optimal kinodynamic planner based on homotopy class constraints" in Modelling and Simulation for Autonomous Systems. MESAS 2017. Lecture Notes in Computer Science, Cham:Springer, vol. 10756, pp. 140-152, 2018.
Show in Context CrossRef Google Scholar
14.
L. Palmieri, S. Koenig and K. O. Arras, "RRT-based nonholonomic motion planning using any-angle path biasing", IEEE International Conference on Robotics and Automation , pp. 2775-2781, 2016.
Show in Context View Article
Google Scholar
15.
A. Nash, K. Daniel, S. Koenig and A. Felner, "Theta*: Any-angle path planning on grids", AAAI Conference on Artificial Intelligence , pp. 1177-1183, 2007.
Show in Context Google Scholar
16.
J. Pearl, Heuristics: intelligent search strategies for computer problem solving, 1984.
Show in Context Google Scholar
17.
H. M. Choset, Principles of robot motion: theory algorithms and implementation, MIT press, 2005.
Show in Context Google Scholar
18.
D. J. Webb and J. Van Den Berg, "Kinodynamic RRT*: Asymptotically optimal motion planning for robots with linear dynamics", IEEE International Conference on Robotics and Automation , pp. 5054-5061, 2013.
Show in Context View Article
Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
