Ann Math Artif Intell (2013) 67:251–281 DOI 10.1007/s10472-013-9357-7
Invariants for homology classes with application to optimal search and planning problem in robotics
Subhrajit Bhattacharya · David Lipsky · Robert Ghrist · Vijay Kumar
Published online: 15 May 2013 © Springer Science+Business Media Dordrecht 2013
Abstract We consider planning problems on Euclidean spaces of the form RD − O, where O is viewed as a collection of obstacles. Such spaces are of frequent occurrence as configuration spaces of robots, where O represent either physical obstacles that the robots need to avoid (e.g., walls, other robots, etc.) or illegal states (e.g., all legs off-the-ground). As state-planning is translated to path-planning on a configuration space, we collate equivalent plannings via topologically-equivalent paths. This prompts finding or exploring the different homology classes in such environments and finding representative optimal trajectories in each such class. In this paper we start by considering the general problem of finding a complete set of easily computable homology class invariants for (N − 1)-cycles in (RD − O). We achieve this by finding explicit generators of the (N − 1)st de Rham cohomology group of this punctured Euclidean space, and using their integrals to define cocycles. The action of those dual cocycles on (N − 1)-cycles gives the desired complete set of invariants. We illustrate the computation through examples. We then show, for the case when N = 2, due to the integral approach in our formulation, this complete set of invariants is well-suited for efficient search-based planning of optimal robot trajectories with topological constraints. In particular, we show how to construct an ‘augmented graph’, G, from an arbitrary graph G in the configuration space. A graph
S. Bhattacharya (B) · D. Lipsky · R. Ghrist
Department of Mathematics, University of Pennsylvania, David Rittenhouse Lab, 209 South 33rd Street, Philadelphia, PA 19104-6395, USA e-mail: subhrabh@math.upenn.edu D. Lipsky e-mail: dlipsky@gmail.com R. Ghrist e-mail: ghrist@math.upenn.edu
V. Kumar Department of Mechanical Engineering and Applied Mechanics, University of Pennsylvania, Philadelphia, PA, USA e-mail: kumar@seas.upenn.edu

252

S. Bhattacharya et al.

construction and search algorithm can hence be used to find optimal trajectories in different topological classes. Finally, we extend this approach to computation of invariants in spaces derived from (RD − O) by collapsing a subspace, thereby permitting application to a wider class of non-Euclidean ambient spaces.
Keywords Algebraic topolgy · Differential topology · Homology invariant · Robot path planning

1 Introduction
1.1 Motivation: robot path planning with topological constraints
In numerous robotics applications, it is important to distinguish between configuration space paths in different topological classes, as a means of categorizing continuous families of plans. This motivation—connected components of paths relative to endpoints—leads to classifying up to homotopy. Examples motivating a classification of homotopy classes of paths include: (1) group exploration of an environment [5], in which an efficient strategy involves allocating one agent per homotopy class; (2) visibility, especially in the tracking of uncertain agents in an environment with dynamic obstacles [41]; and (3) multi-agent coordination, in which (Pareto-) optimal planning coincides with homotopy classification [19].
Although homotopy is a natural topological equivalence relation for paths, the computational bottlenecks involved, especially in higher dimensional configuration spaces, present severe challenges in solving practical problems in robot path planning. Thus we resort to its computationally-simpler cousin—homology (Fig. 1). We assume a basic familiarity with introductory algebraic topology, as in [24] for homology and [4] for differential forms and de Rham cohomology.

Fig. 1 Homology classes of robot trajectories in Euclidean spaces with obstacles

Invariants for homology classes with application to optimal search

253

Fig. 2 Obstacles, O, can be replaced by equivalents, S, without change to HN−1 of the complement
The methods we employ, following [3], construct an explicit differential 1-form, the integration of which along trajectories give complete homology class invariants. Such 1-forms represent elements of the de Rham cohomology group of the configuration space, Hd1R(RD − O). To deal with the obstacles, we replace O with topologically equivalent codimesion-2 skeleta (e.g., Fig. 2) and then compute the degrees (or linking numbers) of closed loops with the skeleta.
1.2 Related work
Algebraic topology quantifies qualitative relationships among spaces. Typical equivalence relations for spaces include homeomorphism and homotopy equivalence. However, such equivalences (and discriminating invariants thereof) are difficult to compute (e.g. homotopy groups). On the other hand, a coarser equivalence, homology, is based on the algebraic structure of chain complexes. Homological algebra—the modern completion of linear algebra—provides machinery for effective computation of homological invariants, such as Betti numbers and the Euler characteristic [24]. In this paper we focus primarily on the problem of being able to compute incrementally. We focus on certain homology invariants for submanifolds of generally punctured Euclidean spaces, when the submanifold is not known completely to start with. Computation homology is by now a well-established domain of inquiry with a collection of introductory and advanced texts [11, 27, 33].
Recent applications of algebraic topology to the applied sciences has primarily focused on data analysis [6, 16, 31]. Recently, homological algebra has been applied to design algorithms for coverage problems in robotics and sensor networks [9, 20]. The study of robot path planning with topological considerations has received a moderate amount of attention from mathematicians and engineers [12, 17, 18, 21]. In the robotics literature, attempts at classification of homotopy classes in two-dimensional workspaces has been made using highly geometric techniques [22, 25]. Probabilistic road-map construction has been used for capturing the different topological classes in an environment [36], and triangulation-based path planning techniques have been used for two-dimensional environments with polygonal obstacles [8]. While in a twodimensional configuration space such methods can be used for telling whether or not two trajectories belong to the same topological class, efficient planning for least cost trajectories with homotopy class constraints is difficult using such representations even in two-dimensions. Neither is it possible to efficiently explore/find optimal

254

S. Bhattacharya et al.

trajectories in different homotopy classes in an environment. Graph search-based techniques for such a purpose were recently proposed and successfully implemented for 2 and 3 dimensional Euclidean configuration spaces with obstacles [3]. However, that paper merely hints at the possibility of extension to higher dimensions. The present work gives a general approach towards computation of homology invariants for submanifolds and has as an immediate application the clean extension to higher dimensions of the idea initiated in [3].

1.3 Contributions of this paper
We consider the general problem for higher homology classes of arbitrary submanifolds (not merely 1-dimensional curves representing trajectories for path-planning problems). In particular, we consider (N − 1)-dimensional closed manifolds as generalization of 1-dimensional curves that constitute the trajectories. Obstacles will be represented by codimension N closed manifolds (which, in many cases will be deformation retracts of the original obstacles).
Degree and linking numbers are closely related to homology [10, 24]. We will prove that the proposed integration along trajectories give homology class invariants for closed loops.
The principal aim of this paper is two-fold:
1. To find explicit differential (N − 1)-forms in a punctured Euclidean space and show that integration of the forms along (N − 1)-dimensional closed oriented submanifolds give a complete set of invariants for homology classes of the submanifolds in the punctured space (i.e., the values of the integral over two closed oriented submanifolds are equal if and only if the submanifolds are homologous),
2. To adapt and extend the tools used in [3] for robot path planning with topological reasoning to configuration spaces of arbitrary dimension.

1.4 Overview and organization of this paper
Throughout this paper we will assume that the reader has some familiarity with basic algebraic and differential topology (in particular, the concepts of singular homology, the long exact sequence of a pair, dif ferential forms, and de Rham cohomology). For more details, the reader may refer to the standard texts on algebraic [24] and differential [4] topology.
Our strategy is to exploit the pairing HN−1(RD − O; R) ⊗ HN−1(RD − O; R) → R, which evaluates (N − 1)-cocycles over (N − 1)-cycles. Given a cycle ω ∈ Z N−1(RD − O), and a large enough set of cocycles, A = {α1, α2, · · · , αm}, αi ∈ Z N−1(RD − O; R), one can hope that the set of values {α1(ω), α2(ω), · · · , αm(ω)} ∈ Rm will provide some information about the homology class of ω, that is the value of [ω] ∈ HN−1(RD − O; R). In fact choosing the coefficients in R, and with some assumptions on O, we will show that it is sufficient to choose the elements of A such that their cohomology classes generate HN−1(RD − O; R).
However, the challenge lies in finding explicit representatives of each cocyle αi, in a manner that will serve our purposes and are easy to evaluate on cycles.

Invariants for homology classes with application to optimal search

255

Via de Rham theory [4], each cocycles αi is represented by a closed (N − 1)-form, φi ∈ N−1(RD − O), so that the evaluation of the cocycle over a cycle is, precisely, the integral of φi over the cycle. We desire such a representation for our purpose.
Our first task, then, is to find explicit (N − 1)-forms φi. To do so, we consider the “difference” map p : (RD − O) × O → (RD − {0}) that records the distance from a free point to an obstacle point. Since the codomain RD − {0} is homologous to an oriented (D − 1)-dimensional sphere, we choose a form η0 ∈ D−1(RD − {0}) that represents the fundamental class. Then, a simple pull-back via p gives the form η = p∗η0 ∈ D−1(RD − O) × O). Upon integration of η over some (D − N)-cycle, S, one may hope to obtain the desired (N − 1)-form, φi = S p∗η0.
Thus we begin by constructing a suitable skeleton, S, with which to replace O, so that the spaces (RD − O) and (RD − S) are identical as far as their (N − 1)st
homology groups are concerned. However, in that construction, we will ensure that
S is constructed from a collection (disjoint union) of codimension-N manifolds b(the
collection itself being written as S), thus simplifying the problem.
The rest of the paper is organized as follows:

– In Section 2 we simplify the problem by replacing obstacles by a dimensionallysuitable skeleton. In particular, for (N − 1)-cycles in a D-dimensional punctured Euclidean space, we replace the obstacles by (D − N)-dimensional submanifolds to obtain the reduced problem definition of Section 2.1.
– In Section 3 we review the notion of linking numbers and make precise their relationship to homology classes, in the process, illustrating some of the technical details using simple examples in the D = 3, N = 2 case (which is the case of robot planning problems in 3-dimensional configuration space).
– In Section 4 we specialize some of the results obtained in Section 3 to fit the reduced problem we described in Section 2.1. We hence obtain an explicit formula for the complete set of invariants for homology class. This is the invariant described in (14).
– At the end of Section 4 we give explicit examples for small values for D and N, where the relevant formulae reduce to classical results from complex analysis, electromagnetism, and electrostatics. We also provide some details on the algorithm for numerical integrations involved in computation of the invariant.
– In Section 5 we demonstrate one example with D = 5, N = 3, and show that the proposed formula indeed computes a complete invariant for homology class in that example. Moreover, we illustrate how the proposed formula can be used in search-based robot path planning with topological constraints.
– Finally, in Section 6, we generalize to some non-Euclidean spaces by collapsing a subspace. This is effected through working with relative homology. We demonstrate that the invariants thus computed for such spaces can once again be efficiently used for search-based path planning in robotics.

Throughout this paper we consider homology and cohomology with coefficients in the field R. As a consequence, all the homology and cohomology groups have the structure of vector spaces. Also, for simplicity, we will throughout consider N > 1 to avoid the special treatment of the 0th (co)homology groups. All manifolds and other
topological spaces are assumed to be Hausdorff.

256

S. Bhattacharya et al.

2 On building obstacle equivalents
As preparation for the technical details involving linking numbers, we consider the replacement of our obstacles with their (D − N)-dimensional representatives. This is trivial for contractible obstacles in the plane (point representatives) and in 3-dimensional space (cf. the skeletons of [3]). The intuition is that replacing obstacles by their homotopy equivalents leaves the homology classes of trajectories in the complement unchanged (Fig. 2); however, we have dimension constraints, and there exist simple obstacles that do not have a (D − N)-dimensional deformation retract (e.g. for the D = 3, N = 2 case, a hollow torus does not have a D − N = 1 dimensional homotopy equivalent). We therefore turn to (D − N)-dimensional equivalents homologically faithful in the desired dimension (Fig. 4).
In the proposition and related corollaries that follow, we represent the ambient configuration space (without obstacles) by RD, an obstacle by O, and S the (D − N)dimensional equivalent of the obstacle with which we replace O for computational simplicity.
The following lemma is a technical detail that we provide for completeness. The more important result follows in Proposition 1.

Lemma 1 Let M be an oriented n-dimensional manifold, and let K ⊆ M be a
compact neighborhood retract. Then for every 0 ≤ i ≤ n, there is an isomorphism f : Hn−i(K) → Hi(M|K), which is natural in the sense that if J ⊆ K is also a compact
neighborhood retract in M, then the following square commutes.

Proof For any neighborhood U of K, let [U|K] ∈ Hn(U|K) denote the (relative) fundamental class. If V ⊆ U is a smaller neighborhood of K, then the following diagram commutes by the naturality of cap products and excision.
This gives rise to a map l−→ imU Hn−i(U) → Hi(M|K), where the colimit is taken over all neighborhoods U of K. This map is proved to be an isomorphism in Proposition 3.46 of [24]. In addition, there is a natural map l−→ imU Hn−i(U) → Hn−i(K), coming from the individual maps Hn−i(U) → Hn−i(K). In proposition 3.44, [24] proves this map to be an isomorphism under the hypothesis that K is a neighborhood retract. Combining these isomorphisms gives rise to the desired isomorphism Hn−i(K) −→ Hi(M|K).

Invariants for homology classes with application to optimal search

257

It remains to show that if J ⊆ K is also a compact neighborhood retract in M, then the following diagram commutes.

The middle vertical map comes from the fact that every neighborhood of K is also a neighborhood of J. Commutativity of the left hand square follows immediately by functoriality. For the right hand square, it suffices to note that if U is a neighborhood of K, then
commutes by the naturality of cap product and excision.
Proposition 1 Let O be a compact, locally contractible subspace of RD. Let S be a compact, locally contractible subspace of O, such that the inclusion i : S → O induces an isomorphism i∗ : HD−N(S) → HD−N(O). Then the inclusion map i : (RD − O) → (RD − S) induces an isomorphism i∗ : HN−1(RD − O) → HN−1(RD − S). Proof Consider the following diagram.

(a)

(b)

(c)

Fig. 3 A solid torus (left) with valid (right) and invalid (middle) equivalents. This is an example with D = 3, N = 2. The replacement needs to be such that the inclusion map i : (RD − O) → (RD − S)
induces the isomorphism

258

S. Bhattacharya et al.

The vertical arrows are induced by the inclusions i and i. The arrows labeled f are the isomorphisms given by Proposition 3.46 of [24] (it is here that we use the hypotheses that O and S be compact and locally contractible). The arrows labeled ∂ are the boundary homomorphisms in the long exact sequence for the pairs (RD, RD − O) and (RD, RD − S). These are also isomorphisms, by the contractibility of RD.
The square on the right commutes by the naturality of the long exact sequence. The square on the left commutes due to Lemma 1.
The vertical arrow on the left is an isomorphism by hypothesis (using the Universal Coefficient Theorem over R), and all the horizontal arrows are isomorphisms, so the vertical arrow on the right must also be an isomorphism.

In light of robot path planning, O in the above proposition is a solid obstacle in the environment, and S is its equivalent/replacement (in the terminology of [3] these are representative points of obstacles on a 2-dimensional plane, and skeletons of obstacles in a 3-dimensional Euclidean space). The aim of the above proposition is to establish a relationship between the homology groups of the complement (or free) spaces, (RD − O) and (RD − S), from some known relationship between the spaces O and S (Fig. 3). In the corollaries below, we suggest approaches for identifying valid replacements S of the given obstacles O.
The following corollary is trivial, but stated formally for future reference.
Corollary 1 If S and O are compact, locally contractible subspaces of RD such that S is a deformation retract of O, then the inclusion map i : (RD − O) → (RD − S) induces isomorphisms i∗ : H∗(RD − O) → H∗(RD − S)

Proposition 2 Let O ⊂ RD be compact and locally contractible. Suppose there ex-

ists a set of connected, closed, oriented (D − N)-dimensional manifolds Sk ⊆ O,

k = 1, . . . , m, such that the fundamental classes [S1], . . . , [Sm] form a basis for the

homology group HD−N(O). Let S =

m k=1

Sk.

If the direct sum of the inclusion maps ik : Sk → S induce an isomorphism

m k=1

H D− N ( Sk )

HD−N(S), then the inclusion map i : (RD − O) → (RD − S) in-

duces an isomorphism i∗:N−1 : HN−1(RD − O) → HN−1(RD − S).

Furthermore, if dim(O) > D − N + 1, it is always possible to perturb the chosen

set of manifolds, Sk (whose fundamental classes form the basis for HD−N(O)), by

arbitrarily small amounts, such that they satisfy the above condition.

Proof By construction, HD−N(O)

m i=1

H D− N ( Si ).

Again,

by

hypothesis,

H D− N ( S)

m i=1

H D− N ( Si ).

Thus

we

have

H D− N ( S)

HD−N(O). Thus it follows

from Proposition 1 that i : (RD − O) → (RD − S) induces an isomorphism

i∗:N−1 : HN−1(RD − O) → HN−1(RD − S).

Next, let Sk =

m i=k+1

Si,

k = 0, 1, · · · , m,

with

S0 = S

and

Sm = ∅.

Thus,

Sk ∪

Sk = Sk−1. Using Mayer-Vietoris sequence, we have the following exact sequence

for every k = 1, 2, · · · , m − 1,

HD−N(Sk ∩ Sk) −→ HD−N(Sk)⊕ HD−N(Sk) −→ ρk∗ HD−N(Sk−1) −→ HD−N−1(Sk ∩ Sk) (1)

Invariants for homology classes with application to optimal search

259

Since both Sk and Sk are (D − N) dimensional and are immersed in O, by transversality it is always possible to perturb them by arbitrarily small amounts, if required, such that the dimension of their intersection is dim(Sk) + dim(Sk) − dim(O) = 2(D − N) − dim(O). Thus, if dim(O) > D − N + 1, the dimension of the intersection set, dim(Sk ∩ Sk) < D − N − 1. Thus the leftmost and rightmost terms in the sequence (1) vanish making ρk∗ an isomorphism for every k. Then,

H D− N ( S)

HD−N(S0) HD−N(S1) ⊕ HD−N(S1)

HD−N(S1) ⊕ HD−N(S2) ⊕ HD−N(S2)

···

m
H D− N ( Si )
i=1

Clearly, the isomorphism is the direct sum

m k=1

ρk∗.

The consequence of the above corollary and proposition is that instead of com-

puting homology classes of (N − 1) cycles in the original punctured space (X − O),

we can replace the obstacles O with equivalents S while preserving the relevant

homology (cf. [3] for special cases).

In cases where (D − N)-dimensional deformation retracts do not exist (e.g.,

Fig. 4), Proposition 2 allows one to replace obstacles by (D − N)-dimensional

equivalents—generating cycles of (D − N)th homology group, Sk, k = 1, . . . , m.

The choice of the generating cycles needs to satisfy certain conditions (i.e.,

H D− N (

m i=1

Si)

m i=1

H D− N ( Si )).

A

sufficient

condition

for

being

able

to

make

that choice is that the dimension of their intersection sets be less than (D − N − 1),

which in turn is guaranteed if the dimension of O is greater than (D − N + 1).

However, these conditions on dimension are not necessary (Fig. 4a).

2.1 Reduced problem definition
Thus we have established that obstacles O ⊂ RD (which represent illegal zones in robot planning problems) may be replaced by equivalents S1, S2, · · · , Sm preserving

(a)

(b)

(c)

Fig. 4 A hollow (or thickened) torus as an obstacle in a D = 3 dimensional space, with N = 2 for the problem of robot path planning (i.e. we are interested in homology classes of (N − 1) = 1dimensional manifolds, which are closed trajectories). It does not have a (D − N) = 1-dimensional deformation retract or homotopy equivalent. However, we can replace it by its generating 1-cycles (left). Other choices are invalid, when either S is not the union of generating cycles (middle) or they do not satisfy the condition of Proposition 2 (right)

260

S. Bhattacharya et al.

the appropriate homology. Thus we choose the equivalents to be a disjoint union of connected, closed, orientable (D − N)-dimensional manifolds, Sk, k = 1, . . . , m. The reduced problem definition follows:

Given:

(1) the singularity manifolds—a collection S = S1 S2 · · · Sm
of (D − N)-dimensional (N > 1), connected, closed, orientable submanifolds, of RD; We use a similar notation to denote their union, S = ∪im=1 Si; and (2) the candidate manifolds—a collection of (N − 1)-dimensional, closed, oriented submanifolds in (RD − S).

Problem:

identify the homology classes of the candidate manifolds in the complement of the singularity manifolds. Specifically, design a complete set of easily-computed invariants for these homology classes by finding a set of explicit generators for HN−1(RD − S) and integrating these generators over candidate manifolds.

In order to compute the action of the cocycles on the candidate manifolds, we represent them as (N − 1)-cycles (i.e. top-dimensional covering cycles). Thus, given a candidate manifold ω, we can use a cellular cover of the manifold, ω, which is also an (N − 1)-cycle in (RD − S) under the inclusion map ω → (RD − S) (a map that we will assume implicitly most often). However, given two cycles ω1, ω2 ∈ Z N−1(RD − S), instead of checking if or not ω1 − ω2 is boundary in HN−1(RD − S), we will compute complete invariants φS (ω1) and φS (ω2), comparing them to make the desired assertion. In particular, we construct the function φS (·) to be in form of an integration over ω of some set of differential (N − 1)-forms. Our strategy—
using integration and differential forms—is a traditional method for understanding
(co)homology of manifolds and submanifolds [4].

3 Preliminaries on linking numbers
Equipped with the notion of the (D − N)-dimensional replacements of the obstacles/punctures, Si, we proceed towards computing the homology classes of (N − 1)cycles (in light of robot planning problem those are the closed trajectories) of (RD − S). In this section we recall various notions of intersection and linking number, and from this: i. Infer homology classes of the (N − 1)-cycles in (RD − Si) from linking data
(Proposition 4), ii. Compute the linking number using an integration over the (N − 1)-cycle and a
top-dimensional cycle of the Si (Proposition 5).
We illustrate the ideas using examples from robot planning problems.
3.1 Deﬁnitions
Recall the definition of intersection number:
Deﬁnition 1 (Intersection Number—Ch. VII, Def. 4.1 of [10]) Suppose X and Y are submanifolds of RD, and A ⊂ X ⊂ RD, B ⊂ Y ⊂ RD are such that A ∩ Y = ∅,

Invariants for homology classes with application to optimal search

261

Fig. 5 Illustration of intersection number in R3 with
N = 2 in light of Definition 1

X ∩ B = ∅ (Fig. 5). Consider the map p : (X × Y, A × Y ∪ X × B) → (RD, RD − {0}) given by p(x, y) = x − y. The composition
HN(X, A) × HD−N(Y, B) −−−×−→ HD(X × Y, A × Y ∪ X × B) −(−−−1)−D−−N−→ p∗ HD(RD, RD − {0})
is called the intersection pairing (where ‘×’ denotes the homology cross product—see p. 268 of [24]). We write
I (ζ, μ) = (−1)D−N p∗(ζ × μ), for ζ ∈ HN(X, A), μ ∈ HD−N(Y, B)
and call this element of HD(RD, RD − {0}) R the intersection number of ζ and μ.
Deﬁnition 2 (Linking Number—Adapted from Ch. 10, Art. 77 of [37]) We borrow definitions of X, A, Y and B from Definition 1. Recall from the long exact sequence of the pair (X, A) the connecting homomorphism ∂∗ : HN(X, A) → HN−1( A). If ς ∈ HN−1( A) is such that it can be written as ς = ∂∗ζ for some ζ ∈ HN(X, A), and if μ ∈ HD−N(Y, B), then the linking number between ς and μ is defined as L (ς, μ) = I (ζ, μ).
These definitions, being based on homology classes, of course are applicable to cycle representatives. Figure 6 illustrates the intuition behind these definitions using a simple example.
3.2 Propositions on linking number
We state two propositions related to linking numbers, and how they relate to homology class of cycles. The first is well-known but stated for completeness.
Proposition 3 (Uniqueness of linking number) If HN(X) = HN−1(X) = 0 holds, then L (ς, μ) is independent of the choice of ζ in Def inition 2 [37].

262

S. Bhattacharya et al.

(a)

(b)

Fig. 6 A simplified illustration (following from Fig. 3c) of intersection number and linking number in R3 with N = 2. This is a special case of Definition 1 when X = R3, A = R3 − S, Y = S and B = ∅. Figure (a) on the left: The intersection number is computed between a N-chain, ξ (more precisely it is a relative cycle in (X, A) that we consider—the boundary of ξ trivialized), and the (D − N)cycle, μ, that is a top-dimensional cycle on S. In this figure the said intersection number is ±1 due
to the single intersection marked by the ‘cross’ at u. Then, by definition, that is equal to the linking
number between ς = ∂ξ and μ. Figure (b) on the right: The precise definition requires a mapping, p, from pair of points in the original space (one point from the 2-chain, ξ , embedded in the ambient space, R3, and another from S) to (a different copy of) R3. The intersection/linking number is then,
informally, the number of times intersection points in the pre-image of p (points like u) maps to the
origin, 0 (with proper sign), in the image, or equivalently, the number of times the image of ς × μ, under the action of p, wraps around the origin. Thus, it is the homology class of the cycle p(ς × μ) in the punctured Euclidean space (RD − 0)

Proposition 4 (Connection to homology of A) Consider a f ixed non-zero μ ∈ HD−N(Y, B). If, in addition to the condition of Proposition 3, we have HN(X, A) HN−1( A) R, and if there exists at least one (N − 1)-cycle in A such that its linking number with μ is non-zero, then the value of L (ς, μ) tells us which element of HN−1( A) is the chosen ς . In other words, the map H ≡ L (·, μ) : HN−1( A) → HD−1(RD, RD − {0}) R is an injective homomorphism.
Proof The map H is given by H(ς ) = (−1)D−N p∗(∂∗−1ς × μ). This clearly is a group homomorphism between HN−1( A) and HD−1(RD, RD − {0}). Since by hypothesis, both the domain and the co-domain of H are isomorphic to R, H can either be a trivial homomorphism (i.e. maps everything in its domain to 0 in its co-domain), or it can be an injection. The former possibility is ruled out by the hypothesis of existence of at least one (N − 1)-cycle in A with non-zero linking number with μ. Thus the result follows.
The result implies that the linking number with μ is a complete invariant for the homology class ς .
3.3 Computation of intersection/linking number for given cycles
We describe how to compute the linking number between the cycles ς and μ. As discussed in the beginning of this paper, we would like to be able to compute the homology class of (N − 1)-cycles (top-dimensional cycles on (N − 1)-dimensional manifolds) as an explicit number (or a set of numbers). Equipped with Proposition 4, that problem can be converted to the problem of computation of the linking numbers.

Invariants for homology classes with application to optimal search

263

Let η0 ∈ dDR−1(R − {0}) be a closed differential form that represents the standard generator of HD−1(RD − {0}). Let j∗ : HDN (Y) → HD−N(Y, B) denote the quotient map.

Proposition 5 Assume the same hypotheses as in Proposition 3. Fix μ ∈ HD−N(Y, B), and suppose there exists a class u ∈ HD−N(Y) such that j∗(u) = μ. Then for any ς ∈ HN−1( A), the linking number L (ς, μ) is uniquely determined by the value of the
integral

(−1)D−N

p∗(η0).

(2)

ς ×u

Proof First, note that the map
HD(RD, RD − {0}) −→∂∗ HD−1(RD − {0}) −−·→η0 R
is an isomorphism, so that every element m ∈ HD(RD, RD − {0}) is uniquely determined by the value of the integral ∂∗m η0.
Choose a class ζ ∈ HN(X, A) such that ∂∗(ζ ) = ς (where, ς ∈ HN−1( A) is given). Then, by definition,
L (ς, μ) = I (ζ, μ) = (−1)D−N p∗(ζ × μ) ∈ HD(RD, RD − {0}).
Now, consider the diagram below.

It is a standard fact that every part of this diagram commutes, and as a consequence we have that
∂∗ p∗(ζ × μ) = ∂∗ p∗(ζ × j∗u) = p∗(∂∗ζ × u) = p∗(ς × u)
Finally, by the naturality of integration, we have

η0 = (−1)D−N

η0 = (−1)D−N

p∗(η0).

∂∗L (ς,μ)

p∗(ς ×u)

ς ×u

Thus the integral on the right uniquely determines the value of the linking number L (ς, μ).

264

S. Bhattacharya et al.

Note that linking number, by definition, is defined between a cycle in A and a relative cycle in (Y, B). However, for computing the integration of (2), the cycles we choose are from A and Y. Thus it is possible to use the standard notion of integration over chains [4]. However, if B = ∅, a relative cycle in (Y, B) becomes a cycle in Y.

4 Construction and explicit computation

4.1 Construction of the complete invariant

We specialize the results of the previous section to match the description of the reduced problem def inition in Section 2.1. At present, we consider the case where there is a single path-connected component of S, namely S. In connection to the definitions stated in Section 3 (cf. Fig. 6), we set

X = RD, A = RD − S, Y = S and B = ∅

Moreover, since Y ≡ S is a (D − N)-dimensional closed, connected and oriented manifold, we have HD−N(S) R. We thus choose μ = S ∈ Z D−N(S) to be a cycle representing the fundamental class of S, i.e. the generator 1 ∈ HD−N(S). Also, note that since B = ∅, the map j : Z D−N(Y) → Z D−N(Y, B) is the identity map. So in this case [S] ∈ HD−N(S, B) ≡ HD−N(S). For this choice it is easy to verify that the conditions of Propositions 3, 4 and 5 hold.
i. Proposition 3: HN(RD) = HN−1(RD) = 0 follows from contractibility of RD. ii. Proposition 4:
a. By Alexander duality [24], HN(RD, RD − S) HD−N(S). Using Poincaré Duality for S, HD−N(S) H0(S) R. Finally, from the long exact sequence for the pair (RD, RD − S), using the contractibility of RD, we have, HN(RD, RD − S) HN−1(RD − S). Combining these three isomorphisms we have,

HN(RD, RD − S) HN−1(RD − S) R.

(3)

b. Consider a point v ∈ S. Since S covers S, this point is also in (the image of) S. Since bS is a (D − N)-dimensional manifold, we can choose a small N-ball, B, centered at v such that it intersects S transversely only at v. Let B ∈ CN(RD) be a top-dimensional non-zero chain that covers B. Clearly the intersection number between S and j(B) (where j : RD → RD/(RD − S) is the quotient map) is non-zero. Thus the linking number between ∂B (RD−S) (which, by our construction, is a (N − 1)-cycle in (RD − S)) and S is nonzero. Thus there exists at least one (N − 1)-cycle in (RD − S) that has nonzero linking number with S (see Fig. 7).
iii. Proposition 5: Follows from the fact that B = ∅.

Construction A complete invariant for homology classes of (N − 1)-cycles, ω ∈ Z N−1(RD − S), is, by Proposition 4, the linking number between ω and S. Using

Invariants for homology classes with application to optimal search

265

Fig. 7 The specific problem under consideration, illustrated for D = 3, N = 2

Proposition 5, the complete invariant, φS, for the homology classes of such chains is given by the integral

φS(ω) = (−1)D−N

p∗(η0)

ω×S

= (−1)D−N

p∗(η0) [Fubini theorem]

(4)

ωS

4.2 Computation of φS

Let x ∈ (RD − S) ⊂ RD be the coordinate variable describing points in (RD − S), and
let x ∈ S ⊂ RD be the one describing points in S. Thus we have p(x, x ) = x − x . A well-known [1, 14] explicit generator for the deRham cohomology HdDR−1(RD − {0})) is,

D

D

D

η0 = Gk (−1)k+1 ds1 ∧ · · · ∧ dsk−1 ∧ dsk+1 ∧ · · · ∧ dsD = Gk (−1)k+1 dsi

k=1

k=1

i=1

i=k

(5)

where,

Gk(s) =

1 A D−1

sk s21 + s22 + · · · + s2D D/2

(6)

D

for s = (si) ∈ (RD − {0}), and AD−1 =

Dπ 2

(

D 2

+1)

,

the

(D −

1)-volume

of

the

(D −

1)-

dimensional unit sphere.

The pullback of η0 under p is given by the following formula,

D

D

η(x, x ) = p∗(η0) = η0 s=x−x =

Gk (−1)k+1 d(xi − xi)

(7)

k=1

i=1

i=k

266

S. Bhattacharya et al.

Now consider the quantity of interest, φ(ω) = x∈ω x ∈S η(x, x ). On ω × S, at most (N − 1) unprimed differentials can be independent, and at most (D − N) primed

differentials can be independent (since x represents a point on the image of the

(N − 1) chain ω and x represents a point on the image of the (D − N) chain S).

Thus we can conveniently drop all the terms in the expansion of η (which is a (D − 1)differential form on (RD − S) × S) that do not satisfy these conditions on maximum

number of primed/unprimed differentials. Thus we obtain a simpler differential

form η˜,

⎛

⎞

η˜(x, x ) = D ⎜⎝Gk(x − x ) (−1)k+1+D−N

D dxi(τi)⎟⎠

(8)

k=1

τi ∈{0,1}

i=1

τ1 +···+τD=D−N i=k

[where, xi(τ) represents xi if τ = 1, otherwise represents xi if τ = 0.] This differential form, though simpler, has the property that

φS(ω) = (−1)D−N

η(x, x ) = (−1)D−N

η˜(x, x ) (9)

x∈ω x ∈S

x∈ω x ∈S

Finally, we re-write the formula for η˜ using a new notation as follows,

D

η˜(x, x ) = (−1)D−N

Gk(x − x ) (−1)k+1

k=1

·

sgn(ρ) dxρl(1) ∧ · · · ∧ dxρl(D−N) ∧ dxρr(1) ∧ · · · ∧ dxρr(N−1)

ρ∈ partD−N (N−Dk)

(10)

where,
1. N−Dk = [1, 2, · · · , k − 1, k + 1, · · · , D] is an ordered set, 2. partw(A) is the set of all 2 partitions of the ordered set A, such that the first
partition contains w elements, and each of the partitions contain elements in order. The sign of an element from the set is the permutation sign of the ordered set formed by concatenating the two partitions.
Thus, after some simplification, the final formula for the complete invariant for homology class of ω ∈ Z N−1(RD − S) is,

where,

φS(ω) = (−1)D−N

η˜(x, x )

x∈ω x ∈S

D

=

Uρk(x; S) ∧ dxρr(1) ∧ · · · ∧ dxρr(N−1)

x∈ω k=1 ρ∈ partD−N (N−Dk)

(11)

Uρk(x; S) = (−1)k+1

sgn(ρ)

Gk(x − x )
x ∈S

dxρl(1) ∧ · · · ∧ dxρl(D−N)

(12)

and by convention, S is a top-dimensional cycle covering S such that [S] = 1 ∈ H D− N ( S).

Invariants for homology classes with application to optimal search

267

Also, note that the quantity inside the integral in the formula for φS is a differential (N − 1)-form in (RD − S). Thus we can integrate it over ω. We represent the
differential (N − 1)-form by ψS

ψS =

Uρk(x; S) ∧ dxρr(1) ∧ · · · ∧ dxρr(N−1).

ρ∈ partD−N (N−Dk)

(13)

It should be noted that the η0 we used in (5) is just a particular choice, but this choice is the only symmetric one (up to a scalar multiple) under rotations about the origin. This symmetry enables us to write a clean formula in coordinates, but in general any closed and non-exact form η0 would work. The resulting invariant would differ from ours by a constant multiple.

4.3 Incorporating multiple connected components of S

So far we have worked in the case of a single connected obstacle S. However,

recall that the original space under consideration was (RD − S), with S =

m i=1

Si,

such that each Si is a path connected, closed, locally contractible and orientable

(D − N)-manifold. A straightforward induction argument computes the homology

of the smaller space, (RD − S), in terms of the larger spaces, (RD − Sk).

Proposition 6 If the direct sum of the inclusion maps ik : Sk → S induce an

isomorphism

m k=1

H D− N ( Sk )

HD−N(S), then the direct sum of inclusion

maps ˜ik : (RD − S) → (RD − Sk) induce an isomorphism

m k=1

HN−1(RD

−

Sk)

Rm HN−1(RD − S).

Proof The result follows immediately from Proposition 1 (by setting the O in

Proposition 1 to S).

Note that the condition that the direct sum of the inclusions ik : Sk → S induce

an isomorphism

m k=1

H D− N ( Sk )

HD−N(S) is same as that in Proposition 2.

A sufficient condition for being able to construct/perturb/choose such Sk, k =

1, . . . , m, as described in Proposition 2, was that the dimension of O be greater than

D − N + 1.

The following theorem hence follows directly from Proposition 6 and (4).

Theorem 1 For any ω ∈ Z N−1(RD − S), a complete invariant for the homology class of ω is given by,

⎡

⎤

φS1 (ω)

φS (ω)

=de f.

⎢⎢⎢⎣

φS2 (ω) ...

⎥⎥⎥⎦

(14)

φSm (ω)

where, φSi is given by the formula in (11).

Note that we have implicitly assumed an inclusion map ˜ik : (RD − S) → (RD − Sk) being applied on ω for computation of the kth component. For simplicity

268

S. Bhattacharya et al.

(a)

(b)

(c)

Fig. 8 Schematic illustration of some lower dimensional cases of the problem: a the Residue theorem, b Ampere’s law, and c Gauss’ theorem

we do not write it explicitly, since the map is identity as far as computation is
concerned. Thus, [ω1] = [ω2] if and only if φS (ω1) = φS (ω2), for any ω1, ω2 ∈ Z N−1(RD − S).

Examples in low dimensions It is a straight-forward exercise to show that for low

values of D and N (Fig. 8), one recovers well-known integral formulae from (13).

In

particular,

with

D

=

2,

N

=

2

we

obtain

ψS

=

1 2π

Im

1 z−Sc

dz

—the differential

1-form in the Residue Theorem from complex analysis; with D = 3, N = 2 we

obtain

ψS =

1 4π

dl ×(x−x ) S |x−x |3

· [dx1 dx2 dx3]T (where dl = [dx1 dx2 dx3]T )—the

differential 1-form in Ampere’s Law; and with D = 3, N = 3 we obtain ψS =

1 x−S 4π |x−S|3

· [ dx2 ∧ dx3 , dx3 ∧ dx1 , dx1 ∧ dx2]T —the differential 2-form in

Gauss’ divergence theorem.

Numerical integration For numerically computing the integrals in (12) as well as
for integrating ψS over a given ω (or a part of it), we need a discrete representation of the singularity manifold S as well as the candidate manifold ω. We assume topdimensional simplicial complexes, S and ω.
Typically, the oriented simplices (their vertices) will be defined in terms of ambient coordinates in RD. In order to compute the integrations in (11) and
(12), one can then define an increasing coordinate system [34] on each simplex,
and a transformation relating the increasing coordinates with the ambient coordinates. In particular, if the ambient coordinates, x = [x1, x2, · · · , xD]T , and the increasing coordinates, z = [z1, z2, · · · , zn]T , for a n-simplex, κ, are related as x = Mκ z + x0κ , then the n + 1 vertices of κ (in its natural positive order) respectively map to the n-dimensional in the increasing coordinate vectors, [0, 0, · · · , 0, 0, 0]T , [0, 0, · · · , 0, 0, 1]T , [0, 0, · · · , 0, 1, 1]T , · · · , and [1, 1, · · · , 1, 1, 1]T . Using these coordinates, an integration of a general differential n-form over κ can be written as

Jh(x) dxσh(1) ∧ dxσh(2) ∧ · · · ∧ dxσh(n)
κh

1 zn

zn−1

z2

=

···

00

0

0

Jh(Mκ z + x0κ ) det(Mκ [σh(1 : n), :]) dz1 dz2 · · · dzn
h

(15)

Invariants for homology classes with application to optimal search

269

where σh are permutations of {1, 2, · · · , D}, and Mκ [σ (1 : n), :] represents a n × n matrix formed by stacking the rows σ (1), σ (2), · · · , σ (n) of Mκ in that order.
The choice of Gk (6) lets us perform the first level of integration in (12) analytically. In particular, using formula (15), the first level of integration in (12) is of the
form

z2 0

(az12

pz1 +b

+ z1

q +

c)

D/2

dz1

where, p, q, a, b and c are functions of zi, i ≥ 2 and the simplex κ on which the integration is being performed. The result of this integration is known in closed form [26].
However, for the next (D − 2) nested integrations in (11) and (12), we need to perform numerical integrations. For this, we use the QAGS adaptive integration implementation in the GNU Scientific Library (GSL) [15]. In general, the computational complexity for such nested integrations increase exponentially with D (i.e. the number of nested levels).

5 Examples and applications
We have implemented the general formula for computing ψS (ω) in C++ for arbitrary D and N. The singularity manifolds, S, and the candidate manifold, ω, are discretized to create simplicial complexes S and ω respectively, thus enabling us to compute the integral in (11) and (12) as a sum of integrals over simplices. In the following section, for simplicity, we use the same notation for the manifolds and their simplicial equivalents. We used the Armadillo linear programming library [35] for all vector and matrix operations, and the GNU Scientif ic Library [15] for all the numerical integrations. In particular, for the numerical integration, we used the QAGS adaptive integration implementation in GSL (which combines adaptive bisection [32] with the Wynn epsilon-algorithm [40]).
5.1 An example for D = 5, N = 3
We present numerical validation for a simple case of dimension greater than three: D = 5 and N = 3. The candidate manifold is of dimension N − 1 = 2. We consider a 2-sphere centered at the origin in R5 as the candidate manifold: let ω(RC) = {x | x21 + x22 + x23 = RC2 , x4 = 0, x5 = 0} be the boundary of the ball (RC) = {x | x21 + x22 + x23 ≤ RC2 , x4 = 0, x5 = 0}. The candidate manifold ω(RC) is easily parametrized via spherical coordinates θ and φ. Let the singularity manifold S be the 2-torus as follows: x1 = 0, x2 = 0, x3 = RT + r cos(φ ) cos(θ ) − (RT + r), x4 = RT + r cos(φ ) sin(θ ), x5 =r sin(φ), with RT > r and the parameters θ ∈ [0, 2π ] and φ ∈ [0, 2π ]. For all examples that follow, we choose r = 0.8, RT = 1.6.
Consider the particular candidate manifold ω(1) (i.e. RC = 1). By numerical computation of integrals in (11) and (12), the value of φS(ω(1)) that we obtain for the above example is −1. In order to interpret this result we first observe that ω(1) does not intersect S. However on S, when x1 = x2 = x4 = x5 = 0, x3 can assume the values 0, −2r, −2RT and −2(RT + r). Thus, if 2r > RC, S intersects (RC) (the ball whose boundary is ω(RC)) only at one point, the origin. A simple computation of the tangents reveals that the intersection is transverse. Since that is a single transverse

270

S. Bhattacharya et al.

intersection with (RC), the linking number between ω(RC) and S (i.e. intersection

number between (RC) and S according to Definition 2) is ±1 for all RC < 2r, just

as indicated by the value of φS(ω(1)). The sign is not of importance since that is

determined by our choice of orientation. In fact, with different values of RC, r and

RT , as long as

RT

>

r

>

RC 2

,

we

obtain

the

same

value

of

−1

for

φS(ω

(

RC

)).

However with RC = 2 for the candidate manifold, and the singularity manifold

remaining the same (i.e. r = 0.8, RT = 1.6), the value of φS(ω(2)) we obtain nu-

merically is 0. In this case, the points at which S intersect (2) are the origin and

the point (x1 = x2 = x4 = x5 = 0, x3 = −0.8). Of course, in the family of candidate

manifolds ω(RC), RC ∈ [1, 2], we can easily observe that ω(1.6) indeed intersects S,

thus indicating that ω(1) and ω(2) are possibly in different homology classes.

Next, consider the following family of candidate manifolds: ω (TC) = {x | x21 + x22 + x23 = 2, x4 = 0, x5 = TC}, and a corresponding (TC) such that ω (TC) = ∂ (TC): (TC) = {x | x21 + x22 + x23 ≤ 2.0, x4 = 0, x5 = TC}. With the same S as before, if TC > r, clearly there is no intersection between (TC) and S. Thus it is not

surprising that indeed by numerical computation, we found that φS(ω (1)) = 0.

Now, since we computed φS(ω(2)) = 0 (although (2) intersects S at 2 points) and

φS(ω (1)) = 0 (and (1) does not intersect S), it suggests that ω(2) and ω (1) are in

the same homology class. We verify this by observation. None from the family of

candidate manifolds ω (TC), ∀TC ∈ [0, 1] intersect S, and each is a 2-sphere. Thus ω defines an embedding of S2 × I in R5 − S such that ω (0) −ω (1) is its boundary. It

follows that ω (0) and ω (1) are homologous. However, ω(2) = ω (0). Thus it follows

that ω(2) and ω (1) are homologous.

5.2 Application to graph search-based robot path planning with topological constraints

In this section we consider the specific case when the candidate manifolds represent robot trajectories (i.e. N = 2). In general, robot planning problems are solved by construction of a graph, G in the configuration space, (RD − O), and using a graph
search algorithm to find paths in it. We will define and show how we can construct an augmented graph, G, from an arbitrary graph, G, in the configuration space, and use
a search algorithm to find optimal paths in different (and/or specified) topological
classes. One consequence of φS being a vector of cocycles is that it is a linear function. As
a result, if we have a cycle ω that can be expressed as a sum of chains, i.e. ω = i τ i, with τ i ∈ CN−1(RD − S), then we can write

φS (ω) = φS (τ i)

(16)

i

where by φS (τ i) we simply mean the vector formed by evaluation of the integrals in (14).

Remark 1 Given (N − 1)-chains, τ 1 and τ 2 in X, such that ∂τ 1 = ∂τ 2, by an abuse of terminology in the following discussions, we will say that they are in the same homology class if τ 1 − τ 2 is null-homologous in X. It should however be remembered that homology classes are not formally defined for chains, and are defined only for cycles or relative cycles.

Invariants for homology classes with application to optimal search

271

That is, in the context of our problem where X = (RD − O), τ 1 ≈ τ 2 iff φS (τ 1 − τ 2) = 0 (where S is the equivalent of O as described in the ‘reduced problem def inition’ of Section 2.1). In context of robot path planning problem, the candidate manifolds are all 1-dimensional. Thus we have N = 2. While trajectories connecting two points in a configuration space (RD − O) themselves are not closed manifolds, two trajectories connecting the same points together form a closed manifold.
Next we outline the basic graph construction for search-based planning with
topological constraints (cf. the H-augmented graph of [3]). Discrete graph search
techniques for robot path planning problems are widely used and have been shown
to be complete and efficient [13, 38]. Given a D-dimensional configuration space, the
standard starting point is to discretize the configuration space, place vertices inside
each discrete cell, and establish edges between the neighboring vertices to create a directed graph, G = (V, E) (Fig. 9a). The discretization itself can be quite arbitrary and non-uniform in general. A directed edge [v1, v2] ∈ E connects vertices v1 to v2 iff there is a single action of the robot that can take it from state v1 to state v2. Since an edge [v1, v2] ∈ E is a 1-dimensional manifold embedded in (RD − S), we can evaluate the function φS on (a top-dimensional covering chain on) it we and write it as φS ([v1, v2]). Likewise, a path, λ, in the graph (Fig. 9b) can be represented by a covering chain λ ∈ HN−1(RD − S), and φS can be evaluated on it. For simplicity, we often write φS (λ) to indicate this quantity, which is made possible due to the assumption that such covering chains are essentially constructed out of simplices with
unit coefficients. The weight/cost of each edge is the cost of traversing that edge by the robot (typically the metric length of the edge). We write w([v1, v2]) to represent the weight of an edge. Inaccessible coordinates (lying inside obstacles or outside
a specified workspace) do not constitute nodes of the graph. A path in this graph
represents a trajectory of the robot in the configuration space. The triangulation of
any path in the graph essentially consists of the directed edges of the graph that make
up the path.
Suppose we are given a fixed start and a fixed goal coordinate, represented by vs, vg ∈ (RD − O) respectively, for the robot (by the boldface v’s, with a slight

(a) A graph created by uniform square discretization of
an environment. The dark cells represent obstacles. Each vertex is connected to its 8 neighbors (except inaccessible vertices).

(b) A trajectory in the continuous conﬁguration space
can be approximated by a path in the graph.

Fig. 9 Illustration of how a graph, G, can be created by uniformly discretizing an an environment. This specific type of graph shown in the figures is referred to as the 8-connected grid

272

S. Bhattacharya et al.

abuse of notation, we will indicate both the vertex in the graph as well as the coordinate of the vertex in the original configuration space). We next construct an augmented graph, G = {V, E}, from the graph G in order to incorporate the information regarding the homology class of trajectories leading from the given start coordinate to the goal coordinate, as follows.

1.

⎧

⎫

⎪⎪⎨ V = ⎪⎪⎩{v, c}

v ∈ V, and, c is a m-vector of reals such that c = φS (λ)

⎪⎪⎬

for some 1-chain, λ, with boundary (i.e. λ is a covering chain of some

vs −v path in

G

connecting

vs

to

v).⎪⎪⎭

2. An edge [{v, c}, {v , c }] exists in E for [v, c] ∈ V and [v , c ] ∈ V, iff
i. The edge [v, v ] ∈ E, and, ii. c = c + φS ([v, v ]).
3. The cost/weight associated with an edge [{v, c}, {v , c }] is same as the cost/weight associated with edge [v, v ] ∈ E. That is, the weight function we use is w([{v, c}, {v , c }]) = w([v, v ]).

It can be noted that {vs, 0} is in V (where 0 is an m-vector of zeros). It is worth noting that for a given v ∈ V, there are countably infinite vertices of the form {v, c1}, {v, c2}, · · · ∈ V, each corresponding to an unique homology class of trajectories connecting vs to v. In fact G has the simple interpretation of a graph created out of discretization of a covering space of (RD − O) (that is closely related to, but different from, its universal covering space), the covering map, p, being such that p : {v, c} → v. Thus, although G is arguably much larger than G (and typically unbounded), it is a
discrete graph representation of a space of the same dimension, i.e. D. For finding a least cost path in G that belongs to a particular homotopy class, we
can use a heuristic graph search algorithm (e.g. weighted A*) [7, 23, 28]. In particular,
we used the YAGSBPL library [2] for constructing the graph and performing A* searches in it. Starting from the start vertex {vs, 0} we expand the vertices in G. The process of vertex expansion eventually leads to vertices of the form {vg, ci}, where ci = φS (λsg) for some path λsg in G connecting vs to vg. Each of these vertices in G correspond to an unique homology class of the path taken to reach vg from vs. Let those vertices in the order in which we expand them be {vg, c1}, {vg, c2}, etc.
Say during the search process, we expand the vertex {vg, c j} ∈ V. Depending on whether we are trying to search for a particular homology class of trajectories or
exploring multiple homology classes, we can choose to take one of the following
actions:

i. If c j is the desired value (or an admitted value) for the φS -value of the trajectory we are searching for, we store the path up to {vg, c j} in G, and stop the search
algorithm.

Invariants for homology classes with application to optimal search

273

ii. If c j is an admitted value for the φS -value of the trajectory we are searching for, we store the path up to {vg, c j} in G, and continue expanding vertices in G.
iii. If c j is not an admitted value for the φS -value of the trajectory we are searching for, we continue expanding vertices in G.
Clearly, the projection of any of the stored trajectories onto G are paths in G connecting vs to vg. Since both G and G use the same cost function, if {{vs, 0}, {v1∗, c1∗}, {v2∗, c2∗}, · · · , {vg, c j} is the jth stored path using an optimal search algorithm (e.g A*), then vs, v1∗, v2∗, · · · , vg is the optimal path in G with φS -value of c j (i.e. least cost path belonging to the particular homology class). Thus we can explore
the different homology classes of the trajectories connecting vs to vg. If cg is the desired value of φS evaluated on the trajectory we are searching for, we
follow the above process of expanding the vertices using the graph search algorithm until we expand {vg, cg}. Given two paths λ1, λ2 in G, and if λ1, λ2 are their respective covering chains, since λ1 −λ2 ∈ CN−1(RD − S), we notice that (φS (λ1) − φS (λ1)) ∈ Zm (with unit coefficients on the simplices that constitute the chains, and with the choice of φS as described in (11) and (14)). Thus, if we know the value of a c j = φS (λ j), we can construct another m-vector that is a valid value for φS evaluated on some other trajectory connecting vs to vg as c j = c j + ζ for some ζ ∈ Zm. This we can hence set as cg for finding the least cost path in the new homology class.
Since optimality is desired, and we use the A* search algorithm, we need to choose
an efficient heuristic function that is also admissible [7, 23]. Such a heuristic function
will speed up the search, yet guarantee optimal search results. A consequence of the point 3 in the definition of Gχ is that any admissible heuristic (which is a lower bound on the cost to the goal vertex) in G will remain admissible in G. That is, if h(v, v ) was the heuristic function in G, we can define h({v, c}, {v , c }) = h(v, v ) as the heuristic function in G. As a consequence, if we keep expanding vertices in G as described in the previous section, the order in which we will encounter states of the form {vg, ci} is the order of the costs of the least cost paths in the different homology classes.

Notes on graph size and complexity Assuming an uniform discretization scheme, the average degree of each vertex increases linearly with D. However, the average number of vertices in a ball of fixed radius increases exponentially with D. The complexity of Dijkstra’s algorithm for a graph of uniform degree is O(V log(V)) (V being the number of vertices in the graph that are expanded) when the open list is maintained using a heap data structure (which we do in our implementation). Substituting keD in place of V (assuming a ball of fixed radius is explored until the goal is reached), the complexity of the Dijkstra’s algorithm varies as O(DeD). However, it is to be noted that our proposed technique does not restrict one to the use of A* or Dijkstra’s search algorithm. The augmented graph construction, which gives the prescription of how vertices in G should be generated based on a known prescription for generating vertices for G, is equally applicable to other search algorithms like Rapidly-exploring Random Trees (RRT) [29], ARA* [30], or any other more efficient graph search algorithm.
It is however important to note that besides execution of the search algorithm, we need to compute, corresponding to each edge in G, the value of φS ([v, v ]), [v, v ] ∈ E. Each of these computations involve (D − 2) nested numerical integrations (the first level of integration can be computed analytically—see (15)). Depending on the

274

S. Bhattacharya et al.

(a) Class 1

(b) Class 2

(c) Class 3

(d) Class 4

(e) Class 5

(f) Class 6

(g) Class 7

(h) Class 8

(i) Class 9

(j) Class 10

Fig. 10 The first 10 homology classes of trajectories in order of length/cost. The gray regions are the obstacles. The trajectories are in different homotopy classes as well

algorithm for numerical integration used, these computation can thus be of up to O(eD) in complexity. For our implementation involving an uniform discretization, it is however possible to achieve these as a pre-computation step for every edge in the graph G embedded in the configuration space. This pre-computation is one-time for a given environment, and need not be re-done even if vs or vg change.
5.2.1 Planning in low dimensional conf iguration spaces
Figure 10 shows a 2-dimensional region punctured by two obstacles. The graph G is constructed by uniform square discretization (200 × 200), placing a vertex in each cell, and by connecting the free/accessible neighboring vertices (Fig. 9a). During the search of graph G, we adopt the action ‘ii.’ whenever we encounter a vertex of the form {vg, c j} ∈ V, until we have stored 10 paths. One can choose the bump 1-form [4] for constructing ψS as discussed earlier. The supports of that form are illustrated in the figure as the thin rays.
Figure 11 demonstrates an example of search for 3 homology classes in a configuration space with D = 3. The graph G is created by uniform discretization
Fig. 11 Exploration of 3 homology classes of robot trajectories for a D = 3-dimensional configuration space

Invariants for homology classes with application to optimal search

275

of the region of interest into 16 × 16 × 16 cubic cells, and connecting the vertices corresponding to each cell to their immediate 26 neighbors.

5.2.2 Exploring paths in dif ferent homotopy classes in a 4-dimensional space
Just as we developed formulae for complete invariants for homology class in the 2 and 3 dimensional cases in [3], we can now extend the formula to trajectories in higher dimensional spaces using the invariant described in (14).
In this example we explore homology classes of trajectories in a 3-dimensional space with moving obstacles. However that makes the configuration space a 4dimensional one consisting of the coordinates X, Y, Z and Time. Thus we present a result in a X − Y − Z − Time configuration space where we find multiple shortest paths in different homology classes in the 4-dimensional space. Figure 12 shows the exploration of 3 homology classes in a 4-dimensional configuration space consisting of a dynamic obstacle in 3-dimensions. The connectivity of the graph is such that only forward movement in time is allowed (i.e., each vertex (x, y, z, t) is connected to 27 vertices of the form (x(±1), y(±1), z(±1), t + 1)). The loop-shaped obstacle is rotating about an axis. The X, Y and Z axes are shown. As we observe in the sequence, trajectories numbered 0 and 1 take off from the start coordinate (green dot) and move towards the “center” of the loop. They wait there while 2 takes a different homotopy class to reach the center later. From there 0 and 2 head together towards the goal (red dot), while 1 wait to take a different trajectory to the goal. Thus the 3 trajectories are in different homotopy classes.
In the following table we present data related to the performances of the A* graph search algorithm for finding the optimal trajectories in the first 3 homology classes in the different examples mentioned in the previous two sub-sections.

Problem properties

Fig. no.

Ambient environment dimension
( D)

10a–c 2

11

3

12

4

Number of vertices in domain of
interest (|V |)
40000 4096 2560

Average degree of graph
8 26 27

Numerical integration (precomputation)
Time to pre-compute φS ([v, v ]), ∀ [v, v ] ∈ V (s)
5.9 17 17153

A∗ graph search

No. of vertices expanded
in G

Search execution time (s)

143572

0.2

10512

0.07

1494

0.11

As one can note from the data, the time required for pre-computation of φS ([v, v ]), [v, v ] ∈ V, increases dramatically with the increase in D. However, the search time itself, for finding the optimal paths in the first 3 homology classes are quite low. Note that the size of the environments (number of vertices in G) are different. Also, the apparent lack of correlation between the number of states expanded (along with the average degree) and search execution time is due to the fact that the execution times were so low that the noise in the recorded time (due to other parallel processor activities related to management of memory containing the pre-computed data) were significantly high.

276

S. Bhattacharya et al.

(a)

(b)

(c)

(d)

(e)

(f)

Fig. 12 Screenshots from exploration of 3 homotopy classes in a X − Y − Z − Time configuration space. The loop-shaped obstacle is rotating about an axis. The X, Y and Z axes are shown. Their apparent rotation is due to movement of the camera for viewing from different angles

6 Extension to non-Euclidean ambient spaces
Let L be a subspace of (RD − S). In this section we would like to compute complete invariants for homology classes of (N − 1)-cycles in the quotient space (RD − S)/L.
We write the inclusion map as ι : L → (RD − S). We consider (N − 1)-chains in CN−1(RD − S), and their images under the quotient map q# : C•(RD − S) → C•(RD − S)/C•(L).

Invariants for homology classes with application to optimal search

277

Proposition 7 Consider α ∈ CN−1(RD − S) such that its boundary, ∂α, is either empty or lies completely in L. Consider the set of all the (N − 1)-chains in L with boundary coinciding with ∂α (if ∂α = 0, we consider all (N − 1)-cycles in L), and let Q denote the set of φS -image of those. Then, [q#(α)] = 0 ∈ Hn(X, L) if and only if φS (α) ∈ Q.

Proof The statement follows directly from the definitions of relative homology which guarantees the existence of a β ∈ CN−1(L) such that, φS (α − ι ◦ β) = 0 if and only if [α − ι ◦ β] = 0. Moreover, due to the linearity of φS , we have φS (α − ι ◦ β) = 0 ⇒ φS (α) = φS (ι ◦ β). For all computational purpose, ι becomes the identity map since we use a single coordinate chart on (RD − S).

One motivation for considering this kind of spaces arise from frontier-based exploration problems in robotics [39], where L represents the unexplored/unknown region in a configuration space, and the task at hand is to deploy robots, starting from a point in the known/explored region, to reach L following different topological classes. While we do not discuss a complete exploration problem in this paper, we will describe, with example, how optimal trajectories in the different homology classes for reaching L can be obtained using a graph search-based approach. As far as implementation for search-based planning for robot trajectories is concerned, we will mostly be interested in α that has empty boundary (formed by trajectories sharing the same start and goal points in (RD − O), as shown in Fig. 13). Thus the Q that will be of our interest is the one for ∂α = ∅.

Fig. 13 An example of computation in quotient space X/L. Here X = R2 − (S1 S2 S3), N = 2. The region, L, consists of everything that lies outside the small disk-shaped region, moding which out gives us the 2-sphere with two punctures (images of S1 and S2). α is a nontrivial cycle in R2 − (S1 S2 S3) since φS (α) = [1, 1, 0]. However it is trivial on the punctured sphere. To see this, we observe that in this case Q = {[0,0,0],[±1,±1,0],[±2,±2,0],··· ,[0,0,1], [±1,±1,1],··· ,[0,0,2],··· ,···}. Thus we see that φS (α) ∈ Q. A β ∈ CN−1(L) corresponding to the class is shown in the figure

278

S. Bhattacharya et al.

6.1 Search-based implementation
A graph search-based algorithm, as described earlier, can once again be employed for the case with N = 2, for finding optimal trajectories in different homology classes on (RD − S)/L. Homology classes of trajectories (which are relative chains in C1(RD − S, L)) are deﬁned informally in a way similar to one in Remark 1.
The complete environment, RD − O, is discretized to create a graph, G, as before. Edges of the graph lying in L are assigned zero costs (a small positive value is used in practice for numerical stability), while for ones in the complement space is assigned the costs induced by a metric of choice (we choose the Euclidean metric of the ambient space for the example in Fig. 14). The construction of the augmented graph is similar to the construction of G as before, except that now a vertex {v, c} is identified with {v, c} if c − c ∈ Q (where Q is the set corresponding to ∂α = ∅). We call this derived graph G.

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

(j)

(k)
Fig. 14 The thin region near the boundary of the rectangular environment, as shown in the figures is L, which we collapse to a single point. The gray rectangles are the obstacles. a–e: The first 5 homology classes of trajectories in (RD − O)/L connecting a given start point in (RD − O − L), and an arbitrarily chosen point in L (exact choice does not matter since we mod out L, which has a single path connected component) found using graph search algorithm in G. f–j: The solutions obtained using modified algorithm to ensure that the trajectories have single connected components in (RD − O − L)

Invariants for homology classes with application to optimal search

279

Figure 14 shows an environment that is similar to the one illustrated in Fig. 10,
except that now everything outside a rectangular region containing the two obstacles
is considered to be part of L (the region near the boundary, where the metric, and
hence the cost of every edge is set to zero). The space under consideration is thus
topologically a sphere, with L collapsed to a single point. For the search algorithm,
we choose the same start coordinate as before (near the bottom of the environment—
almost symmetrically placed with respect to the two obstacles), but we place the
goal vertex inside L (Exact choice does not matter. Although, if there were multiple
path-connected components of L, we would have to place one goal vertex in each
connected component for exploring all the homology classes).
Figures 14a–e shows exploration of first 5 homology classes (in order of path lengths) in (RD − O)/L by searching in G. However, we notice that in the classes 3 and 5, the parts of the trajectories lying in (RD − O − L) have disconnected components. Notice that it is not possible to alter such trajectories through small variations to make them fall inside (RD − O − L), and still remain close to optimal. This is because we use the Euclidean metric on RD for length of the trajectories instead of the round metric on SD RD/L.
While these solutions are technically optimal in the augmented graph, for ex-
ploration problems, where computed trajectories are not desired to have multiple
connected components, we can alter the search algorithm slightly in order to obtain
trajectories as shown in Figs. 14f–j belonging to the same classes, but connected. Instead of searching in G, we first perform a pre-computation step where we execute a Dijkstra’s search in the subgraph of G that lies in L starting from the ‘goal’ vertex, and compute the value of φS up to every other vertex in the subgraph following some path lying inside L (and its boundary, ∂ L). Let us represent that computed value corresponding to vertex vL ∈ V|L by p(vL). The main search is then performed using Dijkstra’s algorithm in the subgraph of G with vertices lying inside (RD − O − L) (and the boundary, ∂ L), starting from the ‘start’ vertex, and expanding vertices until the boundary between L and (RD − O − L) are reached. In addition, a vertex on the boundary, {vL, c}, is identified with {vL, c} if (c − p(vL)) − (c − p(vL)) ∈ Q.
One interesting observation in the result of Fig. 14 is that apparently the search
does not return any trajectory that winds around the obstacle on the right. This is because on (RD − O)/L (i.e. the sphere punctured by the two obstacles), a trajectory connecting the two chosen points that wind around one obstacle can be deformed
over the sphere to make it wind around the other obstacle – making them homotopic,
and hence homologous. This is illustrated in Fig. 14k. The reason that the obstacle
on the left gets preference in the result of the search algorithm is because the start
coordinate is located slightly closer (by 1 discretization unit) to the obstacle on the
left than one on the right.

7 Conclusion and future direction
The problem of optimal path planning (and its higher-dimensional generalizations to homology) has as prerequisite homology cycle planning. We have addressed this precursor in the context of obstacle-punctured Euclidean spaces and certain quotients thereof. The novel features of this work include (1) the skeletal restructuring of the obstacles O to facilitate (2) the design of a set of explicit cocycles for a complete set

280

S. Bhattacharya et al.

of invariants for the homology class of the cycles. In this, the language of de Rham cohomology is the critical technical step, using integration of differential forms over cycles.
We have demonstrated the use of our methods for solving homologicallyconstrained optimal path planning problems in robotics, and topological exploration of robot configuration spaces. A further generalization allowed us to achieve similar objectives in ambient spaces that are not Euclidean, at the expense of an increased computational complexity. Further work is needed to address this issue. Although similar invariants (in form of integrals over manifolds) are difficult to find for homotopy, one of our future directions will be to investigate the possibility of generalizing the proposed techniques to the equivalence of homotopy.

Acknowledgement We gratefully acknowledge support from the ONR Antidote MURI project, grant no. N00014-09-1-1031.

References
1. Baylis, W.E.: Clifford (Geometric) Algebras with Applications in Physics, Mathematics, and Engineering, 1st edn. Birkhuser Boston (1996)
2. Bhattacharya, S.: A template-based C++ library for large-scale graph search and planning (2011). See http://subhrajit.net/index.php?WPage=yagsbpl
3. Bhattacharya, S., Likhachev, M., Kumar, V.: Topological constraints in search-based robot path planning. Auton. Robot. 33(3), 273–290 (2012). doi:10.1007/s10514-012-9304-1
4. Bott, R., Tu, L.: Differential Forms in Algebraic Topology, Graduate Texts in Mathematics. Springer-Verlag, Heidelberg (1982)
5. Bourgault, F., Makarenko, A.A., Williams, S.B., Grocholsky, B., Durrant-Whyte, H.F.: Information based adaptive robotic exploration. In: Proceedings IEEE/RSJ International Conference on Intelligent Robots and Systems IROS, pp. 540–545 (2002)
6. Carlsson, G.: Topology and data. Bull. Amer. Math. Soc. 46, 255–308 (2009) 7. Cormen, T.H., Leiserson, C.E., Rivest, R.L., Stein, C.: Introduction to Algorithms, 2nd edn. MIT
Press, Cambridge, (2001) 8. Demyen, D., Buro, M.: Efﬁcient triangulation-based pathﬁnding. In: AAAI’06: Proceedings of
the 21st National Conference on Artiﬁcial intelligence. AAAI Press, pp. 942–947 (2006) 9. Derenick, J., Kumar, V., Jadbabaie, A.: Towards simplicial coverage repair for mobile robot
teams. In: Proceedings of IEEE International Conference on Robotics and Automation (ICRA), pp. 5472–5477 (2010) 10. Dold, A.: Lectures on Algebraic topology, Classics in Mathematics. 2nd edn. Springer, Heidelberg (1995) 11. Edelsbrunner, H., Harer, J.: Computational Topology: An Introduction, Applied Mathematics. American Mathematical Society (2010) 12. Farber, M.: Topological complexity of motion planning. ArXiv Mathematics e-prints. arXiv: math/0111197 (2001) 13. Ferguson, D., Howard, T., Likhachev, M.: Motion planning in urban environments. J. Field Robot. 25, 939–960 (2008) 14. Flanders, H.: Differential Forms with Applications to the Physical Sciences. Dover Publications, New York (1989) 15. Galassi, M., Davies, J., Theiler, J., Gough, B., Jungman, G., Booth, M., Rossi, F.: Gnu Scientiﬁc Library: Reference Manual. Network Theory Ltd. (2003) 16. Ghrist, R.: Barcodes: the persistent topology of data. Bull. Amer. Math. Soc. 45, 61–75 (2008) 17. Ghrist, R.: Conﬁguration spaces of graphs and robotics. In: Braids, Links, and Mapping Class Groups: The Proceedings of Joan Birman’s 70th Birthday, vol. 24, pp. 29–40. AMS/IP Studies in Mathematics (2001) 18. Ghrist, R., Koditschek, D.: Safe cooperative robot dynamics on graphs. SIAM J Contr Optim. 40, 1556–1575 (2002)

Invariants for homology classes with application to optimal search

281

19. Ghrist, R., LaValle, S.: Nonpositive curvature and pareto optimal motion planning. SIAM J. Contr. Optim. 45(5), 1697–1713 (2006)
20. Ghrist, R., Muhammad, A: Coverage and hole-detection in sensor networks via homology. In: Proceedings of the Fourth International Symposium on Information Processing in Sensor Networks, IPSN 2005, 25–27 Apr 2005, pp. 254–260. UCLA, Los Angeles, California, USA, IEEE (2005)
21. Gottlieb, D.H.: Topology and the robot arm. Acta Appl. Math. 11, 117–121 (1988) 22. Grigoriev, D., Slissenko, A.: Polytime algorithm for the shortest path in a homotopy class amidst
semi-algebraic obstacles in the plane. In: Proceedings of the 1998 International Symposium on Symbolic and Algebraic Computation, ISSAC ’98, pp. 17–24. ACM: New York, NY, USA (1998) 23. Hart, P.E., Nilsson, N.J., Raphael, B.: A formal basis for the heuristic determination of minimum cost paths. IEEE Trans. Syst. Sci, Cybern. SSC 4, 100–107 (1968) 24. Hatcher, A.: Algebraic Topology. Cambridge University Press (2001) 25. Hershberger, J., Snoeyink, J.: Computing minimum length paths of a given homotopy class. Comput. Geom. Theory Appl. 4, 331–342 (1991) 26. Jeffrey, A.: Handbook of Mathematical Formulas and Integrals, 2nd edn. Academic Press (2000) 27. Kaczynski, T., Mischaikow, K., Mrozek, M.: Computational Homology. Applied Mathematical Sciences, Springer (2004) 28. Koenig, S., Likhachev, M.: D* Lite. In: Proceedings of the Eighteenth National Conference on Artiﬁcial Intelligence (AAAI), pp. 476–483 (2002) 29. Lavalle, S.M.: Rapidly-exploring random trees: a new tool for path planning. tech. report (1998) 30. Likhachev, M., Gordon, G., Thrun, S.: ARA*: Anytime A* with provable bounds on suboptimality. In: Advances in Neural Information Processing Systems (NIPS) 16. Cambridge, MA: MIT Press (2003) 31. Lum, P.Y., Singh, G., Lehman, A., Ishkanov, T., Vejdemo-Johansson, M., Alagappan, M., Carlsson, J., Carlsson, G.: Extracting insights from the shape of complex data using topology. Sci. Rep. 3 (2013). http://www.ncbi.nlm.nih.gov/pubmed/23393618 32. McKeeman, W.M.: Algorithm 145: adaptive numerical integration by simpson’s rule. Commun. ACM 5, 604 (1962) 33. Mrozek, M.: Topological dynamics: Rigorous numerics ia cubical homology. In: Zomorodian, A. (ed.) Advances in Applied and Computational Topology: Proc. Symp. Amer. Math. Soc., vol. 70, pp. 41–73 (2012) 34. Rudin, W.: Principles of Mathematical Analysis. International Series in Pure and Applied Mathematics. McGraw-Hill (1964) 35. Sanderson, C.: Armadillo: an open source c++ linear algebra library for fast prototyping and computationally intensive experiments. tech, report, NICTA (2010) 36. Schmitzberger, E., Bouchet, J., Dufaut, M., Wolf, D., Husson, R.: Capture of homotopy classes with probabilistic road map. In: International Conference on Intelligent Robots and Systems, vol. 3, pp. 2317–2322 (2002) 37. Seifert, H., Threlfall, W., Birman, J., Eisner, J.: Seifert and Threlfall, A textbook of Topology. Pure and Applied Mathematics, Academic Press (1980) 38. Stentz, A., Hebert, M.: A complete navigation system for goal acquisition in unknown environments. Auton. Robot. 2, 127–145 (1995) 39. Thrun, S., Burgard, W., Fox, D.: Probabilistic Robotics Intelligent Robotics and Autonomous Agents. The MIT Press (2005) 40. Wynn, P.: (1962) Acceleration techniques in numerical analysis, with particular reference to problems in one independent variable. In: Proc. IFIPS, pp. 149–156. Munich (1962) 41. Zhou, Y., Hu, B., Zhang, J.: Occlusion detection and tracking method based on bayesian decision theory. In: Chang, L.-W., Lie, W.-N. (eds.) Advances in Image and Video Technology. Lecture Notes in Computer Science, vol. 4319, pp. 474–482. Springer Berlin/Heidelberg (2006)

