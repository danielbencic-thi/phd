IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Typesetting math: 100%

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2009 IEEE International Confe...
Survivability: Measuring and ensuring path diversity
Publisher: IEEE
Cite This
PDF
Lawrence H. Erickson ; Steven M. LaValle
All Authors
View Document
18
Paper
Citations
220
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Survivability
    III.
    Calculating the Survivability
    IV.
    Selecting the Best Paths
    V.
    Experiments

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: A novel criterion is introduced for assessing the diversity of a collection of paths or trajectories. The main idea is the notion of survivability, which measures the lik... View more
Metadata
Abstract:
A novel criterion is introduced for assessing the diversity of a collection of paths or trajectories. The main idea is the notion of survivability, which measures the likelihood that numerous paths are obstructed by the same obstacle. This helps to improve robustness with respect to collision, which is an important challenge in the design of real-time planning algorithms. Efficient algorithms are presented for computing the survivability criterion and for selecting a subset of paths that optimize survivability from a larger collection. The algorithms are implemented and solutions are illustrated for two different systems. Chi-square tests are used to show uniform coverage obtained by using the computed paths in a simple breadth-first search. Random obstacle placement is used to show superior robustness of these primitives compared to uniform sampling of the control space.
Published in: 2009 IEEE International Conference on Robotics and Automation
Date of Conference: 12-17 May 2009
Date Added to IEEE Xplore : 06 July 2009
ISBN Information:
Print ISSN: 1050-4729
INSPEC Accession Number: 10748763
DOI: 10.1109/ROBOT.2009.5152773
Publisher: IEEE
Conference Location: Kobe, Japan
Contents
SECTION I.
I ntroduction

For over a decade, planning algorithms have been hampered by the challenging issue of designing effective motion primitives. This is particularly an issue with nonholonomic and kinodynamic planning, in which it becomes important to efficiently overcome differential constraints while simultaneously searching for a collision-free trajectory. A discussion of this issue in the context of rapidly exploring random trees appears in [8] . For particular systems, the careful construction of effective primitives dramatically improved performance in [2] , [3] . In a much earlier work, an efficient nonholonomic planner was made by using Dubins curves as primitives [5] . Given the recent technological advances in autonomous vehicles, there has been substantial interest in real-time planning in cluttered, unpredictable environments. This has prompted the development of methods that design motion primitives for outdoor vehicle navigation [9] , [12] .

All of these practical demonstrations show that finding the “right” primitives dramatically helps in planning algorithms. We wonder what criterion should be optimized in choosing the primitives. If this issue becomes well-understood, then it should be possible to automate the design of effective motion primitives as problems arise in new contexts.

The quest for a good collection of paths is related to basic sampling issues that have arisen in many contexts. For example, selecting points that optimize discrepancy is important for numerical integration [11] . Choosing samples in configuration space that reduce dispersion (radius of the largest empty ball) is desirable in optimization [11] , [14] , motion planning [7] , and was applied directly to the problem of selecting path sets in [4] . An interesting extension of discrepancy to the space of paths, which is more closely related to the current paper, appears in [13] .

Our paper is inspired by the recent works of Branicky, Knepper, and Kuffner, in which they introduce the notion of path diversity for designing a robust, efficient collection of paths or trajectories [1] . They discretize the environment into square segments and then greedily choose paths that minimize the number of squares that the paths hold in common. This makes important progress toward designing better primitives and improving our understanding; however, some issues remain. One limitation is that the definition depends on an arbitrary discretization of the state space into boxes. If the discretization is much coarser than the obstacles, then the method may report that two well-separated paths are likely to be blocked by the same obstacle. On the other hand, if the discretization is much smaller than the typical obstacle size, then two paths that might in fact be very close to each other could be reported as being well-separated.

In this paper, we introduce a new criterion, called survivability , which tries to assess the likelihood that other paths survive when a path in the collection is blocked by an obstacle. The idea is to bombard each path by obstacles and characterize the collateral damage to other paths. Rather than fixing a particular resolution for obstacles, our survivability definition averages over all resolutions, thereby avoiding the discretization sensitivity in the path diversity definition from [1] .

Section II introduces the mathematical definition of survivability, which is expressed in terms of integrals over all paths and obstacle sizes. Section III introduces an algorithm that computes the survivability in time O ( n 2 p l g p ) , in which n is the number of paths in the collection and p is the number of sample points chosen along each path to evaluate the integrals. Section IV then uses the algorithm to develop an O ( N n 2 p l g p ) -time algorithm that selects a set of n paths from a larger collection of N paths by optimizing the computed survivability. The algorithms are implemented, and Section V presents experiments on two systems: a hovercraft and a car pulling four trailers. The experiments show that primitives selected by optimizing survivability have better uniform exploration properties and robustness with respect to obstacles in comparison to primitives chosen by uniformly sampling the control space and primitives chosen at random.
Fig. 1. - An illustration of the inner integral of Equation 1. An obstacle of constant radius is dragged along $\tau$
Fig. 1. An illustration of the inner integral of Equation 1 . An obstacle of constant radius is dragged along τ

Show All

SECTION II.
S urvivability

This section introduces a new measure, called survivability , for a collection of paths. Let X ⊂ R n be a state space , which is assumed to be a typical manifold resulting from the configuration space of a robot, or possibly the phase space , which includes configuration and velocity variables. Let ρ : X × X → [ 0 , ∞ ) denote the distance metric on X .

Let τ : [ 0 , e τ ] → X denote a continuous, finite-length, path parameterized with constant speed, in which e τ > 0 is the endpoint of the path domain. Let T be any finite collection of such paths, with the assumption that there is some fixed state x r o o t called the root , for which τ ( 0 ) = x r o o t for all τ ∈ T . The domain endpoint e τ may be different for each τ ∈ T . The path parameter s ∈ [ 0 , e τ ] may or may not correspond to time.

The main idea will be to evaluate path sets based on whether they can “survive” an obstacle in X that blocks them. For an obstacle O ⊂ X , a path is said to be blocked if there exists some s ∈ [ 0 , e τ ] for which τ ( s ) ∈ O . Let r - survivability α ( T , r , x ) ∈ [ 0 , 1 ] be the fraction of paths in T that are unblocked by a ball of radius r centered at x . Since the choices of r and x are arbitrary, consider averaging over all possibilities. This yields the survivability σ τ ( T ) of a path τ in the collection T , which is defined as σ τ ( T ) = 1 e τ ∫ ∞ 0 ∫ e τ 0 α ( T , r , τ ( s ) ) d s d r . (1) View Source Right-click on figure for MathML and additional features. \sigma_{\tau}(T)={1\over e_{\tau}}\int_{0}^{\infty}\int_{0}^{e_{\tau}}\alpha(T, r, \tau(s))dsdr. \eqno{\hbox{(1)}}

Note that the upper bound of ∞ on the outer integral may be replaced by ℓ m a x , the maximum length over all paths in T . All paths in T are blocked for radii larger then ℓ m a x and therefore nothing more contributes to σ τ ( T ) .

The survivability of a set T of paths is defined by averaging (1) over all τ ∈ T to obtain: σ ( T ) = 1 | T | ∑ τ ∈ T σ τ ( T − τ ) . (2) View Source Right-click on figure for MathML and additional features. \sigma(T)={1\over \vert T\vert}\sum_{\tau\in T}\sigma_{\tau}(T-\tau). \eqno{\hbox{(2)}} Note that because the limits of integration are independent of each other the integration order can be swapped.

Intuitively, σ ( T ) attempts to measure the amount of collateral damage a single path τ is likely to do to the other paths in T if it is blocked by some obstacle. A path τ that has many intersections with other paths is problematic because an obstacle that blocks τ is likely to block the paths that intersect τ . Paths that almost intersect are also dangerous for the same reason. A path τ for which most of its image is close to x r o o t is extremely dangerous because an obstacle placed along it would likely block x r o o t and consequently all paths in T .
SECTION III.
C alculating the S urvivability

For very simple types of paths, such as straight lines originating from x r o o t , it is possible to compute σ ( T ) analytically. However, as the dimension of the problem increases and the paths become more complicated, finding an exact value of σ ( T ) becomes difficult or impossible. In these situations, we represent each path as a sequence of uniformly-spaced points in X : τ ≈ τ ^ = ( τ ( s 1 ) , τ ( s 2 ) , τ ( s 3 ) , … , τ ( s n ) ) , (3) View Source Right-click on figure for MathML and additional features. \tau\approx\hat{\tau}=(\tau(s_{1}), \tau(s_{2}), \tau(s_{3}), \ldots, \tau(s_{n})), \eqno{\hbox{(3)}} for which 0 ≤ s 1 < ⋯ < s n ≤ e τ .

Let T ^ be the set in which each τ ∈ T is replaced by τ ^ . The building block of computing survivability is Algorithm 1 . It uses a subroutine called N E A R E S T ( x , τ ^ c ) which returns the element in τ ^ c that is closest to x .
SECTION Algorithm 1
ORDERED_PAIRWISE( τ ^ , τ ^ ′ )

Algorithm

Algorithm 1 approximately calculates (1) for σ τ ( T ) with the condition that the only member of T is τ ′ . Since σ τ ( T ) simply evaluates the fraction of surviving paths for different obstruction sizes and different points, it can be approximately computed by simply running Algorithm 1 for every τ ^ ′ ∈ T ^ and averaging over the results, giving Algorithm 2 .
SECTION Algorithm 2
SINGLE_PATH_SURVIVABILITY( τ ^ , T ^ )

Algorithm

Algorithm 3 calculates (2) by iterating Algorithm 2 over all τ ^ ∈ T ^ .
SECTION Algorithm 3
SURVIVABILITY( T ^ )

Algorithm

Algorithm 3 executes quickly. If all of the paths are organized into kd-trees, which enable O ( n l g 2 n ) construction time and O ( l g n ) lookup time (except for certain contrived pathological cases), then, assuming that all paths have fewer than p points, Algorithm 1 takes O ( p l g p ) time. There are two nested loops in Algorithms 2 and 3 that each run in O ( n ) time; hence, the entire calculation runs in time O ( n 2 p l g p ) , in which n is the number of paths in T .
SECTION IV.
S electing the B est P aths

Suppose you are given a very large set of N paths T a l l , and you want to select a small subset of n paths that maximize the survivability. Choosing the optimal set of n paths from a master set T a l l of N paths would require checking every n -sized subset of T a l l . Unfortunately, that would be intractable. However, if a subset T s u b of n − 1 paths is provided, it is easier to find the best path to add to the subset. Simply running Algorithm 3 on the ( n − 1 ) -path subset augmented with every possible path would take O ( N n 2 p l g p ) time (assuming N is very large relative to n ). Naively constructing an n -path subset step-by-step from one or two starting paths would therefore take O ( N n 3 p l g p ) time. However, adding a single path by completely recomputing Algorithm 3 for every possible added path ignores any previous computation that may have been done.

If Algorithm 3 has already been performed on T s u b , then the next best path to add can be found in linear time relative to n . Essentially, Algorithm 3 performs Algorithm 1 on every ordered pair of different paths in the input set. A set of size n has n 2 − n ordered pairs of distinct elements. When a new path τ n e w is added to the set, Algorithm 1 does not have to be executed on pairs that do not involve τ n e w . If a new path τ n e w is added to a set of n paths, there are 2 n invocations of Algorithm 1 that involve P , meaning that a new path can be found in O ( n ) time. Algorithm 4 calculates the value of SURVIVABILITY ( T ^ s u b + τ ^ n e w ) , where T ^ s u b is a pre-existing set of approximate paths, τ ^ n e w is an approximate path to be added to the set, and x = S U R V I V A B I L I T Y ( T ^ s u b ) .
SECTION Algorithm 4
CHECK_SINGLE_PATH( T ^ , τ ^ n e w , x )

Algorithm

Building an n path set from one or two starting paths using this method would take O ( N n 2 p l g p ) time, with an additional O ( N p l g 2 p ) time to construct the original kd-trees. This begs the question of how to select some constant number of starting paths that can be used as a nucleus upon which the rest of the set can be built. In [1] , the authors simply choose the shortest path. This method is certainly quick, but it can be dangerous if the shortest path in T a l l is some extremely suboptimal path, such as one that closely circles the root for its entire length. A better method is to iterate through the master set some constant number of times K (we use K = 3 ) and look for the path that is most different from the one selected in the previous iteration, as demonstrated in Algorithm 5 , which takes a master set T ^ a l l as input and returns two reasonable paths to use as a nucleus, along with their survivability value. In practice, the algorithm usually entered a closed cycle of two paths within three iterations.
SECTION Algorithm 5
CHOOSE_2_START( T ^ a l l )

Algorithm

In most models that have some sort of angular control, this method will quickly choose two paths that steer in opposite directions with high magnitude. However, this method is imperfect, and finding a superior way to choose some initial constant set is a subject of current research.

For certain extremely simple systems, such as the case where all motion primitives are all straight lines in the p x p y plane emanating from x r o o t , this method will choose primitives that are as close as possible to uniform sampling. Notice the Van der Corput sequence-like behavior ( [15] ) of the algorithm as it selects more primitives in Figure 2 .
SECTION V.
E xperiments

Two different types of experiments were performed. In the first set of experiments, a set of primitives was chosen to maximize survivability. These primitives were used to construct a tree in the workspace. The quality of these trees was gauged by a chi-square measure, which rewards a uniform distribution of nodes and wide exploration, and punishes clumping of the tree nodes (e.g., the hypothesis was a uniform distribution over the state space, and the test measured the difference from the hypothesis). A different robotic model was used in each experiment. In the second set of experiments, random obstacles were placed in the workspace, and the amount of surviving paths was measured. The primitives chosen to maximize survivability were compared to primitives chosen at random from the master set and primitives created by uniform sampling of the control space.
Fig. 2. - The results of incrementally choosing 3, 4, 5, 6, 12, and 24 paths from an initial set of 100,000 linear paths. Two initial paths were chosen with Algorithm 5, and the other paths were chosen incrementally by iterating through the master set of paths while repeatedly calling Algorithm 4 to determine the most survivability-preserving path that was not already present in the subset. Every added path goes in the middle of the largest gap left from the previous iteration, producing a result that would be identical to uniform sampling if the proper primitives had been available from the input set
Fig. 2. The results of incrementally choosing 3, 4, 5, 6, 12, and 24 paths from an initial set of 100,000 linear paths. Two initial paths were chosen with Algorithm 5 , and the other paths were chosen incrementally by iterating through the master set of paths while repeatedly calling Algorithm 4 to determine the most survivability-preserving path that was not already present in the subset. Every added path goes in the middle of the largest gap left from the previous iteration, producing a result that would be identical to uniform sampling if the proper primitives had been available from the input set

Show All

A. Hovercraft

The hovercraft is a robot that can propel itself forward in the plane with the use of a large jet. However, since it hovers over the ground, it is not subject to friction, so the only way it can slow itself down is by rotating itself around and thrusting in a direction opposite to its movement. It is also equipped with two other jets that can be pointed in opposite directions to allow rotation.

The effectiveness of this method was tested by performing a chi-square test on the trees formed from primitives chosen with this algorithm, and comparing the results to both sets of randomly selected paths from the master set and sets of paths generated from uniformly sampled controls. The hovercraft model used in these tests has following state variables, x , y v x , v y , and θ , denoting the x position, the y position, the x velocity, the y velocity, and the robot's orientation. It has two controls, u a and u ω . The state transition equation is p ˙ x p ˙ y v ˙ x v ˙ y θ ˙ = v x = v y = u a cos θ = u a sin θ = u ω . View Source Right-click on figure for MathML and additional features. \eqalignno{\dot{p}_{x}&=v_{x}\cr \dot{p}_{y}&=v_{y}\cr \dot{v}_{x}&=u_{a}\cos\theta\cr \dot{v}_{y}&=u_{a}\sin\theta \cr \dot{\theta}&=u_{\omega}.}

The value of u a can range from 0 to 1, and the value of θ ˙ (in radians per second) can range from –.25 to. 25.

A set of 3000, 15-second long primitives were calculated from a non-moving initial state pointed in the + x direction. Note that this means every path in the configuration has a different length in the state space. A weighted L 2 metric was used to calculate the distance between states x 1 and x 2 on the paths. Every set had 9 primitives in it. The environment was split into 9 5 buckets for the chi-square calculation (every dimension was split into nine segments) and the sets of primitives were built into trees of depth 4 (for a total of 7381 nodes). Since the starting orientation, position, and velocity were all zero, and the trees were 60 seconds deep, the minimum and maximum reachable values for every R component are as follows:
dimension	minimum	maximum
p x 	−1125 	1800
p y 	−1666 	1666
v x 	−47.44 	60
v y 	−57.72 	57.72

Of course, not all combinations of these minimum and maximum values are actually reachable by the robot, but this is not very important when simply comparing the performance of primitive sets.

Two different uniform path sets were generated. The first one resulted from actual uniform sampling, so u a = 0 , u a = 1 / 2 , or u a = 1 . However, this creates a large number of points that simply sit at the origin, so a second uniform set was also generated where u a = 1 / 3 , u a = 2 / 3 , or u a = 1 . In both uniform sets, u ω = − .25 , u ω = 0 , or u ω = .25 . One thousand randomly chosen sets of primitives were also tested, and their average result is shown. All results are normalized so the result of the primitives calculated to maximize survivability is 1.000.
set	chi-square result
calculated 	1.000
1000 random avg. 	6.339
uniform 1 	6.374
uniform 2 	4.559

Figure 3 shows the results (in the p x p y plane) of building a depth 4 tree with three different primitive sets. The blue points represent the tree nodes, and the red lines are the edges. Note that the primitives chosen to maximize the survivability have formed a tree that explores almost uniformly in every direction. The uniformly sampled primitives (specifically, the uniform 2 set) explores far in the + p x direction, but little in the other directions.
B. Car Pulling Four Trailers

The car pulling four trailers has two inputs, u v , the current velocity, and u ϕ , the angle of the pulling car's front wheels, and seven state variables. For these tests, − 1 ≤ u v ≤ 1 , and − π / 3 ≤ u ϕ ≤ π / 3 . To construct the trees, 10 primitives were drawn from a pool of 3000, and trees of depth 3 were formed. There are also two constants, L , the front car length and d , the trailer hitch length, which were chosen to be 1/4 and 3/4 respectively. Our model is adapted from one presented in [10] . The state transition equation is p ˙ x p ˙ y θ 0 θ 1 θ 2 θ 3 θ 4 = u v cos θ 0 = u v sin θ 0 = u v L tan u ϕ = u v d sin ( θ 1 − θ 0 ) = u v d cos ( θ 0 − θ 1 ) sin ( θ 1 − θ 2 ) = u v d cos ( θ 1 − θ 2 ) cos ( θ 0 − θ 1 ) sin ( θ 2 − θ 3 ) = u v d cos ( θ 2 − θ 3 ) cos ( θ 1 − θ 2 ) cos ( θ 0 − θ 1 ) sin ( θ 3 − θ 4 ) (4) View Source Right-click on figure for MathML and additional features. \eqalignno{\dot{p}_{x}&=u_{v}\cos\theta_{0}\cr \dot{p}_{y}&=u_{v}\sin\theta_{0}\cr \theta_{0}&={u_{v}\over L}\tan u_{\phi}\cr \theta_{1}&={u_{v}\over d}\sin(\theta_{1}-\theta_{0})\cr \theta_{2}&={u_{v}\over d}\cos(\theta_{0}-\theta_{1})\sin(\theta_{1}-\theta_{2})\cr \theta_{3}&={u_{v}\over d}\cos(\theta_{1}-\theta_{2})\cos(\theta_{0}-\theta_{1})\sin(\theta_{2}-\theta_{3})\cr \theta_{4}&={u_{v}\over d}\cos(\theta_{2}-\theta_{3})\cos(\theta_{1}-\theta_{2})\cos(\theta_{0}-\theta_{1})\sin(\theta_{3}-\theta_{4})&\hbox{(4)}}
Fig. 3. - Hovercraft. [top left] The entire 3000 path master set. [top right] The primitives chosen to maximize survivability. [bottom left] The depth 4 tree made by the primitives chosen to maximize survivability. [bottom right] The depth 4 tree made by uniformly sampled primitives
Fig. 3. Hovercraft. [top left] The entire 3000 path master set. [top right] The primitives chosen to maximize survivability. [bottom left] The depth 4 tree made by the primitives chosen to maximize survivability. [bottom right] The depth 4 tree made by uniformly sampled primitives

Show All

The maximum and minimum reachable values for each R component are listed in the table below.
dimension	minimum	maximum
p x 	−45 	45
p y 	−44.78 	44.78

For the chi-square calculations, the state space was split into 7 7 regions. The normalized results are in the table below.
set	chi-square result
calculated 	1.000
1000 random avg. 	1.532
uniform 	1.635

Note that Figure 4 only shows the robot's position in the p x p y plane. The uniformly sampled primitives explore a wide area, but they have poor internal coverage, and many of the nodes are clustered into a few small areas. The calculated primitives have more uniformly distributed internal coverage.

Additionally, the uniformly sampled primitives explore some of the other dimensions poorly. Figure 5 shows the distribution of nodes in the θ 0 θ 4 plane. From this view, it is easy to see the poor coverage of the uniformly sampled primitives and the superior coverage of the primitives that maximize survivability.
Fig. 4. - Car pulling trailers. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives
Fig. 4. Car pulling trailers. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives

Show All
Fig. 5. - Views from the $\theta_{0}\theta_{4}$ plane. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives
Fig. 5. Views from the θ 0 θ 4 plane. [left] The depth 3 tree made by the primitives chosen to maximize survivability. [right] The depth 3 tree made by uniformly sampled primitives

Show All

C. Random obstacle placement

These experiments involved placing a circular obstacle, with randomly chosen position and radius, into a workspace containing a set of 50 Dubins car paths and calculating the fraction of unblocked paths (Dubins car is defined in [6] ). Seven different sets were tested, one with primitives chosen to maximize survivability, one with primitives generated by uniform sampling of the controls, and five sets consisting of primitives chosen at random from the master set. Each set was tested with 5000 different obstacles, though a test was considered invalid unless at least one path in the set was blocked. The results of the tests are shown in the table below.
set	average fraction of surviving paths
calculated 	0.560
random 1 	0.504
random 2 	0.501
random 3 	0.513
random 4 	0.500
random 5 	0.489
uniform 	0.499

About 25 paths remained unblocked on average in the random and uniform sets, compared to about 28 paths on average remaining unblocked in the set designed to maximize survivability, representing a 12% improvement.
SECTION VI.
C onclusion

We have presented a new method of measuring path diversity and an algorithm that incrementally chooses the most diverse paths from a master set. However, there are still areas that require further exploration.
Fig. 6. - [left] The Dubins car paths chosen to maximize survivability when the angular component is given a very low weight. [right] The Dubins car paths chosen to maximize survivability when the angular component is given a very high weight
Fig. 6. [left] The Dubins car paths chosen to maximize survivability when the angular component is given a very low weight. [right] The Dubins car paths chosen to maximize survivability when the angular component is given a very high weight

Show All
Fig. 7. - The hovercraft path sets chosen for different starting velocities. The green arrows denote the initial direction of movement
Fig. 7. The hovercraft path sets chosen for different starting velocities. The green arrows denote the initial direction of movement

Show All

Most importantly, our definition of survivability is highly dependent on the distance metric used to define the ball in (1) . Using different distance metrics will result in different optimal paths, as seen in Figure 6 . It is highly probable that different metrics will be suited to different applications of the primitives. For example, if exploration of the p x p y plane is the primary goal, then a metric that gives higher weights to the differences between p x and p y may be preferable. However, if the problem involves a small p x p y space relative to the robot, but ensuring correct configuration is difficult (i.e. backing a truck with a trailer attached into a garage, where the workspace is the garage and a short driveway), then a metric that gives higher weights to the various S 1 components may be more desirable. Finding the best metric for a given problem and robotic model is an open question.

The selected paths can also be influenced by the starting state of the system. Figure 7 shows the different hovercraft system paths selected under two different starting velocities (direction denoted by the arrow in the lower left corner). This suggests that, for planning purposes, dividing the state space into regions and calculating a different set of primitives for each one may be necessary.

Additionally, finding the correct number of primitives to choose given the differential constraints and the dimension of the state space is an important task. Choosing too few would unnecessarily restrict the robot's movement, but choosing too many would reduce the speed advantage granted by restricting the robot to a small number of primitives. It is unclear whether the number of primitives chosen should be based primarily on the dimension of the state space, control space, or some combination of the two.

A useful future experiment would be to use these primitives on a robot navigating through a previously mapped environment with additional unexpected obstacles. An example would be a robot attempting to drive through a valley. It may already have a path that it intends to follow, but perhaps some boulders are now obstructing parts of that path. It would have to quickly devise a plan to navigate around the boulders and get back on its intended path. Since a path set with high survivability minimizes the chance that an obstacle blocking one path would also block the other paths in the set, it seems unlikely that a robot equipped with primitives that maximize survivability would be left without options when it encounters obstacles.
ACKNOWLEDGMENT

The authors are supported in part by NSF CISE grant 0535007.

Authors
Figures
References
Citations
Keywords
Metrics
More Like This
A Deterministic Improved Q-Learning for Path Planning of a Mobile Robot

IEEE Transactions on Systems, Man, and Cybernetics: Systems

Published: 2013
Hybrid Path Planning Algorithm Based on Membrane Pseudo-Bacterial Potential Field for Autonomous Mobile Robots

IEEE Access

Published: 2019
Show More
References
1.
M. S. Branicky, R. A. Knepper, and J. J. Kuffner, "Path and trajectory diversity: Theory and algorithms," in Proc. IEEE International Conference on Robotics and Automation, 2008, pp. 1359-1364.
Show in Context View Article
Google Scholar
2.
E. Frazzoli, M. A. Dahleh, and E. Feron, "Maneuver-based motion planning for nonlinear systems with symmetries," IEEE Transactions on Robotics, vol.21, no.6, pp. 1077-1091, Dec. 2005.
Show in Context View Article
Google Scholar
3.
J. Go, T. Vu, and J. J. Kuffner, "Autonomous behaviors for interactive vehicle animations," in ACM SIGGRAPH Symposium on Computer Animation, 2004.
Show in Context CrossRef Google Scholar
4.
C. J. Green and A. Kelly, "Toward optimal sampling in the space of paths," in International Symposium of Robotics Research, 2007.
Show in Context Google Scholar
5.
J.-C. Latombe, "A fast path planner for a car-like indoor mobile robot," in Proceedings AAAI National Conference on Artificial Intelligence, 1991, pp. 659-665.
Show in Context Google Scholar
6.
S. M. LaValle, Planning Algorithms. Cambridge, UK: Cambridge University Press, 2006, also available at http://msl.cs.uiuc.edu/planning/.
Show in Context CrossRef Google Scholar
7.
S. M. LaValle, M. S. Branicky, and S. R. Lindemann, "On the relationship between classical grid search and probabilistic roadmaps," International Journal of Robotics Research, vol. 23, no. 7/8, pp. 673- 692, July/August 2004.
Show in Context CrossRef Google Scholar
8.
S. M. LaValle and J. J. Kuffner, "Rapidly-exploring random trees: Progress and prospects," in Algorithmic and Computational Robotics: New Directions, B. R. Donald, K. M. Lynch, and D. Rus, Eds. Wellesley, MA: A K Peters, 2001, pp. 293-308.
Show in Context Google Scholar
9.
D. Mateus, G. Avina, and M. Devy, "Robot visual navigation in semi-structured outdoor environments," in Proc. IEEE International Conference on Robotics and Automation, Apr. 2005, pp. 4691-4696. (Pubitemid 46084519)
Show in Context View Article
Google Scholar
10.
R. M. Murray and S. Sastry, "Nonholonomic motion planning: Steering using sinusoids," IEEE Transactions on Automatic Control, vol.38, no.5, pp. 700-716, 1993.
Show in Context View Article
Google Scholar
11.
H. Niederreiter, Random Number Generation and Quasi-Monte-Carlo Methods. Philadelphia: Society for Industrial and Applied Mathematics, 1992.
Show in Context CrossRef Google Scholar
12.
M. Pivtoraiko and A. Kelly, "Generating near minimal spanning control sets for constrained motion planning in discrete state spaces," in Proceedings IEEE/RSJ International Conference on Intelligent Robots and Systems, 2005.
Show in Context View Article
Google Scholar
13.
S. Ramamoorthy, R. Rajagopal, Q. Ruan, and L. Wenzel, "Lowdiscrepancy curves and efficient coverage of space," in Proc. Workshop on the Algorithmic Foundations of Robotics, New York, July 2006.
Show in Context Google Scholar
14.
A. G. Sukharev, "Optimal strategies of the search for an extremum," U.S.S.R. Computational Mathematics and Mathematical Physics, vol.11, no.4, 1971, translated from Russian, Zh. Vychisl. Mat. i Mat. Fiz., 11, 4, 910-924, 1971.
Show in Context CrossRef Google Scholar
15.
J. G. van der Corput, "Verteilungsfunktionen I," Akademie van Weten- schappen, vol.38, pp. 813-821, 1935.
Show in Context Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
