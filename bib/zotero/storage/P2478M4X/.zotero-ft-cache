Trajectory Planning for Systems with Homotopy Class Constraints
Soonkyum Kim, Koushil Sreenath, Subhrajit Bhattacharya and Vijay Kumar

Abstract There are various applications where homotopy constraints are useful in trajectory generation for mobile robots. In this paper, we present a method to generate an optimal trajectory restricted to a particular homotopy class, which is speciﬁed by a given representative trajectory. The optimality is achieved by formulating the trajectory generation problem as a Mixed-Integer Quadratic Program (MIQP). We partition the conﬁguration space into nonoverlapping cells and model each cell in the partition with integer variables and inequality constraints. We associate with any sequence of integer variables a word, so that each trajectory can be mapped to a word. We then construct a set of all words that are homotopically equivalent to a given word. For each word, we ﬁx the integer variables of the MIQP to ﬁnd the optimal time distribution in each cell, by solving a QP for each iteration, to obtain the locally optimal trajectory in the speciﬁed homotopy class. We illustrate an example of minimum acceleration trajectory generation on a plane with different homotopy class constraints.
Key words: Trajectory planning, homotopy constraint, optimal trajectory

1 Introduction

Early attempts at classifying homotopy classes in two dimensions include geometric methods [5, 6], homotopy preserving probabilistic road-map constructions [10], and triangulation-based path planning [3]. Two trajectories are said to be homotopic if one can be continuously deformed to another without any intersection with obstacles. Each set of trajectories that are homotopic forms an equivalence class, called a homotopy class (see Figure 1(a)). A particular homotopy class can be speciﬁed by a representative trajectory in the homotopy class. Thus, trajectory generation with a
Soonkyum Kim · Koushil Sreenath · Subhrajit Bhattacharya · Vijay Kumar Mechanical Engineering and Applied Mechanics, University of Pennsylvania, Philadelphia, USA, e-mail: {soonkyum,koushils,subhrabh,kumar}@seas.upenn.edu

J. Lenarcˇicˇ, M. Husty (eds.), Latest Advances in Robot Kinematics,

83

DOI 10.1007/978-94-007-4620-6 11,

© Springer Science+Business Media Dordrecht 2012

84

S. Kim et al.

Fig. 1 (a) τ1 is homotopic to τ2 since there is a continuous sequence of trajectories representing deformation of one into the other. τ3 belongs to a different homotopy class since it cannot be continuously deformed into any of the other two. (b) Example where the trajectories (τ1 and τ2) are homologous, but not homotopic. (c) An example of a trajectory corresponding to the word TPUVWQLJHG.
homotopy class constraint consists of ﬁnding an optimal trajectory in the desired homotopy class, speciﬁed by the given representative trajectory, that also respects the kinematic constraints. One can think of applications ranging from multi-robot exploration, where it may be beneﬁcial to deploy each robot in a different homotopy class to ensure maximal coverage and minimal congestion, to single arm motion planning where one may seek paths that go around obstacles one way or the other way based on the speciﬁc task.
In this paper, we use mixed-integer quadratic programming [8] to partition the conﬁguration space into non overlapping cells and represent each cell by a label or a letter. We use the notion of words, constructed out of the letters, to coarsely represent trajectories and relate them with their homotopy classes. First, all words corresponding to a particular homotopy class are constructed. Then, for each word, a quadratic program (QP) is solved to ﬁnd a trajectory that spends equal amounts of time in each cell speciﬁed by the letters of the word. Finally, this trajectory is iteratively reﬁned to obtain the locally optimal trajectory in the speciﬁed homotopy class.
2 Preliminaries
Our objective in this paper is to design an optimal trajectory for a robot that minimizes an integral cost functional (which depends on the trajectory), while also respecting kinematic constraints of the system, avoiding obstacles, and constraining the trajectory to a particular homotopy class. Although several of these subproblems have been solved separately, (see [1, 2, 4, 7, 11, 12]), there is no literature, to our knowledge, that addresses the combined problem described above.

Trajectory Planning for Systems with Homotopy Class Constraints

85

We will start by assuming that the required homotopy class is speciﬁed by an initial representative trajectory in the homotopy class. Speciﬁcally, we will derive a locally optimal trajectory that is homotopic to the representative trajectory while also satisfying the kinematic and geometric constraints. We represent a planar trajectory, q(t), by the points [qx(t), qy(t)] parametrized by t.

2.1 Homotopy and Homology Classes for Trajectories

We begin by deﬁning homologous trajectories and illustrate the difference between homology and homotopy. Two trajectories, q1 and q2, connecting the same start and end points are homologous if and only if the closed loop formed by them, q1 −q2 (i.e., q1 together with q2 with opposite orientation), forms the boundary of a 2dimensional region on the plane not containing/intersecting any obstacles. It is well known that homology is a “coarser” representation of homotopy [2], with trajectories that are homotopic being also homologous. Figure 1(b) shows a good example of two trajectories, which are homologous but not homotopic.
A compact formulation for computing the homology class as h-signatures using Cauchy integral theorems from complex analysis is carried out by Bhattacharya et al. [1, 2]. The h-signature of a trajectory, q, with respect to obstacle o j is deﬁned as

Hj (q) =

1

tf

1

z − z j dz = t0 qx(t) + iqy(t) − z j (q˙x(t) + iq˙y(t)) dt (1)

where z(t) = qx(t) + iqy(t) is the complex representation of the trajectory, and
z j is the complex representation of an arbitrary point inside obstacle o j. Then the h-signature about all obstacles is given by H = [H1, . . . , Hno]T with no obstacles.

2.2 Optimal Trajectory Generation
We consider trajectory planning in a compact subset Q ⊂ R2 on a plane. Let O = {o1, o2, · · · , ono } be a set of convex pair-wise disjoint obstacles in Q (The requirement of convexity of obstacles can be relaxed by considering an arbitrarilyshaped obstacle as a union of convex obstacles.) Each obstacle oi ∈ O can be represented by a ni-sided convex polygon, whose faces deﬁne hyperplanes that partition Q into two half-spaces. A binary variable can be used to represent either side of the hyperplane as in [8]. So a point q ∈ Q will be feasible and will avoid collision with an obstacle oi if there is at least one face f ∈ [1, . . . , ni] satisfying ni, f · q ≤ si, f . Where ni, f is a normal vector to the f th face of obstacle oi pointing inward and si, f = ni, f · p, for any point p on the f th face. For the obstacle oi, all points q ∈ Q outside the obstacle must satisfy [9]:

86

S. Kim et al.

ni, f · q ≤ si, f + Mbi, f for bi, f ∈ {0, 1}, f = 1, . . . , ni

(2)

ni
∑ bi, f ≤ ni − 1,
f =1

where M is a large positive number. The second inequality in (2) implies that the point should be feasible about at least one face; at least one f such that bi, f = 0. This formulation breaks up Q into overlapping regions.
The problem of ﬁnding a trajectory, q(t), that avoids obstacles, respects kinematic constraints and is restricted to a speciﬁed homotopy class, is formulated as follows. The trajectory is obtained by splicing Ns sub-trajectories, each parametrized by linear combination of N + 1 basis functions,

N

∑ q(t) = c j,k ek(t) for t j ≤ t < t j+1,

(3)

k=0

for j ∈ [0, . . . , Ns − 1], 0 = t0 ≤ t1 ≤ . . . ≤ tNs = t f . Where ek(t) is a suitably chosen basis function and c j,k are coefﬁcients. Throughout this paper, we use ek(t) = (t − t j)k. The trajectory is restricted to be kr-times continuously differentiable at each of the intermediate points, q(t j), for j ∈ [0, . . . , Ns − 1]. Further, obstacle avoidance is achieved by enforcing (2) at some equally distributed intermediate
points on each subtrajectories. The cost function is the integration of norm of rth-
derivative of trajectory:

tf
J(c) =
t0

d r q(t ) dtr

2
dt

=

cT Hc.

(4)

where c = [cT0 , . . . cTNs−1]T . The optimal trajectory generation problem can then be simpliﬁed as the following mixed-integer quadratic program,

min cT Hc

(5)

c, b

s.t. A f c + D f b ≤ g f , Abb ≤ gb, Aeqc = 0

where b is the vector of binary variables. The ﬁrst inequality captures the feasibility constraints of (2) for the intermediate points, the second inequality captures the constraint on sum of binary variables in (2), and Aeqc = 0 imposes rth order differentiability at the intermediate points as well as the boundary condition of initial conﬁguration, q(0) = q0 and ﬁnal conﬁguration q(t f ) = q f .
To ﬁnd an optimal trajectory in a speciﬁc homotopy or homology class, we now incorporate topological constraints. If we add a constraint on h-signature, which we deﬁned earlier, such that the h-signature of the trajectory, H(q), should be some desired Hd, the quadratic program (5) becomes a nonlinear problem. Furthermore, the gradient of the new constraint, H = Hd will be zero almost everywhere, because the value of h-signature does not change within a particular homology class (i.e. the range of the h-signature is a set of discrete values). So, the resulting problem

Trajectory Planning for Systems with Homotopy Class Constraints

87

is NP and it is numerically hard to ﬁnd a solution based on gradients of cost and constraints. So, we need another way to enforce topological constraints, and this is carried out as follows.
Although (2) is a sufﬁcient condition for feasibility, we introduce an additional inequality so as to obtain a partition of Q.

−ni, f · q ≤ −si, f + M(1 − bi, f ) for bi, f ∈ {0, 1}, f = 1, . . . , ni.

(6)

The ﬁrst inequality of (2) only guarantees that the point q is on one side of face when bi, f = 0. With the additional constraint (6), the binary variable, bi, f , uniquely determines in which half space a point q is on. So we can divide the work space with hyperplanes of obstacles by value of binary variables.
As a result, a set of connected cells is built, whose union is the feasible space, Q, and the intersection is only the extended lines of faces of the obstacles (see Figure 1(c)). Each cell can be identiﬁed by a unique letter, representing the vector of binary variables with one binary variable for each face of each obstacle. Every point in a particular cell will have the same letter representation. It must be noted that not all binary vectors deﬁne valid cells, and hence letters. The collection of all possible valid letters is deﬁned as an alphabet.
Determining homotopy class of a trajectory is non-trivial. However, we use location information of intermediate intermediate point, each represented by a letter in the alphabet. Assembling the sequence of letters corresponding to each intermediate point of the trajectory and removing trivial repetitions will results in a word, which is a coarse representation of the trajectory. For example, the path shown in Figure 1(c) can be represented by the word T PUVW QLJHG. This can then be used to restrict trajectories to a homotopy class as will be seen in Section 3.

3 Algorithm Description
We have broken the problem of optimal trajectory generation into two parts. First we ﬁnd a word that is a coarse representation of the trajectory and use this to restrict the homotopy class of the trajectory, and next ﬁnd an optimal trajectory with this restriction. The following sections present the algorithm in more detail.

3.1 Finding Words in the Same Homotopy Class
To ﬁnd an optimal trajectory satisfying a given homotopy class constraint, we ﬁrst construct Wh, the set of words of the same homotopy class with the required one. We construct Wh by starting with the word for the given initial trajectory; Wh = {w0}. Then we choose a word wc ∈ Wh and expand the chosen word as follows. For example let wc = T PUVW QLJHG as in Figure 1(c). We choose two letters, say T and U. If there is an alternative path, like T XU(the gray plot in Figure 1(c)), for the path T PU, we construct the closed loop by reversing the new path, and obtain

88

S. Kim et al.

T PUXT after removing duplicating letters. If the length of the closed loop is less than six, no obstacle lies in the closed loop (since we need to visit at least six cells to encircle a triangle). So we replace the path between the two chosen letters with the new path, and an expanded word representing the same homotopy class is achieved, w1 = T XUVW QLJHG. The new word is added into Wh. We repeat this expansion until there are no more new words.

3.2 Finding the Optimal Trajectory

For a given word, wc ∈ Wh, we parameterize the trajectory with Ns subtrajectories, where Ns is same as the length of wc. Each subtrajectory is restricted to be in a particular cell speciﬁed by the corresponding letter in the word. Thus, all the binary
variables, bc, of the trajectory generation problem of (5) are ﬁxed by the given word wc, to reduce the optimization problem to

min cT Hc

(7)

c

s.t. A f c ≤ g˜ f , Aeqc = 0,

which is obtained by substituting bc in (5) and g˜ f = g f − D f bc. As the resulting problem (7) is a quadratic program, we can ﬁnd the global optimal trajectory for all words in Wh, which are in the given homotopy class.
However, it is not trivial to ﬁnd the spending time in each cell to minimize the cost of the whole trajectory. To reﬁne the trajectory further, we can adjust the time spent in each cell. With the ﬁnal time, t f , ﬁxed, we can ﬁnd an optimal time distribution by solving

min min cT Hc

tj

c

s.t. A f c ≤ g˜ f , Aeqc = 0

(8)

s.t. t j ≤ t j+1 for j = [0, . . . , Ns − 1], t0 = 0, tNs = t f .

As this problem is a nonlinear program, we cannot guarantee the global minimum.

However,

the

trajectory

is

iteratively

reﬁned

by

starting

with

Δtj

= t j+1 −t j

=

tf nw

for

j ∈ [0, . . . , Ns − 1] and solving (8) by an interior-point method. Although we can ﬁnd

an initial solution without iteration, a better trajectory can be obtained by iterating

the time distribution. Moreover, since the optimization cost reduces with more iter-

ations, this method can be considered as an anytime algorithm that produces better

solutions with more time.

4 Simulation Results
To illustrate how the suggested algorithm works, we performed some simulations to generate optimal trajectories with various homotopy classes. In this simulation, we

Trajectory Planning for Systems with Homotopy Class Constraints

89

Fig. 2 (a) Optimal trajectory without homotopy constraints. (b)–(e) Trajectories with four different homotopy class constraints. The thick black curve is the optimal trajectory in each homotopy class and thin gray curves are the suboptimal trajectories for each word. The cost (J) for each case is speciﬁed on the upper left corners of plots. (f)–(j) Effect of varying the time distribution in each cell through iterations of the optimization (8). The number of iterations (itr) and cost are also speciﬁed on the upper left corner of each plot. Note that the cost converges to the local optimal cost of the case (b) in 6 iterations.
ﬁx the ﬁnal time t f = 10 and ﬁnd optimal trajectories for four homotopy classes. To reduce the computation time, we limit the maximum length of word to twelve.
The plot of Figure 2(a) shows the result of solving (5) without homotopy class constraints, resulting in an optimal cost of 0.60234. The plots of Figure 2(b)–2(e) show the result of solving (8) with four different homotopy class constraints, resulting in optimal costs that are greater than the global optimal one. When we search for trajectories with the same homotopy as the optimal trajectory achieved without homotopy class constraints (Figure 2(a)), the obtained optimal trajectory (Figure 2(e)) is a local optimal one with a larger cost. This disparity occurs due to restricting the trajectory to pass through certain cells and the fact that it is hard to ﬁnd global optimal time distribution in each cell. The most optimal trajectory with homotopy class constraints lies in a different homotopy class from the global optimal one (Figure 2(b)). However, this is due to the symmetric arrangement of initial/ﬁnal location of the trajectory and arrangement of obstacles.
With a ﬁxed time distribution for each cell, the optimization reduces to a quadratic program for each word, which can be solved efﬁciently. To see the effect of optimizing the time distribution, we begin with a trajectory in the particular homotopy class of Figure 2(b) with equal time distribution over all the cells and iteratively optimize time distribution. The plots of Figure 2(f)–2(j) illustrate the changes in the trajectory and the corresponding cost with each iteration. Although this nested optimization is computationally expensive, with each iteration we get closer to the local optimal solution, resulting in an algorithm with anytime properties.

90
5 Conclusion

S. Kim et al.

In this paper, we have presented a method to ﬁnd an optimal trajectory subject to kinematic constraints, obstacle avoidance, and restricted to a speciﬁc homotopy class. This has been achieved by suitably modifying a MIQP to partition the conﬁguration space and by constructing a coarser representation of the trajectory in the form of a word to represent the homotopy class. The set of all words representing the same homotopy class is constructed, and a nested optimization is carried out to ﬁnd a locally optimal trajectory restricted to a homotopy class. Although we have only illustrated examples in the plane, work in [2] suggests obvious extensions to 3-D.

References
1. Bhattacharya, S., Kumar, V., Likhachev, M.: Search-based path planning with homotopy class constraints. In: AAAI Conf. on Artiﬁcial Intelligence (2010)
2. Bhattacharya, S., Likhachev, M., Kumar, V.: Identiﬁcation and representation of homotopy classes of trajectories for search-based path planning in 3D. In: Robotics: Science and Systems (2011)
3. Demyen, D., Buro, M.: Efﬁcient triangulation-based pathﬁnding. In: National Conf. on Artiﬁcial Intelligence, pp. 942–947 (2006)
4. Donald, B., Xavier, P., Canny, J., Reif, J.: Kinodynamic motion planning. J. ACM 40(5), 1048– 1066 (1993)
5. Grigoriev, D., Slissenko, A.: Polytime algorithm for the shortest path in a homotopy class amidst semi-algebraic obstacles in the plane. In: Int. Symposium on Symbolic and Algebraic Computation, pp. 17–24 (1998)
6. Hershberger, J., Snoeyink, J.: Computing minimum length paths of a given homotopy class. Comput. Geom. Theory Appl. 4, 331–342 (1991)
7. Lavalle, S.M., Kuffner, J.J.: Rapidly-exploring random trees: Progress and prospects. In: Donald B.R., Lynch K.M., Rus D. (eds.) Algorithmic and Computational Robotics: New Directions, pp. 293–308. A K Peters (2001)
8. Richards, A., How, J.P.: Aircraft trajectory planning with collision avoidance using mixed integer linear programming. In: American Control Conf., vol. 3, pp. 1936–1941 (2002)
9. Richards, A., How, J.P., Schouwenaars, T., Feron, E.: Plume avoidance maneuver planning using mixed integer linear programming. In: AIAA Guidance Navigation and Control Conference (2001)
10. Schmitzberger, E., Bouchet, J.L., Dufaut, M., Wolf, D., Husson, R.: Capture of homotopy classes with probabilistic road map. In: IEEE/RSJ Int. Conf. on Intelligent Robots and Systems, pp. 2317–2322 (2002)
11. Tedrake, R., Manchester, I.R., Tobenkin, M.M., Roberts, J.W.: LQR-trees: Feedback motion planning via sums of square veriﬁcation. Int. J. Robot. Res. 29(8), 1038–1052 (2010)
12. Tovar, B., Cohen, F., LaValle, S.: Sensor beams, obstacles, and possible paths. In: Chirikjian G., Choset H., Morales M., Murphey T. (eds.) Algorithmic Foundation of Robotics VIII. Springer Tracts in Advanced Robotics, vol. 57, pp. 317–332. Springer, Berlin/Heidelberg (2009)

