IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathZoom.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

        Cart 
        Create Account
        Personal Sign In 

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Journals & Magazines > IEEE Robotics and Automation ... > Volume: 1 Issue: 2
k -Survivability: Diversity and Survival of Expendable Robots
Publisher: IEEE
Cite This
PDF
Yu-Han Lyu ; Yining Chen ; Devin Balkcom
All Authors
View Document
5
Paper
Citations
198
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Related Work
    III.
    Computing k -Survivability
    IV.
    Theoretical Results
    V.
    Algorithms

Show Full Outline
Authors
Figures
References
Citations
Keywords
Metrics
More Like This
Footnotes

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: We define the k-survivability of a set of n paths as the probability that at least k out of n robots following those paths through a stochastic threat environment reach g... View more
Metadata
Abstract:
We define the k-survivability of a set of n paths as the probability that at least k out of n robots following those paths through a stochastic threat environment reach goals. High k-survivability sets tend to contain short and diverse paths.Finding sets of paths with maximum k-survivability is NP-hard. We design two algorithms: a complete algorithm that finds an optimal list of paths, and a heuristic method that finds paths with high k-survivability. Although computing k-survivability is expensive and this work is still preliminary, we believe that understanding the relationship between diversity and survival will yield new insights into multirobot motion planning.
Published in: IEEE Robotics and Automation Letters ( Volume: 1 , Issue: 2 , July 2016 )
Page(s): 1164 - 1171
Date of Publication: 02 February 2016
ISSN Information:
INSPEC Accession Number: 15869042
DOI: 10.1109/LRA.2016.2524067
Publisher: IEEE
Funding Agency:
Contents
SECTION I.
Introduction

How should a set of robots move through a dangerous environment to accomplish objectives? Is it better for the robots to travel together, or should the robots split up? What is the relationship between survival and diversity of actions?

As an example, consider the following whimsical planning problem: n ants must migrate from one nest to another through a field containing both obstacles and antlions, which make disc-shaped traps. If we assume a uniform distribution of trap locations, which n paths should the ants follow, if the ants must decide their paths before moving and cannot reroute during movement?

One idea might be to maximize the expected number of surviving ants. However, the best strategy for this problem turns out to be uninteresting and unwise: find the safest path for a single ant (for simplicity, assume there is a unique safest path), and have all ants follow that path. This solution is not robust – a single trap could destroy the entire colony. Therefore, we consider a problem that is more suitable if ants are expendable: maximize the probability that at least some k (with k ≤ n ) ants survive. If the number of traps is unknown, the solution may contain up to n unique paths.

Figure 1 shows an example problem for which paths have been selected to achieve high survivability of routes across a college campus. The paths are short, interestingly diverse, and may be of practical interest if there is actual danger, traffic congestion, or surveillance to be avoided.
Fig. 1. - A high 1-survivability set of three paths from Department of Computer Science (Sudikoff) to food court (1953 Commons) on the Dartmouth campus; gray circles represent the discretization of the environment.22The campus map is from the Dartmouth College website and the street data is from OpenStreetMap. Since data from OpenStreetMap is inconsistent with the campus map, some vertices are slightly inside buildings.
Fig. 1. - A high 1-survivability set of three paths from Department of Computer Science (Sudikoff) to food court (1953 Commons) on the Dartmouth campus; gray circles represent the discretization of the environment.22The campus map is from the Dartmouth College website and the street data is from OpenStreetMap. Since data from OpenStreetMap is inconsistent with the campus map, some vertices are slightly inside buildings.
Fig. 1.

A high 1-survivability set of three paths from Department of Computer Science (Sudikoff) to food court (1953 Commons) on the Dartmouth campus; gray circles represent the discretization of the environment. 2

Show All

We believe this to be the first work that explicitly studies the theoretical implications of robot expendability. Path diversity has been explored in several settings, with applications including motion planning [1] – [7] , robust routing in computer networks [8] , and dissimilar paths in transportation [9] . Approaches to finding diversity typically involve defining an arbitrary distance metric that describes separation of paths, and finding solutions that balance distance between paths against length of paths, using linear or non-linear weights, constrained optimization, or by analyzing the Pareto frontier.

Instead of defining an arbitrary pairwise path diversity metric or choosing arbitrary tradeoffs between path lengths and diversity metrics, our approach proceeds directly from the threat model, since we believe that diversity should be considered as a means rather than an end.

We define k - survivability to measure the quality of paths in a stochastic threat environment. Sets of paths with high k -survivability naturally balance length and diversity. Although choosing sets of paths to maximize k -survivability is NP-hard, we design a complete algorithm. Since the maximization algorithm is computationally infeasible except for k = 1 and n = 2 , we also design a practically faster heuristic method that finds paths with high k -survivability.
A. Model

We focus on the discrete problem in which the environment is represented by a point set D and the free space is represented by a graph G = ( V , E ) , where V ⊆ D . Unknown stochastic dangers are called traps . Several models of traps will be discussed in the next section.

Our problem is to find paths for n point robots such that the i -th path connects the designated start vertex s i ∈ V and the designated goal vertex g i ∈ V . See Figure 2 . Robots cannot communicate, do not have sensors, and cannot reroute; both obstacles and traps are time-independent.
Fig. 2. - Eight paths with high 1-survivability. Small gray circles are vertices of $G$ (4-connected). Squares are obstacles; diamonds are example fixed traps.
Fig. 2. - Eight paths with high 1-survivability. Small gray circles are vertices of $G$ (4-connected). Squares are obstacles; diamonds are example fixed traps.
Fig. 2.

Eight paths with high 1-survivability. Small gray circles are vertices of G (4-connected). Squares are obstacles; diamonds are example fixed traps.

Show All

We define k - survivability to be the probability that at least k paths successfully connect their (perhaps different) starts to goals. The k -survivability problem ( k S P ) is formalized as:

Input = ( G , M , { ( s i , g i ) } n i = 1 , k ) , where

    G = ( V , E ) denotes the free space.

    M is a trap model (see next section).

    n point robots have start locations s i ∈ V and goal locations g i ∈ V for all 1 ≤ i ≤ n .

    survivability parameter k , with 1 ≤ k ≤ n .

Output = P , a list of n paths maximizing k -survivability such that for all 1 ≤ i ≤ n , P i ∈ P connects s i and g i .

We now discuss two trap models: fixed traps , which have known shapes, and variable traps , for which the shape is unknown but drawn from some known distribution. Even under the fixed trap model, a different trap shape (or even multiple traps) may be placed at each vertex.

A fixed trap F is a subset of D . When a fixed trap F is in effect , all paths passing through F are blocked. A fixed trap model M = { ( F i , p i ) } | M | i = 1 is a collection of fixed traps and their corresponding, independent probabilities. If all probabilities are equal, then the model is a uniform fixed trap model .

For example, under a uniform fixed r -disc trap model , each vertex has equal and independent probability to be the center of a disc trap of radius r . Figures 3a and 3b show examples.
Fig. 3. - Example paths for two robots in different environments and parameters. In Figure 3a, since $r = 1$, the optimal solution has parallel subpaths with distance two to avoid being destroyed by one 1-disc easily.
Fig. 3. - Example paths for two robots in different environments and parameters. In Figure 3a, since $r = 1$, the optimal solution has parallel subpaths with distance two to avoid being destroyed by one 1-disc easily.
Fig. 3.

Example paths for two robots in different environments and parameters. In Figure 3a , since r = 1 , the optimal solution has parallel subpaths with distance two to avoid being destroyed by one 1-disc easily.

Show All

A variable trap A is represented by a distribution over a set of fixed traps. A variable trap model M is represented by a collection of variable traps and corresponding probabilities: M = { ( A i , p i ) } | M | i = 1 .

For example, under a variable r -disc trap model , each vertex has identical and independent probability to be the center of a disc trap, whose radius follows a geometric distribution with mean r . Two paths with high 1-survivability under the variable 5-disc trap model are shown in Figure 3c .
SECTION II.
Related Work

Diversity has been studied in location theory, motion planning, graph theory, computer networks, and transportation.

Location theory: In location theory, the maximum diversity problem is to find m points maximizing diversity among given points in a metric space. Although location theory focuses on finding diverse points, methods can be adapted to find diverse paths as long as a metric space on paths can be defined. Formulations include [10] :

    remote-edge problem : find a set of points maximizing the minimum mutual distance (also called the p -dispersion problem [11] ).

    remote-pseudoforest problem : find a set of points maximizing the sum of the distance to the nearest neighbors (also called the p -defense problem [12] ).

    remote-clique problem : find a set of points maximizing the sum of mutual distances (also called the max-avg facility dispersion problem [13] , or the maximum dispersion problem [11] ).

Diverse trajectories in motion planning: Increasing the diversity of trajectories in motion planning has been studied by several researchers [1] – [7] . Our work is most related to Erickson’s and LaValle’s work [14] . They propose a definition of survivability that measures the correlation of damage on paths when a random disc obstacle is placed on a path. Whereas survivability favors separated paths, k -survivability is a direct probabilistic measure of survival that in some cases can be maximized by allowing robots to follow overlapping short paths.

Finding trajectories in a threat environment has been studied for aircrafts [15] , UAVs [16] , vehicles [17] , and ships [18] . Our work differs in that the threat model is probabilistic, and in the search for multiple trajectories.

In the Euclidean plane, finding a path connecting two points among polygonal obstacles can be solved efficiently [19] . One possible definition for the diversity of paths in the Euclidean plane is the number of distinct homotopy classes of paths [20] . Eriksson-Bique et al. studied the problem of finding k shortest paths with distinct homotopy classes [21] .

Path diversity on graphs: The problem of finding k -shortest paths on a graph has been studied since the ’70s [22] , as the problem of finding vertex or edge disjoint paths [23] . When each vertex/edge is associated with a failure probability, short and reliable paths are desirable. Finding short paths subject to reliability constraints can be considered as resource-constrained shortest-path problems [24] . These models only disfavor paths sharing edges or vertices, while k -survivability disfavors paths passing through the same traps, which is more general.

Robust routing in computer network: One way to improve the robustness of a network is to increase the path diversity between end-points [25] . Diverse routing problems have been studied for more than a decade using graph theory methods [8] . Rohrer et al. define the diversity of paths based on the distance on graphs and geographic distances [26] , which is similar to the idea of path space [5] .

Dissimilar paths in transportation: The problem of finding dissimilar paths has been studied in transportation, since dissimilar paths avoid bottlenecks and are beneficial for e.g. hazardous waste transportation [9] , [27] .
SECTION III.
Computing k -Survivability

Since k -survivability is independent of the order of vertices along paths, paths are represented as sets of vertices.
A. Computing k -Survivability Under the Fixed Trap Model

Given a fixed trap model M = { ( F i , p i ) } | M | i = 1 and a path P on a graph G , the forbidden index set of P is Forbid ( P ) = { i | P ∩ F i ≠ ∅ } . The probability that P is not blocked equals Pr ( P ) = ∏ i ∈ Forbid ( P ) ( 1 − p i ) . Similarly, for a set of paths P = { P 1 , … , P h } , the forbidden index set of P is Forbid ( P ) = ∪ P ∈ P Forbid ( P ) . The probability that all paths in P are not blocked equals Pr ( P ) = ∏ i ∈ Forbid ( P ) ( 1 − p i ) .

Given a set of paths P , 1-survivability can be computed by using the inclusion-exclusion principle as follows: Survive 1 ( P ) = ∑ S ⊆ P , S ≠ ∅ ( − 1 ) | S | + 1 Pr ( S ) View Source Right-click on figure for MathML and additional features. \begin{align}\text{Survive}_{1}(\mathcal{P})= \sum_{\mathcal{S} \subseteq \mathcal{P}, \mathcal{S} \neq \emptyset} (-1)\,^{\vert \mathcal{S}\vert + 1} \Pr(\mathcal{S})\notag \end{align} The computation of k -survivability is similar but more time-consuming. For a set of paths P and a positive integer k , we define comb ( P , k ) = { S | S ⊆ P , | S | = k } ; that is, comb ( P , k ) contains all k -subsets of P . Given a set of paths P , k -survivability can be computed by using the inclusion-exclusion principle: Survive k ( P ) = ∑ R ⊆ comb ( P , k ) , R ≠ ∅ ( − 1 ) | R | + 1 Pr ( ∪ S ∈ R S ) View Source Right-click on figure for MathML and additional features. \begin{align}\text{Survive}_{k}(\mathcal{P}) = \sum_{\mathbf{R} \subseteq \text{comb}(\mathcal{P}, k), \mathbf{R} \neq \emptyset} (-1)\,^{\vert \mathbf{R}\vert + 1} \Pr(\cup_{\mathcal{S} \in \mathbf{R}}\mathcal{S})\notag\end{align}
B. Computing k -Survivability Under the Variable Trap Model

Let M = { ( A i , p i ) } | M | i = 1 be a variable trap model. Each variable trap A i can be represented as a collection of fixed traps and their probabilities: A i = { ( F i , j , p i , j ) } | A i | j = 1 . Given a path P on a graph G , the forbidden index set of P with respect to the i -th variable trap is Forbid ( P , i ) = { j | P ∩ F i , j ≠ ∅ } . The probability that P is not blocked equals Pr ( P ) = ∏ i ( 1 − ∑ j ∈ Forbid ( P , i ) p i , j ) . The calculation of k -survivability can be derived in the same manner as under the fixed trap model.
SECTION IV.
Theoretical Results

In this section, we show that k SP is NP-hard. We also show that maximizing k -survivability leads to diversity in the sense that at most k robots will follow the same path, if other paths are available.
A. NP-Hardness of k SP

We show that k SP under the uniform fixed trap model is NP-hard with n = k = 1 . Since the fixed trap model is a special case of the variable trap model, k SP under the variable trap model is also NP-hard.

Our proof, similar to the NP-completeness proof of the minimum color path problem [28] , is a reduction from the minimum set cover problem (MSCP), defined below, to k SP .

Input = ( S , C ) , where

    S = { 1 , … , a } is a set of positive integers from 1 to a .

    C = { C 1 , … , C b } is a collection of subsets of S .

Output = C ′ ⊆ C a minimum cardinality collection of subsets whose union is S .
Theorem 1:

k SP under the uniform fixed trap model with n = k = 1 is NP-hard.
Proof:

Let ( S , C ) be an instance of MSCP. We construct an instance ( G , M , { ( s , g ) } , 1 ) of k SP in polynomial time such that an optimal solution in k SP can be transformed into a minimum set cover of ( S , C ) and vice versa.

We construct G = ( V , E ) , which is a subgraph of a grid graph, as follows. First, for each element i ∈ S , we create three vertices v 0 , 0 i = ( 4 i , 0 ) , v 1 , 0 i = ( 4 i + 1 , 0 ) , and v 3 , 0 i = ( 4 i + 3 , 0 ) . We create edges ( v 0 , 0 i , v 1 , 0 i ) for all 1 ≤ i ≤ a and edges ( v 3 , 0 i , v 0 , 0 i + 1 ) for all 1 ≤ i < a . Our idea is to design a gadget for each element i ∈ S such that i can be covered by a set in C if and only if a solution of k SP , which is a path, passes through v 0 , 0 i and v 3 , 0 i .

Second, for each j ∈ { 1 , … , b } , we create vertices v 1 , j i = ( 4 i + 1 , j ) and v 3 , j i = ( 4 i + 3 , j ) for all 1 ≤ i ≤ a . Then, we create edges ( v 1 , j i , v 1 , j + 1 i ) and ( v 3 , j i , v 3 , j + 1 i ) for all 0 ≤ j < b . Intuitively, the j -th row represent the j -th set in C .

Finally, we create vertices v 2 , j i = ( 4 i + 2 , j ) , edges ( v 1 , j i , v 2 , j i ) , and edges ( v 2 , j i , v 3 , j i ) for each i ∈ C j . We use these vertices to model the constraint that every element in S is covered by a set in C . See Figure 4 .
Fig. 4. - Gadget used in the proof of Theorem 1.
Fig. 4. - Gadget used in the proof of Theorem 1.
Fig. 4.

Gadget used in the proof of Theorem 1 .

Show All

The uniform fixed trap model is M = { ( F j , p ) } b j = 1 for an arbitrary choice p ∈ ( 0 , 1 ) , where F j = { v 2 , j i | i ∈ C j } . The start vertex is v 0 , 0 1 and the goal vertex is v 3 , 0 a .

Let P be an optimal solution of the instance ( G , M , { ( v 0 , 0 1 , v 3 , 0 a ) } , 1 ) of k SP . By the construction of the graph, P passes every vertex v 3 , 0 i for all 1 ≤ i ≤ a . Moreover, for each 1 ≤ i ≤ a , the only way to get v 3 , 0 i is to pass through a vertex v 2 , j i for some 1 ≤ j ≤ b . Since v 2 , j i exists if and only if i ∈ C j , the set C ′ = { C j | ∃ 1 ≤ i ≤ a P  passes  v 2 , j i } is a set cover of S .

Moreover, since all traps have the same probability, maximizing 1-survivability is the same as minimizing { j | ∃ 1 ≤ i ≤ a P  passes  v 2 , j i } . Hence, C ′ is also an optimal solution of MSCP.

Transforming an optimal solution of MSCP to an optimal solution of k SP can be done similarly.

Note that this reduction relies on the fact that individual fixed traps might be formed from disconnected sets of vertices. However, even if we restrict individual fixed traps to be contiguous, the problem still appears to be hard, since k SP under the uniform fixed trap model with n = k = 1 can be used to solve the barrier resilience problem [29] . The complexity of the barrier resilience problem is still open and currently no polynomial time algorithm exists.

Even approximating an optimal solution is hard:
Theorem 2:

No polynomial time algorithm with constant approximation ratio for k SP with n = k = 1 under the uniform fixed trap model exists unless P = N P .
Proof:

We show that if a r -approximation polynomial time algorithm for k SP exists for some constant r , then we can solve MSCP in polynomial time.

Let ( S , C ) be an instance of MSCP and c be the size of a minimum set cover. By using the same reduction as in the proof of Theorem 1 , we obtain an instance ( G , M , { ( s , g ) } , 1 ) of k SP . Since c is the size of a minimum set cover, the optimal solution of ( G , M , { ( s , g ) } , 1 ) has value ( 1 − p ) c .

Suppose that a r -approximation algorithm for k SP exists, 0 < r < 1 , and this approximation algorithm is guaranteed to find a solution with 1-survivability at least r ( 1 − p ) c . Since the choice of probability p in the reduction is arbitrary, we set p to be a value satisfying r > ( 1 − p ) . Because r ( 1 − p ) c > ( 1 − p ) c + 1 and a path can only pass through an integral number of fixed traps, the approximation algorithm must return a solution with value ( 1 − p ) c , which is an optimal solution of ( G , M , { ( s , g ) } , 1 ) and can be transformed into an optimal solution of ( S , C ) in polynomial time.
B. Properties of k SP

We now show that k -survivability leads to diverse paths.
Observation 3:

For k SP under the fixed trap model with k = 1 , if n paths with different forbidden index sets exist, then any optimal solution does not have duplicate paths.
Proof:

Since paths with the same forbidden index sets are either all-safe or all-blocked, using paths with different forbidden index sets improves 1-survivability.
Observation 4:

For k SP under the fixed trap model, if at least ⌈ n / k ⌉ paths with different forbidden index sets exist, then at most k robots follow the same path in an optimal solution.
Proof:

If more than k robots follow the same path, moving one robot to another path always improves k -survivability.

Note that when k increases, the number of different paths in optimal solutions may decrease. See figure 5 , which shows some high-survivability paths for different values of k .
Fig. 5. - Example paths with high $k$-survivability for different values of $k$ under the fixed 5-disc trap model.
Fig. 5. - Example paths with high $k$-survivability for different values of $k$ under the fixed 5-disc trap model.
Fig. 5.

Example paths with high k -survivability for different values of k under the fixed 5-disc trap model.

Show All

SECTION V.
Algorithms

In this section, we first describe a complete algorithm to find optimal solutions. Then, we describe a typically faster heuristic method to find good solutions. For simplicity, we assume that all robots have the same start s and the same goal g , but this assumption may be easily lifted.
A. Complete Algorithm

In this section, we design a complete state space search algorithm for k SP under the uniform fixed trap model with n = 2 and k = 1 . Although it is easy to extend this algorithm for larger k and n , solving even small problems becomes computationally infeasible with this approach.

We need several definitions. A path P is an ordered list of vertices. A path P ′ extends another path P , if P is a prefix of P ′ . A path P ′ is a feasible extension of P if either P ends at g and P ′ = P , or P does not end at g and P ′ extends P by one vertex. Let Ext ( P ) denote the set of all paths that end at g and are extensions of path P .

The complete algorithm is a state space search algorithm. Each state t consists of two simple paths ( P 1 , P 2 ) starting from s . A state ( P ′ 1 , P ′ 2 ) is a successor of a state ( P 1 , P 2 ) if P ′ 1 and P ′ 2 are feasible extensions of P 1 and P 2 respectively.

The initial state is ( ⟨ s ⟩ , ⟨ s ⟩ ) and the goal states are all states ( P 1 , P 2 ) that both P 1 and P 2 end at g . We will find one goal state with maximum 1-survivability.

Since the state space is a tree, we can use a brute-force approach to traverse the tree to find an optimal solution. In order to speed up the brute-force approach, we design a heuristic function h of states, where h ( t ) is an upper-bound of 1-survivability of all goal states that are reachable by state t . As long as h ( t ) is optimistic, then the tree search will find an optimal solution. Using the heuristic function, we can prune unnecessary branches and stop search when the algorithm reaches one of the goal states for the first time.

We construct a heuristic function h as follows. Remember that when n = 2 , 1-survivability of two paths P 1 and P 2 is Pr ( { P 1 } ) + Pr ( { P 2 } ) − Pr ( { P 1 , P 2 } ) . Suppose that there is a function h ^ for paths that h ^ ( P ) is an upper bound of Pr ( { P ′ } ) for all P ′ ∈ Ext ( P ) . Then, we obtain a heuristic function h ( ( P 1 , P 2 ) ) = h ^ ( P 1 ) + h ^ ( P 2 ) − Pr ( { P 1 , P 2 } ) .

Now, we show how to construct a function h ^ . Let M be the uniform fixed trap model. For any path P , 1-survivability of P is ( 1 − p ) | Forbid ( P ) | , which only depends on the size of Forbid ( P ) . Let LB ( P ) be the minimum number of additional fixed traps that any extension of path P must pass through to reach the goal. Formally, LB ( P ) = min P ′ ∈ Ext ( P ) | Forbid ( P ′ ) ∖ Forbid ( P ) | . View Source Right-click on figure for MathML and additional features. \begin{align*}\text{LB}(P) = \min_{P^{\prime} \in \text{Ext}(P)} \vert \text{Forbid}(P^{\prime}) \setminus \text{Forbid}(P)\vert.\end{align*} Then, ( 1 − p ) | Forbid ( P ) + LB ( P ) | is the least upper bound of Pr ( { P ′ } ) for all P ′ ∈ Ext ( P ) .

Note that computing LB ( P ) exactly is the same as solving k SP under the uniform fixed trap model with n = k = 1 , which is a NP-hard problem by Theorem 1 . In order to get an upper bound of all Pr ( { P ′ } ) , where P ′ is in Ext ( P ) , it suffices to obtain a lower bound of LB ( P ) .

Our idea of obtaining a lower bound of LB ( P ) is as follows. Let F i be a fixed trap that i does not belong to Forbid ( P ) . If an extension P ′ of P passes through one vertex of F i , then charge P ′ by 1 / | F i ∩ V | . Thus, if an extension P ′ of P passes through one v ∈ V , then we charge P ′ by ∑ i ∉ Forbid ( P ) , v ∈ F i 1 / | F i ∩ V | . The minimum charge of any extension of P that reaches the goal, LB ′ ( P ) , can be computed efficiently by using a shortest path algorithm.

It is easy to see that LB ′ ( P ) is a lower bound of LB ( P ) and we know LB ′ ( P ) ≤ LB ( P ) ≤ max i | F i | ⋅ LB ′ ( P ) . View Source Right-click on figure for MathML and additional features. \begin{align*}\text{LB}^{\prime}(P) \leq \text{LB}(P) \leq \max_i \vert F_i\vert \cdot \text{LB}^{\prime}(P).\end{align*} Thus, we can use h ^ ( P ) = ( 1 − p ) | Forbid ( P ) + LB ′ ( P ) | to obtain a heuristic function h .
B. Heuristic Algorithm

The previous algorithm uses a heuristic function for pruning, but is guaranteed to find optimal solutions. The heuristic algorithm described in this section does not provide this guarantee. There are three phases: path generation, path selection, and path improvement. Due to the high-dimensional search space of k SP , we first generate a set of candidate paths with size w ≫ n to reduce the search space to these w paths. Then, we heuristically find n paths among the set of candidate paths as an initial solution. Finally, we use local search to improve the solution until the process is stabilized. Algorithm 1 outlines the approach.
Algorithm 1. Heuristic algorithm for k SP

input : ( G , M , { ( s i , g i ) } n i = 1 , k , w , T ) ,where ( G , M , { ( s i , g i ) } n i = 1 , k ) is an instance of k SP , w is a parameter of the path generation, and T is a parameter of the path improvement.

output : n paths connecting ( s i , g i ) respectively.

R = path_generation( w )

S = path_selection( R )

S = path_replacement( S , R )

Q = ∅

while | Q | < T do

S = path_shortening( S )

Q = Q ∪ { S }

S = escape( S )

return the best solution in Q .

Since computation of k -survivability is potentially expensive, we only use the computation of k -survivability in the last phase. Moreover, this heuristic algorithm only needs a black box to compute k -survivability, and the same algorithm can be used for both fixed trap and variable trap models.
1) Path Generation

The purpose of this phase is to generate a set R of w ≫ n paths. We design two methods: random generation, and an iterative penalty approach.
a) Random generation method

To generate one random path, we generate a random spanning tree first and then pick the unique path between s and g on the tree. We repeat this process until w paths are generated.
b) Iterative penalty method

Another way to generate w paths is repeatedly apply a shortest path algorithm. After a shortest path P is found, we increase the edge weights of all edges in P and repeat. Akguün et al. discuss several variants of iterative penalty methods that have different ways to penalize the path [27] .
2) Path Selection

The purpose of this phase is to generate a set n paths among w candidate paths generated in the path generation phase. Although we can design an algorithm to find n paths that maximize k -survivability, since the computation of k -survivability is exponential in n , this approach would be expensive. Thus, our strategy is to use different heuristics to obtain an initial solution without evaluating k -survivability. Then, improve the initial solution based on k -survivability in the next phase.

We find an initial solution by solving a different but related optimization problem.
a) Distance-based heuristic

We use d G ( P , P ′ ) to denote the distance between two paths P and P ′ on a graph G . One candidate of the distance function is discrete Freéchet distance [7] and other candidates of distance function can be found in Knepper’s thesis [4] .

Based on the distance function, we can set up several optimization problems.

    remote-clique problem: find S = arg max S ⊆ R , | S | = n ∑ P , P ′ ∈ S d G ( P , P ′ ) . View Source Right-click on figure for MathML and additional features. \begin{align*}\mathcal{S} = \arg \max_{\mathcal{S} \subseteq \mathcal{R}, \vert \mathcal{S}\vert = n} \sum_{P, P^{\prime} \in \mathcal{S}} d_G(P, P^{\prime}).\end{align*}

    remote-edge problem: find S = arg max S ⊆ R , | S | = n min P , P ′ ∈ S , P ≠ P ′ d G ( P , P ′ ) . View Source Right-click on figure for MathML and additional features. \begin{equation}\mathcal{S} = \arg \max_{\mathcal{S} \subseteq \mathcal{R}, \vert \mathcal{S}\vert = n} \min_{P, P^{\prime} \in \mathcal{S}, P \neq P^{\prime}} d_G(P, P^{\prime}).\notag\end{equation}

    remote-pseudoforest problem: find S = arg max S ⊆ R , | S | = n ∑ P ∈ S min P ′ ∈ S , P ≠ P ′ d G ( P , P ′ ) . View Source Right-click on figure for MathML and additional features. \begin{equation}\mathcal{S} = \arg \max_{\mathcal{S} \subseteq \mathcal{R}, \vert \mathcal{S}\vert = n} \sum_{P \in \mathcal{S}} \min_{P^{\prime} \in \mathcal{S}, P \neq P^{\prime}} d_G(P, P^{\prime})\notag .\end{equation}

The remote-edge problem is sensitive to the closest-pair of paths, since two solutions with the same closest pair of paths will have the same minimum distance, even if one solution is much longer than the other [7] . Since all these maximum diversity problems are NP-hard, we use heuristic methods to find a good solution [30] .

b) Survivability-based heuristic

We also can use Erickson’s and LaValle’s notion of survivability [14] in our heuristic. We heuristically find n paths with high survivability and use this set as an initial solution.
3) Path Improvement

The purpose of this phase is to improve k -survivability of an initial solution S by using local operations: path replacement and path shortening . Path replacement iteratively replaces one path to improve k -survivability. Path shortening iteratively replaces a subpath of one path to improve k -survivability.

We first apply path replacement to improve k -survivability and then apply path shortening. Since path improvement is a local search method, the search process may be trapped in a local maximum. Thus, when the search reaches a local maximum, we use a randomized method to escape from the local maximum and then apply path shortening again.

a) Path replacement: Replace one path in the current solution by another path in R giving the maximum k -survivability for the set; repeat until no further improvement can be made.

b) Path shortening: Find the maximum improvement of k -survivability that can be made by replacing one subpath of a path in the current solution by a shortest path on G connecting the endpoints of the subpath. Repeat shortening until no further improvement can be made.

Although path shortening is very effective under the fixed r -disc trap model, path shortening may not be useful in general models. Moreover, for k SP with k > 1 , shortening just one path at a time may lead to getting trapped in local maxima easily. For example, Figure 5c shows such a case; all four overlapping paths would need to be shortened simultaneously and in the same way to allow the four robots to follow a better route.

c) Escape from local maxima: Since path shortening is a local search method, path shortening may get trapped by local maxima. When no path shortening can be made, we randomly pick a path in the current solution and reroute a subpath randomly. Then, run the path shortening method again to reach another local maximum. We repeat this process until T local maxima are found for a threshold value T , and choose the best.
SECTION VI.
Experimental Results

In this section, we describe several experiments (in simulation) on different heuristic methods, and compare them in terms of computation time and k -survivability. Remember that our heuristic method consists of three phases. We suggest two choices in the path generation phase: random generation (RG) and iterative penalty (IP) methods. We suggest four choices in the path selection phase: remote-clique (RC), remote-edge (RE), remote-pseudoforest (RF), and survivability (SU). Finally, we test two additional methods in the path selection phase:

    random (R): pick n paths in R uniformly at random.

    first n paths (FN): if the paths are generated by the iterative penalty method, we pick the first n generated paths.

A. Experiment Setup

We used an environment containing 2500 vertices and 80 rectangular obstacles under the fixed r -disc trap model, where r = 5 and p = 0.004 . The environment is shown in Figure 5 . We used the heuristic algorithm to find n = 5 paths with high k -survivability, for k = 1 … 4 . We generated w = 100 paths in the path generation phase and found T = 3 local maxima in the path improvement phase.

The heuristic algorithm is implemented in Java and all tests were conducted on a laptop (2010 MacBook Pro) with an Intel Core i5 2.4 GHz CPU and 8GB RAM. We repeated the experiments ten times and took the average of the results.
B. Results

We first show k -survivability of each phase for each method in Figure 6 . When k is small, path shortening effectively improves the k -survivability and the iterative penalty method tends to perform better. However, when k = 4 , path shortening is not effective, since our algorithm only tries to shorten one path at a time but escaping from a local minimal may require shortening several paths at the same time.
Fig. 6. - All methods’ $k$-survivability at the end of path selection phase, path improvement phase and path shortening phase. All methods that are using random generation method are represented by solid lines and all methods that are using iterative penalty method are represented by dotted lines. Different methods in the second phase are represented by different colors.
Fig. 6. - All methods’ $k$-survivability at the end of path selection phase, path improvement phase and path shortening phase. All methods that are using random generation method are represented by solid lines and all methods that are using iterative penalty method are represented by dotted lines. Different methods in the second phase are represented by different colors.
Fig. 6.

All methods’ k -survivability at the end of path selection phase, path improvement phase and path shortening phase. All methods that are using random generation method are represented by solid lines and all methods that are using iterative penalty method are represented by dotted lines. Different methods in the second phase are represented by different colors.

Show All

We measured the running time for all methods maximizing k -survivability; the running times for each method for k = 1 are shown in Table I . The naïve algorithms IP + FN and RG + R are the most efficient methods. This may hint that although k SP is hard in general, k SP under the fixed r -disc trap model may be tractable. For k > 1 , the naïve algorithm IP + FN is slightly faster than other methods, but we omit the results due to the page limitation.
TABLE I Running Times Measured in Millisecond for k = 1
Table - Running Times Measured in Millisecond for $k = 1$

SECTION VII.
Conclusion & Future Work

This work is preliminary, and considers only simple k -survivability problems; however, we believe that k -survivability motivates a wealth of interesting practical and theoretical problems. For example, the problem of k -survivability might be reversed to plan defenses against infiltration or attack. Not all applications of k -survivability need be violent. For example, k -survivability can be considered in the context of visibility or stealth, as has turned out to be central in multi-robot pursuit-evasion games [31] – [33] for search-and-rescue operations. With a model of feedback or communication, we imagine that k -survivability might also provide some insights into collaboration and cooperation problems such as those that arise in sports [34] or control of large robot swarms [35] .

Several future directions of theoretical research are possible. Continuous-space models might be approached using variational calculus or optimal control techniques [15] , [16] . Obstacles such that the risk of a path depends on the distance between the robot and the obstacle, as for paths in mined water [18] are a potential future direction, as are time-dependent obstacles.

Authors
Figures
References
Citations
Keywords
Metrics
Footnotes
More Like This
Probability-based Path Planning for Multi-Robot Systems with Stochastic Behavior in a Grid Map

2021 IEEE International Conference on Systems, Man, and Cybernetics (SMC)

Published: 2021
Path Planning of Multi-Robot Systems With Boolean Specifications Based on Simulated Annealing

IEEE Robotics and Automation Letters

Published: 2022
Show More
References
1.
M. S. Branicky, R. A. Knepper and J. J. Kuffner, "Path and trajectory diversity: Theory and algorithms", Proc. IEEE Int. Conf. Robot. Autom. ICRA , pp. 1359-1364, May 2008.
Show in Context View Article
Google Scholar
2.
R. A. Knepper and M. T. Mason, "Path diversity is only part of the problem", Proc. IEEE Int. Conf. Robot. Autom. ICRA , pp. 3224-3229, May 2009.
Show in Context View Article
Google Scholar
3.
C. J. Green and A. Kelly, "Toward optimal sampling in the space of paths" in Robotics Research, New York, NY, USA:Springer, vol. 66, pp. 281-292, 2011.
Show in Context CrossRef Google Scholar
4.
R. A. Knepper, "On the fundamental relationships among path planning alternatives", Jun. 2011.
Show in Context Google Scholar
5.
R. A. Knepper, S. S. Srinivasa and M. T. Mason, "Toward a deeper understanding of motion alternatives via an equivalence relation on local paths", Int. J. Robot. Res. , vol. 31, no. 2, pp. 167-186, Feb. 2012.
Show in Context CrossRef Google Scholar
6.
A. H. Quispe, T. Kunz and M. Stilman, "Generation of diverse paths in 3D environments", Proc. IEEE/RSJ Int. Conf. Intell. Robots Syst. IROS , pp. 5994-5999, Nov. 2013.
Show in Context CrossRef Google Scholar
7.
C. Voss, M. Moll and L. E. Kavraki, "A heuristic approach to finding diverse short paths", Proc. IEEE Int. Conf. Robot. Autom. ICRA , pp. 4173-4179, May 2015.
Show in Context CrossRef Google Scholar
8.
D. Xu, Y. Chen, Y. Xiong, C. Qiao and X. He, "On the complexity of and algorithms for finding the shortest path with a disjoint counterpart", IEEE/ACM Trans. Netw. , vol. 14, no. 1, pp. 147-158, Feb. 2006.
Show in Context CrossRef Google Scholar
9.
P. Dell’Olmo, M. Gentili and A. Scozzari, "On finding dissimilar pareto-optimal paths", Eur. J. Oper. Res. , vol. 162, no. 1, pp. 70-82, Jun. 2005.
Show in Context CrossRef Google Scholar
10.
B. Chandra and M. M. Halldórsson, "Approximation algorithms for dispersion problems", J. Algorithms , vol. 38, no. 2, pp. 438-465, Feb. 2001.
Show in Context CrossRef Google Scholar
11.
M. J. Kuby, "Programming models for facility dispersion: The p-dispersion and maxisum dispersion problems", Geogr. Anal. , vol. 19, no. 4, pp. 315-329, Sep. 1987.
Show in Context CrossRef Google Scholar
12.
I. D. Moon and S. S. Chaudhry, "An analysis of network location problems with distance constraints", Manage. Sci. , vol. 30, no. 3, pp. 290-307, Mar. 1984.
Show in Context CrossRef Google Scholar
13.
S. S. Ravi, D. J. Rosenkrantz and G. K. Tayi, "Heuristic and special case algorithms for dispersion problems", Oper. Res. , vol. 42, no. 2, pp. 299-310, Mar. 1994.
Show in Context CrossRef Google Scholar
14.
L. H. Erickson and S. M. LaValle, "Survivability: Measuring and ensuring path diversity", Proc. IEEE Int. Conf. Robot. Autom. ICRA , pp. 2068-2073, May 2009.
Show in Context View Article
Google Scholar
15.
M. Zabarankin, S. Uryasev and R. Murphey, "Aircraft routing under the risk of detection", Nav. Res. Logist. (NRL) , vol. 53, no. 8, pp. 728-747, Dec. 2006.
Show in Context CrossRef Google Scholar
16.
B. Miller, K. Stepanyan, A. Miller and M. Andreev, "3D path planning in a threat environment", Proc. IEEE Conf. Decis. Control Eur. Control Conf. CDC-ECC , pp. 6864-6869, Dec. 2011.
Show in Context CrossRef Google Scholar
17.
E. Boidot, A. Marzuoli and E. Feron, "Optimal planning strategy for ambush avoidance", Proc. Workshop Artif. Intell. Transp.: Advice Interactivity Actor Model. Conf. Artif. Intell. AAAI , Jan. 2015.
Show in Context Google Scholar
18.
L. Babel and T. Zimmermann, "Planning safe navigation routes through mined waters", Eur. J. Oper. Res. , vol. 241, no. 1, pp. 99-108, Feb. 2015.
Show in Context CrossRef Google Scholar
19.
J. Hershberger and S. Suri, "An optimal algorithm for euclidean shortest paths in the plane", SIAM J. Comput. , vol. 28, no. 6, pp. 2215-2256, 1999.
Show in Context CrossRef Google Scholar
20.
S. Bhattacharya, M. Likhachev and V. Kumar, "Topological constraints in search-based robot path planning", Auton. Robots , vol. 33, no. 3, pp. 273-290, Oct. 2012.
Show in Context CrossRef Google Scholar
21.
S. D. Eriksson-Bique et al., "Geometric k shortest paths", Proc. ACM-SIAM Symp. Discrete Algorithms SODA , pp. 1616-1625, Jan. 2015.
Show in Context Google Scholar
22.
J. Y. Yen, "Finding the k shortest loopless paths in a network", Manage. Sci. , vol. 17, no. 11, pp. 712-716, Jul. 1971.
Show in Context CrossRef Google Scholar
23.
J. W. Suurballe, "Disjoint paths in a network", Networks , vol. 4, no. 2, pp. 125-145, 1974.
Show in Context CrossRef Google Scholar
24.
H. Joksch, "The shortest route problem with constraints", J. Math. Anal. Appl. , vol. 14, no. 2, pp. 191-197, May 1966.
Show in Context CrossRef Google Scholar
25.
R. Bhandari, Survivable Networks: Algorithms for Diverse Routing, New York, NY, USA:Springer, vol. 477, 1999.
Show in Context Google Scholar
26.
J. P. Rohrer, A. Jabbar and J. P. G. Sterbenz, "Path diversification for future internet end-to-end resilience and survivability", Telecommun. Syst. , vol. 56, no. 1, pp. 49-67, May 2014.
Show in Context CrossRef Google Scholar
27.
V. Akgün, E. Erkut and R. Batta, "On finding dissimilar paths", Eur. J. Oper. Res. , vol. 121, no. 2, pp. 232-246, Mar. 2000.
Show in Context CrossRef Google Scholar
28.
S. Yuan, S. Varma and J. P. Jue, "Minimum-color path problems for reliability in mesh networks", Proc. IEEE Int. Conf. Comput. Commun. INFOCOM , pp. 2658-2669, Mar. 2005.
Show in Context Google Scholar
29.
D. Y. C. Chan and D. G. Kirkpatrick, "Multi-path algorithms for minimum-colour path problems with applications to approximating barrier resilience", Theor. Comput. Sci. , vol. 553, pp. 74-90, Oct. 2014.
Show in Context CrossRef Google Scholar
30.
R. Martí, M. Gallego, A. Duarte and E. G. Pardo, "Heuristics and metaheuristics for the maximum diversity problem", J. Heuristics , vol. 19, no. 4, pp. 591-615, Aug. 2013.
Show in Context CrossRef Google Scholar
31.
T. H. Chung, G. A. Hollinger and V. Isler, "Search and pursuit-evasion in mobile robotics—A survey", Auton. Robots , vol. 31, no. 4, pp. 299-316, Nov. 2011.
Show in Context CrossRef Google Scholar
32.
R. R. Murphy, Disaster Robotics, Cambridge, MA, USA:MIT Press, Feb. 2014.
Show in Context Google Scholar
33.
E. U. Acar and H. Choset, "Sensor-based coverage of unknown environments", Int. J. Robot. Res. , vol. 21, no. 4, pp. 345-366, Apr. 2002.
Show in Context CrossRef Google Scholar
34.
J. Biswas, J. P. Mendoza, D. Zhu, B. Choi, S. D. Klee and M. M. Veloso, "Opponent-driven planning and execution for pass attack and defense in a multi-robot soccer team", Proc. Int. Conf. Auton. Agents Multi-Agent Syst. AAMAS , pp. 493-500, May 2014.
Show in Context Google Scholar
35.
M. Rubenstein, C. Ahler, N. Hoff, A. Cabrera and R. Nagpal, "Kilobot: A low cost robot with scalable operations designed for collective behaviors", Robot. Auton. Syst. , vol. 62, no. 7, pp. 966-975, Jul. 2014.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
