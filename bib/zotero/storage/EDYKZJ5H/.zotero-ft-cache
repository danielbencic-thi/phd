2008 IEEE International Conference on Robotics and Automation Pasadena, CA, USA, May 19-23, 2008

Path and Trajectory Diversity: Theory and Algorithms

Michael S. Branicky∗

Ross A. Knepper†

James J. Kuffner†

∗EECS Department Case Western Reserve University 10900 Euclid Avenue, Glennan 517B
Cleveland, OH, 44106, USA mb@case.edu

†The Robotics Institute Carnegie Mellon University
5000 Forbes Avenue Pittsburgh, PA, 15213, USA {rak,kuffner}@ri.cmu.edu

Abstract— We present heuristic algorithms for pruning large sets of candidate paths or trajectories down to smaller subsets that maintain desirable characteristics in terms of overall reachability and path length. Consider the example of a set of candidate paths in an environment that is the result of a forward search tree built over a set of actions or behaviors. The tree is precomputed and stored in memory to be used online to compute collision-free paths from the root of the tree to a particular goal node. In general, such a set of paths may be quite large, growing exponentially in the depth of the search tree. In practice, however, many of these paths may be close together and could be pruned without a loss to the overall problem of path-ﬁnding. The best such pruning for a given resulting tree size is the one that maximizes path diversity, which is quantiﬁed as the probability of the survival of paths, averaged over all possible obstacle environments. We formalize this notion and provide formulas for computing it exactly. We also present experimental results for two approximate algorithms for path set reduction that are efﬁcient and yield desirable properties in terms of overall path diversity. The exact formulas and approximate algorithms generalize to the computation and maximization of spatio-temporal diversity for trajectories.
I. INTRODUCTION
Mobile robot applications most often impose time and resource constraints on their motion planning software. Real robotic systems replan at a fast rate in order to incorporate a constant stream of new perception data. Due to time constraints, most planners operate by considering a relatively small set of possible actions and commanding the best choice before the next execution deadline arrives. Examples of such systems include ground vehicles (driving on the highway at high speed or navigating through cluttered, off-road terrain), unmanned aerial vehicles including rotary and ﬁxedwing aircraft. Failure to generate a plan quickly and with sufﬁcient lookahead risks damage to the vehicle. This concern is particularly acute in the case of ﬁxedwing aircraft, which do not possess the capability to stop in place if the planner misses its deadline.

(a)

(b)

(c)

(d)

Fig. 1. Path sets: (a) The full 34,295-path data set; (b) The 1% subset generated by the Inner-Product algorithm; (c) The 1% subset generated by the Inclusion-Exclusion algorithm; (d) The 1% subset generated by random sampling from the full path set.

One popular strategy for improving online planning time is to precompute a set of candidate actions a priori (e.g. [1], [2], [3], [4], [5]). The advantage of this is that no online computation time is wasted in considering paths that the robot cannot execute. The drawback is that a path set generated ofﬂine may not incorporate any knowledge of particular obstacle conﬁgurations.
Our work discusses the problem of evaluating a path or set of paths in the context of unknown obstacle location and density in the world. Two theoretical algorithms for computing an exact probability of collision are derived. Two approximate algorithms (Inner-Product and Inclusion-Exclusion) are then presented, which provide a tractable solution to the problem of selecting a diverse set of paths. These algorithms cull a large path set down to a smaller, more manageable size, while attempting to maximize the robustness of the path set

978-1-4244-1647-9/08/$25.00 ©2008 IEEE.

1359

Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

(versus other path sets of the same size) with respect to unknown obstacle conﬁgurations; see Fig. 1. The choice of path set size for a particular application may depend on constraints such as planner requirements, available memory, and CPU performance. The reduced path sets are analyzed with respect to their survivability in the presence of obstacles.
A. Background
Building and storing discretized representations of state reachability and conﬁguration space (C-space) volumes has been a major research thrust in robot motion planning. Popular sampling-based planning algorithms such as the probabilistic roadmap (PRM) [6] and Rapidly-exploring Random Trees (RRTs) [7] and their variants build graphs and trees of connected conﬁgurations for path planning in high-dimensional search spaces with obstacles. Some of the key research issues include developing good heuristics for placing samples, connecting pairs of samples, enforcing constraints, and exploring tradeoffs between what must be computed at runtime and what can potentially be precomputed (e.g. [8], [9]).
Leven and Hutchinson [2] precomputed a roadmap of samples in the conﬁguration space to be stored in memory and used for efﬁcient planning online. Although they did not consider the optimal placement of roadmap nodes, the network of paths they used and how well the roadmap covers the reachable conﬁguration space is directly related to our problem of path diversity. In particular, our deﬁnition of path diversity has some of the same motivations as their notions of “ρ-robustness” and “edge robustness.” Burns and Brock [10] explore techniques aimed at optimally placing samples for path planning using a machine learning framework. In this case, the focus was on quickly discovering narrow passages in the conﬁguration space for a given problem during runtime. Ramamoorthy et al. [11] explore “lowdiscrepancy curves” that provide efﬁcient, uniform coverage of conﬁguration spaces (up to a dispersion error).
The idea of trading off memory for runtime performance in the context of path planning has become popular across a number of different ﬁelds. In the controls literature, storing sets of trim trajectories for helicopter dynamic models and the notion of composing them to form obstacle-avoiding paths has been investigated by Frazzoli [1]. Trim trajectories are essentially predeﬁned maneuvers that are invariant to some state variables (such as the global translation and rotation). These invariant maneuvers are useful because they allow a high level planner to efﬁciently reason about local state reachability. For methods and a discussion of

discretization and reachability issues in the context of continuous control systems, see Bicchi et al. [12]. In the computer animation literature, Go et al.[3] precompute a dense table of state-dependent trajectories that are afﬁne invariant in order to avoid having to forward integrate the dynamics of simulated spacecraft during runtime. Lau and Kuffner [4] use precomputed trees of captured human motion data to efﬁciently plan animations for multiple characters interactively. In ﬁeld robotics, the idea of maintaining multiple path alternatives for emergency stops or avoidance maneuvers has a fairly long history. Sets of steering paths were used for the robot that won the 2005 DARPA Grand Challenge for autonomous driving [5]. NASA’s Mars rovers also utilize sets of steering curves for deciding local maneuvers [13].
Our work is most closely related to the work of Green and Kelly [14], which formulates the problem in terms of sampling in the continuous space of paths. Candidate paths are selected that are most likely to produce a solution given a probabilistic representation of all possible environments. Computing the optimal mutual separation between paths is shown to be related to the maximum k-facility dispersion problem which is known to be NP-hard.
II. PATH DIVERSITY
Given a set of paths, we say that a particular subset of paths (of a ﬁxed size) maximizes path diversity if that subset is the most robust to the maintenance of feasible paths regardless of the placement of obstacles. Here, we measure such robustness by the probability of the maintenance of paths, averaged over all possible obstacle environments.1 Therefore, in the case of pruning down a set of paths to a subset of a certain size, we wish to pick the subset that minimizes the probability of the failure (due to blocked paths). Below, we formalize this notion and provide formulas for computing it.
Let there be a ﬁnite set of paths [P = {p1, p2, . . . , pn}, each of which lives in a space that has been partitioned into a set of cells C = {c1, c2, . . . , cm}.
In this way, each path may be discretely represented by the sequence of cells through which it traverses.2
Given this setup, we pose the following two problems: Problem 1 (Path Diversity Measure): Compute the probability (uniformly over all possible environments) that at least one of the paths in P is not blocked, denoted Ppnb(P) [read this as “path-not-blocked”].
1In this paper, we consider all possible environments to be equally likely. However, the ideas generalize to arbitrary distributions.
2Actually for path diversity, it is only the set of cells traversed, and not their sequence that matters. The notion directly generalizes to trajectories by considering the sequence.

1360
Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

Problem 2 (Maximal Path Diversity Pruning): Given k < n, ﬁnd the subset P′ ⊂ P of size k such that Ppnb(P′) is maximized.
Below, we make use of the following notation. |A|
denotes the cardinality of set A. Thus, |P| = n and |C| = m. 2A denotes the power set of set A. Note that |2C| = 2|C| = 2m. We will also use the predicate notation of
Knuth: [ψ] equals 1 if the predicate ψ is true; 0, if it
is false. We will use Pcnb(A) [read this as “cells-notblocked”] as a shorthand for Ppnb({A}). In particular, Pcnb(pi) is shorthand for Ppnb({pi}), and it means that none of the cells in pi are blocked.
For ease of notation below, we will use the path name,
pi, to refer both to the path in P and the set of cells in C that represents that path, where the meaning will be

clear from context. Note that using this representation, P is a collection of sets of cells.
There are at least two ways to compute Ppnb(P). The ﬁrst simply sums over all possible environments (i.e.,

conﬁgurations of obstacles), checking which ones still

possess possible paths:

Ppnb (P )

=

1 2|C|

[∃pi s.t. C ∩ pi = ∅]. (1)

C ∈2C

The complexity of this algorithm is O(mn2m). The second approach applies the inclusion-exclusion

principle to sums over all possible (unions of) subsets of paths, with complexity O(mn2n):

Ppnb(P) = P rob(p1 not blocked or p2 not blocked or . . . pn not blocked)

= Pcnb(pi) − Pcnb(pi ∪ pj )

i

i=j

+

Pcnb(pi ∪ pj ∪ pk) − · · ·

i=j=k

+ (−1)n−1Pcnb(p1 ∪ p2 ∪ · · · ∪ pn)

=

(−1)|A|−1Pcnb (∪pi∈Api) ,

A∈2P \∅
(2)

It only remains to show how to compute Pcnb(A), for a singleton set of cells A. However, this is given by

Pcnb(A) =

2m−|A| 2m

=

1 2|A|

,

(3)

which simply counts the fraction of environments that

do not include as obstacles any of the cells in set A.

Using (1), (2) and (3), Problems 1 and 2 can be solved

in a brute-force manner, but only efﬁciently for small m

and n. The problems we are interested in have m ≈

105 and n ≈ 104. Therefore, we must ﬁnd sub-optimal

approximation algorithms to solve these problems.

Goal

(a)

2 1

4 3

Start

Goal

4 8 12 16

(b)

3 7 11 15 2 6 10 14

1 5 9 13

Start

Fig. 2. Environments for (a) Example 1 and (b) Example 2.

III. EXAMPLES
Let’s consider a few examples to ﬁx ideas. Example 1: Consider the 2 × 2 grid world of Figure 2(a). Consider two paths connecting the Start to the Goal: p1 = {1, 2} and p2 = {3, 4}. There are 24 = 16 possible environments, depending on whether cells 1–4 contain an obstacle or not:

0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.

Using (1), 7 of these environments (0000, 0001, 0010, 0011, 0100, 1000, 1100) leave at least one of the paths unblocked. So, Ppnb(P) = 7/16. Using (2), we compute

Ppnb(P) = Pcnb(p1) + Pcnb(p2) − Pcnb(p1 ∪ p2)

=

22 24

+

22 24

−

24 24

=

7 16

.

(4)

Finally, because these paths are independent (i.e., nonoverlapping), we can see this another way: there are three ways to block p1 and three independent ways to block p2, for a total of 3 · 3 = 9 ways to block out of 16. Hence, 7 of 16 are not blocked.
Example 2: Consider the 4 × 4 grid world of Figure 2(b) and the four paths connecting the Start and Goal:

p1 = {1, 2, 3, 4}, p3 = {9, 10, 11, 12},

p2 = {5, 6, 7, 8}, p4 = {13, 14, 15, 16}.

There are 216 = 65536 possible environments. Therefore, we will use (2):

Ppnb (P )

=

4

212 216

−

6

28 216

+

4

24 216

−

20 216

=

14911 65536

.

Again, because these paths are independent (i.e., nonoverlapping), we can see this another way: there are 15 ways to block each pi, for a total of 154 = 50625 ways to block all four. This leaves 65536 − 50625 = 14911 environments which do not block all four paths.
Example 3: Consider the setup of Example 1, but add the winding path p3 = {1, 3, 4, 2}. It is easy to see that this path will not change Ppnb(P) using (1), because p3 has a non-zero intersection (hence is blocked) by all 9
environments that blocked the original set.

1361
Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

Example 4: Consider the same setup as in Example 2, but add the winding path

p5 = {1, 5, 9, 13, 14, 10, 6, 2, 3, 7, 11, 15, 16, 12, 8, 4}.
Arguing as in Example 3, Ppnb(P) will not change using (1). It can also be shown that it will not change using (2). The reason is that p5 itself (and hence any path set that contains it) contains all 16 cells. Thus, Pcnb(p5) and Ppnb for each subset of P that contains it is equal to 1/216. The result then follows from the fact that

n
0 = (1 − 1)n = (−1)i

n i

.

(5)

i=0

IV. APPROXIMATION ALGORITHMS

To approximately solve Problem 2, we propose a
greedy algorithm. First, consider mapping each path pi to an m-digit binary string bi whose jth digit is 1 if cell cj is in pi and 0, otherwise. Thus, for Example 2 above:

b1 = 1111000000000000, b2 = 0000111100000000, b3 = 0000000011110000, b4 = 0000000000001111.

Deﬁne the weight of binary string, w(b), to be the number of 1’s in string b. Thus, w(bi) = 4 for each string above. Finally, deﬁne component-wise addition of two strings s ⊕ t. With these, we provide a greedy algorithm for Problem 2, which has complexity O(mn2):

PATH DIVERSITY INNER-PRODUCT(P)

1 bfirst ← minb∈P w(b) 2 P′ ← {bfirst}

3 s ← bfirst

4 repeat

5

bnext ← minb∈P dotproduct(b, s)

6

P = P − {bnext}

7

P′ ← P′ ∪ {bnext}

8

s ← s ⊕ bnext

9 until |P′| = k

A different greedy algorithm can be formulated using an approximation of (2). When adding a new path p to P, the two most signiﬁcant terms for the incremental change in Ppnb(P) are

n

f (p) = Pcnb(p) − pcnb(p ∪ pi).

(6)

i=1

Consistent with the weight of its binary string, we will deﬁne the weight of a path p to be the number of distinct cells it contains. If w(p) = l and w(pi) = wi, w(p ∩ pi) = vi, for i = 1, . . . , n, then f (p) reduces to

f (p)

=

1 2l

−

n

1 2wi +l−vi

=

1 2l

1−

n

1 2wi −vi

.

i=1

i=1

The idea then, is to pick the p to add at each step that maximizes this expression:

PATH DIVERSITY INCLUSION-EXCLUSION(P)

1 pfirst ← minp∈P w(p) 2 P′ ← {pfirst}

3 s ← pfirst

4 repeat

5

pnext ← maxp∈P f (p)

6

P = P − {pnext}

7

P′ ← P′ ∪ {pnext}

8 until |P′| = k

Both algorithms run in time O(mn2). For the latter, note that an exact implementation of the powers of two on m bits cannot rely on hardware ﬂoating point.
Just as in [14], both of these algorithms exhibit the useful property that they can be terminated at any iteration count to return the n best paths from the set. The key distinction between them is their treatment of space unoccupied by any path in the subset. When choosing a path which occupies previously unreachable cells, the Inner-Product algorithm regards each cell as free (with the exception of the initial path selection). By contrast, the Inclusion-Exclusion algorithm is computing the probability of a collision. Under the assumption that each cell is occupied with probability 0.5, the penalty for extending a path by a single cell is that its survival is half as likely. The contrasting reward that a longer path can accomplish more is excluded from the analysis, resulting in the behavior borne out in the results below.

V. EXPERIMENTAL RESULTS
We applied the approximate path diversity algorithms described above to a large example problem consisting of 34,295 paths of various lengths. These paths were generated from motion capture data for use in graphical human character animation and are the same data used in [4]. The path set was culled down to a variety of sizes using each of the greedy algorithms described above. Since the algorithms require a cellular discretization of space, the world was divided into a rectangular grid of 85 by 70 cells, for a total of 5950 cells. Because we are using a square grid and an irregularly-shaped path set, only 3030 of those cells are traversed by any path. The run time of each of these algorithms was reasonable even for a large problem such as this, in which an exhaustive brute force search would be intractable. The path counts used in this analysis are shown in Table I, along with the run times for each algorithm on each size set.
To aid in visualization, Fig. 1 shows the full path set as well as two example subsets of equal path count representing these two algorithms. For comparison purposes,

1362
Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

Table I. Path set sample sizes and algorithm run times.

Path % of Total Inner-Product Inclusion-Exclusion

Count

Paths

Run Time (sec) Run Time (sec)

343

1

2

260

686

2

3

527

1715

5

7

1438

3430

10

13

3898

6859

20

26

14,189

34,295

100

–

–

a third path sampling algorithm was introduced, which randomly samples paths from the full set. An equalsized random path set is also shown in Fig. 1. From this ﬁgure, it is clear that the path set resulting from the Inner-Product algorithm is more compact than the others, although it contains the same number of paths. This compactness reﬂects the tendency of the algorithm to select the shortest paths ﬁrst, since they are most likely to avoid collision with obstacles. This behavior is appropriate so long as all the curves in the original path set are legitimate edges for selection. Some applications may may require that all edges be equal in length, but we leave this issue as future work.
Since these algorithms were designed to maximize the probability that at least one path will not be blocked by any arbitrary obstacle conﬁguration, it is expected that a larger number of paths in the set would survive such obstacles as compared with an uninformed selection of paths. In order to test this speculation, the cells reachable by the full path set were slowly ﬁlled with obstacles one-by-one in random order. Each time a new obstacle was found to intersect a path in one of the sets, that path was removed. At each stage, the fraction of paths from each set which survive was plotted. The results of this experiment for a 1% path set, averaged over one thousand trials, are presented in Fig. 3. Here, the vertical axis represents normalized surviving paths. Normalized paths allow one to compare path subset performance against the full path set; the other path set sizes in Table I produce qualitatively similar results.
From these plots, it is clear that the Inner-Product path diversity algorithm consistently outperforms both the full set and the random subset (which closely tracks the former, as would be expected with a uniform sampling). While the Inner-Product algorithm delivered quite good results, the Inclusion-Exclusion algorithm consistently underperforms in these tests. This can be attributed to the fact that (6) – the basis of this algorithm – uses a two-term approximation of the inclusion-exclusion rule. This assumption would give the exact answer in a case where no three paths ever intersect at a single cell. However, in our large dataset, a signiﬁcant fraction of paths passed through a small number of cells, making (6) an inadequate approximation of Ppnb(P).

Normalized Surviving Paths

1

Full set

Inner-Product 1%

0.9

Inclusion-Exclusion 1%

Random 1%

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

2

4

6

8

10

12

14

Percent Obstacle Coverage

Fig. 3. Normalized survival rate of path sets produced by each algorithm at 1% of the original path set with varying obstacle density. The randomly-sampled subset closely tracks the performance of the full path set, while the Inner-Product algorithm output performs best.

VI. TRAJECTORY DIVERSITY
Formulas and approximation algorithms for trajectory (versus path) diversity directly follow as a corollary of our results in Sections II and IV, by considering the sequence (versus the set) of cells that are traversed. To be speciﬁc, the same formulas and algorithms as above may be applied to trajectories by merely expanding the conﬁguration space one dimension to include (discretized) time and then computing/approximating path diversity on the resulting paths in space-time.
The result would be formulas and approximation algorithms that maximize spatio-temporal path diversity, or brieﬂy trajectory diversity. These would favor pruning of overlapping trajectories and the resulting trajectory sets would be those that have the lowest probability of being blocked, averaged uniformly over all space-time obstacle environments.
The beneﬁt of computing/approximating tree prunings that maximize such spatio-temporal diversity would be lost unless one considers environments with dynamic obstacles. The reason is that, in the completely static case, the sum over all environments in (1) should not treat obstacles as arbitrary in both space and time. Instead, such obstacles would be “columns” in space time: they would have arbitrary bases in space, but extend across the complete time set.
It is future work to determine whether space and time should be have equal weighting when computing (1) or its approximations herein, even in the case of dynamic obstacles. Should different weightings be used for different bounded obstacle velocities?
Finally, it is interesting to note that even though paths may overlap greatly in space, they may have many fewer intersections as trajectories in space-time.

1363
Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

VII. SUMMARY AND DISCUSSION
The eventual goal of this work is to aid in the design of precomputed path sets. Through principled path selection, planning efﬁciency can be maximized and the probability of failure minimized. In the process of evaluating a path set against a collection of obstacles, the collision of one path provides information which can be used to inform future path selection. In an uninformed path set, computation will be, in essence, wasted by repeatedly colliding different paths with the same obstacles. A planner could use this information explicitly by generating a decision tree of paths, but a static path set may also elicit the desired behavior. Our algorithms decrease this wasted computation by selecting a path set that minimizes the amount of overlap between paths at all points in the world.
As we have shown, when planning with such paths, the survival rate is maximized, so fewer cycles are wasted on paths that collide. With more viable options produced per path evaluation, the likelihood of the goal being achieved is maximized. Due to extreme combinatorial complexity, it is impractical to compute the exact probability of collision of a particular path set. However, we have shown that approximate algorithms can be effectively employed to design a diverse path set that is expected to perform well during planning.
This work represents progress toward understanding how best to prune existing sets of paths or reachability sets as well as providing information to help make informed decisions about trajectory set design. The presented algorithms work with any path set, including those generated incrementally (say, by an RRT), or by a model that incorporates dynamic constraints. Because our methods work on resulting paths/trajectories, they are also agnostic with respect to whether the generated paths are parametrized or non-parametrized. In the former case, it may be possible to obtain diversity in speciﬁc cases. However, if the dynamics are non-trivial (non-linear, non-holonomic, etc.), it may be expensive or impossible to generate diverse paths through judicious parameter selection. Also in such general cases, RRTs produce non-separated—even overlapping—workspace paths. Algorithms like ours that work on resulting paths offer a general solution to the diversity problem.
We have explored discretized versions of the path diversity problem using numerical simulations. One avenue of future work would involve designing analytical metrics for path diversity along the lines of [14] to eliminate arbitrary discretizations from the analysis. Another direction for future work is to perform experiments on space-time trajectories with dynamic obstacles, for

which the Inclusion-Exclusion algorithm may be a better match. Finally, yet another direction is to experiment with non-uniform obstacle distributions and to extend the framework and algorithms for pruning to environments where one has only partial obstacle information (say, partial occupancy from LIDAR or vision sensing) but also has a statistical description of the environment in terms of a Markov random ﬁeld (MRF). Such MRF descriptions would have joint (versus independent) probabilities of obstacles occurring in a given cell, based on the presence of obstacles in its neighboring cells. We anticipate that such models would be especially useful in terms of path diversity and pruning for the types of natural environments mentioned in the Introduction and also in virtual natural environments where such ﬁelds are used to “texture,” say, forests or other terrain, planet surfaces, or even city environments. Similar arguments apply to dynamic, multi-agent environments where occupancy probabilities would come from trafﬁc models and/or Kalman ﬁlter biases arising from vehicle tracking.
Acknowledgments: This work was partially supported by NSF grants CCR-0208919 (Branicky) and EEC-0540865 (Kuffner) and DARPA (Knepper), The authors gratefully acknowledge Manfred Lau for making the large motion capture path set available.
REFERENCES
[1] E. Frazzoli, M. Dahleh, and E. Feron, “Real-time motion planning for agile autonomous vehicles,” AIAA Journal of Guidance, Control, and Dynamics, vol. 25, no. 1, pp. 116–129, 2002.
[2] P. Leven and S. Hutchinson, “A framework for real-time path planning in changing environments,” Intl. J. Robotics Research, vol. 21, no. 12, p. 999, 2002.
[3] J. Go, T. Vu, and J. Kuffner, “Autonomous behaviors for interactive vehicle animations,” Int. J. Graphical Models, 2005.
[4] M. Lau and J. Kuffner, “Precomputed search trees: Planning for interactive goal-driven animation,” in Proc. ACM SIGGRAPH / Eurographics Symposium on Computer Animation, 2006.
[5] S. Thrun et al., “Stanley: The robot that won the DARPA grand challenge,” J. Field Robotics, vol. 23, no. 9, pp. 661–692, 2006.
[6] L. Kavraki et al. “Probabilistic roadmaps for path planning in high-dimensional conﬁguration spaces,” IEEE Trans. Robotics and Automation, vol. 12, no. 4, pp. 566–580, 1996.
[7] S. LaValle and J. Kuffner, “Randomized Kinodynamic Planning,” The Intl. J. Robotics Research, vol. 20, no. 5, p. 378, 2001.
[8] R. Bohlin and L. Kavraki, “A lazy probabilistic roadmap planner for single query path planning,” Intl. J. Robotics Research, 2000.
[9] M. Branicky et al., “Quasi-randomized path planning,” Proc. IEEE Intl. Conf. Robotics and Automation, vol. 2, 2001.
[10] B. Burns and O. Brock, “Toward optimal conﬁguration space sampling,” Proc. Robotics: Science and Systems.
[11] S. Ramamoorthy et al., “Low-discrepancy curves and efﬁcient coverage of space,” Alg. Foundations of Robotics VII, 2006.
[12] A. Bicchi et al., “On the reachability of quantized control systems,” IEEE Trans. Automatic Control, 47(4):546–563, 2002.
[13] S. Goldberg, M. Maimone, and L. Matthies, “Stereo Vision and Rover Navigation Software for Planetary Exploration,” Proceedings of the 2002 IEEE Aerospace Conference, pp. 2025–36, 2002.
[14] C. Green and A. Kelly, “Toward optimal sampling in the space of paths,” in Proc. Intl. Symp. Robotic Research, Hiroshima, 2007.

1364
Authorized licensed use limited to: Technische Hochschule Ingolstadt. Downloaded on October 06,2022 at 06:58:06 UTC from IEEE Xplore. Restrictions apply.

