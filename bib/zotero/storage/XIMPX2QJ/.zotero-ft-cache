IEEE websites place cookies on your device to give you the best user experience. By using our websites, you agree to the placement of these cookies. To learn more, read our Privacy Policy.
Accept & Close
Loading [MathJax]/extensions/MathMenu.js

Skip to Main Content

    IEEE.org
    IEEE Xplore
    IEEE SA
    IEEE Spectrum
    More Sites 

    Cart 
    Create Account
    Personal Sign In

IEEE Xplore logo - Link to home

    Browse
    My Settings
    Help

Access provided by:
Technische Hochschule Ingolstadt
Sign Out
IEEE logo - Link to IEEE main site homepage
Access provided by:
Technische Hochschule Ingolstadt
Sign Out
ADVANCED SEARCH
Conferences > 2021 International Conference...
MK-RRT: Multi-Robot Kinodynamic RRT Trajectory Planning
Publisher: IEEE
Cite This
PDF
  << Results   
Brennan Cain ; Michail Kalaitzakis ; Nikolaos Vitzilaios
All Authors
View Document
137
Full
Text Views

    Alerts
    Alerts
    Manage Content Alerts
    Add to Citation Alerts

Abstract
Document Sections

    I.
    Introduction
    II.
    Problem Definitions
    III.
    MK-RRT*: Multi-Robot Kinodynamic RRT*
    IV.
    Experiments
    V.
    Results

Show Full Outline
Authors
Figures
References
Keywords
Metrics
More Like This

    Download PDF
    View References
    Request Permissions
    Save to
    Alerts 

Abstract: This paper introduces MK-RRT*: a Multi-robot Kinodynamic RRT*-based framework for trajectory planning of multiple dynamically-modeled robots. The framework includes both ... View more
Metadata
Abstract:
This paper introduces MK-RRT*: a Multi-robot Kinodynamic RRT*-based framework for trajectory planning of multiple dynamically-modeled robots. The framework includes both tightly-coupled and loosely-coupled methods for planning. The simultaneous, tightly-coupled, method provides an asymptotically optimal solution to the multi-robot trajectory planning problem. A sequential, loosely-coupled, method is also developed to compare costs of the generated trajectories and computational complexity of both methods. An application of this framework to multi-UAV trajectory planning is presented and experimentally evaluated using a team of Ryze Tello EDU UAVs.
Published in: 2021 International Conference on Unmanned Aircraft Systems (ICUAS)
Date of Conference: 15-18 June 2021
Date Added to IEEE Xplore : 19 July 2021
ISBN Information:
ISSN Information:
INSPEC Accession Number: 20902047
DOI: 10.1109/ICUAS51884.2021.9476688
Publisher: IEEE
Conference Location: Athens, Greece
Contents
SECTION I.
Introduction

Research on path planning, the problem of finding a path from a starting state to a final state, has seen much progress over the past decades. Rapidly-exploring Random Trees (RRTs) [1] and Probabilistic Roadmaps (PRMs) [2] provided early solutions to path planning problems in the high-dimensional space by using sampling to provide fast solutions to the PSPACE-hard problem [3] . These methods gave way to PRM* and RRT* [4] which provide asymptotic optimality guarantees, assuring that the probability of finding the optimal solution approaches 1 as the number of samples approach infinity. These methods, however, are limited to systems with limited dynamic constraints, as they assume that any two states can be connected using straight lines. The Kinodynamic RRT* algorithm (KRRT*) [5] was created to support systems with differential constraints by extending and rewiring the Tree nodes with optimal kinodynamic connections. Since the trajectories that KRRT* produces are time-dependent, they may be referred to as trajectories.

KRRT* is not alone among dynamically constrained RRT*s. Poli-RRT* [6] has been proposed as an extension of KRRT* to include differentially-flat robots with constrained dynamics. The main difference between these two methods is that Poli-RRT* is valid for any constrained, linearisable system. Poli-RRT* is evaluated through simulation of a unicycle with actuation constraints [6] .

Path planning grows more difficult with the introduction of additional robots. Graph based methods [7] have been introduced to solve this problem with exponential complexity and without kinematic constraints. A near-optimal approach for robots with kinematic constraints has also been proposed in [8] , although the solution remains PSPACE-hard.

Two general approaches to the problem of path planning with multiple robots have been proposed [9] . Centralized methods attempt to find a globally optimal solution by allowing for simultaneous planning in the workspace defined as the Cartesian product of the workspaces of the individual robots [10] . On the other hand, in distributed or decoupled approaches, each robot's path is initially independently calculated, and then the interactions between the robots are considered [11] , [12] .

Multi-agent RRT* [13] provided the earliest adaptation of RRT* to work with multiple agents, where paths for multiple autonomous aircraft, modeled on a four-connected graph, are generated. No dynamic constraints are given and all planning is constrained to a discrete grid. Moreover, [14] extended Poli-RRT* to enable kinodynamic motion planning with multiple agents. The proposed solution was to sequentially solve each robot's individual trajectory one at a time, while avoiding the previous robots' trajectories. Simulations with unicycle-like robots were used to validate the proposed solution.

In this work, we extend the Kinodynamic RRT* approach and introduce the Multi-robot Kinodynamic RRT* (MK-RRT*) trajectory planner for linearised robotic models, both tightly-coupled\\\\\\\\simultaneous and loosely-coupled\\\\\\\\sequcntial. Unlike previous works that have dealt with simultaneous path planning in graphs, this method couples the controllers and removes the need for additional operations to negotiate traffic while also considering the kinodynamic constraints of the robots.

Furthermore, we present an application of this methodology to the trajectory planning problem for multiple Unmanned Aerial Vehicles (UAVs). The developed planners are tested in real world experiments to demonstrate the validity of the generated trajectories and offer a comparison between the planned trajectory costs with the actual cost to follow these trajectories. Finally, we analyze the key differences between the generated trajectories and explain the advantages of each method. In summary, the main contributions of this paper are:

    a centralized, globally asymptotically optimal solution to the linear, dynamically-constrained multi-robot trajectory planning problem,

    a comparison of this simultaneous optimal method to a sequential, faster method for trajectory generation for small UAVs, and

    experimental results demonstrating the validity of the trajectories generated by these trajectory planners.

The rest of this paper is organized as follows: Section II defines the trajectory planning problem in the (a) single robot, (b) multi-robot sequential, and (c) multi-robot simultaneous cases. Section III discusses the original KRRT* algorithm and proposes extensions to allow for simultaneous and sequential solutions for multiple agents. Section IV defines our experimental setup and outlines the scenarios in which we test our trajectory planners. Section V provides experimental results and gives a brief discussion on the data collected during the trajectory generations and flights. Section VI discusses our results in detail and provides interesting insights into new problems which arise from our experiments on physical robots. Finally, Section VII concludes this work and discusses areas of interest which may be explored in the future.
SECTION II.
Problem Definitions

In this section, we define the trajectory generation problem for three separate cases: single robot, multi-robot sequential, and multi-robot simultaneous planning.
A. Single Robot

First, we define the problem in the case of a single robot. We assume that a robot can be represented as a linear, time-invariant system. The state and input spaces are defined as X = R n and U = R m . Therefore, the dynamics of the system are defined by:
x ˙ [ t ] = A x [ t ] + B u [ t ] (1)
View Source Right-click on figure for MathML and additional features. \begin{equation*} \dot{\mathbf{x}}[t]=A\mathbf{x}[t]+B\mathbf{u}[t] \tag{1} \end{equation*} where x [ t ] ∈ X is the state at time t ,   u [ t ] ∈ U is the input at time t ,   A ∈ R n × n the state matrix, and B ∈ R n × m the input matrix. The system is assumed to be both controllable and observable.

Let X f r e e ⊆ X define the free state space of the robot, X d y n [ t ] ⊆ X define the state space of the robot which is occupied by dynamic obstacles at time t , and U f r e e ⊆ U be the free input state of the robot. That is the sets of states and inputs which are collision free and possible to achieve.

We define trajectories as the ordered set π = ( x [ ] , u [ ] , τ ) , where x [ t ] ∈ { X f r e e ∩ X C d y n [ t ] } for t ∈ [ 0 , τ ] is the state along the trajectory, u [ t ] ∈ U f r e e for t ∈ [ 0 , τ ] is the input along the trajectory, and finally τ is the duration of the trajectory.

The optimal trajectory planning problem may now be defined: given a starting state x s t a r t and goal state x g o a l find the trajectory in the time-determined free space { X f r e e ∩ X C d y n [ t ] } with inputs in U f r e e which minimizes the cost function:
π ∗ f r e e = min π s . t . ∫ τ 0 ( α + u [ t ] T R u [ t ] ) d t x [ 0 ] = x s t a r t , x [ τ ] = x g o a l , x [ t ] ∈ { X f r e e ∩ X C d y n [ t ] } , ∀ t ∈ [ 0 , τ ] , u [ t ] ∈ U f r e e , ∀ t ∈ [ 0 , τ ] , x ˙ [ t ] = A x [ t ] + B u [ t ] . (2)
View Source Right-click on figure for MathML and additional features. \begin{align*} \pi_{free}^{\ast}= \min\limits_{\pi}\quad & \int\nolimits_{0}^{\tau}(\alpha+u[t]^{T}Ru[t])dt\\ \mathrm{s}.\mathrm{t}.\quad &\mathbf{x}[0]=\mathbf{x}_{start},\\ &\mathbf{x}[\tau]=\mathbf{x}_{goal},\tag{2}\\ &\mathbf{x}[t]\in\{\mathcal{X}_{free}\cap \mathcal{X}_{dyn}^{C}[t]\},\forall t\in[0,\tau],\\ &\mathbf{u}[t]\in \mathcal{U}_{free}, \forall t\in[0, \tau],\\ &\dot{\mathbf{x}}[t]=A\mathbf{x}[t]+B\mathbf{u}[t]. \end{align*} where α ∈ R + is a scalar to weigh the cost of the time of the trajectory, R ∈ R m × m is a positive-definite, constant matrix to weigh the input costs and x [ 0 ] is the initial state of the linear system.

The cost function in Eq. 2 obeys the optimal substructure property. An optimal trajectory from x s t a r t to x g o a l is a concatenation of successive optimal sub-trajectories.
B. Multi-Robot Loosely-Coupled, Sequential System

The sequential trajectory planning algorithm builds on the single robot problem and is defined as a hierarchical trajectory planning problem. First, a trajectory for the first robot in the queue is found subject to the cost minimization function in Eq. 2 . Next, the space of dynamic obstacles X d y n [ ] is updated using the generated robot's trajectory. By including each previous robot's trajectory in X d y n [ ] , the minimization function remains the same for each subsequent robot. Therefore, the problem is defined as follows: for each robot, minimize Eq. 2 , where X d y n [ ] includes the trajectories of all previous robots.
C. Multi-Robot Tightly-Coupled, Simultaneous System

Using the problem statement from section II-A , we may now specify a new problem statement for a multi-robot system. First, let the free state space be the Cartesian product of the individual workspaces. Next, we redefine the free input space of the multi-robot problem using the Cartesian product of the free input spaces of each robot. We define the state of the multi-robot system as the vertical concatenation of the states of the individual robots:
x [ t ] = [ x 1 [ t ] T x 2 [ t ] T … x N [ t ] T ] T (3)
View Source Right-click on figure for MathML and additional features. \begin{equation*} \mathbf{x}[t]=\left[\mathbf{x}_{1}[t]^{T}\quad \mathbf{x}_{2}[t]^{T}\quad \ldots\quad \mathbf{x}_{N}[t]^{T}\right]^{T} \tag{3} \end{equation*}

The inputs of the individual robots may be concatenated vertically as well:
u [ t ] = [ u 1 [ t ] T u 2 [ t ] T … u N [ t ] T ] T (4)
View Source Right-click on figure for MathML and additional features. \begin{equation*} \mathbf{u}[t]=\left[\mathbf{u}_{1}[t]^{T}\quad \mathbf{u}_{2}[t]^{T}\quad \ldots\quad \mathbf{u}_{N}[t]^{T}\right]^{T} \tag{4} \end{equation*}

The state transition matrix A can be defined as the block diagonal matrix of the individual robots' state transition matrices:
A = diag ( [ A 1 A 2 … A N ] ) (5)
View Source Right-click on figure for MathML and additional features. \begin{equation*} A= \text{diag} (\left[A_{1}\quad A_{2}\quad \ldots\quad A_{N}\right]) \tag{5} \end{equation*}

The input matrix may also be defined as the block diagonal matrix of the individual robot's input matrices:
B = diag ( [ B 1 B 2 … B N ] ) (6)
View Source Right-click on figure for MathML and additional features. \begin{equation*} B= \text{diag} (\left[B_{1}\quad B_{2}\quad \ldots\quad B_{N}\right]) \tag{6} \end{equation*}

Finally, the cost matrix R must also be defined as the block diagonal matrix of the individual robot's input cost matrices:
R = diag ( [ R 1 R 2 … R N ] ) (7)
View Source Right-click on figure for MathML and additional features. \begin{equation*} R= \text{diag} (\left[R_{1}\quad R_{2}\quad \ldots\quad R_{N}\right]) \tag{7} \end{equation*}

This combined model may now be used in place of the single robot model in the definition of the trajectory planning problem.
SECTION III.
MK-RRT*: Multi-Robot Kinodynamic RRT*

Kinodynamic RRT* was proposed to extend RRT* to systems which exhibit dynamic constraints, as shown in [5] . RRT* is unable to plan trajectories for kinodynamic systems which may not be able to be driven in a point-to-point fashion. The major innovation of Kinodynamic RRT* is the use of the weighted controllability Gramian for finding the optimal control and arrival time of each driving step.
A. Optimal Control

The derivation of an optimal control solution from an initial state to a final state is provided in [5] . First, a fixed final time is used to find an optimal solution to the fixed final state and final time problem. The weighted controllability Gramian is used to determine the inputs required to drive an initial state to a final state in fixed time using the general solution to the state-space differential equation with no inputs. Next, an optimal arrival time is found by minimizing the arrival time. Finally, a closed form solution is derived to find the optimal arrival time and inputs for a given start and end state.

This solution is unique if and only if the A matrix is nilpotent. In the original work, a constant bias vector was also included, however, our model identification did not show any bias. The bias may easily be included by solving the original differential equation including the bias vector, as shown in [5] .
B. Single Robot Algorithm

The single robot Algorithm 1 is the base of the multi-robot algorithms and closely follows that of the original paper. At the beginning of the algorithm, there is a check if the optimal connection from the initial to final state is collision free, and if so, immediately connects them and returns.

The CollisionFree method, shown in Algorithm 2 , checks the states in the path at regular intervals. At each step, the state is compared against given obstacles to determine whether the robot is intersecting the obstacle. Robots are modeled as spheres of radius r for collision checking.
C. Simultaneous MK-RRT* Algorithm

The multi-robot simultaneous variant of Kinodynamic RRT* is similar to the single robot variant, with the difference being that the controllers of the individual robots are coupled as shown in section II.B . This allows states to be sampled and controlled simultaneously.

The CollisionFree method is adapted to compare the state of robots both against obstacles, as well as against each others' states, as shown in Algorithm 3 . Because this algorithm matches the original RRT* algorithm, the computational complexity of the two methods are of the same order. As shown in [4] , this complexity was found to be O ( n l o g n ) .
D. Sequential MK-RRT* Algorithm

The multi-robot sequential variant of Kinodynamic RRT* finds the paths of each robot in a sequential fashion, as shown in Algorithm 4 . This leads to an inherent hierarchy, where the first robot has the highest priority and the ability to find a completely optimal path, given infinite iterations. Once the path of the first robot is found, the states are saved as a dynamic obstacle where time maps to the position of the obstacle.
Algorithm 1: Kinodynamic RRT* Algorithm

Algorithm
Algorithm 2: Single Robot CollisionFree

Algorithm

The CollisionFree function is modified to take these dynamic obstacles and, at each time step, find the position of all previous robots to check for collisions. In the case of dynamic obstacles, the safety margin is doubled to allow both robots adequate space, as each one needs one radius to move safely.
Fig. 1: - Scenarios used to demonstrate the Tello UAV path planning. For scenarios a, b, and d, the start position for Tello 1 is shown as blue sphere, while the start position for Tello 2 is shown as green sphere. For scenario c, the tellos begin on the top-left side of the wall (Tello 1-blue, Tello 2-green, Tello 3-cyan) and must move to the same colors on the bottom right side.
Fig. 1:

Scenarios used to demonstrate the Tello UAV path planning. For scenarios a, b, and d, the start position for Tello 1 is shown as blue sphere, while the start position for Tello 2 is shown as green sphere. For scenario c, the tellos begin on the top-left side of the wall (Tello 1-blue, Tello 2-green, Tello 3-cyan) and must move to the same colors on the bottom right side.

Show All

Algorithm 3: Simultaneous CollisionFree

Algorithm
Algorithm 4: Sequential MK-RRT* Algorithm

Algorithm
SECTION IV.
Experiments

MK-RRT* is a solution to the problem of dynamic trajectory planning in higher dimensions. To demonstrate an application of our solution to this problem, we perform a variety of experiments with multiple UAVs. Figure 1 shows the four application scenarios of increasing difficulty that are considered in the testing of the proposed framework:

    Obstacle-Free Swap . In this scenario, two UAVs start at an altitude of 1.5 m and at a distance of 1.5 m in an obstacle-free environment, as shown in Figure 1a . The target point for each UAV is the start point of the other. The workspace is 3 m × 5 m × 3 m . This scenario supplies a baseline in an obstacle free state space.

    Through Window Swap . In this scenario, two UAVs are placed 1.5 m apart on either side of a wall, with a single, 0.5 m × 0.5 m window. The workspace is 3 m × 5 m × 3 m , shown in Figure 1b . This scenario increases the difficulty of trajectory planning by forcing the UAVs to pass through a small opening.

    Three UAVs through Window . Three UAVs are placed side-by-side on the same side of the same wall described above, with their goal points on the opposite side of the wall in the same configuration. The workspace is 2.5 m × 2.5 m × 3 m , shown in Figure 1c . This scenario increases the number of UAVs to show a typical bottleneck for multiple UAVs.

    Obstacle Course Swap . In this scenario, an obstacle course is constructed to force the MK-RRT* to path plan through a vertical window, a horizontal window, and another vertical window, perpendicular to the first. A UAV is placed at each end of the obstacle course and their goal is to swap positions. The workspace is 2 m × 2 m × 2 m , shown in Figure 1d . This scenario forces the UAVs to pass through successive narrow openings, a task which indoor UAVs may be subject to.

Generally, both planners are limited to a maximum of 10000 iterations to produce a valid trajectory. However, in the case of the Obstacle-Free Swap this limit is 5000 iterations. These iteration numbers are sufficient to find solutions, and in most cases, find several increasingly good solutions. Note that the number of iterations is the number of nodes in each tree. For the simultaneous method, the Tree will consist of 10000 nodes. For the sequential case, each independent Tree is allowed 10000 nodes. These numbers of nodes are chosen to allow each algorithm to have the same number of states embedded in their nodes. A node for the simultaneous method contains a state for all of the robots. Each node in the sequential method only contains the state of a single robot.
Fig. 2: - Ryze Tello EDU UAV with OptiTrack markers connected to provide localization.
Fig. 2:

Ryze Tello EDU UAV with OptiTrack markers connected to provide localization.

Show All
Table I: Tello model parameters
Table I:- Tello model parameters

For the experimental validation of both MK-RRT* variants, the palm-sized Ryze Tello EDU UAV, shown in Figure 2 , was used. For the planners, the Tellos are approximated as spheres with a radius of 15cm, allowing for a small safety region around each platform. An OptiTrack Motion Capture (MoCap) system was used to provide real-time, high-precision localization, while a Kalman filter was used as a full state observer. Finally, a Model Predictive Controller (MPC) was used to drive the Tellos to the generated trajectories.

The Tello allows reference velocity inputs on all three axes for its control. A linear model that describes the internal system dynamics of the Tello must be derived, since it is needed for both the planners and the controller. To derive such a model, flight data were captured using the MoCap system and used in a least-squares based model identification algorithm. The state-space model for a single Tello is:
[ p ˙ p ¨ ] = [ 0 0 1 a p ˙ , p ˙ ] [ p p ˙ ] + [ 0 b p ˙ , p ˙ r ] u (8)
View Source Right-click on figure for MathML and additional features. \begin{equation*} \begin{bmatrix}\dot{p}\\ \ddot{p}\end{bmatrix}= \begin{bmatrix}0 & 1\\ 0 & a_{\dot{p},\dot{p}}\end{bmatrix} \begin{bmatrix}p\\ \dot{p}\end{bmatrix}+ \begin{bmatrix}0\\ b_{\dot{p},\dot{p}_{r}}\end{bmatrix} u \tag{8} \end{equation*} where p is the position and the input u is the reference velocity on each of the x , y , z axes. The parameters for the three axes are presented in Table I . To satisfy the KRRT* requirement that the state matrix needs to be nilpotent, the parameter α z ˙ , z ˙ was changed to −1 for the planning part and the z velocity range was limited to ensure a feasible trajectory.

Table II: Duration of planned trajectories in each scenario
Table II:- Duration of planned trajectories in each scenario
Fig. 3: - Planned trajectories of the sequential and simultaneous planners in the three UAVs through window scenario. Dark blue represents Tello 1, green represents Tello 2, cyan represents Tello 3. Note that Tellos fly from the left side to the right.
Fig. 3:

Planned trajectories of the sequential and simultaneous planners in the three UAVs through window scenario. Dark blue represents Tello 1, green represents Tello 2, cyan represents Tello 3. Note that Tellos fly from the left side to the right.

Show All

SECTION V.
Results
A. Planner Comparison
1) Generated Trajectories

The trajectories generated by the two methods differ in several regards, as shown in Figure 3 . The most striking upon visual inspection is that the sequentially generated trajectories are much simpler and direct. The simultaneously generated trajectories on the contrary are convoluted.

Figure 3a shows the sequentially generated trajectory for the Three UAVs through Window scenario. The trajectory of Tello 2 is very direct connecting the start state to the end state. Tello 3 has a more complex route so that it can avoid the paths of Tello 1 and 2. Figure 3b shows the simultaneously planned variant of the same scenario. All Tellos follow complex trajectories. Since the simultaneous case plans in a state space that is a composite of all the individual Tellos' state spaces, the convergence to an optimal solution is much slower. The sequential method is able to benefit from running the KRRT* algorithm twice in a state space with half the dimensions. These facts correlate to the wider trajectories of the simultaneous case due to the much larger state space. Table II shows the durations of the various trajectories. The sequential trajectories are faster in all scenarios.
2) Trajectory Cost vs Iteration

Figure 4 shows the costs for each planner at 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, and 10000 iterations of the MK-RRT*. These values were found by averaging the costs of 10 runs up to that many iterations. For the iteration counts where there is no data, the run was unable to find a trajectory.

The cost of the best path was recorded at each iteration. For the simultaneous case, this cost is very easy to compare, as each iteration has only a single Tree . To yield the same cost function for the sequential case, as there are multiple trees, the total cost at the n th iteration is calculated as:
J = ∑ i = 1 N ( ∫ τ i 0 ( u i [ t ] T R u i [ t ] ) d t ) + max ( ∫ τ i 0 α d t )
View Source Right-click on figure for MathML and additional features. \begin{equation*} J= \sum\limits_{i=1}^{N} \left(\int\nolimits_{0}^{\tau_{i}}(u_{i}[t]^{T}Ru_{i}[t])dt\right)+ \max\left(\int\nolimits_{0}^{\tau_{i}}\alpha dt\right) \end{equation*}

Fig. 4: - Plots of the trajectory cost of each MK-RRT* method at each iteration. The plot begins at the first iteration in which a valid trajectory was found.
Fig. 4:

Plots of the trajectory cost of each MK-RRT* method at each iteration. The plot begins at the first iteration in which a valid trajectory was found.

Show All
Fig. 5: - Plots of the cumulative run-time of each method at each iteration.
Fig. 5:

Plots of the cumulative run-time of each method at each iteration.

Show All

The KRRT* problem is run sequentially for all robots up to the predefined number of nodes. The total cost at the nth iteration is the control cost for each drone plus the maximum trajectory time.
3) Computation Time vs Iteration

The computation time of each iteration was recorded to show the relative speeds of the iterations for each method. Figure 5 shows the cumulative time at each iteration. For the sequential timings, the timing at each individual's nth iteration were summed to find the total at that iteration. In the environments with obstacles, the simultaneous MK-RRT* was slower, especially in the case of three Tellos. In the Obstacle-Free Swap scenario, the simultaneous method was faster than the sequential method.
B. Experimental Results

For all four scenarios considered, three runs were performed using the Tello UAVs. The main motivation for the experimental testing is to validate that the generated trajectories can be effectively tracked by a controller on a real platform without having to deviate much from the planned control effort. Finally, experimental testing helps identify issues that might not arise in simulations.

Figures 6 and 7 show the planned and actual trajectories for a test run on the Through Window Swap and Obstacle Course Swap scenarios respectively. To make the trajectories more visible, the obstacles have been removed and only the openings are shown. The increased complexity of the simultaneous planner trajectories is visible in both cases.

A linear MPC is used to track the planned trajectories generated by the proposed frameworks. The MPC has a horizon of 1 sec and generates controls at a rate of 20 Hz . The cost function of the controller uses the same penalty on the control inputs as the planners. To force the controller to track the planned trajectory as faithfully as possible, the penalty on the state error was much higher than the penalty on the control input.

Three test runs were performed for each scenario. Table III shows the Root Mean Square Error for the different scenarios. From the results, it is evident that the MPC was able to track the planned trajectory. Moreover, Figure 8 shows a comparison between the planned and actual costs for each trajectory. Again, small discrepancies are observed between the planned and actual costs.
Table III: RMSE for each trajectory
Table III:- RMSE for each trajectory

SECTION VI.
Discussion
A. Trajectory Cost and Computation Time

It is evident that the sequential method is generally faster than the simultaneous method, though there is an exception in the Obstacle-Free Swap scenario. It is also evident that the sequential method generally results in a lower cost than the simultaneous method. This is expected as distributed methods were originally proposed in [10] to provide a faster solution to multi-robot path planning problems. Since sampling in lower dimensions converges more quickly to an optimal solution in each robots problem description, each planner often finds significantly more direct routes.
Fig. 6: - Through window swap experiment results. The two Tello UAVs need to swap positions going through a window. The start point of the first Tello is point A and its goal point is B and vice versa for the second tello. The blue curve is the planned trajectory for the first Tello with the red being the actual trajectory as it was captured by the MoCap system. For the second tello, the planned trajectory is in green with the actual one in magenta.
Fig. 6:

Through window swap experiment results. The two Tello UAVs need to swap positions going through a window. The start point of the first Tello is point A and its goal point is B and vice versa for the second tello. The blue curve is the planned trajectory for the first Tello with the red being the actual trajectory as it was captured by the MoCap system. For the second tello, the planned trajectory is in green with the actual one in magenta.

Show All
Fig. 7: - Obstacle course swap experiment results. The two Tello UAVs need to swap positions going through an obstacle course. The start point of the first Tello is point A and its goal point is B and vice versa for the second tello. The blue curve is the planned trajectory for the first Tello with the red being the actual trajectory as it was captured by the MoCap system. For the second Tello, the planned trajectory is in green with the actual one in magenta.
Fig. 7:

Obstacle course swap experiment results. The two Tello UAVs need to swap positions going through an obstacle course. The start point of the first Tello is point A and its goal point is B and vice versa for the second tello. The blue curve is the planned trajectory for the first Tello with the red being the actual trajectory as it was captured by the MoCap system. For the second Tello, the planned trajectory is in green with the actual one in magenta.

Show All

B. Asymptotic Optimality

Authors in [5] determined that Kinodynamic RRT* is asymptotically optimal and the probability of finding the optimal trajectory approaches 1 as the iterations approach infinity. The tightly-coupled approach shares this quality, as no change was made to the core algorithm, the only changes made were to the CollisionFree method and the plant. The loosely-coupled variant however does not share this quality. Figure 9b shows the cost of swapping two Tellos locked to a specific height. The Tellos begin at [0.25, 0.5] m and [0.75, 0.5] m and are restricted to a 1 × 1 square, as shown in figure 9a . The original model is used, with the vertical controller removed. Initially, the sequential case is able to find the faster solution by optimally connecting Tello 1's trajectory and planning Tello 2's trajectory with respect to it. However, given sufficient time, the simultaneous method finds better routes than the sequential method. This is an example of a problem in which the sequential case will not converge to the optimal solution, but the simultaneous planner will. Although, for more complex problems such as the ones used in the experiments presented here, the additional time that the simultaneous planner needs to find a better solution is too high, making it an infeasible solution. For example, for the Obstacle Course Swap experiment, using the data shown in Figure 4 , we extrapolated that the cost of the simultaneous method would become equal or lower than the sequential method around the one millionth iteration. This extrapolation is probabilistic and is not guaranteed to be lower at this point.
Fig. 8: - Predicted and experimental costs of trajectories for each scenario.
Fig. 8:

Predicted and experimental costs of trajectories for each scenario.

Show All

Additionally, there are potential deadlock conditions in the sequential case. The possibility of deadlocks alone can remove the optimality guarantee, since the problem has a solution, but the sequential method may never be able to find such a solution given infinite iterations. Deadlocks may occur when the trajectory of higher priority robot blocks the trajectory of lower priority robot at some critical time until and including the final point in the trajectory.

Figure 10a shows one such scenario where a deadlock may occur. If the states of the team were planned simultaneously, Tello 1 would have the chance to move down, allowing Tello 2 past. Using sequential planning however, a deadlock will occur. Figure 10b shows the sequential planner in the deadlock described above. Tello 1 starting at [0.6, 0.8] m is able to find a valid trajectory to [-0.8, 0.8] m (shown as a green line). Tello 2 starting at [-0.6, 0.8] m and ending at [0.8, 0.8] m is able to trajectory plan in the region that Tello 1 has not yet arrived. The farthest that Tello 2 is able to travel is the approximate middle of Tello 1's trajectory, as they will both arrive around the same time. Figure 10c shows the simultaneous solver with a solution to this deadlock situation. If there is a valid solution, the simultaneous solver will find it, given sufficient iterations.
SECTION VII.
Conclusion and Future Work

In this paper, we introduced the Multi-robot Kinodynamic RRT* (MK-RRT*) algorithm for trajectory planning and demonstrated a comparison between a tightly- and loosely-coupled MK-RRT*. The trajectories generated through these methods were verified in real flights using multiple Ryze Tello EDU UAVs. Each trajectory was shown to plan valid trajectories for the linear, time-invariant models. The loosely-coupled, sequential approach generally produced faster results with lower costs, but are subject to possible deadlocks. The tightly-coupled, simultaneous approach generally gave slower results with higher costs, but without the potential deadlocks of the sequential method. Furthermore, the sequential method is not asymptotically optimal, as only the first trajectory planned is guaranteed to have this quality. The simultaneous method, however, is asymptotically optimal, as it is a redefinition of the original problem, where the major change is the coupling of the controllers.
Fig. 9: - Convergence of simultaneous method toward optimal solution.
Fig. 9:

Convergence of simultaneous method toward optimal solution.

Show All

For the purposes of this work, the proposed algorithms were implemented in Matlab to allow for quick prototyping and testing. Consequently, the current implementation is sub-optimal and unable to run in real-time. As we aim to run the proposed frameworks in real-time to allow for online replanning, the algorithms will be reimplemented and optimized in a language such as C++.

In the current implementation, the Tello UAVs are modeled as spheres to allow adequate space around them. From our experimental testing, we noticed that when the generated trajectories placed UAVs above one another, the downwash of the top UAV would affect the flight of the UAV bellow as shown in Figure 11 . This could be avoided either by modeling the UAVs as tall cylinders when checking for UAV to UAV collisions or by adding a cost to the vertical distance between UAVs.
Fig. 10: - (a) A potential deadlock condition in sequential planning; circles represent goals and squares represent initial positions, (b) The solution for Tello 1 in green and the tree for Tello 2, (c) The simultaneous solver was able to find a solution.
Fig. 10:

(a) A potential deadlock condition in sequential planning; circles represent goals and squares represent initial positions, (b) The solution for Tello 1 in green and the tree for Tello 2, (c) The simultaneous solver was able to find a solution.

Show All
Fig. 11: - Disturbance due to downwash.
Fig. 11:

Disturbance due to downwash.

Show All

In addition, our cost function did not take the distance between robots into account. To create safer paths, the distance between robots and obstacles at each instant could be used in the calculation of the cost to generate safer trajectories.

As with RRT*, this method may be slow to initially find a solution and converge in challenging environments such as through narrow openings. Variants of RRT* such as [15] and [16] provide smarter methods for sampling and connections to improve convergence rates. These informed methods may improve the performance of MK-RRT*.

Authors
Figures
References
Keywords
Metrics
   Back to Results   
More Like This
Real time replanning based on A* for collision avoidance in multi-robot systems

2011 8th International Conference on Ubiquitous Robots and Ambient Intelligence (URAI)

Published: 2011
Cooperative Event Triggered Control for Multi-Robot Systems with Collision Avoidance

2021 40th Chinese Control Conference (CCC)

Published: 2021
Show More
References
1. S. M. Lavalle, Rapidly-exploring random trees: A new tool for path planning , 1998.
Show in Context Google Scholar
2. L. Kavraki, P. Svestka, J.-C. Latombe and M. Overmars, "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", IEEE Transactions on Robotics and Automation , vol. 12, no. 4, pp. 566-580, 1996.
Show in Context View Article Full Text: PDF (1960) Google Scholar
3. J. H. Reif, "Complexity of the mover's problem and generalizations", 20th Annual Symposium on Foundations of Computer Science (sfcs 1979) , Oct. 1979, [online] Available: https://doi.org/10.1109/sfcs.1979.10.
Show in Context View Article Full Text: PDF (609) Google Scholar
4. S. Karaman and E. Frazzoli, "Sampling-based algorithms for optimal motion planning", The International Journal of Robotics Research , vol. 30, no. 7, pp. 846-894, June 2011.
Show in Context CrossRef Google Scholar
5. D. J. Webb and J. van den Berg, "Kinodynamic RRT*: Asymptotically optimal motion planning for robots with linear dynamics", 2013 IEEE International Conference on Robotics and Automation , May 2013, [online] Available: https://doi.org/10.1109/icra.2013.6631299.
Show in Context View Article Full Text: PDF (479) Google Scholar
6. M. Ragaglia, M. Prandini and L. Bascetta, "Poli-RRT*: Optimal RRT-based planning for constrained and feedback linearisable vehicle dynamics", 2015 European Control Conference (ECC) , July 2015, [online] Available: https://doi.org/10.1109/ecc.2015.7330917.
Show in Context View Article Full Text: PDF (1529) Google Scholar
7. R. Luna and K. E. Bekris, "Efficient and complete centralized multi-robot path planning", 2011 IEEE/RSJ International Conference on Intelligent Robots and Systems , Sept. 2011, [online] Available: https://doi.org/10.1109/iros.2011.6095085.
Show in Context View Article Full Text: PDF (271) Google Scholar
8. J. Peng and S. Akella, "Coordinating multiple robots with kinodynamic constraints along specified paths", The International Journal of Robotics Research , vol. 24, no. 4, pp. 295-310, Apr. 2005.
Show in Context CrossRef Google Scholar
9. S. LaValle and S. Hutchinson, "Optimal motion planning for multiple robots having independent goals", IEEE Transactions on Robotics and Automation , vol. 14, no. 6, pp. 912-925, 1998.
Show in Context View Article Full Text: PDF (756) Google Scholar
10. J. Barraquand and J.-C. Latombe, "Robot motion planning: A distributed representation approach", The International Journal of Robotics Research , vol. 10, no. 6, pp. 628-649, Dec. 1991.
Show in Context CrossRef Google Scholar
11. S. Buckley, "Fast motion planning for multiple moving robots", Proceedings 1989 International Conference on Robotics and Automation , 1989, [online] Available: https://doi.org/10.1109/robot.1989.100008.
Show in Context View Article Full Text: PDF (279) Google Scholar
12. M. Erdmann and T. Lozano-Perez, "On multiple moving objects", Proceedings. 1986 IEEE International Conference on Robotics and Automation. Institute of Electrical and Electronics Engineers , 1986, [online] Available: https://doi.org/10.1109/robot.1986.1087401.
Show in Context CrossRef Google Scholar
13. M. Čáp, P. Novák, J. Vokifnek and M. Pechoucek, Multi-agent rrt*: Sampling-based cooperative pathfinding (extended abstract), 2013.
Show in Context Google Scholar
14. M. Ragaglia, M. Prandini and L. Bascetta, Multi-agent poli-rrt* optimal constrained rrt-based planning for multiple vehicles with feedback linearisable dynamics (workshop version) , 2016.
Show in Context Google Scholar
15. J. D. Gammell, S. S. Srinivasa and T. D. Barfoot, "Informed RRT*: Optimal sampling-based path planning focused via direct sampling of an admissible ellipsoidal heuristic", 2014 IEEE/RSJ International Conference on Intelligent Robots and Systems , Sept. 2014, [online] Available: https://doi.org/10.1109/iros.2014.6942976.
Show in Context View Article Full Text: PDF (2004) Google Scholar
16. A. H. Qureshi and Y. Ayaz, "Intelligent bidirectional rapidly-exploring random trees for optimal motion planning in complex cluttered environments", Robotics and Autonomous Systems , vol. 68, pp. 1-11, June 2015.
Show in Context CrossRef Google Scholar
IEEE Personal Account

    Change username/password 

Purchase Details

    Payment Options
    View Purchased Documents 

Profile Information

    Communications Preferences
    Profession and Education
    Technical interests 

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support 

Follow

About IEEE Xplore | Contact Us | Help | Accessibility | Terms of Use | Nondiscrimination Policy | IEEE Ethics Reporting | Sitemap | Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.

© Copyright 2022 IEEE - All rights reserved.
IEEE Account

    Change Username/Password
    Update Address

Purchase Details

    Payment Options
    Order History
    View Purchased Documents

Profile Information

    Communications Preferences
    Profession and Education
    Technical Interests

Need Help?

    US & Canada: +1 800 678 4333
    Worldwide: +1 732 981 0060
    Contact & Support

    About IEEE Xplore
    Contact Us
    Help
    Accessibility
    Terms of Use
    Nondiscrimination Policy
    Sitemap
    Privacy & Opting Out of Cookies

A not-for-profit organization, IEEE is the world's largest technical professional organization dedicated to advancing technology for the benefit of humanity.
© Copyright 2022 IEEE - All rights reserved. Use of this web site signifies your agreement to the terms and conditions.
